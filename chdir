CHDIR(3P)                                                                                POSIX Programmer's Manual                                                                               CHDIR(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       chdir — change working directory

SYNOPSIS
       #include <unistd.h>

       int chdir(const char *path);

DESCRIPTION
       The chdir() function shall cause the directory named by the pathname pointed to by the path argument to become the current working directory; that is, the starting point  for  path  searches  for
       pathnames not beginning with '/'.

RETURN VALUE
       Upon successful completion, 0 shall be returned. Otherwise, -1 shall be returned, the current working directory shall remain unchanged, and errno shall be set to indicate the error.

ERRORS
       The chdir() function shall fail if:

       EACCES Search permission is denied for any component of the pathname.

       ELOOP  A loop exists in symbolic links encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of a component of a pathname is longer than {NAME_MAX}.

       ENOENT A component of path does not name an existing directory or path is an empty string.

       ENOTDIR
              A component of the pathname names an existing file that is neither a directory nor a symbolic link to a directory.

       The chdir() function may fail if:

       ELOOP  More than {SYMLOOP_MAX} symbolic links were encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of a pathname exceeds {PATH_MAX}, or pathname resolution of a symbolic link produced an intermediate result with a length that exceeds {PATH_MAX}.

       The following sections are informative.

EXAMPLES
   Changing the Current Working Directory
       The following example makes the value pointed to by directory, /tmp, the current working directory.

           #include <unistd.h>
           ...
           char *directory = "/tmp";
           int ret;

           ret = chdir (directory);

APPLICATION USAGE
       None.

RATIONALE
       The chdir() function only affects the working directory of the current process.

FUTURE DIRECTIONS
       None.

SEE ALSO
       getcwd()

       The Base Definitions volume of POSIX.1‐2017, <unistd.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          CHDIR(3P)
chdir(2)                                                                                    System Calls Manual                                                                                   chdir(2)

NAME
       chdir, fchdir - change working directory

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       int chdir(const char *path);
       int fchdir(int fd);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       fchdir():
           _XOPEN_SOURCE >= 500
               || /* Since glibc 2.12: */ _POSIX_C_SOURCE >= 200809L
               || /* glibc up to and including 2.19: */ _BSD_SOURCE

DESCRIPTION
       chdir() changes the current working directory of the calling process to the directory specified in path.

       fchdir() is identical to chdir(); the only difference is that the directory is given as an open file descriptor.

RETURN VALUE
       On success, zero is returned.  On error, -1 is returned, and errno is set to indicate the error.

ERRORS
       Depending on the filesystem, other errors can be returned.  The more general errors for chdir() are listed below:

       EACCES Search permission is denied for one of the components of path.  (See also path_resolution(7).)

       EFAULT path points outside your accessible address space.

       EIO    An I/O error occurred.

       ELOOP  Too many symbolic links were encountered in resolving path.

       ENAMETOOLONG
              path is too long.

       ENOENT The directory specified in path does not exist.

       ENOMEM Insufficient kernel memory was available.

       ENOTDIR
              A component of path is not a directory.

       The general errors for fchdir() are listed below:

       EACCES Search permission was denied on the directory open on fd.

       EBADF  fd is not a valid file descriptor.

       ENOTDIR
              fd does not refer to a directory.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, SVr4, 4.4BSD.

NOTES
       The current working directory is the starting point for interpreting relative pathnames (those not starting with '/').

       A child process created via fork(2) inherits its parent's current working directory.  The current working directory is left unchanged by execve(2).

SEE ALSO
       chroot(2), getcwd(3), path_resolution(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        chdir(2)
