SLEEP(1)                         User Commands                        SLEEP(1)

NAME
       sleep - delay for a specified amount of time

SYNOPSIS
       sleep NUMBER[SUFFIX]...
       sleep OPTION

DESCRIPTION
       Pause for NUMBER seconds.  SUFFIX may be 's' for seconds (the default),
       'm' for minutes, 'h' for hours or 'd' for days.  NUMBER need not be  an
       integer.   Given  two  or  more arguments, pause for the amount of time
       specified by the sum of their values.

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Jim Meyering and Paul Eggert.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2023 Free Software Foundation, Inc.   License  GPLv3+:  GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you  are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       sleep(3)

       Full documentation <https://www.gnu.org/software/coreutils/sleep>
       or available locally via: info '(coreutils) sleep invocation'

GNU coreutils 9.2                 April 2023                          SLEEP(1)
SLEEP(1P)                  POSIX Programmer's Manual                 SLEEP(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       sleep — suspend execution for an interval

SYNOPSIS
       sleep time

DESCRIPTION
       The sleep utility shall suspend execution for  at  least  the  integral
       number of seconds specified by the time operand.

OPTIONS
       None.

OPERANDS
       The following operand shall be supported:

       time      A  non-negative decimal integer specifying the number of sec‐
                 onds for which to suspend execution.

STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       The following environment  variables  shall  affect  the  execution  of
       sleep:

       LANG      Provide  a  default  value for the internationalization vari‐
                 ables that are unset or null. (See the Base Definitions  vol‐
                 ume  of POSIX.1‐2017, Section 8.2, Internationalization Vari‐
                 ables for the precedence  of  internationalization  variables
                 used to determine the values of locale categories.)

       LC_ALL    If  set  to  a non-empty string value, override the values of
                 all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of  sequences  of
                 bytes of text data as characters (for example, single-byte as
                 opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format
                 and  contents  of diagnostic messages written to standard er‐
                 ror.

       NLSPATH   Determine the location of message catalogs for the processing
                 of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       If  the  sleep  utility receives a SIGALRM signal, one of the following
       actions shall be taken:

        1. Terminate normally with a zero exit status.

        2. Effectively ignore the signal.

        3. Provide the default behavior for signals described in the ASYNCHRO‐
           NOUS  EVENTS  section of Section 1.4, Utility Description Defaults.
           This could include terminating with a non-zero exit status.

       The sleep utility shall take the standard action for all other signals.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

        0    The execution was successfully suspended for at least  time  sec‐
             onds,  or  a  SIGALRM  signal  was received. See the ASYNCHRONOUS
             EVENTS section.

       >0    An error occurred.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       The sleep utility can be used to execute  a  command  after  a  certain
       amount of time, as in:

           (sleep 105; command) &

       or to execute a command every so often, as in:

           while true
           do
               command
               sleep 37
           done

RATIONALE
       The  exit status is allowed to be zero when sleep is interrupted by the
       SIGALRM signal because most implementations of this utility rely on the
       arrival of that signal to notify them that the requested finishing time
       has been successfully attained. Such implementations thus do  not  dis‐
       tinguish  this situation from the successful completion case. Other im‐
       plementations are allowed to catch the signal and go back to sleep  un‐
       til the requested time expires or to provide the normal signal termina‐
       tion procedures.

       As with all other utilities that take  integral  operands  and  do  not
       specify  subranges  of allowed values, sleep is required by this volume
       of POSIX.1‐2017 to deal with time requests of up to 2147483647 seconds.
       This  may mean that some implementations have to make multiple calls to
       the delay mechanism of the underlying operating system if its  argument
       range is less than this.

FUTURE DIRECTIONS
       None.

SEE ALSO
       wait

       The  Base  Definitions  volume  of POSIX.1‐2017, Chapter 8, Environment
       Variables

       The System Interfaces volume of POSIX.1‐2017, alarm(), sleep()

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                            SLEEP(1P)
sleep(3)                   Library Functions Manual                   sleep(3)

NAME
       sleep - sleep for a specified number of seconds

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       unsigned int sleep(unsigned int seconds);

DESCRIPTION
       sleep()  causes  the calling thread to sleep either until the number of
       real-time seconds specified in seconds have elapsed or until  a  signal
       arrives which is not ignored.

RETURN VALUE
       Zero  if  the requested time has elapsed, or the number of seconds left
       to sleep, if the call was interrupted by a signal handler.

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌────────────────────────┬───────────────┬─────────────────────────────┐
       │Interface               │ Attribute     │ Value                       │
       ├────────────────────────┼───────────────┼─────────────────────────────┤
       │sleep()                 │ Thread safety │ MT-Unsafe sig:SIGCHLD/linux │
       └────────────────────────┴───────────────┴─────────────────────────────┘

VERSIONS
       On   Linux,   sleep()   is   implemented  via  nanosleep(2).   See  the
       nanosleep(2) man page for a discussion of the clock used.

       On some systems, sleep() may be implemented using alarm(2) and  SIGALRM
       (POSIX.1  permits  this); mixing calls to alarm(2) and sleep() is a bad
       idea.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

CAVEATS
       Using longjmp(3) from a signal handler or  modifying  the  handling  of
       SIGALRM while sleeping will cause undefined results.

SEE ALSO
       sleep(1), alarm(2), nanosleep(2), signal(2), signal(7)

Linux man-pages 6.04              2023-03-30                          sleep(3)
SLEEP(3P)                  POSIX Programmer's Manual                 SLEEP(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       sleep — suspend execution for an interval of time

SYNOPSIS
       #include <unistd.h>

       unsigned sleep(unsigned seconds);

DESCRIPTION
       The sleep() function shall cause the calling  thread  to  be  suspended
       from execution until either the number of realtime seconds specified by
       the argument seconds has elapsed or a signal is delivered to the  call‐
       ing thread and its action is to invoke a signal-catching function or to
       terminate the process. The suspension time may be longer than requested
       due to the scheduling of other activity by the system.

       In single-threaded programs, sleep() may make use of SIGALRM. In multi-
       threaded programs, sleep() shall not make use of SIGALRM  and  the  re‐
       mainder of this DESCRIPTION does not apply.

       If  a SIGALRM signal is generated for the calling process during execu‐
       tion of sleep() and if the SIGALRM signal is being ignored  or  blocked
       from  delivery,  it  is  unspecified  whether  sleep() returns when the
       SIGALRM signal is scheduled. If the signal is being blocked, it is also
       unspecified  whether  it remains pending after sleep() returns or it is
       discarded.

       If a SIGALRM signal is generated for the calling process during  execu‐
       tion  of sleep(), except as a result of a prior call to alarm(), and if
       the SIGALRM signal is not being ignored or blocked from delivery, it is
       unspecified  whether  that  signal  has  any  effect other than causing
       sleep() to return.

       If a  signal-catching  function  interrupts  sleep()  and  examines  or
       changes either the time a SIGALRM is scheduled to be generated, the ac‐
       tion associated with the SIGALRM signal, or whether the SIGALRM  signal
       is blocked from delivery, the results are unspecified.

       If a signal-catching function interrupts sleep() and calls siglongjmp()
       or longjmp() to restore an environment saved prior to the sleep() call,
       the  action  associated with the SIGALRM signal and the time at which a
       SIGALRM signal is scheduled to be generated  are  unspecified.   It  is
       also unspecified whether the SIGALRM signal is blocked, unless the sig‐
       nal mask of the process is restored as part of the environment.

       Interactions between sleep() and setitimer() are unspecified.

RETURN VALUE
       If sleep() returns because the requested time has  elapsed,  the  value
       returned  shall  be  0. If sleep() returns due to delivery of a signal,
       the return value shall be the ``unslept'' amount  (the  requested  time
       minus the time actually slept) in seconds.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       There  are  two general approaches to the implementation of the sleep()
       function. One is to use the alarm() function to schedule a SIGALRM sig‐
       nal  and  then  suspend the calling thread waiting for that signal. The
       other  is  to  implement  an  independent  facility.  This  volume   of
       POSIX.1‐2017  permits  either approach in single-threaded programs, but
       the simple alarm/suspend implementation is not appropriate  for  multi-
       threaded programs.

       In  order to comply with the requirement that no primitive shall change
       a process attribute unless  explicitly  described  by  this  volume  of
       POSIX.1‐2017,  an implementation using SIGALRM must carefully take into
       account any SIGALRM signal scheduled by previous alarm() calls, the ac‐
       tion  previously  established  for  SIGALRM,  and  whether  SIGALRM was
       blocked. If a SIGALRM has been scheduled before the sleep() would ordi‐
       narily  complete,  the  sleep()  must  be  shortened to that time and a
       SIGALRM generated (possibly simulated by direct invocation of the  sig‐
       nal-catching  function)  before  sleep() returns. If a SIGALRM has been
       scheduled after the sleep()  would  ordinarily  complete,  it  must  be
       rescheduled  for  the  same time before sleep() returns. The action and
       blocking for SIGALRM must be saved and restored.

       Historical implementations often implement  the  SIGALRM-based  version
       using  alarm()  and pause().  One such implementation is prone to infi‐
       nite hangups, as described in  pause().   Another  such  implementation
       uses the C-language setjmp() and longjmp() functions to avoid that win‐
       dow. That implementation  introduces  a  different  problem:  when  the
       SIGALRM  signal  interrupts a signal-catching function installed by the
       user to catch a different signal, the  longjmp()  aborts  that  signal-
       catching  function.  An implementation based on sigprocmask(), alarm(),
       and sigsuspend() can avoid these problems.

       Despite all reasonable care, there are several  very  subtle,  but  de‐
       tectable  and  unavoidable, differences between the two types of imple‐
       mentations.  These  are  the  cases  mentioned  in   this   volume   of
       POSIX.1‐2017 where some other activity relating to SIGALRM takes place,
       and the results are stated to be unspecified. All of  these  cases  are
       sufficiently unusual as not to be of concern to most applications.

       See also the discussion of the term realtime in alarm().

       Since  sleep()  can  be implemented using alarm(), the discussion about
       alarms occurring early under alarm() applies to sleep() as well.

       Application developers should note that the type of the  argument  sec‐
       onds  and  the  return value of sleep() is unsigned.  That means that a
       Strictly Conforming POSIX System Interfaces Application cannot  pass  a
       value  greater  than the minimum guaranteed value for {UINT_MAX}, which
       the ISO C standard sets as 65535, and any application passing a  larger
       value  is restricting its portability. A different type was considered,
       but historical implementations, including those with a 16-bit int type,
       consistently use either unsigned or int.

       Scheduling  delays  may  cause  the  process to return from the sleep()
       function significantly after the requested time. In such cases, the re‐
       turn value should be set to zero, since the formula (requested time mi‐
       nus the time actually spent) yields a negative number and  sleep()  re‐
       turns an unsigned.

FUTURE DIRECTIONS
       A  future  version  of  this standard may require that sleep() does not
       make use of SIGALRM in all programs, not just multi-threaded programs.

SEE ALSO
       alarm(), getitimer(), nanosleep(), pause(), sigaction(), sigsetjmp()

       The Base Definitions volume of POSIX.1‐2017, <unistd.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                            SLEEP(3P)
