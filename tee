TEE(1)                                                                                         User Commands                                                                                        TEE(1)

NAME
       tee - read from standard input and write to standard output and files

SYNOPSIS
       tee [OPTION]... [FILE]...

DESCRIPTION
       Copy standard input to each FILE, and also to standard output.

       -a, --append
              append to the given FILEs, do not overwrite

       -i, --ignore-interrupts
              ignore interrupt signals

       -p     operate in a more appropriate MODE with pipes.

       --output-error[=MODE]
              set behavior on write error.  See MODE below

       --help display this help and exit

       --version
              output version information and exit

   MODE determines behavior with write errors on the outputs:
       warn   diagnose errors writing to any output

       warn-nopipe
              diagnose errors writing to any output not a pipe

       exit   exit on error writing to any output

       exit-nopipe
              exit on error writing to any output not a pipe

       The  default MODE for the -p option is 'warn-nopipe'.  With "nopipe" MODEs, exit immediately if all outputs become broken pipes.  The default operation when --output-error is not specified, is to
       exit immediately on error writing to a pipe, and diagnose errors writing to non pipe outputs.

AUTHOR
       Written by Mike Parker, Richard M. Stallman, and David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2023 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation <https://www.gnu.org/software/coreutils/tee>
       or available locally via: info '(coreutils) tee invocation'

GNU coreutils 9.2                                                                               April 2023                                                                                          TEE(1)
TEE(1P)                                                                                  POSIX Programmer's Manual                                                                                 TEE(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       tee — duplicate standard input

SYNOPSIS
       tee [-ai] [file...]

DESCRIPTION
       The tee utility shall copy standard input to standard output, making a copy in zero or more files. The tee utility shall not buffer output.

       If the -a option is not specified, output files shall be written (see Section 1.1.1.4, File Read, Write, and Creation.

OPTIONS
       The tee utility shall conform to the Base Definitions volume of POSIX.1‐2017, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported:

       -a        Append the output to the files.

       -i        Ignore the SIGINT signal.

OPERANDS
       The following operands shall be supported:

       file      A pathname of an output file. If a file operand is '-', it shall refer to a file named -; implementations shall not treat it as meaning standard output.  Processing of at least 13  file
                 operands shall be supported.

STDIN
       The standard input can be of any type.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of tee:

       LANG      Provide  a default value for the internationalization variables that are unset or null. (See the Base Definitions volume of POSIX.1‐2017, Section 8.2, Internationalization Variables for
                 the precedence of internationalization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       Default, except that if the -i option was specified, SIGINT shall be ignored.

STDOUT
       The standard output shall be a copy of the standard input.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       If any file operands are specified, the standard input shall be copied to each named file.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

        0    The standard input was successfully copied to all output files.

       >0    An error occurred.

CONSEQUENCES OF ERRORS
       If a write to any successfully opened file operand fails, writes to other successfully opened file operands and standard output shall continue, but the exit status shall be  non-zero.  Otherwise,
       the default actions specified in Section 1.4, Utility Description Defaults apply.

       The following sections are informative.

APPLICATION USAGE
       The tee utility is usually used in a pipeline, to make a copy of the output of some utility.

       The file operand is technically optional, but tee is no more useful than cat when none is specified.

EXAMPLES
       Save an unsorted intermediate form of the data in a pipeline:

           ... | tee unsorted | sort > sorted

RATIONALE
       The buffering requirement means that tee is not allowed to use ISO C standard fully buffered or line-buffered writes. It does not mean that tee has to do 1-byte reads followed by 1-byte writes.

       It should be noted that early versions of BSD ignore any invalid options and accept a single '-' as an alternative to -i.  They also print a message if unable to open a file:

           "tee: cannot access %s\n", <pathname>

       Historical implementations ignore write errors. This is explicitly not permitted by this volume of POSIX.1‐2017.

       Some  historical  implementations  use  O_APPEND  when  providing  append  mode; others use the lseek() function to seek to the end-of-file after opening the file without O_APPEND. This volume of
       POSIX.1‐2017 requires functionality equivalent to using O_APPEND; see Section 1.1.1.4, File Read, Write, and Creation.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Chapter 1, Introduction, cat

       The Base Definitions volume of POSIX.1‐2017, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

       The System Interfaces volume of POSIX.1‐2017, lseek()

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                            TEE(1P)
tee(2)                                                                                      System Calls Manual                                                                                     tee(2)

NAME
       tee - duplicating pipe content

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #define _GNU_SOURCE         /* See feature_test_macros(7) */
       #include <fcntl.h>

       ssize_t tee(int fd_in, int fd_out, size_t len, unsigned int flags);

DESCRIPTION
       tee() duplicates up to len bytes of data from the pipe referred to by the file descriptor fd_in to the pipe referred to by the file descriptor fd_out.  It does not consume the data that is dupli‐
       cated from fd_in; therefore, that data can be copied by a subsequent splice(2).

       flags is a bit mask that is composed by ORing together zero or more of the following values:

       SPLICE_F_MOVE      Currently has no effect for tee(); see splice(2).

       SPLICE_F_NONBLOCK  Do not block on I/O; see splice(2) for further details.

       SPLICE_F_MORE      Currently has no effect for tee(), but may be implemented in the future; see splice(2).

       SPLICE_F_GIFT      Unused for tee(); see vmsplice(2).

RETURN VALUE
       Upon successful completion, tee() returns the number of bytes that were duplicated between the input and output.  A return value of 0 means that there was no data to transfer, and  it  would  not
       make sense to block, because there are no writers connected to the write end of the pipe referred to by fd_in.

       On error, tee() returns -1 and errno is set to indicate the error.

ERRORS
       EAGAIN SPLICE_F_NONBLOCK was specified in flags or one of the file descriptors had been marked as nonblocking (O_NONBLOCK), and the operation would block.

       EINVAL fd_in or fd_out does not refer to a pipe; or fd_in and fd_out refer to the same pipe.

       ENOMEM Out of memory.

STANDARDS
       Linux.

HISTORY
       Linux 2.6.17, glibc 2.5.

NOTES
       Conceptually,  tee()  copies the data between the two pipes.  In reality no real data copying takes place though: under the covers, tee() assigns data to the output by merely grabbing a reference
       to the input.

EXAMPLES
       The example below implements a basic tee(1) program using the tee() system call.  Here is an example of its use:

           $ date | ./a.out out.log | cat
           Tue Oct 28 10:06:00 CET 2014
           $ cat out.log
           Tue Oct 28 10:06:00 CET 2014

   Program source

       #define _GNU_SOURCE
       #include <errno.h>
       #include <fcntl.h>
       #include <limits.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>

       int
       main(int argc, char *argv[])
       {
           int      fd;
           ssize_t  len, slen;

           if (argc != 2) {
               fprintf(stderr, "Usage: %s <file>\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           fd = open(argv[1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
           if (fd == -1) {
               perror("open");
               exit(EXIT_FAILURE);
           }

           for (;;) {
               /*
                * tee stdin to stdout.
                */
               len = tee(STDIN_FILENO, STDOUT_FILENO,
                         INT_MAX, SPLICE_F_NONBLOCK);
               if (len < 0) {
                   if (errno == EAGAIN)
                       continue;
                   perror("tee");
                   exit(EXIT_FAILURE);
               }
               if (len == 0)
                   break;

               /*
                * Consume stdin by splicing it to a file.
                */
               while (len > 0) {
                   slen = splice(STDIN_FILENO, NULL, fd, NULL,
                                 len, SPLICE_F_MOVE);
                   if (slen < 0) {
                       perror("splice");
                       exit(EXIT_FAILURE);
                   }
                   len -= slen;
               }
           }

           close(fd);
           exit(EXIT_SUCCESS);
       }

SEE ALSO
       splice(2), vmsplice(2), pipe(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                          tee(2)
