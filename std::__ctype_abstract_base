std::__ctype_abstract_base<Library Funcstd::__ctype_abstract_base< _CharT >(3)

NAME
       std::__ctype_abstract_base< _CharT > - Common base for ctype facet.

SYNOPSIS
       #include <locale>

       Inherits std::locale::facet, and std::ctype_base.

       Inherited by std::ctype< _CharT >.

   Public Types
       typedef const int * __to_type
       typedef _CharT char_type
           Typedef for the template parameter.
       typedef unsigned short mask

   Public Member Functions
       const char_type * is (const char_type *__lo, const char_type *__hi,
           mask *__vec) const
           Return a mask array.
       bool is (mask __m, char_type __c) const
           Test char_type classification.
       char narrow (char_type __c, char __dfault) const
           Narrow char_type to char.
       const char_type * narrow (const char_type *__lo, const char_type *__hi,
           char __dfault, char *__to) const
           Narrow array to char array.
       const char_type * scan_is (mask __m, const char_type *__lo, const
           char_type *__hi) const
           Find char_type matching a mask.
       const char_type * scan_not (mask __m, const char_type *__lo, const
           char_type *__hi) const
           Find char_type not matching a mask.
       const char_type * tolower (char_type *__lo, const char_type *__hi)
           const
           Convert array to lowercase.
       char_type tolower (char_type __c) const
           Convert to lowercase.
       const char_type * toupper (char_type *__lo, const char_type *__hi)
           const
           Convert array to uppercase.
       char_type toupper (char_type __c) const
           Convert to uppercase.
       char_type widen (char __c) const
           Widen char to char_type.
       const char * widen (const char *__lo, const char *__hi, char_type
           *__to) const
           Widen array to char_type.

   Static Public Attributes
       static const mask alnum
       static const mask alpha
       static const mask blank
       static const mask cntrl
       static const mask digit
       static const mask graph
       static const mask lower
       static const mask print
       static const mask punct
       static const mask space
       static const mask upper
       static const mask xdigit

   Protected Member Functions
       __ctype_abstract_base (size_t __refs=0)
       virtual const char_type * do_is (const char_type *__lo, const char_type
           *__hi, mask *__vec) const =0
           Return a mask array.
       virtual bool do_is (mask __m, char_type __c) const =0
           Test char_type classification.
       virtual char do_narrow (char_type __c, char __dfault) const =0
           Narrow char_type to char.
       virtual const char_type * do_narrow (const char_type *__lo, const
           char_type *__hi, char __dfault, char *__to) const =0
           Narrow char_type array to char.
       virtual const char_type * do_scan_is (mask __m, const char_type *__lo,
           const char_type *__hi) const =0
           Find char_type matching mask.
       virtual const char_type * do_scan_not (mask __m, const char_type *__lo,
           const char_type *__hi) const =0
           Find char_type not matching mask.
       virtual const char_type * do_tolower (char_type *__lo, const char_type
           *__hi) const =0
           Convert array to lowercase.
       virtual char_type do_tolower (char_type __c) const =0
           Convert to lowercase.
       virtual const char_type * do_toupper (char_type *__lo, const char_type
           *__hi) const =0
           Convert array to uppercase.
       virtual char_type do_toupper (char_type __c) const =0
           Convert to uppercase.
       virtual char_type do_widen (char __c) const =0
           Widen char.
       virtual const char * do_widen (const char *__lo, const char *__hi,
           char_type *__to) const =0
           Widen char array.

   Static Protected Member Functions
       static __c_locale _S_clone_c_locale (__c_locale &__cloc)  throw ()
       static void _S_create_c_locale (__c_locale &__cloc, const char *__s,
           __c_locale __old=0)
       static void _S_destroy_c_locale (__c_locale &__cloc)
       static __c_locale _S_get_c_locale ()
       static const char * _S_get_c_name ()  throw ()
       static __c_locale _S_lc_ctype_c_locale (__c_locale __cloc, const char
           *__s)

Detailed Description
   template<typename _CharT>
       class std::__ctype_abstract_base< _CharT >"Common base for ctype facet.

       This template class provides implementations of the public functions
       that forward to the protected virtual functions.

       This template also provides abstract stubs for the protected virtual
       functions.

       Definition at line 153 of file locale.

Member Typedef Documentation
   typedef const int* std::ctype_base::__to_type [inherited]
       Definition at line 44 of file ctype_base.h.

   template<typename _CharT > typedef _CharT std::__ctype_abstract_base<
       _CharT >::char_type
       Typedef for the template parameter.

       Definition at line 158 of file locale.

   typedef unsigned short std::ctype_base::mask [inherited]
       Definition at line 48 of file ctype_base.h.

Constructor & Destructor Documentation
   template<typename _CharT > std::__ctype_abstract_base< _CharT
       >::__ctype_abstract_base (size_t __refs = 0) [inline],  [explicit],
       [protected]
       Definition at line 362 of file locale.

   template<typename _CharT > virtual std::__ctype_abstract_base< _CharT
       >::~__ctype_abstract_base () [inline],  [protected],  [virtual]
       Definition at line 365 of file locale.

Member Function Documentation
   template<typename _CharT > virtual const char_type *
       std::__ctype_abstract_base< _CharT >::do_is (const char_type * __lo,
       const char_type * __hi, mask * __vec) const [protected],  [pure
       virtual]
       Return a mask array. This function finds the mask for each char_type in
       the range [lo,hi) and successively writes it to vec. vec must have as
       many elements as the input.

       do_is() is a hook for a derived facet to change the behavior of
       classifying. do_is() must always return the same result for the same
       input.

       Parameters
           __lo Pointer to start of range.
           __hi Pointer to end of range.
           __vec Pointer to an array of mask storage.

       Returns
           __hi.

       Implemented in std::ctype< _CharT >, and std::ctype< wchar_t >.

   template<typename _CharT > virtual bool std::__ctype_abstract_base< _CharT
       >::do_is (mask __m, char_type __c) const [protected],  [pure virtual]
       Test char_type classification. This function finds a mask M for c and
       compares it to mask m.

       do_is() is a hook for a derived facet to change the behavior of
       classifying. do_is() must always return the same result for the same
       input.

       Parameters
           __c The char_type to find the mask of.
           __m The mask to compare against.

       Returns
           (M & __m) != 0.

       Implemented in std::ctype< _CharT >, and std::ctype< wchar_t >.

       Referenced by std::__ctype_abstract_base< _CharT >::is().

   template<typename _CharT > virtual char std::__ctype_abstract_base< _CharT
       >::do_narrow (char_type __c, char __dfault) const [protected],  [pure
       virtual]
       Narrow char_type to char. This virtual function converts the argument
       to char using the simplest reasonable transformation. If the conversion
       fails, dfault is returned instead.

       do_narrow() is a hook for a derived facet to change the behavior of
       narrowing. do_narrow() must always return the same result for the same
       input.

       Note: this is not what you want for codepage conversions. See codecvt
       for that.

       Parameters
           __c The char_type to convert.
           __dfault Char to return if conversion fails.

       Returns
           The converted char.

       Implemented in std::ctype< wchar_t >, and std::ctype< _CharT >.

       Referenced by std::__ctype_abstract_base< _CharT >::narrow().

   template<typename _CharT > virtual const char_type *
       std::__ctype_abstract_base< _CharT >::do_narrow (const char_type *
       __lo, const char_type * __hi, char __dfault, char * __to) const
       [protected],  [pure virtual]
       Narrow char_type array to char. This virtual function converts each
       char_type in the range [__lo,__hi) to char using the simplest
       reasonable transformation and writes the results to the destination
       array. For any element in the input that cannot be converted, __dfault
       is used instead.

       do_narrow() is a hook for a derived facet to change the behavior of
       narrowing. do_narrow() must always return the same result for the same
       input.

       Note: this is not what you want for codepage conversions. See codecvt
       for that.

       Parameters
           __lo Pointer to start of range.
           __hi Pointer to end of range.
           __dfault Char to use if conversion fails.
           __to Pointer to the destination array.

       Returns
           __hi.

       Implemented in std::ctype< _CharT >, and std::ctype< wchar_t >.

   template<typename _CharT > virtual const char_type *
       std::__ctype_abstract_base< _CharT >::do_scan_is (mask __m, const
       char_type * __lo, const char_type * __hi) const [protected],  [pure
       virtual]
       Find char_type matching mask. This function searches for and returns
       the first char_type c in [__lo,__hi) for which is(__m,c) is true.

       do_scan_is() is a hook for a derived facet to change the behavior of
       match searching. do_is() must always return the same result for the
       same input.

       Parameters
           __m The mask to compare against.
           __lo Pointer to start of range.
           __hi Pointer to end of range.

       Returns
           Pointer to a matching char_type if found, else __hi.

       Implemented in std::ctype< _CharT >, and std::ctype< wchar_t >.

       Referenced by std::__ctype_abstract_base< _CharT >::scan_is().

   template<typename _CharT > virtual const char_type *
       std::__ctype_abstract_base< _CharT >::do_scan_not (mask __m, const
       char_type * __lo, const char_type * __hi) const [protected],  [pure
       virtual]
       Find char_type not matching mask. This function searches for and
       returns a pointer to the first char_type c of [lo,hi) for which is(m,c)
       is false.

       do_scan_is() is a hook for a derived facet to change the behavior of
       match searching. do_is() must always return the same result for the
       same input.

       Parameters
           __m The mask to compare against.
           __lo Pointer to start of range.
           __hi Pointer to end of range.

       Returns
           Pointer to a non-matching char_type if found, else __hi.

       Implemented in std::ctype< _CharT >, and std::ctype< wchar_t >.

       Referenced by std::__ctype_abstract_base< _CharT >::scan_not().

   template<typename _CharT > virtual const char_type *
       std::__ctype_abstract_base< _CharT >::do_tolower (char_type * __lo,
       const char_type * __hi) const [protected],  [pure virtual]
       Convert array to lowercase. This virtual function converts each
       char_type in the range [__lo,__hi) to lowercase if possible. Other
       elements remain untouched.

       do_tolower() is a hook for a derived facet to change the behavior of
       lowercasing. do_tolower() must always return the same result for the
       same input.

       Parameters
           __lo Pointer to start of range.
           __hi Pointer to end of range.

       Returns
           __hi.

       Implemented in std::ctype< _CharT >, and std::ctype< wchar_t >.

   template<typename _CharT > virtual char_type std::__ctype_abstract_base<
       _CharT >::do_tolower (char_type __c) const [protected],  [pure virtual]
       Convert to lowercase. This virtual function converts the argument to
       lowercase if possible. If not possible (for example, '2'), returns the
       argument.

       do_tolower() is a hook for a derived facet to change the behavior of
       lowercasing. do_tolower() must always return the same result for the
       same input.

       Parameters
           __c The char_type to convert.

       Returns
           The lowercase char_type if convertible, else __c.

       Implemented in std::ctype< _CharT >, and std::ctype< wchar_t >.

       Referenced by std::__ctype_abstract_base< _CharT >::tolower().

   template<typename _CharT > virtual const char_type *
       std::__ctype_abstract_base< _CharT >::do_toupper (char_type * __lo,
       const char_type * __hi) const [protected],  [pure virtual]
       Convert array to uppercase. This virtual function converts each
       char_type in the range [__lo,__hi) to uppercase if possible. Other
       elements remain untouched.

       do_toupper() is a hook for a derived facet to change the behavior of
       uppercasing. do_toupper() must always return the same result for the
       same input.

       Parameters
           __lo Pointer to start of range.
           __hi Pointer to end of range.

       Returns
           __hi.

       Implemented in std::ctype< _CharT >, and std::ctype< wchar_t >.

   template<typename _CharT > virtual char_type std::__ctype_abstract_base<
       _CharT >::do_toupper (char_type __c) const [protected],  [pure virtual]
       Convert to uppercase. This virtual function converts the char_type
       argument to uppercase if possible. If not possible (for example, '2'),
       returns the argument.

       do_toupper() is a hook for a derived facet to change the behavior of
       uppercasing. do_toupper() must always return the same result for the
       same input.

       Parameters
           __c The char_type to convert.

       Returns
           The uppercase char_type if convertible, else __c.

       Implemented in std::ctype< _CharT >, and std::ctype< wchar_t >.

       Referenced by std::__ctype_abstract_base< _CharT >::toupper().

   template<typename _CharT > virtual char_type std::__ctype_abstract_base<
       _CharT >::do_widen (char __c) const [protected],  [pure virtual]
       Widen char. This virtual function converts the char to char_type using
       the simplest reasonable transformation.

       do_widen() is a hook for a derived facet to change the behavior of
       widening. do_widen() must always return the same result for the same
       input.

       Note: this is not what you want for codepage conversions. See codecvt
       for that.

       Parameters
           __c The char to convert.

       Returns
           The converted char_type

       Implemented in std::ctype< _CharT >, and std::ctype< wchar_t >.

       Referenced by std::__ctype_abstract_base< _CharT >::widen().

   template<typename _CharT > virtual const char * std::__ctype_abstract_base<
       _CharT >::do_widen (const char * __lo, const char * __hi, char_type *
       __to) const [protected],  [pure virtual]
       Widen char array. This function converts each char in the input to
       char_type using the simplest reasonable transformation.

       do_widen() is a hook for a derived facet to change the behavior of
       widening. do_widen() must always return the same result for the same
       input.

       Note: this is not what you want for codepage conversions. See codecvt
       for that.

       Parameters
           __lo Pointer to start range.
           __hi Pointer to end of range.
           __to Pointer to the destination array.

       Returns
           __hi.

       Implemented in std::ctype< _CharT >, and std::ctype< wchar_t >.

   template<typename _CharT > const char_type * std::__ctype_abstract_base<
       _CharT >::is (const char_type * __lo, const char_type * __hi, mask *
       __vec) const [inline]
       Return a mask array. This function finds the mask for each char_type in
       the range [lo,hi) and successively writes it to vec. vec must have as
       many elements as the char array. It does so by returning the value of
       ctype<char_type>::do_is().

       Parameters
           __lo Pointer to start of range.
           __hi Pointer to end of range.
           __vec Pointer to an array of mask storage.

       Returns
           __hi.

       Definition at line 189 of file locale.

       References std::__ctype_abstract_base< _CharT >::do_is().

   template<typename _CharT > bool std::__ctype_abstract_base< _CharT >::is
       (mask __m, char_type __c) const [inline]
       Test char_type classification. This function finds a mask M for __c and
       compares it to mask __m. It does so by returning the value of
       ctype<char_type>::do_is().

       Parameters
           __c The char_type to compare the mask of.
           __m The mask to compare against.

       Returns
           (M & __m) != 0.

       Definition at line 172 of file locale.

       References std::__ctype_abstract_base< _CharT >::do_is().

       Referenced by std::basic_istream< _CharT, _Traits >::sentry::sentry(),
       and std::time_get< _CharT, _InIter >::get().

   template<typename _CharT > char std::__ctype_abstract_base< _CharT
       >::narrow (char_type __c, char __dfault) const [inline]
       Narrow char_type to char. This function converts the char_type to char
       using the simplest reasonable transformation. If the conversion fails,
       dfault is returned instead. It does so by returning
       ctype<char_type>::do_narrow(__c).

       Note: this is not what you want for codepage conversions. See codecvt
       for that.

       Parameters
           __c The char_type to convert.
           __dfault Char to return if conversion fails.

       Returns
           The converted char.

       Definition at line 334 of file locale.

       References std::__ctype_abstract_base< _CharT >::do_narrow().

       Referenced by std::time_get< _CharT, _InIter >::do_get_year(),
       std::time_get< _CharT, _InIter >::get(), and std::time_put< _CharT,
       _OutIter >::put().

   template<typename _CharT > const char_type * std::__ctype_abstract_base<
       _CharT >::narrow (const char_type * __lo, const char_type * __hi, char
       __dfault, char * __to) const [inline]
       Narrow array to char array. This function converts each char_type in
       the input to char using the simplest reasonable transformation and
       writes the results to the destination array. For any char_type in the
       input that cannot be converted, dfault is used instead. It does so by
       returning ctype<char_type>::do_narrow(__lo, __hi, __dfault, __to).

       Note: this is not what you want for codepage conversions. See codecvt
       for that.

       Parameters
           __lo Pointer to start of range.
           __hi Pointer to end of range.
           __dfault Char to use if conversion fails.
           __to Pointer to the destination array.

       Returns
           __hi.

       Definition at line 356 of file locale.

       References std::__ctype_abstract_base< _CharT >::do_narrow().

   template<typename _CharT > const char_type * std::__ctype_abstract_base<
       _CharT >::scan_is (mask __m, const char_type * __lo, const char_type *
       __hi) const [inline]
       Find char_type matching a mask. This function searches for and returns
       the first char_type c in [lo,hi) for which is(m,c) is true. It does so
       by returning ctype<char_type>::do_scan_is().

       Parameters
           __m The mask to compare against.
           __lo Pointer to start of range.
           __hi Pointer to end of range.

       Returns
           Pointer to matching char_type if found, else __hi.

       Definition at line 205 of file locale.

       References std::__ctype_abstract_base< _CharT >::do_scan_is().

   template<typename _CharT > const char_type * std::__ctype_abstract_base<
       _CharT >::scan_not (mask __m, const char_type * __lo, const char_type *
       __hi) const [inline]
       Find char_type not matching a mask. This function searches for and
       returns the first char_type c in [lo,hi) for which is(m,c) is false. It
       does so by returning ctype<char_type>::do_scan_not().

       Parameters
           __m The mask to compare against.
           __lo Pointer to first char in range.
           __hi Pointer to end of range.

       Returns
           Pointer to non-matching char if found, else __hi.

       Definition at line 221 of file locale.

       References std::__ctype_abstract_base< _CharT >::do_scan_not().

   template<typename _CharT > const char_type * std::__ctype_abstract_base<
       _CharT >::tolower (char_type * __lo, const char_type * __hi) const
       [inline]
       Convert array to lowercase. This function converts each char_type in
       the range [__lo,__hi) to lowercase if possible. Other elements remain
       untouched. It does so by returning ctype<char_type>:: do_tolower(__lo,
       __hi).

       Parameters
           __lo Pointer to start of range.
           __hi Pointer to end of range.

       Returns
           __hi.

       Definition at line 279 of file locale.

       References std::__ctype_abstract_base< _CharT >::do_tolower().

   template<typename _CharT > char_type std::__ctype_abstract_base< _CharT
       >::tolower (char_type __c) const [inline]
       Convert to lowercase. This function converts the argument to lowercase
       if possible. If not possible (for example, '2'), returns the argument.
       It does so by returning ctype<char_type>::do_tolower(c).

       Parameters
           __c The char_type to convert.

       Returns
           The lowercase char_type if convertible, else __c.

       Definition at line 264 of file locale.

       References std::__ctype_abstract_base< _CharT >::do_tolower().

       Referenced by std::time_get< _CharT, _InIter >::get().

   template<typename _CharT > const char_type * std::__ctype_abstract_base<
       _CharT >::toupper (char_type * __lo, const char_type * __hi) const
       [inline]
       Convert array to uppercase. This function converts each char_type in
       the range [lo,hi) to uppercase if possible. Other elements remain
       untouched. It does so by returning ctype<char_type>:: do_toupper(lo,
       hi).

       Parameters
           __lo Pointer to start of range.
           __hi Pointer to end of range.

       Returns
           __hi.

       Definition at line 250 of file locale.

       References std::__ctype_abstract_base< _CharT >::do_toupper().

   template<typename _CharT > char_type std::__ctype_abstract_base< _CharT
       >::toupper (char_type __c) const [inline]
       Convert to uppercase. This function converts the argument to uppercase
       if possible. If not possible (for example, '2'), returns the argument.
       It does so by returning ctype<char_type>::do_toupper().

       Parameters
           __c The char_type to convert.

       Returns
           The uppercase char_type if convertible, else __c.

       Definition at line 235 of file locale.

       References std::__ctype_abstract_base< _CharT >::do_toupper().

       Referenced by std::time_get< _CharT, _InIter >::get().

   template<typename _CharT > char_type std::__ctype_abstract_base< _CharT
       >::widen (char __c) const [inline]
       Widen char to char_type. This function converts the char argument to
       char_type using the simplest reasonable transformation. It does so by
       returning ctype<char_type>::do_widen(c).

       Note: this is not what you want for codepage conversions. See codecvt
       for that.

       Parameters
           __c The char to convert.

       Returns
           The converted char_type.

       Definition at line 296 of file locale.

       References std::__ctype_abstract_base< _CharT >::do_widen().

       Referenced by std::money_get< _CharT, _InIter >::do_get(),
       std::time_get< _CharT, _InIter >::do_get(), std::money_put< _CharT,
       _OutIter >::do_put(), and std::time_put< _CharT, _OutIter >::do_put().

   template<typename _CharT > const char * std::__ctype_abstract_base< _CharT
       >::widen (const char * __lo, const char * __hi, char_type * __to) const
       [inline]
       Widen array to char_type. This function converts each char in the input
       to char_type using the simplest reasonable transformation. It does so
       by returning ctype<char_type>::do_widen(c).

       Note: this is not what you want for codepage conversions. See codecvt
       for that.

       Parameters
           __lo Pointer to start of range.
           __hi Pointer to end of range.
           __to Pointer to the destination array.

       Returns
           __hi.

       Definition at line 315 of file locale.

       References std::__ctype_abstract_base< _CharT >::do_widen().

Member Data Documentation
   const mask std::ctype_base::alnum [static],  [inherited]
       Definition at line 59 of file ctype_base.h.

   const mask std::ctype_base::alpha [static],  [inherited]
       Definition at line 51 of file ctype_base.h.

   const mask std::ctype_base::blank [static],  [inherited]
       Definition at line 61 of file ctype_base.h.

   const mask std::ctype_base::cntrl [static],  [inherited]
       Definition at line 57 of file ctype_base.h.

   const mask std::ctype_base::digit [static],  [inherited]
       Definition at line 52 of file ctype_base.h.

   const mask std::ctype_base::graph [static],  [inherited]
       Definition at line 56 of file ctype_base.h.

   const mask std::ctype_base::lower [static],  [inherited]
       Definition at line 50 of file ctype_base.h.

   const mask std::ctype_base::print [static],  [inherited]
       Definition at line 55 of file ctype_base.h.

   const mask std::ctype_base::punct [static],  [inherited]
       Definition at line 58 of file ctype_base.h.

   const mask std::ctype_base::space [static],  [inherited]
       Definition at line 54 of file ctype_base.h.

   const mask std::ctype_base::upper [static],  [inherited]
       Definition at line 49 of file ctype_base.h.

   const mask std::ctype_base::xdigit [static],  [inherited]
       Definition at line 53 of file ctype_base.h.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Febstd::__ctype_abstract_base< _CharT >(3)
