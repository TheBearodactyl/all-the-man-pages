toupper(3)                                                                               Library Functions Manual                                                                               toupper(3)

NAME
       toupper, tolower, toupper_l, tolower_l - convert uppercase or lowercase

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <ctype.h>

       int toupper(int c);
       int tolower(int c);

       int toupper_l(int c, locale_t locale);
       int tolower_l(int c, locale_t locale);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       toupper_l(), tolower_l():
           Since glibc 2.10:
               _XOPEN_SOURCE >= 700
           Before glibc 2.10:
               _GNU_SOURCE

DESCRIPTION
       These functions convert lowercase letters to uppercase, and vice versa.

       If  c  is a lowercase letter, toupper() returns its uppercase equivalent, if an uppercase representation exists in the current locale.  Otherwise, it returns c.  The toupper_l() function performs
       the same task, but uses the locale referred to by the locale handle locale.

       If c is an uppercase letter, tolower() returns its lowercase equivalent, if a lowercase representation exists in the current locale.  Otherwise, it returns c.  The tolower_l()  function  performs
       the same task, but uses the locale referred to by the locale handle locale.

       If c is neither an unsigned char value nor EOF, the behavior of these functions is undefined.

       The behavior of toupper_l() and tolower_l() is undefined if locale is the special locale object LC_GLOBAL_LOCALE (see duplocale(3)) or is not a valid locale object handle.

RETURN VALUE
       The value returned is that of the converted letter, or c if the conversion was not possible.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │toupper(), tolower(), toupper_l(), tolower_l()                                                                                                                          │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       toupper()
       tolower()
              C11, POSIX.1-2008.

       toupper_l()
       tolower_l()
              POSIX.1-2008.

HISTORY
       toupper()
       tolower()
              C89, 4.3BSD, POSIX.1-2001.

       toupper_l()
       tolower_l()
              POSIX.1-2008.

NOTES
       The  standards require that the argument c for these functions is either EOF or a value that is representable in the type unsigned char.  If the argument c is of type char, it must be cast to un‐
       signed char, as in the following example:

           char c;
           ...
           res = toupper((unsigned char) c);

       This is necessary because char may be the equivalent signed char, in which case a byte where the top bit is set would be sign extended when converting to int, yielding a value that is outside the
       range of unsigned char.

       The details of what constitutes an uppercase or lowercase letter depend on the locale.  For example, the default "C" locale does not know about umlauts, so no conversion is done for them.

       In some non-English locales, there are lowercase letters with no corresponding uppercase equivalent; the German sharp s is one example.

SEE ALSO
       isalpha(3), newlocale(3), setlocale(3), towlower(3), towupper(3), uselocale(3), locale(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                      toupper(3)
TOUPPER(3P)                                                                              POSIX Programmer's Manual                                                                             TOUPPER(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       toupper, toupper_l — transliterate lowercase characters to uppercase

SYNOPSIS
       #include <ctype.h>

       int toupper(int c);
       int toupper_l(int c, locale_t locale);

DESCRIPTION
       For toupper(): The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional.
       This volume of POSIX.1‐2017 defers to the ISO C standard.

       The toupper() and toupper_l() functions have as a domain a type int, the value of which is representable as an unsigned char or the value of EOF. If the argument has any other value, the behavior
       is undefined.

       If the argument of toupper() or toupper_l() represents a lowercase letter, and there exists a corresponding uppercase letter as defined by character type information in the current locale  or  in
       the locale represented by locale, respectively (category LC_CTYPE), the result shall be the corresponding uppercase letter.

       All other arguments in the domain are returned unchanged.

       The behavior is undefined if the locale argument to toupper_l() is the special locale object LC_GLOBAL_LOCALE or is not a valid locale object handle.

RETURN VALUE
       Upon successful completion, toupper() and toupper_l() shall return the uppercase letter corresponding to the argument passed; otherwise, they shall return the argument unchanged.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       setlocale(), uselocale()

       The Base Definitions volume of POSIX.1‐2017, Chapter 7, Locale, <ctype.h>, <locale.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                        TOUPPER(3P)
