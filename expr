EXPR(1)                                                                                        User Commands                                                                                       EXPR(1)

NAME
       expr - evaluate expressions

SYNOPSIS
       expr EXPRESSION
       expr OPTION

DESCRIPTION
       --help display this help and exit

       --version
              output version information and exit

       Print the value of EXPRESSION to standard output.  A blank line below separates increasing precedence groups.  EXPRESSION may be:

       ARG1 | ARG2
              ARG1 if it is neither null nor 0, otherwise ARG2

       ARG1 & ARG2
              ARG1 if neither argument is null or 0, otherwise 0

       ARG1 < ARG2
              ARG1 is less than ARG2

       ARG1 <= ARG2
              ARG1 is less than or equal to ARG2

       ARG1 = ARG2
              ARG1 is equal to ARG2

       ARG1 != ARG2
              ARG1 is unequal to ARG2

       ARG1 >= ARG2
              ARG1 is greater than or equal to ARG2

       ARG1 > ARG2
              ARG1 is greater than ARG2

       ARG1 + ARG2
              arithmetic sum of ARG1 and ARG2

       ARG1 - ARG2
              arithmetic difference of ARG1 and ARG2

       ARG1 * ARG2
              arithmetic product of ARG1 and ARG2

       ARG1 / ARG2
              arithmetic quotient of ARG1 divided by ARG2

       ARG1 % ARG2
              arithmetic remainder of ARG1 divided by ARG2

       STRING : REGEXP
              anchored pattern match of REGEXP in STRING

       match STRING REGEXP
              same as STRING : REGEXP

       substr STRING POS LENGTH
              substring of STRING, POS counted from 1

       index STRING CHARS
              index in STRING where any CHARS is found, or 0

       length STRING
              length of STRING

       + TOKEN
              interpret TOKEN as a string, even if it is a

              keyword like 'match' or an operator like '/'

       ( EXPRESSION )
              value of EXPRESSION

       Beware  that many operators need to be escaped or quoted for shells.  Comparisons are arithmetic if both ARGs are numbers, else lexicographical.  Pattern matches return the string matched between
       \( and \) or null; if \( and \) are not used, they return the number of characters matched or 0.

       Exit status is 0 if EXPRESSION is neither null nor 0, 1 if EXPRESSION is null or 0, 2 if EXPRESSION is syntactically invalid, and 3 if an error occurred.

AUTHOR
       Written by Mike Parker, James Youngman, and Paul Eggert.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2023 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation <https://www.gnu.org/software/coreutils/expr>
       or available locally via: info '(coreutils) expr invocation'

GNU coreutils 9.2                                                                               April 2023                                                                                         EXPR(1)
EXPR(1P)                                                                                 POSIX Programmer's Manual                                                                                EXPR(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       expr — evaluate arguments as an expression

SYNOPSIS
       expr operand...

DESCRIPTION
       The expr utility shall evaluate an expression and write the result to standard output.

OPTIONS
       None.

OPERANDS
       The single expression evaluated by expr shall be formed from the operand operands, as described in the EXTENDED DESCRIPTION section. The application shall ensure that each of the expression oper‐
       ator symbols:

           (  )  |  &  =  >  >=  <  <=  !=  +  -  *  /  %  :

       and the symbols integer and string in the table are provided as separate arguments to expr.

STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of expr:

       LANG      Provide  a default value for the internationalization variables that are unset or null. (See the Base Definitions volume of POSIX.1‐2017, Section 8.2, Internationalization Variables for
                 the precedence of internationalization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_COLLATE
                 Determine the locale for the behavior of ranges, equivalence classes, and multi-character collating elements within regular expressions and by the string comparison operators.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as opposed to multi-byte characters in arguments) and the behavior
                 of character classes within regular expressions.

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The expr utility shall evaluate the expression and write the result, followed by a <newline>, to standard output.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       The formation of the expression to be evaluated is shown in the following table. The symbols expr, expr1, and expr2 represent expressions formed from integer and string symbols and the expression
       operator symbols (all separate arguments) by recursive application of the constructs described in the table. The expressions are listed in order of decreasing  precedence,  with  equal-precedence
       operators grouped between horizontal lines. All of the operators shall be left-associative.

                                                                           ┌───────────────┬──────────────────────────────────────────┐
                                                                           │  Expression   │               Description                │
                                                                           ├───────────────┼──────────────────────────────────────────┤
                                                                           │integer        │ An  argument  consisting only of an (op‐ │
                                                                           │               │ tional) unary minus followed by digits.  │
                                                                           │string         │ A string argument; see below.            │
                                                                           ├───────────────┼──────────────────────────────────────────┤
                                                                           │( expr )       │ Grouping symbols. Any expression can  be │
                                                                           │               │ placed  within parentheses.  Parentheses │
                                                                           │               │ can   be   nested   to   a   depth    of │
                                                                           │               │ {EXPR_NEST_MAX}.                         │
                                                                           ├───────────────┼──────────────────────────────────────────┤
                                                                           │expr1 : expr2  │ Matching expression; see below.          │
                                                                           ├───────────────┼──────────────────────────────────────────┤
                                                                           │expr1 * expr2  │ Multiplication of decimal integer-valued │
                                                                           │               │ arguments.                               │
                                                                           │expr1 / expr2  │ Integer division of decimal integer-val‐ │
                                                                           │               │ ued  arguments, producing an integer re‐ │
                                                                           │               │ sult.                                    │
                                                                           │expr1 % expr2  │ Remainder of integer division of decimal │
                                                                           │               │ integer-valued arguments.                │
                                                                           ├───────────────┼──────────────────────────────────────────┤
                                                                           │expr1 + expr2  │ Addition of decimal integer-valued argu‐ │
                                                                           │               │ ments.                                   │
                                                                           │expr1 - expr2  │ Subtraction  of  decimal  integer-valued │
                                                                           │               │ arguments.                               │
                                                                           ├───────────────┼──────────────────────────────────────────┤
                                                                           │               │ Returns  the result of a decimal integer │
                                                                           │               │ comparison if both arguments  are  inte‐ │
                                                                           │               │ gers; otherwise, returns the result of a │
                                                                           │               │ string comparison using the  locale-spe‐ │
                                                                           │               │ cific  collation sequence. The result of │
                                                                           │               │ each comparison is 1  if  the  specified │
                                                                           │               │ relationship  is true, or 0 if the rela‐ │
                                                                           │               │ tionship is false.                       │
                                                                           │expr1 = expr2  │ Equal.                                   │
                                                                           │expr1 > expr2  │ Greater than.                            │
                                                                           │expr1 >= expr2 │ Greater than or equal.                   │
                                                                           │expr1 < expr2  │ Less than.                               │
                                                                           │expr1 <= expr2 │ Less than or equal.                      │
                                                                           │expr1 != expr2 │ Not equal.                               │
                                                                           ├───────────────┼──────────────────────────────────────────┤
                                                                           │expr1 & expr2  │ Returns the evaluation of expr1 if  nei‐ │
                                                                           │               │ ther  expression  evaluates  to  null or │
                                                                           │               │ zero; otherwise, returns zero.           │
                                                                           ├───────────────┼──────────────────────────────────────────┤
                                                                           │expr1 | expr2  │ Returns the evaluation of expr1 if it is │
                                                                           │               │ neither  null  nor  zero; otherwise, re‐ │
                                                                           │               │ turns the evaluation of expr2 if  it  is │
                                                                           │               │ not null; otherwise, zero.               │
                                                                           └───────────────┴──────────────────────────────────────────┘
   Matching Expression
       The  ':'  matching  operator shall compare the string resulting from the evaluation of expr1 with the regular expression pattern resulting from the evaluation of expr2.  Regular expression syntax
       shall be that defined in the Base Definitions volume of POSIX.1‐2017, Section 9.3, Basic Regular Expressions, except that all patterns are anchored to the beginning of the string (that  is,  only
       sequences  starting  at  the  first character of a string are matched by the regular expression) and, therefore, it is unspecified whether '^' is a special character in that context. Usually, the
       matching operator shall return a string representing the number of characters matched ('0' on failure). Alternatively, if the pattern  contains  at  least  one  regular  expression  subexpression
       "[\(...\)]", the string matched by the back-reference expression "\1" shall be returned. If the back-reference expression "\1" does not match, then the null string shall be returned.

   Identification as Integer or String
       An argument or the value of a subexpression that consists only of an optional unary minus followed by digits is a candidate for treatment as an integer if it is used as the left argument to the |
       operator or as either argument to any of the following operators: & = > >= < <= != + - * / %.  Otherwise, the argument or subexpression value shall be treated as a string.

       The use of string arguments length, substr, index, or match produces unspecified results.

EXIT STATUS
       The following exit values shall be returned:

        0    The expression evaluates to neither null nor zero.

        1    The expression evaluates to null or zero.

        2    Invalid expression.

       >2    An error occurred.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       The expr utility has a rather difficult syntax:

        *  Many of the operators are also shell control operators or reserved words, so they have to be escaped on the command line.

        *  Each part of the expression is composed of separate arguments, so liberal usage of <blank> characters is required. For example:

                                                                                     ┌─────────────────┬───────────────────────┐
                                                                                     │    Invalid      │         Valid         │
                                                                                     ├─────────────────┼───────────────────────┤
                                                                                     │expr 1+2         │ expr 1 + 2            │
                                                                                     │expr "1 + 2"     │ expr 1 + 2            │
                                                                                     │expr 1 + (2 * 3) │ expr 1 + \( 2 \* 3 \) │
                                                                                     └─────────────────┴───────────────────────┘
       In many cases, the arithmetic and string features provided as part of the shell command language are easier to use than their equivalents in expr.  Newly written scripts should avoid expr in  fa‐
       vor of the new features within the shell; see Section 2.5, Parameters and Variables and Section 2.6.4, Arithmetic Expansion.

       After argument processing by the shell, expr is not required to be able to tell the difference between an operator and an operand except by the value. If "$a" is '=', the command:

           expr "$a" = '='

       looks like:

           expr = = =

       as the arguments are passed to expr (and they all may be taken as the '=' operator). The following works reliably:

           expr "X$a" = X=

       Also  note that this volume of POSIX.1‐2017 permits implementations to extend utilities. The expr utility permits the integer arguments to be preceded with a unary minus. This means that an inte‐
       ger argument could look like an option.  Therefore, the conforming application must employ the "--" construct of Guideline 10 of the Base Definitions volume of POSIX.1‐2017, Section 12.2, Utility
       Syntax Guidelines to protect its operands if there is any chance the first operand might be a negative integer (or any string with a leading minus).

       For  testing  string equality the test utility is preferred over expr, as it is usually implemented as a shell built-in. However, the functionality is not quite the same because the expr = and !=
       operators check whether strings collate equally, whereas test checks whether they are identical. Therefore, they can produce different results in locales where the  collation  sequence  does  not
       have a total ordering of all characters (see the Base Definitions volume of POSIX.1‐2017, Section 7.3.2, LC_COLLATE).

EXAMPLES
       The following command:

           a=$(expr "$a" + 1)

       adds 1 to the variable a.

       The following command, for "$a" equal to either /usr/abc/file or just file:

           expr $a : '.*/\(.*\)' \| $a

       returns the last segment of a pathname (that is, file).  Applications should avoid the character '/' used alone as an argument; expr may interpret it as the division operator.

       The following command:

           expr "//$a" : '.*/\(.*\)'

       is  a  better  representation of the previous example. The addition of the "//" characters eliminates any ambiguity about the division operator and simplifies the whole expression. Also note that
       pathnames may contain characters contained in the IFS variable and should be quoted to avoid having "$a" expand into multiple arguments.

       The following command:

           expr "X$VAR" : '.*' - 1

       returns the number of characters in VAR.

RATIONALE
       In an early proposal, EREs were used in the matching expression syntax.  This was changed to BREs to avoid breaking historical applications.

       The use of a leading <circumflex> in the BRE is unspecified because many historical implementations have treated it as a special character, despite their system documentation. For example:

           expr foo : ^foo     expr ^foo : ^foo

       return 3 and 0, respectively, on those systems; their documentation would imply the reverse. Thus, the anchoring condition is left unspecified to avoid breaking historical scripts relying on this
       undocumented feature.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.5, Parameters and Variables, Section 2.6.4, Arithmetic Expansion

       The Base Definitions volume of POSIX.1‐2017, Section 7.3.2, LC_COLLATE, Chapter 8, Environment Variables, Section 9.3, Basic Regular Expressions, Section 12.2, Utility Syntax Guidelines

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                           EXPR(1P)
expr(n)                                                                                    Tcl Built-In Commands                                                                                   expr(n)

__________________________________________________________________________________________________________________________________________________________________________________________________________

NAME
       expr - Evaluate an expression

SYNOPSIS
       expr arg ?arg arg ...?
__________________________________________________________________________________________________________________________________________________________________________________________________________

DESCRIPTION
       Concatenates  args (adding separator spaces between them), evaluates the result as a Tcl expression, and returns the value.  The operators permitted in Tcl expressions include a subset of the op‐
       erators permitted in C expressions.  For those operators common to both Tcl and C, Tcl applies the same meaning and precedence as the corresponding C operators.  Expressions almost  always  yield
       numeric results (integer or floating-point values).  For example, the expression

              expr 8.2 + 6

       evaluates  to  14.2.  Tcl expressions differ from C expressions in the way that operands are specified.  Also, Tcl expressions support non-numeric operands and string comparisons, as well as some
       additional operators not found in C.

   OPERANDS
       A Tcl expression consists of a combination of operands, operators, parentheses and commas.  White space may be used between the operands and operators and parentheses (or commas); it  is  ignored
       by  the  expression's instructions.  Where possible, operands are interpreted as integer values.  Integer values may be specified in decimal (the normal case), in binary (if the first two charac‐
       ters of the operand are 0b), in octal (if the first two characters of the operand are 0o), or in hexadecimal (if the first two characters of the operand are 0x).  For compatibility with older Tcl
       releases,  an octal integer value is also indicated simply when the first character of the operand is 0, whether or not the second character is also o.  If an operand does not have one of the in‐
       teger formats given above, then it is treated as a floating-point number if that is possible.  Floating-point numbers may be specified in any of several common formats making use of  the  decimal
       digits,  the  decimal point ., the characters e or E indicating scientific notation, and the sign characters + or -.  For example, all of the following are valid floating-point numbers:  2.1, 3.,
       6e4, 7.91e+16.  Also recognized as floating point values are the strings Inf and NaN making use of any case for each character.  If no numeric interpretation is possible (note  that  all  literal
       operands that are not numeric or boolean must be quoted with either braces or with double quotes), then an operand is left as a string (and only a limited set of operators may be applied to it).

       Operands may be specified in any of the following ways:

       [1]    As a numeric value, either integer or floating-point.

       [2]    As a boolean value, using any form understood by string is boolean.

       [3]    As a Tcl variable, using standard $ notation.  The variable's value will be used as the operand.

       [4]    As a string enclosed in double-quotes.  The expression parser will perform backslash, variable, and command substitutions on the information between the quotes, and use the resulting value
              as the operand

       [5]    As a string enclosed in braces.  The characters between the open brace and matching close brace will be used as the operand without any substitutions.

       [6]    As a Tcl command enclosed in brackets.  The command will be executed and its result will be used as the operand.

       [7]    As a mathematical function whose arguments have any of the above forms for operands, such as sin($x).  See MATH FUNCTIONS below for a discussion of how mathematical functions are handled.

       Where the above substitutions occur (e.g. inside quoted strings), they are performed by the expression's instructions.  However, the command parser may already have performed one round of substi‐
       tution before the expression processor was called.  As discussed below, it is usually best to enclose expressions in braces to prevent the command parser from performing substitutions on the con‐
       tents.

       For some examples of simple expressions, suppose the variable a has the value 3 and the variable b has the value 6.  Then the command on the left side of each of the lines below will produce  the
       value on the right side of the line:

              expr {3.1 + $a}                    6.1
              expr {2 + "$a.$b"}                 5.6
              expr {4*[llength "6 2"]}           8
              expr {{word one} < "word $a"}      0

   OPERATORS
       The  valid operators (most of which are also available as commands in the tcl::mathop namespace; see the mathop(n) manual page for details) are listed below, grouped in decreasing order of prece‐
       dence:

       -  +  ~  !          Unary minus, unary plus, bit-wise NOT, logical NOT.  None of these operators may be applied to string operands, and bit-wise NOT may be applied only to integers.

       **                  Exponentiation.  Valid for any numeric operands.  The maximum exponent value that Tcl can handle if the first number is an integer > 1 is 268435455.

       *  /  %             Multiply, divide, remainder.  None of these operators may be applied to string operands, and remainder may be applied only to integers.  The remainder  will  always  have  the
                           same sign as the divisor and an absolute value smaller than the absolute value of the divisor.

                           When  applied  to  integers, the division and remainder operators can be considered to partition the number line into a sequence of equal-sized adjacent non-overlapping pieces
                           where each piece is the size of the divisor; the division result identifies which piece the divisor lay within, and the remainder result identifies where within that piece the
                           divisor lay. A consequence of this is that the result of “-57 / 10” is always -6, and the result of “-57 % 10” is always 3.

       +  -                Add and subtract.  Valid for any numeric operands.

       <<  >>              Left and right shift.  Valid for integer operands only.  A right shift always propagates the sign bit.

       <  >  <=  >=        Boolean  less,  greater,  less  than  or  equal, and greater than or equal.  Each operator produces 1 if the condition is true, 0 otherwise.  These operators may be applied to
                           strings as well as numeric operands, in which case string comparison is used.

       ==  !=              Boolean equal and not equal.  Each operator produces a zero/one result.  Valid for all operand types.

       eq  ne              Boolean string equal and string not equal.  Each operator produces a zero/one result.  The operand types are interpreted only as strings.

       in  ni              List containment and negated list containment.  Each operator produces a zero/one result and treats its first argument as a string and its second argument as a Tcl list.   The
                           in operator indicates whether the first argument is a member of the second argument list; the ni operator inverts the sense of the result.

       &                   Bit-wise AND.  Valid for integer operands only.

       ^                   Bit-wise exclusive OR.  Valid for integer operands only.

       |                   Bit-wise OR.  Valid for integer operands only.

       &&                  Logical  AND.  Produces a 1 result if both operands are non-zero, 0 otherwise.  Valid for boolean and numeric (integers or floating-point) operands only.  This operator evalu‐
                           ates lazily; it only evaluates its second operand if it must in order to determine its result.

       ||                  Logical OR.  Produces a 0 result if both operands are zero, 1 otherwise.  Valid for boolean and numeric (integers or floating-point) operands only.   This  operator  evaluates
                           lazily; it only evaluates its second operand if it must in order to determine its result.

       x ? y : z           If-then-else,  as  in C.  If x evaluates to non-zero, then the result is the value of y.  Otherwise the result is the value of z.  The x operand must have a boolean or numeric
                           value.  This operator evaluates lazily; it evaluates only one of y or z.

       See the C manual for more details on the results produced by each operator.  The exponentiation operator promotes types like the multiply and divide operators, and produces a result that  is  the
       same  as  the  output of the pow function (after any type conversions.)  All of the binary operators but exponentiation group left-to-right within the same precedence level; exponentiation groups
       right-to-left.  For example, the command

              expr {4*2 < 7}

       returns 0, while

              expr {2**3**2}

       returns 512.

       The &&, ||, and ?: operators have “lazy evaluation”, just as in C, which means that operands are not evaluated if they are not needed to determine the outcome.  For example, in the command

              expr {$v?[a]:[b]}

       only one of “[a]” or “[b]” will actually be evaluated, depending on the value of $v.  Note, however, that this is only true if the entire expression is enclosed  in  braces;   otherwise  the  Tcl
       parser will evaluate both “[a]” and “[b]” before invoking the expr command.

   MATH FUNCTIONS
       When  the expression parser encounters a mathematical function such as sin($x), it replaces it with a call to an ordinary Tcl command in the tcl::mathfunc namespace.  The processing of an expres‐
       sion such as:

              expr {sin($x+$y)}

       is the same in every way as the processing of:

              expr {[tcl::mathfunc::sin [expr {$x+$y}]]}

       which in turn is the same as the processing of:

              tcl::mathfunc::sin [expr {$x+$y}]

       The executor will search for tcl::mathfunc::sin using the usual rules for resolving functions in namespaces. Either ::tcl::mathfunc::sin or [namespace  current]::tcl::mathfunc::sin  will  satisfy
       the request, and others may as well (depending on the current namespace path setting).

       Some mathematical functions have several arguments, separated by commas like in C. Thus:

              expr {hypot($x,$y)}

       ends up as

              tcl::mathfunc::hypot $x $y

       See the mathfunc(n) manual page for the math functions that are available by default.

   TYPES, OVERFLOW, AND PRECISION
       All  internal  computations involving integers are done calling on the LibTomMath multiple precision integer library as required so that all integer calculations are performed exactly.  Note that
       in Tcl releases prior to 8.5, integer calculations were performed with one of the C types long int or Tcl_WideInt, causing implicit range truncation in those calculations where values  overflowed
       the  range of those types.  Any code that relied on these implicit truncations will need to explicitly add int() or wide() function calls to expressions at the points where such truncation is re‐
       quired to take place.

       All internal computations involving floating-point are done with the C type double.  When converting a string to floating-point, exponent overflow is detected and results in the double  value  of
       Inf or -Inf as appropriate.  Floating-point overflow and underflow are detected to the degree supported by the hardware, which is generally pretty reliable.

       Conversion  among  internal  representations for integer, floating-point, and string operands is done automatically as needed.  For arithmetic computations, integers are used until some floating-
       point number is introduced, after which floating-point is used.  For example,

              expr {5 / 4}

       returns 1, while

              expr {5 / 4.0}
              expr {5 / ( [string length "abcd"] + 0.0 )}

       both return 1.25.  Floating-point values are always returned with a “.”  or an “e” so that they will not look like integer values.  For example,

              expr {20.0/5.0}

       returns 4.0, not 4.

   STRING OPERATIONS
       String values may be used as operands of the comparison operators, although the expression evaluator tries to do comparisons as integer or floating-point when it can, i.e., when all arguments  to
       the  operator  allow  numeric  interpretations,  except  in the case of the eq and ne operators.  If one of the operands of a comparison is a string and the other has a numeric value, a canonical
       string representation of the numeric operand value is generated to compare with the string operand.  Canonical string representation for integer values is  a  decimal  string  format.   Canonical
       string representation for floating-point values is that produced by the %g format specifier of Tcl's format command.  For example, the commands

              expr {"0x03" > "2"}
              expr {"0y" > "0x12"}

       both  return 1.  The first comparison is done using integer comparison, and the second is done using string comparison.  Because of Tcl's tendency to treat values as numbers whenever possible, it
       is not generally a good idea to use operators like == when you really want string comparison and the values of the operands could be arbitrary;  it is better in these cases to use the  eq  or  ne
       operators, or the string command instead.

PERFORMANCE CONSIDERATIONS
       Enclose expressions in braces for the best speed and the smallest storage requirements.  This allows the Tcl bytecode compiler to generate the best code.

       As mentioned above, expressions are substituted twice: once by the Tcl parser and once by the expr command.  For example, the commands

              set a 3
              set b {$a + 2}
              expr $b*4

       return 11, not a multiple of 4.  This is because the Tcl parser will first substitute “$a + 2” for the variable b, then the expr command will evaluate the expression “$a + 2*4”.

       Most  expressions  do  not  require  a second round of substitutions.  Either they are enclosed in braces or, if not, their variable and command substitutions yield numbers or strings that do not
       themselves require substitutions.  However, because a few unbraced expressions need two rounds of substitutions, the bytecode compiler must emit additional instructions to handle this  situation.
       The  most  expensive  code  is required for unbraced expressions that contain command substitutions.  These expressions must be implemented by generating new code each time the expression is exe‐
       cuted.

       If it is necessary to include a non-constant expression string within the wider context of an otherwise-constant expression, the most efficient technique is to put the varying part inside  a  re‐
       cursive expr, as this at least allows for the compilation of the outer part, though it does mean that the varying part must itself be evaluated as a separate expression. Thus, in this example the
       result is 20 and the outer expression benefits from fully cached bytecode compilation.

              set a 3
              set b {$a + 2}
              expr {[expr $b] * 4}

       When the expression is unbraced to allow the substitution of a function or operator, consider using the commands documented in the mathfunc(n) or mathop(n) manual pages directly instead.

EXAMPLES
       Define a procedure that computes an “interesting” mathematical function:

              proc tcl::mathfunc::calc {x y} {
                  expr { ($x**2 - $y**2) / exp($x**2 + $y**2) }
              }

       Convert polar coordinates into cartesian coordinates:

              # convert from ($radius,$angle)
              set x [expr { $radius * cos($angle) }]
              set y [expr { $radius * sin($angle) }]

       Convert cartesian coordinates into polar coordinates:

              # convert from ($x,$y)
              set radius [expr { hypot($y, $x) }]
              set angle  [expr { atan2($y, $x) }]

       Print a message describing the relationship of two string values to each other:

              puts "a and b are [expr {$a eq $b ? {equal} : {different}}]"

       Set a variable to whether an environment variable is both defined at all and also set to a true boolean value:

              set isTrue [expr {
                  [info exists ::env(SOME_ENV_VAR)] &&
                  [string is true -strict $::env(SOME_ENV_VAR)]
              }]

       Generate a random integer in the range 0..99 inclusive:

              set randNum [expr { int(100 * rand()) }]

SEE ALSO
       array(n), for(n), if(n), mathfunc(n), mathop(n), namespace(n), proc(n), string(n), Tcl(n), while(n)

KEYWORDS
       arithmetic, boolean, compare, expression, fuzzy comparison

COPYRIGHT
       Copyright © 1993 The Regents of the University of California.
       Copyright © 1994-2000 Sun Microsystems Incorporated.
       Copyright © 2005 Kevin B. Kenny <kennykb@acm.org>. All rights reserved.

Tcl                                                                                                 8.5                                                                                            expr(n)
