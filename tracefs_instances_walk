LIBTRACEFS(3)                                                                                libtracefs Manual                                                                               LIBTRACEFS(3)

NAME
       tracefs_instance_get_name, tracefs_instance_get_trace_dir, tracefs_instances_walk, tracefs_instance_exists, tracefs_instance_get_buffer_size, tracefs_instance_set_buffer_size - Helper functions
       for working with tracing instances.

SYNOPSIS
       #include <tracefs.h>

       const char *tracefs_instance_get_name(struct tracefs_instance *instance);
       const char *tracefs_instance_get_trace_dir(struct tracefs_instance *instance);
       int tracefs_instances_walk(int (*callback)(const char *, void *), void *context);
       bool tracefs_instance_exists(const char *name);
       size_t tracefs_instance_get_buffer_size(struct tracefs_instance *instance, int cpu);
       int tracefs_instance_set_buffer_size(struct tracefs_instance *instance, size_t size, int cpu);

DESCRIPTION
       Helper functions for working with trace instances.

       The tracefs_instance_get_name() function returns the name of the given instance. Note that the top instance has no name, the function returns NULL for it.

       The tracefs_instance_get_trace_dir() function returns the tracing directory, where the given instance is configured.

       The tracefs_instances_walk() function walks through all configured tracing instances in the system and calls callback for each one of them. The context argument is passed to the callback,
       together with the instance name. If the callback returns non-zero, the iteration stops. Note, the callback is not called for the top top instance.

       The tracefs_instance_exists() function checks if an instance with the given name exists in the system.

       The tracefs_instace_get_buffer_size() returns the size of the ring buffer. If cpu is negative, it returns the total size of all the per CPU ring buffers, otherwise it returns the size of the per
       CPU ring buffer for cpu.

       The tracefs_instance_set_buffer_size() function sets the size of the ring buffer. If cpu is negative, then it sets all the per CPU ring buffers to size (note the total size is the number of CPUs
       * size). If cpu is specified, then it only sets the size of the per CPU ring buffer.

RETURN VALUE
       The tracefs_instance_get_name() returns a string or NULL in case of the top instance. The returned string must not be freed.

       The tracefs_instance_get_trace_dir() returns a string or NULL in case of an error. The returned string must not be freed.

       The tracefs_instances_walk() function returns 0, if all instances were iterated, 1 if the iteration was stopped by the callback, or -1 in case of an error.

       The tracefs_instance_exists() returns true if an instance with the given name exists in the system or false otherwise.

       The tracefs_instance_get_buffer_size() returns the size of the ring buffer depending on the cpu value passed in, or -1 on error.

       The tracefs_instance_set_buffer_size() returns zero on success and -1 on error.

EXAMPLE
           #include <tracefs.h>

           struct tracefs_instance *inst;
           ....
           char *name = tracefs_instance_get_name(inst);
                   if(name) {
                           /* Got name of the instance */
                   }
           char *dir = tracefs_instance_get_trace_dir(inst);
                   if(dir) {
                           /* Got tracing directory of the instance */
                   }
           ...
           static int instance_walk(char *name, void *context)
           {
                   /* Got instance with name */
                   return 0;
           }
           ...
                   if (tracefs_instances_walk(instance_walk, NULL) < 0) {
                           /* Error walking through the instances */
                   }
           ...
                   if (tracefs_instance_exists("foo")) {
                           /* There is instance with name foo in the system */
                   } else {
                           /* There is no instance with name foo in the system */
                   }

FILES
           tracefs.h
                   Header file to include in order to have access to the library APIs.
           -ltracefs
                   Linker switch to add when building a program that uses the library.

SEE ALSO
       libtracefs(3), libtraceevent(3), trace-cmd(1)

AUTHOR
           Steven Rostedt <rostedt@goodmis.org[1]>
           Tzvetomir Stoyanov <tz.stoyanov@gmail.com[2]>

REPORTING BUGS
       Report bugs to <linux-trace-devel@vger.kernel.org[3]>

LICENSE
       libtracefs is Free Software licensed under the GNU LGPL 2.1

RESOURCES
       https://git.kernel.org/pub/scm/libs/libtrace/libtracefs.git/

COPYING
       Copyright (C) 2020 VMware, Inc. Free use of this software is granted under the terms of the GNU Public License (GPL).

NOTES
        1. rostedt@goodmis.org
           mailto:rostedt@goodmis.org

        2. tz.stoyanov@gmail.com
           mailto:tz.stoyanov@gmail.com

        3. linux-trace-devel@vger.kernel.org
           mailto:linux-trace-devel@vger.kernel.org

libtracefs 1.6.4                                                                                03/17/2023                                                                                   LIBTRACEFS(3)
