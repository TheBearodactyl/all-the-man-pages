__gnu_debug::_Safe_local_iterator_base(3)                                                Library Functions Manual                                                __gnu_debug::_Safe_local_iterator_base(3)

NAME
       __gnu_debug::_Safe_local_iterator_base - Basic functionality for a safe iterator.

SYNOPSIS
       #include <safe_unordered_base.h>

       Inherits __gnu_debug::_Safe_iterator_base.

       Inherited by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >.

   Public Member Functions
       bool _M_attached_to (const _Safe_sequence_base *__seq) const
       bool _M_can_compare (const _Safe_iterator_base &__x) const  throw ()
       void _M_invalidate ()
       void _M_reset ()  throw ()
       bool _M_singular () const  throw ()
       void _M_unlink ()  throw ()

   Public Attributes
       _Safe_iterator_base * _M_next
       _Safe_iterator_base * _M_prior
       _Safe_sequence_base * _M_sequence
       unsigned int _M_version

   Protected Member Functions
       _Safe_local_iterator_base ()
       _Safe_local_iterator_base (const _Safe_local_iterator_base &__x, bool __constant)
       _Safe_local_iterator_base (const _Safe_sequence_base *__seq, bool __constant)
       void _M_attach (_Safe_sequence_base *__seq, bool __constant)
       void _M_attach_single (_Safe_sequence_base *__seq, bool __constant)  throw ()
       void _M_detach ()
       void _M_detach_single ()  throw ()
       _Safe_unordered_container_base * _M_get_container () const noexcept
       __gnu_cxx::__mutex & _M_get_mutex ()  throw ()

Detailed Description
       Basic functionality for a safe iterator.

       The _Safe_local_iterator_base base class implements the functionality of a safe local iterator that is not specific to a particular iterator type. It contains a pointer back to the container it
       references along with iterator version information and pointers to form a doubly-linked list of local iterators referenced by the container.

       This class must not perform any operations that can throw an exception, or the exception guarantees of derived iterators will be broken.

       Definition at line 50 of file safe_unordered_base.h.

Constructor & Destructor Documentation
   __gnu_debug::_Safe_local_iterator_base::_Safe_local_iterator_base () [inline],  [protected]
       Initializes the iterator and makes it singular.

       Definition at line 54 of file safe_unordered_base.h.

   __gnu_debug::_Safe_local_iterator_base::_Safe_local_iterator_base (const _Safe_sequence_base * __seq, bool __constant) [inline],  [protected]
       Initialize the iterator to reference the container pointed to by __seq. __constant is true when we are initializing a constant local iterator, and false if it is a mutable local iterator. Note
       that __seq may be NULL, in which case the iterator will be singular. Otherwise, the iterator will reference __seq and be nonsingular.

       Definition at line 64 of file safe_unordered_base.h.

       References _M_attach().

   __gnu_debug::_Safe_local_iterator_base::_Safe_local_iterator_base (const _Safe_local_iterator_base & __x, bool __constant) [inline],  [protected]
       Initializes the iterator to reference the same container that __x does. __constant is true if this is a constant iterator, and false if it is mutable.

       Definition at line 70 of file safe_unordered_base.h.

       References _M_attach(), and __gnu_debug::_Safe_iterator_base::_M_sequence.

   __gnu_debug::_Safe_local_iterator_base::~_Safe_local_iterator_base () [inline],  [protected]
       Definition at line 74 of file safe_unordered_base.h.

Member Function Documentation
   void __gnu_debug::_Safe_local_iterator_base::_M_attach (_Safe_sequence_base * __seq, bool __constant) [protected]
       Attaches this iterator to the given container, detaching it from whatever container it was attached to originally. If the new container is the NULL pointer, the iterator is left unattached.

       Referenced by _Safe_local_iterator_base(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_attach().

   void __gnu_debug::_Safe_local_iterator_base::_M_attach_single (_Safe_sequence_base * __seq, bool __constant) [protected]
       Likewise, but not thread-safe.

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_attach_single().

   bool __gnu_debug::_Safe_iterator_base::_M_attached_to (const _Safe_sequence_base * __seq) const [inline],  [inherited]
       Determines if we are attached to the given sequence.

       Definition at line 131 of file safe_base.h.

       References __gnu_debug::_Safe_iterator_base::_M_sequence.

   bool __gnu_debug::_Safe_iterator_base::_M_can_compare (const _Safe_iterator_base & __x) const [inherited]
       Can we compare this iterator to the given iterator __x? Returns true if both iterators are nonsingular and reference the same sequence.

   void __gnu_debug::_Safe_local_iterator_base::_M_detach () [protected]
       Detach the iterator for whatever container it is attached to, if any.

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

   void __gnu_debug::_Safe_local_iterator_base::_M_detach_single () [protected]
       Likewise, but not thread-safe.

   __gnu_cxx::__mutex & __gnu_debug::_Safe_iterator_base::_M_get_mutex () [protected],  [inherited]
       For use in _Safe_iterator.

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator++(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category >::operator++(), __gnu_debug::_Safe_iterator<
       _Iterator, _Sequence, _Category >::operator=(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

   void __gnu_debug::_Safe_iterator_base::_M_invalidate () [inline],  [inherited]
       Invalidate the iterator, making it singular.

       Definition at line 146 of file safe_base.h.

       References __gnu_debug::_Safe_iterator_base::_M_version.

   void __gnu_debug::_Safe_iterator_base::_M_reset () [inherited]
       Reset all member variables

   bool __gnu_debug::_Safe_iterator_base::_M_singular () const [inherited]
       Is this iterator singular?

       Referenced by __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category >::_Safe_iterator(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_Safe_local_iterator(),
       __gnu_debug::__check_singular_aux(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category >::_M_dereferenceable(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence
       >::_M_dereferenceable(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category >::_M_incrementable(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_incrementable(), and
       __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

   void __gnu_debug::_Safe_iterator_base::_M_unlink () [inline],  [inherited]
       Unlink itself

       Definition at line 155 of file safe_base.h.

       References __gnu_debug::_Safe_iterator_base::_M_next, and __gnu_debug::_Safe_iterator_base::_M_prior.

Member Data Documentation
   _Safe_iterator_base* __gnu_debug::_Safe_iterator_base::_M_next [inherited]
       Pointer to the next iterator in the sequence's list of iterators. Only valid when _M_sequence != NULL.

       Definition at line 74 of file safe_base.h.

       Referenced by __gnu_debug::_Safe_sequence< _SafeSequence >::_M_invalidate_if(), __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_from_if(), and __gnu_debug::_Safe_iterator_base::_M_unlink().

   _Safe_iterator_base* __gnu_debug::_Safe_iterator_base::_M_prior [inherited]
       Pointer to the previous iterator in the sequence's list of iterators. Only valid when _M_sequence != NULL.

       Definition at line 70 of file safe_base.h.

       Referenced by __gnu_debug::_Safe_sequence< _SafeSequence >::_M_invalidate_if(), __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_from_if(), and __gnu_debug::_Safe_iterator_base::_M_unlink().

   _Safe_sequence_base* __gnu_debug::_Safe_iterator_base::_M_sequence [inherited]
       The sequence this iterator references; may be NULL to indicate a singular iterator.

       Definition at line 57 of file safe_base.h.

       Referenced by __gnu_debug::_Safe_iterator_base::_Safe_iterator_base(), _Safe_local_iterator_base(), __gnu_debug::_Safe_iterator_base::_M_attached_to(), __gnu_debug::_Safe_sequence< _Sequence
       >::_M_transfer_from_if(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator++(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category >::operator++(),
       __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category >::operator=(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

   unsigned int __gnu_debug::_Safe_iterator_base::_M_version [inherited]
       The version number of this iterator. The sentinel value 0 is used to indicate an invalidated iterator (i.e., one that is singular because of an operation on the container). This version number
       must equal the version number in the sequence referenced by _M_sequence for the iterator to be non-singular.

       Definition at line 66 of file safe_base.h.

       Referenced by __gnu_debug::_Safe_iterator_base::_M_invalidate(), __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_from_if(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category
       >::operator=(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                                                                                     Wed Feb 1 2023                                                     __gnu_debug::_Safe_local_iterator_base(3)
