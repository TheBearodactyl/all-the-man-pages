FTRUNCATE(3P)                                                                            POSIX Programmer's Manual                                                                           FTRUNCATE(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       ftruncate — truncate a file to a specified length

SYNOPSIS
       #include <unistd.h>

       int ftruncate(int fildes, off_t length);

DESCRIPTION
       If fildes is not a valid file descriptor open for writing, the ftruncate() function shall fail.

       If fildes refers to a regular file, the ftruncate() function shall cause the size of the file to be truncated to length.  If the size of the file previously exceeded length, the extra data  shall
       no  longer  be available to reads on the file. If the file previously was smaller than this size, ftruncate() shall increase the size of the file. If the file size is increased, the extended area
       shall appear as if it were zero-filled. The value of the seek pointer shall not be modified by a call to ftruncate().

       Upon successful completion, if fildes refers to a regular file, ftruncate() shall mark for update the last data modification and last file status change timestamps of the file and the S_ISUID and
       S_ISGID bits of the file mode may be cleared. If the ftruncate() function is unsuccessful, the file is unaffected.

       If the request would cause the file size to exceed the soft file size limit for the process, the request shall fail and the implementation shall generate the SIGXFSZ signal for the thread.

       If fildes refers to a directory, ftruncate() shall fail.

       If fildes refers to any other file type, except a shared memory object, the result is unspecified.

       If fildes refers to a shared memory object, ftruncate() shall set the size of the shared memory object to length.

       If  the  effect of ftruncate() is to decrease the size of a memory mapped file or a shared memory object and whole pages beyond the new end were previously mapped, then the whole pages beyond the
       new end shall be discarded.

       References to discarded pages shall result in the generation of a SIGBUS signal.

       If the effect of ftruncate() is to increase the size of a memory object, it is unspecified whether the contents of any mapped pages between the old end-of-file and the new are flushed to the  un‐
       derlying object.

RETURN VALUE
       Upon successful completion, ftruncate() shall return 0; otherwise, -1 shall be returned and errno set to indicate the error.

ERRORS
       The ftruncate() function shall fail if:

       EINTR  A signal was caught during execution.

       EINVAL The length argument was less than 0.

       EFBIG or EINVAL
              The length argument was greater than the maximum file size.

       EFBIG  The file is a regular file and length is greater than the offset maximum established in the open file description associated with fildes.

       EIO    An I/O error occurred while reading from or writing to a file system.

       EBADF or EINVAL
              The fildes argument is not a file descriptor open for writing.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       open(), truncate()

       The Base Definitions volume of POSIX.1‐2017, <unistd.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                      FTRUNCATE(3P)
truncate(2)                                                                                 System Calls Manual                                                                                truncate(2)

NAME
       truncate, ftruncate - truncate a file to a specified length

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       int truncate(const char *path, off_t length);
       int ftruncate(int fd, off_t length);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       truncate():
           _XOPEN_SOURCE >= 500
               || /* Since glibc 2.12: */ _POSIX_C_SOURCE >= 200809L
               || /* glibc <= 2.19: */ _BSD_SOURCE

       ftruncate():
           _XOPEN_SOURCE >= 500
               || /* Since glibc 2.3.5: */ _POSIX_C_SOURCE >= 200112L
               || /* glibc <= 2.19: */ _BSD_SOURCE

DESCRIPTION
       The truncate() and ftruncate() functions cause the regular file named by path or referenced by fd to be truncated to a size of precisely length bytes.

       If the file previously was larger than this size, the extra data is lost.  If the file previously was shorter, it is extended, and the extended part reads as null bytes ('\0').

       The file offset is not changed.

       If the size changed, then the st_ctime and st_mtime fields (respectively, time of last status change and time of last modification; see inode(7)) for the file are updated, and the set-user-ID and
       set-group-ID mode bits may be cleared.

       With ftruncate(), the file must be open for writing; with truncate(), the file must be writable.

RETURN VALUE
       On success, zero is returned.  On error, -1 is returned, and errno is set to indicate the error.

ERRORS
       For truncate():

       EACCES Search permission is denied for a component of the path prefix, or the named file is not writable by the user.  (See also path_resolution(7).)

       EFAULT The argument path points outside the process's allocated address space.

       EFBIG  The argument length is larger than the maximum file size. (XSI)

       EINTR  While blocked waiting to complete, the call was interrupted by a signal handler; see fcntl(2) and signal(7).

       EINVAL The argument length is negative or larger than the maximum file size.

       EIO    An I/O error occurred updating the inode.

       EISDIR The named file is a directory.

       ELOOP  Too many symbolic links were encountered in translating the pathname.

       ENAMETOOLONG
              A component of a pathname exceeded 255 characters, or an entire pathname exceeded 1023 characters.

       ENOENT The named file does not exist.

       ENOTDIR
              A component of the path prefix is not a directory.

       EPERM  The underlying filesystem does not support extending a file beyond its current size.

       EPERM  The operation was prevented by a file seal; see fcntl(2).

       EROFS  The named file resides on a read-only filesystem.

       ETXTBSY
              The file is an executable file that is being executed.

       For ftruncate() the same errors apply, but instead of things that can be wrong with path, we now have things that can be wrong with the file descriptor, fd:

       EBADF  fd is not a valid file descriptor.

       EBADF or EINVAL
              fd is not open for writing.

       EINVAL fd does not reference a regular file or a POSIX shared memory object.

       EINVAL or EBADF
              The file descriptor fd is not open for writing.  POSIX permits, and portable applications should handle, either error for this case.  (Linux produces EINVAL.)

VERSIONS
       The details in DESCRIPTION are for XSI-compliant systems.  For non-XSI-compliant systems, the POSIX standard allows two behaviors for ftruncate() when length exceeds the file  length  (note  that
       truncate()  is not specified at all in such an environment): either returning an error, or extending the file.  Like most UNIX implementations, Linux follows the XSI requirement when dealing with
       native filesystems.  However, some nonnative filesystems do not permit truncate() and ftruncate() to be used to extend a file beyond its current length: a notable example on Linux is VFAT.

       On some 32-bit architectures, the calling signature for these system calls differ, for the reasons described in syscall(2).

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, 4.4BSD, SVr4 (first appeared in 4.2BSD).

       The original Linux truncate() and ftruncate() system calls were not designed to handle large file offsets.  Consequently, Linux 2.4 added truncate64() and ftruncate64() system calls  that  handle
       large files.  However, these details can be ignored by applications using glibc, whose wrapper functions transparently employ the more recent system calls where they are available.

NOTES
       ftruncate() can also be used to set the size of a POSIX shared memory object; see shm_open(3).

BUGS
       A  header  file  bug  in glibc 2.12 meant that the minimum value of _POSIX_C_SOURCE required to expose the declaration of ftruncate() was 200809L instead of 200112L.  This has been fixed in later
       glibc versions.

SEE ALSO
       truncate(1), open(2), stat(2), path_resolution(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                     truncate(2)
