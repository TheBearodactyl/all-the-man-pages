fnmatch(3)                                                                               Library Functions Manual                                                                               fnmatch(3)

NAME
       fnmatch - match filename or pathname

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <fnmatch.h>

       int fnmatch(const char *pattern, const char *string, int flags);

DESCRIPTION
       The fnmatch() function checks whether the string argument matches the pattern argument, which is a shell wildcard pattern (see glob(7)).

       The flags argument modifies the behavior; it is the bitwise OR of zero or more of the following flags:

       FNM_NOESCAPE
              If this flag is set, treat backslash as an ordinary character, instead of an escape character.

       FNM_PATHNAME
              If  this  flag  is  set, match a slash in string only with a slash in pattern and not by an asterisk (*) or a question mark (?) metacharacter, nor by a bracket expression ([]) containing a
              slash.

       FNM_PERIOD
              If this flag is set, a leading period in string has to be matched exactly by a period in pattern.  A period is considered to be leading if it is the first character in string, or  if  both
              FNM_PATHNAME is set and the period immediately follows a slash.

       FNM_FILE_NAME
              This is a GNU synonym for FNM_PATHNAME.

       FNM_LEADING_DIR
              If  this flag (a GNU extension) is set, the pattern is considered to be matched if it matches an initial segment of string which is followed by a slash.  This flag is mainly for the inter‐
              nal use of glibc and is implemented only in certain cases.

       FNM_CASEFOLD
              If this flag (a GNU extension) is set, the pattern is matched case-insensitively.

       FNM_EXTMATCH
              If this flag (a GNU extension) is set, extended patterns are supported, as introduced by 'ksh' and now supported by other shells.  The extended format is as follows, with pattern-list  be‐
              ing a '|' separated list of patterns.

       '?(pattern-list)'
              The pattern matches if zero or one occurrences of any of the patterns in the pattern-list match the input string.

       '*(pattern-list)'
              The pattern matches if zero or more occurrences of any of the patterns in the pattern-list match the input string.

       '+(pattern-list)'
              The pattern matches if one or more occurrences of any of the patterns in the pattern-list match the input string.

       '@(pattern-list)'
              The pattern matches if exactly one occurrence of any of the patterns in the pattern-list match the input string.

       '!(pattern-list)'
              The pattern matches if the input string cannot be matched with any of the patterns in the pattern-list.

RETURN VALUE
       Zero if string matches pattern, FNM_NOMATCH if there is no match or another nonzero value if there is an error.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬────────────────────┐
       │Interface                                                                                                                                                    │ Attribute     │ Value              │
       ├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼────────────────────┤
       │fnmatch()                                                                                                                                                    │ Thread safety │ MT-Safe env locale │
       └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴────────────────────┘

STANDARDS
       fnmatch()
              POSIX.1-2008.

       FNM_FILE_NAME
       FNM_LEADING_DIR
       FNM_CASEFOLD
              GNU.

HISTORY
       fnmatch()
              POSIX.1-2001, POSIX.2.

SEE ALSO
       sh(1), glob(3), scandir(3), wordexp(3), glob(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                      fnmatch(3)
FNMATCH(3am)                                                                             GNU Awk Extension Modules                                                                            FNMATCH(3am)

NAME
       fnmatch - compare a string against a filename wildcard

SYNOPSIS
       @load "fnmatch"

       result = fnmatch(pattern, string, flags)

DESCRIPTION
       The  fnmatch  extension  provides  an AWK interface to the fnmatch(3) routine.  It adds a single function named fnmatch(), one predefined variable (FNM_NOMATCH), and an array of flag values named
       FNM.

       The first argument is the filename wildcard to match, the second is the filename string, and the third is either zero, or the bitwise OR of one or more of the flags in the FNM array.

       The return value is zero on success, FNM_NOMATCH if the string did not match the pattern, or a different non-zero value if an error occurred.

       The flags are follows:

       FNM["CASEFOLD"]
              Corresponds to the FNM_CASEFOLD flag as defined in fnmatch(3).

       FNM["FILE_NAME"]
              Corresponds to the FNM_FILE_NAME flag as defined in fnmatch(3).

       FNM["LEADING_DIR"]
              Corresponds to the FNM_LEADING_DIR flag as defined in fnmatch(3).

       FNM["NOESCAPE"]
              Corresponds to the FNM_NOESCAPE flag as defined in fnmatch(3).

       FNM["PATHNAME"]
              Corresponds to the FNM_PATHNAME flag as defined in fnmatch(3).

       FNM["PERIOD"]
              Corresponds to the FNM_PERIOD flag as defined in fnmatch(3).

NOTES
       Nothing prevents AWK code from changing the predefined variable FNM_NOMATCH, but doing so may cause strange results.

EXAMPLE
       @load "fnmatch"
       ...
       flags = or(FNM["PERIOD"], FNM["NOESCAPE"])
       if (fnmatch("*.a", "foo.c", flags) == FNM_NOMATCH)
            print "no match"

SEE ALSO
       GAWK: Effective AWK Programming, filefuncs(3am), fork(3am), inplace(3am), ordchr(3am), readdir(3am), readfile(3am), revoutput(3am), rwarray(3am), time(3am).

       fnmatch(3).

AUTHOR
       Arnold Robbins, arnold@skeeve.com.

COPYING PERMISSIONS
       Copyright © 2012, 2013, 2018, Free Software Foundation, Inc.

       Permission is granted to make and distribute verbatim copies of this manual page provided the copyright notice and this permission notice are preserved on all copies.

       Permission is granted to copy and distribute modified versions of this manual page under the conditions for verbatim copying, provided that the entire resulting derived work is distributed  under
       the terms of a permission notice identical to this one.

       Permission  is  granted  to copy and distribute translations of this manual page into another language, under the above conditions for modified versions, except that this permission notice may be
       stated in a translation approved by the Foundation.

Free Software Foundation                                                                        Feb 21 2018                                                                                   FNMATCH(3am)
FNMATCH(3P)                                                                              POSIX Programmer's Manual                                                                             FNMATCH(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       fnmatch — match a filename string or a pathname

SYNOPSIS
       #include <fnmatch.h>

       int fnmatch(const char *pattern, const char *string, int flags);

DESCRIPTION
       The fnmatch() function shall match patterns as described in the Shell and Utilities volume of POSIX.1‐2017, Section 2.13.1, Patterns Matching a  Single  Character  and  Section  2.13.2,  Patterns
       Matching Multiple Characters.  It checks the string specified by the string argument to see if it matches the pattern specified by the pattern argument.

       The  flags argument shall modify the interpretation of pattern and string.  It is the bitwise-inclusive OR of zero or more of the flags defined in <fnmatch.h>.  If the FNM_PATHNAME flag is set in
       flags, then a <slash> character ('/') in string shall be explicitly matched by a <slash> in pattern; it shall not be matched by either the <asterisk> or <question-mark> special characters, nor by
       a bracket expression. If the FNM_PATHNAME flag is not set, the <slash> character shall be treated as an ordinary character.

       If FNM_NOESCAPE is not set in flags, a <backslash> character in pattern followed by any other character shall match that second character in string.  In particular, "\\" shall match a <backslash>
       in string.  If pattern ends with an unescaped <backslash>, fnmatch() shall return a non-zero value (indicating either no match or an error).  If FNM_NOESCAPE is set, a <backslash> character shall
       be treated as an ordinary character.

       If  FNM_PERIOD  is  set  in  flags,  then  a leading <period> ('.')  in string shall match a <period> in pattern; as described by rule 2 in the Shell and Utilities volume of POSIX.1‐2017, Section
       2.13.3, Patterns Used for Filename Expansion where the location of ``leading'' is indicated by the value of FNM_PATHNAME:

        *  If FNM_PATHNAME is set, a <period> is ``leading'' if it is the first character in string or if it immediately follows a <slash>.

        *  If FNM_PATHNAME is not set, a <period> is ``leading'' only if it is the first character of string.

       If FNM_PERIOD is not set, then no special restrictions are placed on matching a period.

RETURN VALUE
       If string matches the pattern specified by pattern, then fnmatch() shall return 0. If there is no match, fnmatch() shall return FNM_NOMATCH, which is defined in <fnmatch.h>.  If an error  occurs,
       fnmatch() shall return another non-zero value.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       The  fnmatch()  function has two major uses. It could be used by an application or utility that needs to read a directory and apply a pattern against each entry. The find utility is an example of
       this. It can also be used by the pax utility to process its pattern operands, or by applications that need to match strings in a similar manner.

       The name fnmatch() is intended to imply filename match, rather than pathname match. The default action of this function is to match filename strings, rather than pathnames, since it gives no spe‐
       cial  significance  to  the <slash> character. With the FNM_PATHNAME flag, fnmatch() does match pathnames, but without tilde expansion, parameter expansion, or special treatment for a <period> at
       the beginning of a filename.

RATIONALE
       This function replaced the REG_FILENAME flag of regcomp() in early proposals of this volume of POSIX.1‐2017. It provides virtually the same functionality as the regcomp() and regexec()  functions
       using the REG_FILENAME and REG_FSLASH flags (the REG_FSLASH flag was proposed for regcomp(), and would have had the opposite effect from FNM_PATHNAME), but with a simpler function and less system
       overhead.

FUTURE DIRECTIONS
       None.

SEE ALSO
       glob(), Section 2.6, Word Expansions

       The Base Definitions volume of POSIX.1‐2017, <fnmatch.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                        FNMATCH(3P)
