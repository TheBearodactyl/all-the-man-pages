sigqueue(3)                Library Functions Manual                sigqueue(3)

NAME
       sigqueue - queue a signal and data to a process

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <signal.h>

       int sigqueue(pid_t pid, int sig, const union sigval value);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       sigqueue():
           _POSIX_C_SOURCE >= 199309L

DESCRIPTION
       sigqueue()  sends  the signal specified in sig to the process whose PID
       is given in pid.  The permissions required to send  a  signal  are  the
       same  as for kill(2).  As with kill(2), the null signal (0) can be used
       to check if a process with a given PID exists.

       The value argument is used to specify an accompanying item of data (ei‐
       ther an integer or a pointer value) to be sent with the signal, and has
       the following type:

           union sigval {
               int   sival_int;
               void *sival_ptr;
           };

       If the receiving process has installed a handler for this signal  using
       the  SA_SIGINFO  flag to sigaction(2), then it can obtain this data via
       the si_value field of the siginfo_t structure passed as the second  ar‐
       gument  to  the handler.  Furthermore, the si_code field of that struc‐
       ture will be set to SI_QUEUE.

RETURN VALUE
       On success, sigqueue() returns 0, indicating that the signal  was  suc‐
       cessfully  queued  to the receiving process.  Otherwise, -1 is returned
       and errno is set to indicate the error.

ERRORS
       EAGAIN The limit of signals which may be queued has been reached.  (See
              signal(7) for further information.)

       EINVAL sig was invalid.

       EPERM  The  process  does not have permission to send the signal to the
              receiving process.  For the required permissions, see kill(2).

       ESRCH  No process has a PID matching pid.

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │sigqueue()                                  │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
   C library/kernel differences
       On Linux, sigqueue() is implemented using the rt_sigqueueinfo(2) system
       call.  The system call differs in its third argument, which is the sig‐
       info_t  structure that will be supplied to the receiving process's sig‐
       nal handler or returned  by  the  receiving  process's  sigtimedwait(2)
       call.   Inside  the  glibc sigqueue() wrapper, this argument, uinfo, is
       initialized as follows:

           uinfo.si_signo = sig;      /* Argument supplied to sigqueue() */
           uinfo.si_code = SI_QUEUE;
           uinfo.si_pid = getpid();   /* Process ID of sender */
           uinfo.si_uid = getuid();   /* Real UID of sender */
           uinfo.si_value = val;      /* Argument supplied to sigqueue() */

STANDARDS
       POSIX.1-2008.

HISTORY
       Linux 2.2.  POSIX.1-2001.

NOTES
       If this function results in the sending of a signal to the process that
       invoked  it, and that signal was not blocked by the calling thread, and
       no other threads were willing to handle this signal (either  by  having
       it  unblocked,  or  by  waiting for it using sigwait(3)), then at least
       some signal must be delivered to this thread before this  function  re‐
       turns.

SEE ALSO
       kill(2),       rt_sigqueueinfo(2),       sigaction(2),       signal(2),
       pthread_sigqueue(3), sigwait(3), signal(7)

Linux man-pages 6.04              2023-03-30                       sigqueue(3)
SIGQUEUE(3P)               POSIX Programmer's Manual              SIGQUEUE(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       sigqueue — queue a signal to a process

SYNOPSIS
       #include <signal.h>

       int sigqueue(pid_t pid, int signo, union sigval value);

DESCRIPTION
       The sigqueue() function shall cause the signal specified by signo to be
       sent with the value specified by value to the process specified by pid.
       If signo is zero (the null signal), error checking is performed but  no
       signal  is  actually sent. The null signal can be used to check the va‐
       lidity of pid.

       The conditions required for a process to have  permission  to  queue  a
       signal to another process are the same as for the kill() function.

       The  sigqueue() function shall return immediately. If SA_SIGINFO is set
       for signo and if the resources were available to queue the signal,  the
       signal shall be queued and sent to the receiving process. If SA_SIGINFO
       is not set for signo, then signo shall be sent at least once to the re‐
       ceiving  process;  it is unspecified whether value shall be sent to the
       receiving process as a result of this call.

       If the value of pid causes  signo  to  be  generated  for  the  sending
       process,  and  if signo is not blocked for the calling thread and if no
       other thread has signo unblocked or is waiting in a sigwait()  function
       for signo, either signo or at least the pending, unblocked signal shall
       be delivered to the calling thread before the sigqueue()  function  re‐
       turns.  Should  any  multiple  pending signals in the range SIGRTMIN to
       SIGRTMAX be selected for delivery, it shall be the lowest numbered one.
       The  selection  order between realtime and non-realtime signals, or be‐
       tween multiple pending non-realtime signals, is unspecified.

RETURN VALUE
       Upon successful  completion,  the  specified  signal  shall  have  been
       queued,  and the sigqueue() function shall return a value of zero. Oth‐
       erwise, the function shall return a value of -1 and set errno to  indi‐
       cate the error.

ERRORS
       The sigqueue() function shall fail if:

       EAGAIN No  resources are available to queue the signal. The process has
              already queued {SIGQUEUE_MAX} signals that are still pending  at
              the  receiver(s),  or  a system-wide resource limit has been ex‐
              ceeded.

       EINVAL The value of the signo argument is  an  invalid  or  unsupported
              signal number.

       EPERM  The  process  does  not  have appropriate privileges to send the
              signal to the receiving process.

       ESRCH  The process pid does not exist.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       The sigqueue() function allows an application to queue a realtime  sig‐
       nal to itself or to another process, specifying the application-defined
       value. This is common practice in realtime applications on existing re‐
       altime  systems.   It  was felt that specifying another function in the
       sig...  name space already carved out for signals was preferable to ex‐
       tending the interface to kill().

       Such a function became necessary when the put/get event function of the
       message queues was removed. It should  be  noted  that  the  sigqueue()
       function  implies reduced performance in a security-conscious implemen‐
       tation as the access permissions between the sender and  receiver  have
       to  be  checked  on  each  send  when the pid is resolved into a target
       process. Such access checks were necessary only at message  queue  open
       in the previous interface.

       The  standard  developers required that sigqueue() have the same seman‐
       tics with respect to the null signal as kill(), and that the same  per‐
       mission checking be used. But because of the difficulty of implementing
       the ``broadcast'' semantic of kill() (for example, to  process  groups)
       and  the  interaction  with  resource allocation, this semantic was not
       adopted. The sigqueue() function queues a signal to  a  single  process
       specified by the pid argument.

       The  sigqueue()  function  can  fail if the system has insufficient re‐
       sources to queue the signal. An explicit limit on the number of  queued
       signals  that  a  process could send was introduced. While the limit is
       ``per-sender'', this volume of POSIX.1‐2017 does not specify  that  the
       resources be part of the state of the sender. This would require either
       that the sender be maintained after exit until all signals that it  had
       sent  to other processes were handled or that all such signals that had
       not yet been acted upon be removed from the queue(s) of the  receivers.
       This volume of POSIX.1‐2017 does not preclude this behavior, but an im‐
       plementation that allocated queuing resources from a  system-wide  pool
       (with  per-sender  limits) and that leaves queued signals pending after
       the sender exits is also permitted.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.8.1, Realtime Signals

       The Base Definitions volume of POSIX.1‐2017, <signal.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                         SIGQUEUE(3P)
