std::stack< _Tp, _Sequence Library Functions Mastd::stack< _Tp, _Sequence >(3)

NAME
       std::stack< _Tp, _Sequence > - A standard container giving FILO
       behavior.

SYNOPSIS
       #include <stack>

   Public Types
       typedef _Sequence::const_reference const_reference
       typedef _Sequence container_type
       typedef _Sequence::reference reference
       typedef _Sequence::size_type size_type
       typedef _Sequence::value_type value_type

   Public Member Functions
       template<typename _Seq  = _Sequence, typename _Requires  = typename
           enable_if<is_default_constructible<_Seq>::value>::type> stack ()
           Default constructor creates no elements.
       stack (_Sequence &&__c)
       template<typename _Alloc , typename _Requires  = _Uses<_Alloc>> stack
           (_Sequence &&__c, const _Alloc &__a)
       template<typename _Alloc , typename _Requires  = _Uses<_Alloc>> stack
           (const _Alloc &__a)
       stack (const _Sequence &__c)
       template<typename _Alloc , typename _Requires  = _Uses<_Alloc>> stack
           (const _Sequence &__c, const _Alloc &__a)
       template<typename _Alloc , typename _Requires  = _Uses<_Alloc>> stack
           (const stack &__q, const _Alloc &__a)
       template<typename _Alloc , typename _Requires  = _Uses<_Alloc>> stack
           (stack &&__q, const _Alloc &__a)
       template<typename... _Args> decltype(auto) emplace (_Args &&... __args)
       bool empty () const
       void pop ()
           Removes first element.
       void push (const value_type &__x)
           Add data to the top of the stack.
       void push (value_type &&__x)
       size_type size () const
       void swap (stack &__s) noexcept(__is_nothrow_swappable< _Sequence
           >::value)
       reference top ()
       const_reference top () const

   Protected Attributes
       _Sequence c

   Friends
       template<typename _Tp1 , typename _Seq1 > bool operator< (const stack<
           _Tp1, _Seq1 > &, const stack< _Tp1, _Seq1 > &)
       template<typename _Tp1 , typename _Seq1 > bool operator== (const stack<
           _Tp1, _Seq1 > &, const stack< _Tp1, _Seq1 > &)

Detailed Description
   template<typename _Tp, typename _Sequence = deque<_Tp>>
       class std::stack< _Tp, _Sequence >"A standard container giving FILO
       behavior.

       Template Parameters
           _Tp Type of element.
           _Sequence Type of underlying sequence, defaults to deque<_Tp>.

       Meets many of the requirements of a container, but does not define
       anything to do with iterators. Very few of the other standard container
       interfaces are defined.

       This is not a true container, but an adaptor. It holds another
       container, and provides a wrapper interface to that container. The
       wrapper is what enforces strict first-in-last-out stack behavior.

       The second template parameter defines the type of the underlying
       sequence/container. It defaults to std::deque, but it can be any type
       that supports back, push_back, and pop_back, such as std::list,
       std::vector, or an appropriate user-defined type.

       Members not found in normal containers are container_type, which is a
       typedef for the second Sequence parameter, and push, pop, and top,
       which are standard stack/FILO operations.

       Definition at line 99 of file stack.

Member Typedef Documentation
   template<typename _Tp , typename _Sequence  = deque<_Tp>> typedef
       _Sequence::const_reference std::stack< _Tp, _Sequence
       >::const_reference
       Definition at line 142 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> typedef _Sequence
       std::stack< _Tp, _Sequence >::container_type
       Definition at line 144 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> typedef
       _Sequence::reference std::stack< _Tp, _Sequence >::reference
       Definition at line 141 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> typedef
       _Sequence::size_type std::stack< _Tp, _Sequence >::size_type
       Definition at line 143 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> typedef
       _Sequence::value_type std::stack< _Tp, _Sequence >::value_type
       Definition at line 140 of file stack.

Constructor & Destructor Documentation
   template<typename _Tp , typename _Sequence  = deque<_Tp>> template<typename
       _Seq  = _Sequence, typename _Requires  = typename
       enable_if<is_default_constructible<_Seq>::value>::type> std::stack<
       _Tp, _Sequence >::stack () [inline]
       Default constructor creates no elements.

       Definition at line 162 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> std::stack< _Tp,
       _Sequence >::stack (const _Sequence & __c) [inline],  [explicit]
       Definition at line 166 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> std::stack< _Tp,
       _Sequence >::stack (_Sequence && __c) [inline],  [explicit]
       Definition at line 170 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> template<typename
       _Alloc , typename _Requires  = _Uses<_Alloc>> std::stack< _Tp,
       _Sequence >::stack (const _Alloc & __a) [inline],  [explicit]
       Definition at line 185 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> template<typename
       _Alloc , typename _Requires  = _Uses<_Alloc>> std::stack< _Tp,
       _Sequence >::stack (const _Sequence & __c, const _Alloc & __a) [inline]
       Definition at line 189 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> template<typename
       _Alloc , typename _Requires  = _Uses<_Alloc>> std::stack< _Tp,
       _Sequence >::stack (_Sequence && __c, const _Alloc & __a) [inline]
       Definition at line 193 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> template<typename
       _Alloc , typename _Requires  = _Uses<_Alloc>> std::stack< _Tp,
       _Sequence >::stack (const stack< _Tp, _Sequence > & __q, const _Alloc &
       __a) [inline]
       Definition at line 197 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> template<typename
       _Alloc , typename _Requires  = _Uses<_Alloc>> std::stack< _Tp,
       _Sequence >::stack (stack< _Tp, _Sequence > && __q, const _Alloc & __a)
       [inline]
       Definition at line 201 of file stack.

Member Function Documentation
   template<typename _Tp , typename _Sequence  = deque<_Tp>>
       template<typename... _Args> decltype(auto) std::stack< _Tp, _Sequence
       >::emplace (_Args &&... __args) [inline]
       Definition at line 271 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> bool std::stack<
       _Tp, _Sequence >::empty () const [inline]
       Returns true if the stack is empty.

       Definition at line 217 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> void std::stack<
       _Tp, _Sequence >::pop () [inline]
       Removes first element. This is a typical stack operation. It shrinks
       the stack by one. The time complexity of the operation depends on the
       underlying sequence.

       Note that no data is returned, and if the first element's data is
       needed, it should be retrieved before pop() is called.

       Definition at line 293 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> void std::stack<
       _Tp, _Sequence >::push (const value_type & __x) [inline]
       Add data to the top of the stack.

       Parameters
           __x Data to be added.

       This is a typical stack operation. The function creates an element at
       the top of the stack and assigns the given data to it. The time
       complexity of the operation depends on the underlying sequence.

       Definition at line 260 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> void std::stack<
       _Tp, _Sequence >::push (value_type && __x) [inline]
       Definition at line 265 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> size_type
       std::stack< _Tp, _Sequence >::size () const [inline]
       Returns the number of elements in the stack.

       Definition at line 223 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> void std::stack<
       _Tp, _Sequence >::swap (stack< _Tp, _Sequence > & __s) [inline],
       [noexcept]
       Definition at line 301 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> reference
       std::stack< _Tp, _Sequence >::top () [inline]
       Returns a read/write reference to the data at the first element of the
       stack.

       Definition at line 232 of file stack.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> const_reference
       std::stack< _Tp, _Sequence >::top () const [inline]
       Returns a read-only (constant) reference to the data at the first
       element of the stack.

       Definition at line 244 of file stack.

Member Data Documentation
   template<typename _Tp , typename _Sequence  = deque<_Tp>> _Sequence
       std::stack< _Tp, _Sequence >::c [protected]
       Definition at line 148 of file stack.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Feb 1 2023 std::stack< _Tp, _Sequence >(3)
