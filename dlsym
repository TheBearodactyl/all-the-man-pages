dlsym(3)                                                                                 Library Functions Manual                                                                                 dlsym(3)

NAME
       dlsym, dlvsym - obtain address of a symbol in a shared object or executable

LIBRARY
       Dynamic linking library (libdl, -ldl)

SYNOPSIS
       #include <dlfcn.h>

       void *dlsym(void *restrict handle, const char *restrict symbol);

       #define _GNU_SOURCE
       #include <dlfcn.h>

       void *dlvsym(void *restrict handle, const char *restrict symbol,
                    const char *restrict version);

DESCRIPTION
       The  function  dlsym()  takes a "handle" of a dynamic loaded shared object returned by dlopen(3) along with a null-terminated symbol name, and returns the address where that symbol is loaded into
       memory.  If the symbol is not found, in the specified object or any of the shared objects that were automatically loaded by dlopen(3) when that object was  loaded,  dlsym()  returns  NULL.   (The
       search performed by dlsym() is breadth first through the dependency tree of these shared objects.)

       In  unusual  cases  (see  NOTES) the value of the symbol could actually be NULL.  Therefore, a NULL return from dlsym() need not indicate an error.  The correct way to distinguish an error from a
       symbol whose value is NULL is to call dlerror(3) to clear any old error conditions, then call dlsym(), and then call dlerror(3) again, saving its return value into a variable, and  check  whether
       this saved value is not NULL.

       There are two special pseudo-handles that may be specified in handle:

       RTLD_DEFAULT
              Find  the  first  occurrence  of the desired symbol using the default shared object search order.  The search will include global symbols in the executable and its dependencies, as well as
              symbols in shared objects that were dynamically loaded with the RTLD_GLOBAL flag.

       RTLD_NEXT
              Find the next occurrence of the desired symbol in the search order after the current object.  This allows one to provide a wrapper around a function in another shared object, so that,  for
              example,  the definition of a function in a preloaded shared object (see LD_PRELOAD in ld.so(8)) can find and invoke the "real" function provided in another shared object (or for that mat‐
              ter, the "next" definition of the function in cases where there are multiple layers of preloading).

       The _GNU_SOURCE feature test macro must be defined in order to obtain the definitions of RTLD_DEFAULT and RTLD_NEXT from <dlfcn.h>.

       The function dlvsym() does the same as dlsym() but takes a version string as an additional argument.

RETURN VALUE
       On success, these functions return the address associated with symbol.  On failure, they return NULL; the cause of the error can be diagnosed using dlerror(3).

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │dlsym(), dlvsym()                                                                                                                                                       │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       dlsym()
              POSIX.1-2008.

       dlvsym()
              GNU.

HISTORY
       dlsym()
              glibc 2.0.  POSIX.1-2001.

       dlvsym()
              glibc 2.1.

NOTES
       There are several scenarios when the address of a global symbol is NULL.  For example, a symbol can be placed at zero address by the linker, via a linker script or with --defsym command-line  op‐
       tion.   Undefined weak symbols also have NULL value.  Finally, the symbol value may be the result of a GNU indirect function (IFUNC) resolver function that returns NULL as the resolved value.  In
       the latter case, dlsym() also returns NULL without error.  However, in the former two cases, the behavior of GNU dynamic linker is inconsistent: relocation processing succeeds and the symbol  can
       be observed to have NULL value, but dlsym() fails and dlerror() indicates a lookup error.

   History
       The dlsym() function is part of the dlopen API, derived from SunOS.  That system does not have dlvsym().

EXAMPLES
       See dlopen(3).

SEE ALSO
       dl_iterate_phdr(3), dladdr(3), dlerror(3), dlinfo(3), dlopen(3), ld.so(8)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        dlsym(3)
DLSYM(3P)                                                                                POSIX Programmer's Manual                                                                               DLSYM(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       dlsym — get the address of a symbol from a symbol table handle

SYNOPSIS
       #include <dlfcn.h>

       void *dlsym(void *restrict handle, const char *restrict name);

DESCRIPTION
       The dlsym() function shall obtain the address of a symbol (a function identifier or a data object identifier) defined in the symbol table identified by the handle argument. The handle argument is
       a  symbol  table handle returned from a call to dlopen() (and which has not since been released by a call to dlclose()), and name is the symbol's name as a character string. The return value from
       dlsym(), cast to a pointer to the type of the named symbol, can be used to call (in the case of a function) or access the contents of (in the case of a data object) the named symbol.

       The dlsym() function shall search for the named symbol in the symbol table referenced by handle.  If the symbol table was created with lazy loading (see  RTLD_LAZY  in  dlopen()),  load  ordering
       shall be used in dlsym() operations to relocate executable object files needed to resolve the symbol. The symbol resolution algorithm used shall be dependency order as described in dlopen().

       The RTLD_DEFAULT and RTLD_NEXT symbolic constants (which may be defined in <dlfcn.h>) are reserved for future use as special values that applications may be allowed to use for handle.

RETURN VALUE
       Upon  successful  completion, if name names a function identifier, dlsym() shall return the address of the function converted from type pointer to function to type pointer to void; otherwise, dl‐
       sym() shall return the address of the data object associated with the data object identifier named by name converted from a pointer to the type of the data object to a pointer to void.  If handle
       does not refer to a valid symbol table handle or if the symbol named by name cannot be found in the symbol table associated with handle, dlsym() shall return a null pointer.

       More detailed diagnostic information shall be available through dlerror().

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       The following example shows how dlopen() and dlsym() can be used to access either a function or a data object. For simplicity, error checking has been omitted.

           void *handle;
           int (*fptr)(int), *iptr, result;
           /* open the needed symbol table */
           handle = dlopen("/usr/home/me/libfoo.so", RTLD_LOCAL | RTLD_LAZY);
           /* find the address of the function my_function */
           fptr = (int (*)(int))dlsym(handle, "my_function");
           /* find the address of the data object my_object */
           iptr = (int *)dlsym(handle, "my_OBJ");
           /* invoke my_function, passing the value of my_OBJ as the parameter */
           result = (*fptr)(*iptr);

APPLICATION USAGE
       The following special purpose values for handle are reserved for future use and have the indicated meanings:

       RTLD_DEFAULT
                   The  identifier  lookup  happens  in the normal global scope; that is, a search for an identifier using handle would find the same definition as a direct use of this identifier in the
                   program code.

       RTLD_NEXT   Specifies the next executable object file after this one that defines name.  This one refers to the executable object file containing the invocation of dlsym().  The  next  executable
                   object file is the one found upon the application of a load order symbol resolution algorithm (see dlopen()).  The next symbol is either one of global scope (because it was introduced
                   as part of the original process image or because it was added with a dlopen() operation including the RTLD_GLOBAL flag), or is in an executable object file that was  included  in  the
                   same dlopen() operation that loaded this one.

       The RTLD_NEXT flag is useful to navigate an intentionally created hierarchy of multiply-defined symbols created through interposition. For example, if a program wished to create an implementation
       of malloc() that embedded some statistics gathering about memory allocations, such an implementation could use the real malloc() definition to perform the memory allocation — and itself only  em‐
       bed the necessary logic to implement the statistics gathering function.

       Note that conversion from a void * pointer to a function pointer as in:

           fptr = (int (*)(int))dlsym(handle, "my_function");

       is not defined by the ISO C standard. This standard requires this conversion to work correctly on conforming implementations.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       dlclose(), dlerror(), dlopen()

       The Base Definitions volume of POSIX.1‐2017, <dlfcn.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          DLSYM(3P)
