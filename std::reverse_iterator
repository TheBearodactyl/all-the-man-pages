std::reverse_iterator< _IteLibrary(Functistd::reverse_iterator< _Iterator >(3)

NAME
       std::reverse_iterator< _Iterator >

SYNOPSIS
       #include <iterator>

       Inherits std::iterator< iterator_traits< _Iterator
       >::iterator_category, iterator_traits< _Iterator >::value_type,
       iterator_traits< _Iterator >::difference_type, iterator_traits<
       _Iterator >::pointer, iterator_traits< _Iterator >::reference >.

   Public Types
       using difference_type = iter_difference_t< _Iterator >
       using iterator_category = __detail::__clamp_iter_cat< typename
           __traits_type::iterator_category, random_access_iterator_tag >
       using iterator_concept = __conditional_t< random_access_iterator<
           _Iterator >, random_access_iterator_tag, bidirectional_iterator_tag
           >
       typedef _Iterator iterator_type
       typedef __traits_type::pointer pointer
       using reference = iter_reference_t< _Iterator >
       using value_type = iter_value_t< _Iterator >

   Public Member Functions
       constexpr reverse_iterator () noexcept(/*conditional */)
       constexpr reverse_iterator (const reverse_iterator &__x)
           noexcept(/*conditional */)
       template<typename _Iter >
           requires __convertible<_Iter>constexpr reverse_iterator (const
           reverse_iterator< _Iter > &__x) noexcept(/*conditional */)"
       constexpr reverse_iterator (iterator_type __x) noexcept(/*conditional
           */)
       constexpr iterator_type base () const noexcept(/*conditional */)
       constexpr reference operator* () const
       constexpr reverse_iterator operator+ (difference_type __n) const
       constexpr reverse_iterator & operator++ ()
       constexpr reverse_iterator operator++ (int)
       constexpr reverse_iterator & operator+= (difference_type __n)
       constexpr reverse_iterator operator- (difference_type __n) const
       constexpr reverse_iterator & operator-- ()
       constexpr reverse_iterator operator-- (int)
       constexpr reverse_iterator & operator-= (difference_type __n)
       constexpr pointer operator-> () const
       reverse_iterator & operator= (const reverse_iterator &)=default
       template<typename _Iter >
           requires __convertible<_Iter> && assignable_from<_Iterator&, const
           _Iter&>constexpr reverse_iterator & operator= (const
           reverse_iterator< _Iter > &__x) noexcept(/*conditional */)"
       constexpr reference operator[] (difference_type __n) const

   Protected Types
       typedef iterator_traits< _Iterator > __traits_type

   Protected Attributes
       _Iterator current

   Friends
       constexpr iter_rvalue_reference_t< _Iterator > iter_move (const
           reverse_iterator &__i) noexcept(is_nothrow_copy_constructible_v<
           _Iterator > &&noexcept(ranges::iter_move(--std::declval< _Iterator
           & >())))
       template<indirectly_swappable< _Iterator > _Iter2> constexpr void
           iter_swap (const reverse_iterator &__x, const reverse_iterator<
           _Iter2 > &__y) noexcept(is_nothrow_copy_constructible_v< _Iterator
           > &&is_nothrow_copy_constructible_v< _Iter2 >
           &&noexcept(ranges::iter_swap(--std::declval< _Iterator & >(),
           --std::declval< _Iter2 & >())))

Detailed Description
   template<typename _Iterator>
       class std::reverse_iterator< _Iterator >"Bidirectional and random
       access iterators have corresponding reverse iterator adaptors that
       iterate through the data structure in the opposite direction. They have
       the same signatures as the corresponding iterators. The fundamental
       relation between a reverse iterator and its corresponding iterator i is
       established by the identity:

       &*(reverse_iterator(i)) == &*(i - 1)

       This mapping is dictated by the fact that while there is always a
       pointer past the end of an array, there might not be a valid pointer
       before the beginning of an array. [24.4.1]/1,2

       Reverse iterators can be tricky and surprising at first. Their
       semantics make sense, however, and the trickiness is a side effect of
       the requirement that the iterators must be safe.

       Definition at line 132 of file bits/iterator.

Member Typedef Documentation
   template<typename _Iterator > typedef iterator_traits<_Iterator>
       std::reverse_iterator< _Iterator >::__traits_type [protected]
       Definition at line 153 of file bits/iterator.

   template<typename _Iterator > using std::reverse_iterator< _Iterator
       >::difference_type =  iter_difference_t<_Iterator>
       Definition at line 170 of file bits/iterator.

   template<typename _Iterator > using std::reverse_iterator< _Iterator
       >::iterator_category =  __detail::__clamp_iter_cat<typename
       __traits_type::iterator_category, random_access_iterator_tag>
       Definition at line 166 of file bits/iterator.

   template<typename _Iterator > using std::reverse_iterator< _Iterator
       >::iterator_concept =
       __conditional_t<random_access_iterator<_Iterator>,
       random_access_iterator_tag, bidirectional_iterator_tag>
       Definition at line 162 of file bits/iterator.

   template<typename _Iterator > typedef _Iterator std::reverse_iterator<
       _Iterator >::iterator_type
       Definition at line 156 of file bits/iterator.

   template<typename _Iterator > typedef __traits_type::pointer
       std::reverse_iterator< _Iterator >::pointer
       Definition at line 157 of file bits/iterator.

   template<typename _Iterator > using std::reverse_iterator< _Iterator
       >::reference =  iter_reference_t<_Iterator>
       Definition at line 171 of file bits/iterator.

   template<typename _Iterator > using std::reverse_iterator< _Iterator
       >::value_type =  iter_value_t<_Iterator>
       Definition at line 169 of file bits/iterator.

Constructor & Destructor Documentation
   template<typename _Iterator > constexpr std::reverse_iterator< _Iterator
       >::reverse_iterator () [inline],  [constexpr],  [noexcept]
       The default constructor value-initializes member current. If it is a
       pointer, that means it is zero-initialized.

       Definition at line 182 of file bits/iterator.

   template<typename _Iterator > constexpr std::reverse_iterator< _Iterator
       >::reverse_iterator (iterator_type __x) [inline],  [explicit],
       [constexpr],  [noexcept]
       This iterator will move in the opposite direction that x does.

       Definition at line 191 of file bits/iterator.

   template<typename _Iterator > constexpr std::reverse_iterator< _Iterator
       >::reverse_iterator (const reverse_iterator< _Iterator > & __x)
       [inline],  [constexpr],  [noexcept]
       The copy constructor is normal.

       Definition at line 200 of file bits/iterator.

   template<typename _Iterator > template<typename _Iter >
       requires __convertible<_Iter>constexpr std::reverse_iterator< _Iterator
       >::reverse_iterator (const reverse_iterator< _Iter > & __x) [inline],
       [constexpr],  [noexcept]" A reverse_iterator across other types can be
       copied if the underlying iterator can be converted to the type of
       current.

       Definition at line 218 of file bits/iterator.

Member Function Documentation
   template<typename _Iterator > constexpr iterator_type
       std::reverse_iterator< _Iterator >::base () const [inline],
       [constexpr],  [noexcept]
       Returns
           current, the iterator used for underlying work.

       Definition at line 244 of file bits/iterator.

       Referenced by std::operator==().

   template<typename _Iterator > constexpr reference std::reverse_iterator<
       _Iterator >::operator* () const [inline],  [constexpr]
       Returns
           A reference to the value at --current

       This requires that --current is dereferenceable.

       Warning
           This implementation requires that for an iterator of the underlying
           iterator type, x, a reference obtained by *x remains valid after x
           has been modified or destroyed. This is a bug:
           http://gcc.gnu.org/PR51823

       Definition at line 260 of file bits/iterator.

   template<typename _Iterator > constexpr reverse_iterator
       std::reverse_iterator< _Iterator >::operator+ (difference_type __n)
       const [inline],  [constexpr]
       Returns
           A reverse_iterator that refers to current - __n

       The underlying iterator must be a Random Access Iterator.

       Definition at line 343 of file bits/iterator.

   template<typename _Iterator > constexpr reverse_iterator &
       std::reverse_iterator< _Iterator >::operator++ () [inline],
       [constexpr]
       Returns
           *this

       Decrements the underlying iterator.

       Definition at line 292 of file bits/iterator.

   template<typename _Iterator > constexpr reverse_iterator
       std::reverse_iterator< _Iterator >::operator++ (int) [inline],
       [constexpr]
       Returns
           The original value of *this

       Decrements the underlying iterator.

       Definition at line 304 of file bits/iterator.

   template<typename _Iterator > constexpr reverse_iterator &
       std::reverse_iterator< _Iterator >::operator+= (difference_type __n)
       [inline],  [constexpr]
       Returns
           *this

       Moves the underlying iterator backwards __n steps. The underlying
       iterator must be a Random Access Iterator.

       Definition at line 353 of file bits/iterator.

   template<typename _Iterator > constexpr reverse_iterator
       std::reverse_iterator< _Iterator >::operator- (difference_type __n)
       const [inline],  [constexpr]
       Returns
           A reverse_iterator that refers to current - __n

       The underlying iterator must be a Random Access Iterator.

       Definition at line 366 of file bits/iterator.

   template<typename _Iterator > constexpr reverse_iterator &
       std::reverse_iterator< _Iterator >::operator-- () [inline],
       [constexpr]
       Returns
           *this

       Increments the underlying iterator.

       Definition at line 317 of file bits/iterator.

   template<typename _Iterator > constexpr reverse_iterator
       std::reverse_iterator< _Iterator >::operator-- (int) [inline],
       [constexpr]
       Returns
           A reverse_iterator with the previous value of *this

       Increments the underlying iterator.

       Definition at line 329 of file bits/iterator.

   template<typename _Iterator > constexpr reverse_iterator &
       std::reverse_iterator< _Iterator >::operator-= (difference_type __n)
       [inline],  [constexpr]
       Returns
           *this

       Moves the underlying iterator forwards __n steps. The underlying
       iterator must be a Random Access Iterator.

       Definition at line 376 of file bits/iterator.

   template<typename _Iterator > constexpr pointer std::reverse_iterator<
       _Iterator >::operator-> () const [inline],  [constexpr]
       Returns
           A pointer to the value at --current

       This requires that --current is dereferenceable.

       Definition at line 273 of file bits/iterator.

   template<typename _Iterator > template<typename _Iter >
       requires __convertible<_Iter> && assignable_from<_Iterator&, const
       _Iter&>constexpr reverse_iterator & std::reverse_iterator< _Iterator
       >::operator= (const reverse_iterator< _Iter > & __x) [inline],
       [constexpr],  [noexcept]"

       Definition at line 231 of file bits/iterator.

   template<typename _Iterator > constexpr reference std::reverse_iterator<
       _Iterator >::operator[] (difference_type __n) const [inline],
       [constexpr]
       Returns
           The value at current - __n - 1

       The underlying iterator must be a Random Access Iterator.

       Definition at line 389 of file bits/iterator.

Friends And Related Function Documentation
   template<typename _Iterator > template<typename _Iter > friend class
       reverse_iterator [friend]
       Definition at line 140 of file bits/iterator.

   template<typename _Iterator > constexpr iter_rvalue_reference_t< _Iterator
       > iter_move (const reverse_iterator< _Iterator > & __i) [friend]
       Definition at line 395 of file bits/iterator.

   template<typename _Iterator > template<indirectly_swappable< _Iterator >
       _Iter2> constexpr void iter_swap (const reverse_iterator< _Iterator > &
       __x, const reverse_iterator< _Iter2 > & __y) [friend]
       Definition at line 405 of file bits/iterator.

Member Data Documentation
   template<typename _Iterator > _Iterator std::reverse_iterator< _Iterator
       >::current [protected]
       Definition at line 151 of file bits/iterator.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Feb 1std::reverse_iterator< _Iterator >(3)
