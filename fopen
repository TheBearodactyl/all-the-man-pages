fopen(3)                                                                                 Library Functions Manual                                                                                 fopen(3)

NAME
       fopen, fdopen, freopen - stream open functions

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdio.h>

       FILE *fopen(const char *restrict pathname, const char *restrict mode);
       FILE *fdopen(int fd, const char *mode);
       FILE *freopen(const char *restrict pathname, const char *restrict mode,
                     FILE *restrict stream);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       fdopen():
           _POSIX_C_SOURCE

DESCRIPTION
       The fopen() function opens the file whose name is the string pointed to by pathname and associates a stream with it.

       The argument mode points to a string beginning with one of the following sequences (possibly followed by additional characters, as described below):

       r      Open text file for reading.  The stream is positioned at the beginning of the file.

       r+     Open for reading and writing.  The stream is positioned at the beginning of the file.

       w      Truncate file to zero length or create text file for writing.  The stream is positioned at the beginning of the file.

       w+     Open for reading and writing.  The file is created if it does not exist, otherwise it is truncated.  The stream is positioned at the beginning of the file.

       a      Open for appending (writing at end of file).  The file is created if it does not exist.  The stream is positioned at the end of the file.

       a+     Open  for reading and appending (writing at end of file).  The file is created if it does not exist.  Output is always appended to the end of the file.  POSIX is silent on what the initial
              read position is when using this mode.  For glibc, the initial file position for reading is at the beginning of the file, but for Android/BSD/MacOS, the initial file position  for  reading
              is at the end of the file.

       The mode string can also include the letter 'b' either as a last character or as a character between the characters in any of the two-character strings described above.  This is strictly for com‐
       patibility with ISO C and has no effect; the 'b' is ignored on all POSIX conforming systems, including Linux.  (Other systems may treat text files and binary files differently, and adding the 'b'
       may be a good idea if you do I/O to a binary file and expect that your program may be ported to non-UNIX environments.)

       See NOTES below for details of glibc extensions for mode.

       Any created file will have the mode S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH (0666), as modified by the process's umask value (see umask(2)).

       Reads  and  writes  may be intermixed on read/write streams in any order.  Note that ANSI C requires that a file positioning function intervene between output and input, unless an input operation
       encounters end-of-file.  (If this condition is not met, then a read is allowed to return the result of writes other than the most recent.)  Therefore it is good  practice  (and  indeed  sometimes
       necessary  under  Linux)  to  put  an fseek(3) or fsetpos(3) operation between write and read operations on such a stream.  This operation may be an apparent no-op (as in fseek(..., 0L, SEEK_CUR)
       called for its synchronizing side effect).

       Opening a file in append mode (a as the first character of mode) causes all subsequent write operations to this stream to occur at end-of-file, as if preceded by the call:

           fseek(stream, 0, SEEK_END);

       The file descriptor associated with the stream is opened as if by a call to open(2) with the following flags:

              ┌─────────────┬───────────────────────────────┐
              │fopen() mode │ open() flags                  │
              ├─────────────┼───────────────────────────────┤
              │     r       │ O_RDONLY                      │
              ├─────────────┼───────────────────────────────┤
              │     w       │ O_WRONLY | O_CREAT | O_TRUNC  │
              ├─────────────┼───────────────────────────────┤
              │     a       │ O_WRONLY | O_CREAT | O_APPEND │
              ├─────────────┼───────────────────────────────┤
              │     r+      │ O_RDWR                        │
              ├─────────────┼───────────────────────────────┤
              │     w+      │ O_RDWR | O_CREAT | O_TRUNC    │
              ├─────────────┼───────────────────────────────┤
              │     a+      │ O_RDWR | O_CREAT | O_APPEND   │
              └─────────────┴───────────────────────────────┘
   fdopen()
       The fdopen() function associates a stream with the existing file descriptor, fd.  The mode of the stream (one of the values "r", "r+", "w", "w+", "a", "a+") must be compatible with  the  mode  of
       the  file  descriptor.  The file position indicator of the new stream is set to that belonging to fd, and the error and end-of-file indicators are cleared.  Modes "w" or "w+" do not cause trunca‐
       tion of the file.  The file descriptor is not dup'ed, and will be closed when the stream created by fdopen() is closed.  The result of applying fdopen() to a shared memory object is undefined.

   freopen()
       The freopen() function opens the file whose name is the string pointed to by pathname and associates the stream pointed to by stream with it.  The original stream (if it exists) is  closed.   The
       mode argument is used just as in the fopen() function.

       If  the  pathname  argument is a null pointer, freopen() changes the mode of the stream to that specified in mode; that is, freopen() reopens the pathname that is associated with the stream.  The
       specification for this behavior was added in the C99 standard, which says:

              In this case, the file descriptor associated with the stream need not be closed if the call to freopen() succeeds.  It is implementation-defined which changes of  mode  are  permitted  (if
              any), and under what circumstances.

       The primary use of the freopen() function is to change the file associated with a standard text stream (stderr, stdin, or stdout).

RETURN VALUE
       Upon successful completion fopen(), fdopen(), and freopen() return a FILE pointer.  Otherwise, NULL is returned and errno is set to indicate the error.

ERRORS
       EINVAL The mode provided to fopen(), fdopen(), or freopen() was invalid.

       The fopen(), fdopen(), and freopen() functions may also fail and set errno for any of the errors specified for the routine malloc(3).

       The fopen() function may also fail and set errno for any of the errors specified for the routine open(2).

       The fdopen() function may also fail and set errno for any of the errors specified for the routine fcntl(2).

       The freopen() function may also fail and set errno for any of the errors specified for the routines open(2), fclose(3), and fflush(3).

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │fopen(), fdopen(), freopen()                                                                                                                                            │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       fopen()
       freopen()
              C11, POSIX.1-2008.

       fdopen()
              POSIX.1-2008.

HISTORY
       fopen()
       freopen()
              POSIX.1-2001, C89.

       fdopen()
              POSIX.1-2001.

NOTES
   glibc notes
       The GNU C library allows the following extensions for the string specified in mode:

       c (since glibc 2.3.3)
              Do not make the open operation, or subsequent read and write operations, thread cancelation points.  This flag is ignored for fdopen().

       e (since glibc 2.7)
              Open the file with the O_CLOEXEC flag.  See open(2) for more information.  This flag is ignored for fdopen().

       m (since glibc 2.3)
              Attempt to access the file using mmap(2), rather than I/O system calls (read(2), write(2)).  Currently, use of mmap(2) is attempted only for a file opened for reading.

       x      Open the file exclusively (like the O_EXCL flag of open(2)).  If the file already exists, fopen() fails, and sets errno to EEXIST.  This flag is ignored for fdopen().

       In addition to the above characters, fopen() and freopen() support the following syntax in mode:

           ,ccs=string

       The  given  string  is  taken  as the name of a coded character set and the stream is marked as wide-oriented.  Thereafter, internal conversion functions convert I/O to and from the character set
       string.  If the ,ccs=string syntax is not specified, then the wide-orientation of the stream is determined by the first file operation.  If that  operation  is  a  wide-character  operation,  the
       stream is marked wide-oriented, and functions to convert to the coded character set are loaded.

BUGS
       When parsing for individual flag characters in mode (i.e., the characters preceding the "ccs" specification), the glibc implementation of fopen() and freopen() limits the number of characters ex‐
       amined in mode to 7 (or, before glibc 2.14, to 6, which was not enough to include possible specifications such as "rb+cmxe").  The current implementation of fdopen() parses at most  5  characters
       in mode.

SEE ALSO
       open(2), fclose(3), fileno(3), fmemopen(3), fopencookie(3), open_memstream(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        fopen(3)
FOPEN(3P)                                                                                POSIX Programmer's Manual                                                                               FOPEN(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       fopen — open a stream

SYNOPSIS
       #include <stdio.h>

       FILE *fopen(const char *restrict pathname, const char *restrict mode);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       The fopen() function shall open the file whose pathname is the string pointed to by pathname, and associates a stream with it.

       The mode argument points to a string. If the string is one of the following, the file shall be opened in the indicated mode. Otherwise, the behavior is undefined.

       r or rb       Open file for reading.

       w or wb       Truncate to zero length or create file for writing.

       a or ab       Append; open or create file for writing at end-of-file.

       r+ or rb+ or r+b
                     Open file for update (reading and writing).

       w+ or wb+ or w+b
                     Truncate to zero length or create file for update.

       a+ or ab+ or a+b
                     Append; open or create file for update, writing at end-of-file.

       The  character  'b' shall have no effect, but is allowed for ISO C standard conformance.  Opening a file with read mode (r as the first character in the mode argument) shall fail if the file does
       not exist or cannot be read.

       Opening a file with append mode (a as the first character in the mode argument) shall cause all subsequent writes to the file to be forced to the then current end-of-file, regardless of interven‐
       ing calls to fseek().

       When a file is opened with update mode ('+' as the second or third character in the mode argument), both input and output may be performed on the associated stream. However, the application shall
       ensure that output is not directly followed by input without an intervening call to fflush() or to a file positioning function (fseek(), fsetpos(), or rewind()), and input is  not  directly  fol‐
       lowed by output without an intervening call to a file positioning function, unless the input operation encounters end-of-file.

       When opened, a stream is fully buffered if and only if it can be determined not to refer to an interactive device. The error and end-of-file indicators for the stream shall be cleared.

       If  mode is w, wb, a, ab, w+, wb+, w+b, a+, ab+, or a+b, and the file did not previously exist, upon successful completion, fopen() shall mark for update the last data access, last data modifica‐
       tion, and last file status change timestamps of the file and the last file status change and last data modification timestamps of the parent directory.

       If mode is w, wb, a, ab, w+, wb+, w+b, a+, ab+, or a+b, and the file did not previously exist, the fopen() function shall create a file as if it called the creat() function with a value appropri‐
       ate for the path argument interpreted from pathname and a value of S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH for the mode argument.

       If  mode  is w, wb, w+, wb+, or w+b, and the file did previously exist, upon successful completion, fopen() shall mark for update the last data modification and last file status change timestamps
       of the file.

       After a successful call to the fopen() function, the orientation of the stream shall be cleared, the encoding rule shall be cleared, and the associated mbstate_t object shall be set  to  describe
       an initial conversion state.

       The file descriptor associated with the opened stream shall be allocated and opened as if by a call to open() with the following flags:

                                                                                 ┌─────────────────┬───────────────────────────┐
                                                                                 │  fopen() Mode   │       open() Flags        │
                                                                                 ├─────────────────┼───────────────────────────┤
                                                                                 │r or rb          │ O_RDONLY                  │
                                                                                 │w or wb          │ O_WRONLY|O_CREAT|O_TRUNC  │
                                                                                 │a or ab          │ O_WRONLY|O_CREAT|O_APPEND │
                                                                                 │r+ or rb+ or r+b │ O_RDWR                    │
                                                                                 │w+ or wb+ or w+b │ O_RDWR|O_CREAT|O_TRUNC    │
                                                                                 │a+ or ab+ or a+b │ O_RDWR|O_CREAT|O_APPEND   │
                                                                                 └─────────────────┴───────────────────────────┘
RETURN VALUE
       Upon successful completion, fopen() shall return a pointer to the object controlling the stream. Otherwise, a null pointer shall be returned, and errno shall be set to indicate the error.

ERRORS
       The fopen() function shall fail if:

       EACCES Search  permission  is denied on a component of the path prefix, or the file exists and the permissions specified by mode are denied, or the file does not exist and write permission is de‐
              nied for the parent directory of the file to be created.

       EINTR  A signal was caught during fopen().

       EISDIR The named file is a directory and mode requires write access.

       ELOOP  A loop exists in symbolic links encountered during resolution of the path argument.

       EMFILE All file descriptors available to the process are currently open.

       EMFILE {STREAM_MAX} streams are currently open in the calling process.

       ENAMETOOLONG
              The length of a pathname exceeds {PATH_MAX}, or pathname resolution of a symbolic link produced an intermediate result with a length that exceeds {PATH_MAX}.

       ENFILE The maximum allowable number of files is currently open in the system.

       ENOENT The mode string begins with 'r' and a component of pathname does not name an existing file, or mode begins with 'w' or 'a' and a component of the path prefix of pathname does not  name  an
              existing file, or pathname is an empty string.

       ENOENT or ENOTDIR
              The  pathname  argument contains at least one non-<slash> character and ends with one or more trailing <slash> characters. If pathname without the trailing <slash> characters would name an
              existing file, an [ENOENT] error shall not occur.

       ENOSPC The directory or file system that would contain the new file cannot be expanded, the file does not exist, and the file was to be created.

       ENOTDIR
              A component of the path prefix names an existing file that is neither a directory nor a symbolic link to a directory, or the pathname argument contains at least one  non-<slash>  character
              and ends with one or more trailing <slash> characters and the last pathname component names an existing file that is neither a directory nor a symbolic link to a directory.

       ENXIO  The named file is a character special or block special file, and the device associated with this special file does not exist.

       EOVERFLOW
              The named file is a regular file and the size of the file cannot be represented correctly in an object of type off_t.

       EROFS  The named file resides on a read-only file system and mode requires write access.

       The fopen() function may fail if:

       EINVAL The value of the mode argument is not valid.

       ELOOP  More than {SYMLOOP_MAX} symbolic links were encountered during resolution of the path argument.

       EMFILE {FOPEN_MAX} streams are currently open in the calling process.

       ENAMETOOLONG
              The length of a component of a pathname is longer than {NAME_MAX}.

       ENOMEM Insufficient storage space is available.

       ETXTBSY
              The file is a pure procedure (shared text) file that is being executed and mode requires write access.

       The following sections are informative.

EXAMPLES
   Opening a File
       The  following example tries to open the file named file for reading. The fopen() function returns a file pointer that is used in subsequent fgets() and fclose() calls. If the program cannot open
       the file, it just ignores it.

           #include <stdio.h>
           ...
           FILE *fp;
           ...
           void rgrep(const char *file)
           {
           ...
               if ((fp = fopen(file, "r")) == NULL)
                   return;
           ...
           }

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.5, Standard I/O Streams, creat(), fclose(), fdopen(), fmemopen(), freopen(), open_memstream()

       The Base Definitions volume of POSIX.1‐2017, <stdio.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          FOPEN(3P)
