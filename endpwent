getpwent(3)                                                                              Library Functions Manual                                                                              getpwent(3)

NAME
       getpwent, setpwent, endpwent - get password file entry

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <sys/types.h>
       #include <pwd.h>

       struct passwd *getpwent(void);
       void setpwent(void);
       void endpwent(void);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       getpwent(), setpwent(), endpwent():
           _XOPEN_SOURCE >= 500
               || /* glibc >= 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       The  getpwent()  function returns a pointer to a structure containing the broken-out fields of a record from the password database (e.g., the local password file /etc/passwd, NIS, and LDAP).  The
       first time getpwent() is called, it returns the first entry; thereafter, it returns successive entries.

       The setpwent() function rewinds to the beginning of the password database.

       The endpwent() function is used to close the password database after all processing has been performed.

       The passwd structure is defined in <pwd.h> as follows:

           struct passwd {
               char   *pw_name;       /* username */
               char   *pw_passwd;     /* user password */
               uid_t   pw_uid;        /* user ID */
               gid_t   pw_gid;        /* group ID */
               char   *pw_gecos;      /* user information */
               char   *pw_dir;        /* home directory */
               char   *pw_shell;      /* shell program */
           };

       For more information about the fields of this structure, see passwd(5).

RETURN VALUE
       The getpwent() function returns a pointer to a passwd structure, or NULL if there are no more entries or an error occurred.  If an error occurs, errno is set to indicate the error.  If one  wants
       to check errno after the call, it should be set to zero before the call.

       The return value may point to a static area, and may be overwritten by subsequent calls to getpwent(), getpwnam(3), or getpwuid(3).  (Do not pass the returned pointer to free(3).)

ERRORS
       EINTR  A signal was caught; see signal(7).

       EIO    I/O error.

       EMFILE The per-process limit on the number of open file descriptors has been reached.

       ENFILE The system-wide limit on the total number of open files has been reached.

       ENOMEM Insufficient memory to allocate passwd structure.

       ERANGE Insufficient buffer space supplied.

FILES
       /etc/passwd
              local password database file

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌───────────────────────┬───────────────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
       │Interface              │ Attribute     │ Value                                                                                                                                                    │
       ├───────────────────────┼───────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
       │getpwent()             │ Thread safety │ MT-Unsafe race:pwent race:pwentbuf locale                                                                                                                │
       ├───────────────────────┼───────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
       │setpwent(), endpwent() │ Thread safety │ MT-Unsafe race:pwent locale                                                                                                                              │
       └───────────────────────┴───────────────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
       In  the above table, pwent in race:pwent signifies that if any of the functions setpwent(), getpwent(), or endpwent() are used in parallel in different threads of a program, then data races could
       occur.

VERSIONS
       The pw_gecos field is not specified in POSIX, but is present on most implementations.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, SVr4, 4.3BSD.

SEE ALSO
       fgetpwent(3), getpw(3), getpwent_r(3), getpwnam(3), getpwuid(3), putpwent(3), passwd(5)

Linux man-pages 6.04                                                                            2023-03-30                                                                                     getpwent(3)
ENDPWENT(3P)                                                                             POSIX Programmer's Manual                                                                            ENDPWENT(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       endpwent, getpwent, setpwent — user database functions

SYNOPSIS
       #include <pwd.h>

       void endpwent(void);
       struct passwd *getpwent(void);
       void setpwent(void);

DESCRIPTION
       These functions shall retrieve information about users.

       The getpwent() function shall return a pointer to a structure containing the broken-out fields of an entry in the user database. Each entry in the user database contains a  passwd  structure.  If
       the  user  database is not already open, getpwent() shall open it and return a pointer to a passwd structure containing the first entry in the database. Thereafter, it shall return a pointer to a
       passwd structure containing the next entry in the user database. Successive calls can be used to search the entire user database.

       If an end-of-file or an error is encountered on reading, getpwent() shall return a null pointer.

       An implementation that provides extended security controls may impose further implementation-defined restrictions on accessing the user database. In particular, the system may deny the  existence
       of some or all of the user database entries associated with users other than the caller.

       The setpwent() function shall rewind the user database so that the next getpwent() call returns the first entry, allowing repeated searches.

       The endpwent() function shall close the user database.

       The setpwent() and endpwent() functions shall not change the setting of errno if successful.

       On error, the setpwent() and endpwent() functions shall set errno to indicate the error.

       Since no value is returned by the setpwent() and endpwent() functions, an application wishing to check for error situations should set errno to 0, then call the function, then check errno.

       These functions need not be thread-safe.

RETURN VALUE
       On  successful  completion,  getpwent()  shall return a pointer to a passwd structure. On end-of-file, getpwent() shall return a null pointer and shall not change the setting of errno.  On error,
       getpwent() shall return a null pointer and errno shall be set to indicate the error.

       The application shall not modify the structure to which the return value points, nor any storage areas pointed to by pointers within the structure. The returned pointer, and pointers  within  the
       structure,  might  be  invalidated  or  the  structure or the storage areas might be overwritten by a subsequent call to getpwuid(), getpwnam(), or getpwent().  The returned pointer, and pointers
       within the structure, might also be invalidated if the calling thread is terminated.

ERRORS
       These functions may fail if:

       EINTR  A signal was caught during the operation.

       EIO    An I/O error has occurred.

       In addition, getpwent() and setpwent() may fail if:

       EMFILE All file descriptors available to the process are currently open.

       ENFILE The maximum allowable number of files is currently open in the system.

       The following sections are informative.

EXAMPLES
   Searching the User Database
       The following example uses the getpwent() function to get successive entries in the user database, returning a pointer to a passwd structure that contains information about each user. The call to
       endpwent() closes the user database and cleans up.

           #include <pwd.h>
           #include <stdio.h>

           void printname(uid_t uid)
           {
               struct passwd *pwd;

               setpwent();
               while((pwd = getpwent()) != NULL) {
                   if (pwd->pw_uid == uid) {
                       printf("name=%s\n",pwd->pw_name);
                       break;
                   }
               }
               endpwent();
           }

APPLICATION USAGE
       These functions are provided due to their historical usage.  Applications should avoid dependencies on fields in the password database, whether the database is a single file, or where in the file
       system name space the database resides. Applications should use getpwuid() whenever possible because it avoids these dependencies.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       endgrent(), getlogin(), getpwnam(), getpwuid()

       The Base Definitions volume of POSIX.1‐2017, <pwd.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                       ENDPWENT(3P)
