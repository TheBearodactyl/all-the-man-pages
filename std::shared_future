std::shared_future< _Res >(Library Functions Manustd::shared_future< _Res >(3)

NAME
       std::shared_future< _Res > - Primary template for shared_future.

SYNOPSIS
       Inherits std::__basic_future< _Res >.

   Public Types
       template<typename _Res > using _Ptr = unique_ptr< _Res,
           _Result_base::_Deleter >
           A unique_ptr for result objects.
       using _State_base = _State_baseV2

   Public Member Functions
       shared_future (const shared_future &__sf) noexcept
           Copy constructor.
       shared_future (future< _Res > &&__uf) noexcept
           Construct from a future rvalue.
       shared_future (shared_future &&__sf) noexcept
           Construct from a shared_future rvalue.
       const _Res & get () const
           Retrieving the value.
       shared_future & operator= (const shared_future &__sf) noexcept
       shared_future & operator= (shared_future &&__sf) noexcept
       bool valid () const noexcept
       void wait () const
       template<typename _Rep , typename _Period > future_status wait_for
           (const chrono::duration< _Rep, _Period > &__rel) const
       template<typename _Clock , typename _Duration > future_status
           wait_until (const chrono::time_point< _Clock, _Duration > &__abs)
           const

   Static Public Member Functions
       template<typename _Res , typename _Allocator > static _Ptr<
           _Result_alloc< _Res, _Allocator > > _S_allocate_result (const
           _Allocator &__a)
       template<typename _Res , typename _Tp > static _Ptr< _Result< _Res > >
           _S_allocate_result (const std::allocator< _Tp > &__a)
       template<typename _Res_ptr , typename _BoundFn > static _Task_setter<
           _Res_ptr, _BoundFn > _S_task_setter (_Res_ptr &__ptr, _BoundFn
           &__call)

   Protected Types
       typedef __future_base::_Result< _Res > & __result_type
       typedef shared_ptr< _State_base > __state_type

   Protected Member Functions
       __result_type _M_get_result () const
           Wait for the state to be ready and rethrow any stored exception.
       void _M_swap (__basic_future &__that) noexcept

Detailed Description
   template<typename _Res>
       class std::shared_future< _Res >"Primary template for shared_future.

       Definition at line 901 of file future.

Member Typedef Documentation
   template<typename _Res > typedef __future_base::_Result<_Res>&
       std::__basic_future< _Res >::__result_type [protected],  [inherited]
       Definition at line 678 of file future.

   template<typename _Res > typedef shared_ptr<_State_base>
       std::__basic_future< _Res >::__state_type [protected],  [inherited]
       Definition at line 677 of file future.

   template<typename _Res > using std::__future_base::_Ptr =  unique_ptr<_Res,
       _Result_base::_Deleter> [inherited]
       A unique_ptr for result objects.

       Definition at line 223 of file future.

   using std::__future_base::_State_base =  _State_baseV2 [inherited]
       Definition at line 598 of file future.

Constructor & Destructor Documentation
   template<typename _Res > constexpr std::shared_future< _Res
       >::shared_future () [inline],  [constexpr],  [noexcept]
       Definition at line 913 of file future.

   template<typename _Res > std::shared_future< _Res >::shared_future (const
       shared_future< _Res > & __sf) [inline],  [noexcept]
       Copy constructor.

       Definition at line 916 of file future.

   template<typename _Res > std::shared_future< _Res >::shared_future (future<
       _Res > && __uf) [inline],  [noexcept]
       Construct from a future rvalue.

       Definition at line 919 of file future.

   template<typename _Res > std::shared_future< _Res >::shared_future
       (shared_future< _Res > && __sf) [inline],  [noexcept]
       Construct from a shared_future rvalue.

       Definition at line 924 of file future.

Member Function Documentation
   template<typename _Res > __result_type std::__basic_future< _Res
       >::_M_get_result () const [inline],  [protected],  [inherited]
       Wait for the state to be ready and rethrow any stored exception.

       Definition at line 717 of file future.

       References std::rethrow_exception().

       Referenced by std::future< _Res >::get(), std::future< _Res & >::get(),
       std::future< void >::get(), std::shared_future< _Res >::get(), and
       std::shared_future< _Res & >::get().

   template<typename _Res > void std::__basic_future< _Res >::_M_swap
       (__basic_future< _Res > & __that) [inline],  [protected],  [noexcept],
       [inherited]
       Definition at line 726 of file future.

   template<typename _Res , typename _Allocator > static _Ptr< _Result_alloc<
       _Res, _Allocator > > std::__future_base::_S_allocate_result (const
       _Allocator & __a) [inline],  [static],  [inherited]
       Definition at line 288 of file future.

   template<typename _Res , typename _Tp > static _Ptr< _Result< _Res > >
       std::__future_base::_S_allocate_result (const std::allocator< _Tp > &
       __a) [inline],  [static],  [inherited]
       Definition at line 301 of file future.

   template<typename _Res_ptr , typename _BoundFn > static _Task_setter<
       _Res_ptr, _BoundFn > std::__future_base::_S_task_setter (_Res_ptr &
       __ptr, _BoundFn & __call) [inline],  [static],  [inherited]
       Definition at line 622 of file future.

   template<typename _Res > const _Res & std::shared_future< _Res >::get ()
       const [inline]
       Retrieving the value.

       Definition at line 942 of file future.

       References std::__basic_future< _Res >::_M_get_result().

   template<typename _Res > shared_future & std::shared_future< _Res
       >::operator= (const shared_future< _Res > & __sf) [inline],  [noexcept]
       Definition at line 928 of file future.

   template<typename _Res > shared_future & std::shared_future< _Res
       >::operator= (shared_future< _Res > && __sf) [inline],  [noexcept]
       Definition at line 934 of file future.

   template<typename _Res > bool std::__basic_future< _Res >::valid () const
       [inline],  [noexcept],  [inherited]
       Definition at line 689 of file future.

   template<typename _Res > void std::__basic_future< _Res >::wait () const
       [inline],  [inherited]
       Definition at line 692 of file future.

   template<typename _Res > template<typename _Rep , typename _Period >
       future_status std::__basic_future< _Res >::wait_for (const
       chrono::duration< _Rep, _Period > & __rel) const [inline],  [inherited]
       Definition at line 700 of file future.

   template<typename _Res > template<typename _Clock , typename _Duration >
       future_status std::__basic_future< _Res >::wait_until (const
       chrono::time_point< _Clock, _Duration > & __abs) const [inline],
       [inherited]
       Definition at line 708 of file future.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Feb 1 2023   std::shared_future< _Res >(3)
