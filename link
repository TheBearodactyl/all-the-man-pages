LINK(1)                                                                                        User Commands                                                                                       LINK(1)

NAME
       link - call the link function to create a link to a file

SYNOPSIS
       link FILE1 FILE2
       link OPTION

DESCRIPTION
       Call the link function to create a link named FILE2 to an existing FILE1.

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Michael Stone.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2023 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       link(2)

       Full documentation <https://www.gnu.org/software/coreutils/link>
       or available locally via: info '(coreutils) link invocation'

GNU coreutils 9.2                                                                               April 2023                                                                                         LINK(1)
LINK(1P)                                                                                 POSIX Programmer's Manual                                                                                LINK(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       link — call link() function

SYNOPSIS
       link file1 file2

DESCRIPTION
       The link utility shall perform the function call:

           link(file1, file2);

       A user may need appropriate privileges to invoke the link utility.

OPTIONS
       None.

OPERANDS
       The following operands shall be supported:

       file1     The pathname of an existing file.

       file2     The pathname of the new directory entry to be created.

STDIN
       Not used.

INPUT FILES
       Not used.

ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of link:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See the Base Definitions volume of POSIX.1‐2017, Section 8.2, Internationalization Variables  for
                 the precedence of internationalization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       None.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       >0    An error occurred.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       ln, unlink

       The Base Definitions volume of POSIX.1‐2017, Chapter 8, Environment Variables

       The System Interfaces volume of POSIX.1‐2017, link()

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                           LINK(1P)
LINK(3P)                                                                                 POSIX Programmer's Manual                                                                                LINK(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       link, linkat — link one file to another file

SYNOPSIS
       #include <unistd.h>

       int link(const char *path1, const char *path2);

       #include <fcntl.h>

       int linkat(int fd1, const char *path1, int fd2,
           const char *path2, int flag);

DESCRIPTION
       The link() function shall create a new link (directory entry) for the existing file, path1.

       The path1 argument points to a pathname naming an existing file. The path2 argument points to a pathname naming the new directory entry to be created. The link() function shall atomically  create
       a new link for the existing file and the link count of the file shall be incremented by one.

       If path1 names a directory, link() shall fail unless the process has appropriate privileges and the implementation supports using link() on directories.

       If path1 names a symbolic link, it is implementation-defined whether link() follows the symbolic link, or creates a new link to the symbolic link itself.

       Upon  successful  completion, link() shall mark for update the last file status change timestamp of the file. Also, the last data modification and last file status change timestamps of the direc‐
       tory that contains the new entry shall be marked for update.

       If link() fails, no link shall be created and the link count of the file shall remain unchanged.

       The implementation may require that the calling process has permission to access the existing file.

       The linkat() function shall be equivalent to the link() function except that symbolic links shall be handled as specified by the value of flag (see below) and except  in  the  case  where  either
       path1  or  path2 or both are relative paths. In this case a relative path path1 is interpreted relative to the directory associated with the file descriptor fd1 instead of the current working di‐
       rectory and similarly for path2 and the file descriptor fd2.  If the access mode of the open file description associated with the file descriptor is not O_SEARCH, the function shall check whether
       directory searches are permitted using the current permissions of the directory underlying the file descriptor. If the access mode is O_SEARCH, the function shall not perform the check.

       Values for flag are constructed by a bitwise-inclusive OR of flags from the following list, defined in <fcntl.h>:

       AT_SYMLINK_FOLLOW
             If path1 names a symbolic link, a new link for the target of the symbolic link is created.

       If  linkat()  is passed the special value AT_FDCWD in the fd1 or fd2 parameter, the current working directory shall be used for the respective path argument. If both fd1 and fd2 have value AT_FD‐
       CWD, the behavior shall be identical to a call to link(), except that symbolic links shall be handled as specified by the value of flag.

       If the AT_SYMLINK_FOLLOW flag is clear in the flag argument and the path1 argument names a symbolic link, a new link is created for the symbolic link path1 and not its target.

RETURN VALUE
       Upon successful completion, these functions shall return 0. Otherwise, these functions shall return -1 and set errno to indicate the error.

ERRORS
       These functions shall fail if:

       EACCES A component of either path prefix denies search permission, or the requested link requires writing in a directory that denies write permission, or the calling process does not have permis‐
              sion to access the existing file and this is required by the implementation.

       EEXIST The path2 argument resolves to an existing directory entry or refers to a symbolic link.

       ELOOP  A loop exists in symbolic links encountered during resolution of the path1 or path2 argument.

       EMLINK The number of links to the file named by path1 would exceed {LINK_MAX}.

       ENAMETOOLONG
              The length of a component of a pathname is longer than {NAME_MAX}.

       ENOENT A component of either path prefix does not exist; the file named by path1 does not exist; or path1 or path2 points to an empty string.

       ENOENT or ENOTDIR
              The  path1 argument names an existing non-directory file, and the path2 argument contains at least one non-<slash> character and ends with one or more trailing <slash> characters. If path2
              without the trailing <slash> characters would name an existing file, an [ENOENT] error shall not occur.

       ENOSPC The directory to contain the link cannot be extended.

       ENOTDIR
              A component of either path prefix names an existing file that is neither a directory nor a symbolic link to a directory, or the path1 argument contains at least one  non-<slash>  character
              and  ends  with  one or more trailing <slash> characters and the last pathname component names an existing file that is neither a directory nor a symbolic link to a directory, or the path1
              argument names an existing non-directory file and the path2 argument names a nonexistent file, contains at least one non-<slash> character, and ends with one or more trailing <slash> char‐
              acters.

       EPERM  The file named by path1 is a directory and either the calling process does not have appropriate privileges or the implementation prohibits using link() on directories.

       EROFS  The requested link requires writing in a directory on a read-only file system.

       EXDEV  The link named by path2 and the file named by path1 are on different file systems and the implementation does not support links between file systems.

       EXDEV  path1 refers to a named STREAM.

       The linkat() function shall fail if:

       EACCES The  access  mode  of the open file description associated with fd1 or fd2 is not O_SEARCH and the permissions of the directory underlying fd1 or fd2, respectively, do not permit directory
              searches.

       EBADF  The path1 or path2 argument does not specify an absolute path and the fd1 or fd2 argument, respectively, is neither AT_FDCWD nor a valid file descriptor open for reading or searching.

       ENOTDIR
              The path1 or path2 argument is not an absolute path and fd1 or fd2, respectively, is a file descriptor associated with a non-directory file.

       These functions may fail if:

       ELOOP  More than {SYMLOOP_MAX} symbolic links were encountered during resolution of the path1 or path2 argument.

       ENAMETOOLONG
              The length of a pathname exceeds {PATH_MAX}, or pathname resolution of a symbolic link produced an intermediate result with a length that exceeds {PATH_MAX}.

       The linkat() function may fail if:

       EINVAL The value of the flag argument is not valid.

       The following sections are informative.

EXAMPLES
   Creating a Link to a File
       The following example shows how to create a link to a file named /home/cnd/mod1 by creating a new directory entry named /modules/pass1.

           #include <unistd.h>

           char *path1 = "/home/cnd/mod1";
           char *path2 = "/modules/pass1";
           int   status;
           ...
           status = link (path1, path2);

   Creating a Link to a File Within a Program
       In the following program example, the link() function links the /etc/passwd file (defined as PASSWDFILE) to a file named /etc/opasswd (defined as SAVEFILE), which is  used  to  save  the  current
       password file. Then, after removing the current password file (defined as PASSWDFILE), the new password file is saved as the current password file using the link() function again.

           #include <unistd.h>

           #define LOCKFILE "/etc/ptmp"
           #define PASSWDFILE "/etc/passwd"
           #define SAVEFILE "/etc/opasswd"
           ...
           /* Save current password file */
           link (PASSWDFILE, SAVEFILE);

           /* Remove current password file. */
           unlink (PASSWDFILE);

           /* Save new password file as current password file. */
           link (LOCKFILE,PASSWDFILE);

APPLICATION USAGE
       Some implementations do allow links between file systems.

       If path1 refers to a symbolic link, application developers should use linkat() with appropriate flags to select whether or not the symbolic link should be resolved.

RATIONALE
       Linking to a directory is restricted to the superuser in most historical implementations because this capability may produce loops in the file hierarchy or otherwise corrupt the file system. This
       volume of POSIX.1‐2017 continues that philosophy by prohibiting link() and unlink() from doing this. Other functions could do it if the implementor designed such an extension.

       Some historical implementations allow linking of files on different file systems. Wording was added to explicitly allow this optional behavior.

       The exception for cross-file system links is intended to apply only to links that are programmatically indistinguishable from ``hard'' links.

       The purpose of the linkat() function is to link files in directories other than the current working directory without exposure to race conditions. Any part of the path of a file could be  changed
       in  parallel  to a call to link(), resulting in unspecified behavior. By opening a file descriptor for the directory of both the existing file and the target location and using the linkat() func‐
       tion it can be guaranteed that the both filenames are in the desired directories.

       The AT_SYMLINK_FOLLOW flag allows for implementing both common behaviors of the link() function. The POSIX specification requires that if path1 is a symbolic link, a new link for  the  target  of
       the symbolic link is created. Many systems by default or as an alternative provide a mechanism to avoid the implicit symbolic link lookup and create a new link for the symbolic link itself.

       Earlier  versions  of  this  standard specified only the link() function, and required it to behave like linkat() with the AT_SYMLINK_FOLLOW flag. However, historical practice from SVR4 and Linux
       kernels had link() behaving like linkat() with no flags, and many systems that attempted to provide a conforming link() function did so in a way that was rarely used, and when it was used did not
       conform to the standard (e.g., by not being atomic, or by dereferencing the symbolic link incorrectly). Since applications could not rely on link() following links in practice, the linkat() func‐
       tion was added taking a flag to specify the desired behavior for the application.

FUTURE DIRECTIONS
       None.

SEE ALSO
       rename(), symlink(), unlink()

       The Base Definitions volume of POSIX.1‐2017, <fcntl.h>, <unistd.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                           LINK(3P)
link(2)                                                                                     System Calls Manual                                                                                    link(2)

NAME
       link, linkat - make a new name for a file

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       int link(const char *oldpath, const char *newpath);

       #include <fcntl.h>           /* Definition of AT_* constants */
       #include <unistd.h>

       int linkat(int olddirfd, const char *oldpath,
                  int newdirfd, const char *newpath, int flags);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       linkat():
           Since glibc 2.10:
               _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _ATFILE_SOURCE

DESCRIPTION
       link() creates a new link (also known as a hard link) to an existing file.

       If newpath exists, it will not be overwritten.

       This  new name may be used exactly as the old one for any operation; both names refer to the same file (and so have the same permissions and ownership) and it is impossible to tell which name was
       the "original".

   linkat()
       The linkat() system call operates in exactly the same way as link(), except for the differences described here.

       If the pathname given in oldpath is relative, then it is interpreted relative to the directory referred to by the file descriptor olddirfd (rather than relative to the current  working  directory
       of the calling process, as is done by link() for a relative pathname).

       If oldpath is relative and olddirfd is the special value AT_FDCWD, then oldpath is interpreted relative to the current working directory of the calling process (like link()).

       If oldpath is absolute, then olddirfd is ignored.

       The interpretation of newpath is as for oldpath, except that a relative pathname is interpreted relative to the directory referred to by the file descriptor newdirfd.

       The following values can be bitwise ORed in flags:

       AT_EMPTY_PATH (since Linux 2.6.39)
              If  oldpath is an empty string, create a link to the file referenced by olddirfd (which may have been obtained using the open(2) O_PATH flag).  In this case, olddirfd can refer to any type
              of file except a directory.  This will generally not work if the file has a link count of zero (files created with O_TMPFILE and without O_EXCL are an exception).  The caller must have the
              CAP_DAC_READ_SEARCH capability in order to use this flag.  This flag is Linux-specific; define _GNU_SOURCE to obtain its definition.

       AT_SYMLINK_FOLLOW (since Linux 2.6.18)
              By  default,  linkat(), does not dereference oldpath if it is a symbolic link (like link()).  The flag AT_SYMLINK_FOLLOW can be specified in flags to cause oldpath to be dereferenced if it
              is a symbolic link.  If procfs is mounted, this can be used as an alternative to AT_EMPTY_PATH, like this:

                  linkat(AT_FDCWD, "/proc/self/fd/<fd>", newdirfd,
                         newname, AT_SYMLINK_FOLLOW);

       Before Linux 2.6.18, the flags argument was unused, and had to be specified as 0.

       See openat(2) for an explanation of the need for linkat().

RETURN VALUE
       On success, zero is returned.  On error, -1 is returned, and errno is set to indicate the error.

ERRORS
       EACCES Write access to the directory containing newpath is denied, or search permission is denied for one of the directories in the path prefix of oldpath  or  newpath.   (See  also  path_resolu‐
              tion(7).)

       EDQUOT The user's quota of disk blocks on the filesystem has been exhausted.

       EEXIST newpath already exists.

       EFAULT oldpath or newpath points outside your accessible address space.

       EIO    An I/O error occurred.

       ELOOP  Too many symbolic links were encountered in resolving oldpath or newpath.

       EMLINK The file referred to by oldpath already has the maximum number of links to it.  For example, on an ext4(5) filesystem that does not employ the dir_index feature, the limit on the number of
              hard links to a file is 65,000; on btrfs(5), the limit is 65,535 links.

       ENAMETOOLONG
              oldpath or newpath was too long.

       ENOENT A directory component in oldpath or newpath does not exist or is a dangling symbolic link.

       ENOMEM Insufficient kernel memory was available.

       ENOSPC The device containing the file has no room for the new directory entry.

       ENOTDIR
              A component used as a directory in oldpath or newpath is not, in fact, a directory.

       EPERM  oldpath is a directory.

       EPERM  The filesystem containing oldpath and newpath does not support the creation of hard links.

       EPERM (since Linux 3.6)
              The caller does not have permission to create a hard link to this file (see the description of /proc/sys/fs/protected_hardlinks in proc(5)).

       EPERM  oldpath is marked immutable or append-only.  (See ioctl_iflags(2).)

       EROFS  The file is on a read-only filesystem.

       EXDEV  oldpath and newpath are not on the same mounted filesystem.  (Linux permits a filesystem to be mounted at multiple points, but link() does not work across different  mounts,  even  if  the
              same filesystem is mounted on both.)

       The following additional errors can occur for linkat():

       EBADF  oldpath (newpath) is relative but olddirfd (newdirfd) is neither AT_FDCWD nor a valid file descriptor.

       EINVAL An invalid flag value was specified in flags.

       ENOENT AT_EMPTY_PATH was specified in flags, but the caller did not have the CAP_DAC_READ_SEARCH capability.

       ENOENT An attempt was made to link to the /proc/self/fd/NN file corresponding to a file descriptor created with

                  open(path, O_TMPFILE | O_EXCL, mode);

              See open(2).

       ENOENT An attempt was made to link to a /proc/self/fd/NN file corresponding to a file that has been deleted.

       ENOENT oldpath is a relative pathname and olddirfd refers to a directory that has been deleted, or newpath is a relative pathname and newdirfd refers to a directory that has been deleted.

       ENOTDIR
              oldpath is relative and olddirfd is a file descriptor referring to a file other than a directory; or similar for newpath and newdirfd

       EPERM  AT_EMPTY_PATH was specified in flags, oldpath is an empty string, and olddirfd refers to a directory.

VERSIONS
       POSIX.1-2001  says  that  link()  should dereference oldpath if it is a symbolic link.  However, since Linux 2.0, Linux does not do so: if oldpath is a symbolic link, then newpath is created as a
       (hard) link to the same symbolic link file (i.e., newpath becomes a symbolic link to the same file that oldpath refers to).  Some other  implementations  behave  in  the  same  manner  as  Linux.
       POSIX.1-2008  changes  the  specification of link(), making it implementation-dependent whether or not oldpath is dereferenced if it is a symbolic link.  For precise control over the treatment of
       symbolic links when creating a link, use linkat().

   glibc
       On older kernels where linkat() is unavailable, the glibc wrapper function falls back to the use of link(), unless the AT_SYMLINK_FOLLOW is specified.  When oldpath and newpath are relative path‐
       names, glibc constructs pathnames based on the symbolic links in /proc/self/fd that correspond to the olddirfd and newdirfd arguments.

STANDARDS
       link() POSIX.1-2008.

HISTORY
       link() SVr4, 4.3BSD, POSIX.1-2001 (but see VERSIONS).

       linkat()
              POSIX.1-2008.  Linux 2.6.16, glibc 2.4.

NOTES
       Hard links, as created by link(), cannot span filesystems.  Use symlink(2) if this is required.

BUGS
       On NFS filesystems, the return code may be wrong in case the NFS server performs the link creation and dies before it can say so.  Use stat(2) to find out if the link got created.

SEE ALSO
       ln(1), open(2), rename(2), stat(2), symlink(2), unlink(2), path_resolution(7), symlink(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                         link(2)
