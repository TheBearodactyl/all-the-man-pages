random(3)                  Library Functions Manual                  random(3)

NAME
       random, srandom, initstate, setstate - random number generator

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdlib.h>

       long random(void);
       void srandom(unsigned int seed);

       char *initstate(unsigned int seed, char state[.n], size_t n);
       char *setstate(char *state);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       random(), srandom(), initstate(), setstate():
           _XOPEN_SOURCE >= 500
               || /* glibc >= 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE

DESCRIPTION
       The  random() function uses a nonlinear additive feedback random number
       generator employing a default table of size 31 long integers to  return
       successive  pseudo-random numbers in the range from 0 to 2^31 - 1.  The
       period of this random number generator  is  very  large,  approximately
       16 * ((2^31) - 1).

       The srandom() function sets its argument as the seed for a new sequence
       of pseudo-random integers to be returned by random().  These  sequences
       are  repeatable  by  calling srandom() with the same seed value.  If no
       seed value is provided, the random() function is  automatically  seeded
       with a value of 1.

       The  initstate()  function allows a state array state to be initialized
       for use by random().  The size of the state array n is  used  by  init‐
       state() to decide how sophisticated a random number generator it should
       use—the larger the state array, the better the random numbers will  be.
       Current  "optimal"  values for the size of the state array n are 8, 32,
       64, 128, and 256 bytes; other amounts will be rounded down to the near‐
       est  known  amount.  Using less than 8 bytes results in an error.  seed
       is the seed for the initialization, which specifies  a  starting  point
       for the random number sequence, and provides for restarting at the same
       point.

       The setstate() function changes the state array used  by  the  random()
       function.   The  state array state is used for random number generation
       until the next call to initstate() or  setstate().   state  must  first
       have  been initialized using initstate() or be the result of a previous
       call of setstate().

RETURN VALUE
       The random() function returns a value between 0  and  (2^31) - 1.   The
       srandom() function returns no value.

       The initstate() function returns a pointer to the previous state array.
       On failure, it returns NULL, and errno is set to indicate the error.

       On success, setstate() returns a pointer to the previous  state  array.
       On failure, it returns NULL, and errno is set to indicate the error.

ERRORS
       EINVAL The state argument given to setstate() was NULL.

       EINVAL A state array of less than 8 bytes was specified to initstate().

ATTRIBUTES
       For  an  explanation  of  the  terms  used  in  this  section,  see at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │random(), srandom(), initstate(),           │ Thread safety │ MT-Safe │
       │setstate()                                  │               │         │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, 4.3BSD.

NOTES
       Random-number  generation  is a complex topic.  Numerical Recipes in C:
       The Art of Scientific Computing (William H. Press, Brian  P.  Flannery,
       Saul A. Teukolsky, William T. Vetterling; New York: Cambridge Universi‐
       ty Press, 2007, 3rd ed.)  provides an excellent discussion of practical
       random-number generation issues in Chapter 7 (Random Numbers).

       For  a more theoretical discussion which also covers many practical is‐
       sues in depth, see Chapter 3 (Random Numbers) in Donald E. Knuth's  The
       Art  of  Computer Programming, volume 2 (Seminumerical Algorithms), 2nd
       ed.; Reading, Massachusetts: Addison-Wesley Publishing Company, 1981.

CAVEATS
       The random() function should not  be  used  in  multithreaded  programs
       where reproducible behavior is required.  Use random_r(3) for that pur‐
       pose.

BUGS
       According to POSIX, initstate() should return NULL on  error.   In  the
       glibc  implementation,  errno  is  (as specified) set on error, but the
       function does not return NULL.

SEE ALSO
       getrandom(2), drand48(3), rand(3), random_r(3), srand(3)

Linux man-pages 6.04              2023-03-30                         random(3)
RANDOM(3P)                 POSIX Programmer's Manual                RANDOM(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       random — generate pseudo-random number

SYNOPSIS
       #include <stdlib.h>

       long random(void);

DESCRIPTION
       Refer to initstate().

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                           RANDOM(3P)
random(4)                  Kernel Interfaces Manual                  random(4)

NAME
       random, urandom - kernel random number source devices

SYNOPSIS
       #include <linux/random.h>

       int ioctl(fd, RNDrequest, param);

DESCRIPTION
       The character special files /dev/random and /dev/urandom (present since
       Linux 1.3.30) provide an interface to the kernel's random number gener‐
       ator.   The file /dev/random has major device number 1 and minor device
       number 8.  The file /dev/urandom has major device number  1  and  minor
       device number 9.

       The  random  number  generator  gathers environmental noise from device
       drivers and other sources into an entropy  pool.   The  generator  also
       keeps  an  estimate of the number of bits of noise in the entropy pool.
       From this entropy pool, random numbers are created.

       Linux 3.17 and later provides the simpler and safer getrandom(2) inter‐
       face  which requires no special files; see the getrandom(2) manual page
       for details.

       When read, the /dev/urandom device returns random bytes using a pseudo‐
       random  number generator seeded from the entropy pool.  Reads from this
       device do not block (i.e., the CPU is not yielded), but  can  incur  an
       appreciable delay when requesting large amounts of data.

       When read during early boot time, /dev/urandom may return data prior to
       the entropy pool being initialized.  If this is of concern in your  ap‐
       plication, use getrandom(2) or /dev/random instead.

       The /dev/random device is a legacy interface which dates back to a time
       where the  cryptographic  primitives  used  in  the  implementation  of
       /dev/urandom were not widely trusted.  It will return random bytes only
       within the estimated number of bits of fresh noise in the entropy pool,
       blocking  if  necessary.  /dev/random is suitable for applications that
       need high quality randomness, and can afford indeterminate delays.

       When the entropy pool is empty, reads from /dev/random will block until
       additional  environmental  noise  is  gathered.   Since  Linux 5.6, the
       O_NONBLOCK flag is ignored as /dev/random will no longer  block  except
       during  early  boot process.  In earlier versions, if open(2) is called
       for /dev/random with the O_NONBLOCK flag, a subsequent read(2) will not
       block  if the requested number of bytes is not available.  Instead, the
       available bytes are returned.  If no byte is  available,  read(2)  will
       return -1 and errno will be set to EAGAIN.

       The  O_NONBLOCK  flag  has  no  effect when opening /dev/urandom.  When
       calling read(2) for the device /dev/urandom, reads of up to  256  bytes
       will  return as many bytes as are requested and will not be interrupted
       by a signal handler.  Reads with a buffer over this  limit  may  return
       less  than  the requested number of bytes or fail with the error EINTR,
       if interrupted by a signal handler.

       Since Linux 3.16, a read(2)  from  /dev/urandom  will  return  at  most
       32 MB.   A  read(2) from /dev/random will return at most 512 bytes (340
       bytes before Linux 2.6.12).

       Writing to /dev/random or /dev/urandom will  update  the  entropy  pool
       with  the  data  written,  but this will not result in a higher entropy
       count.  This means that it will impact  the  contents  read  from  both
       files, but it will not make reads from /dev/random faster.

   Usage
       The  /dev/random  interface  is  considered  a  legacy  interface,  and
       /dev/urandom is preferred and sufficient in all use cases, with the ex‐
       ception  of  applications  which  require  randomness during early boot
       time; for these applications, getrandom(2) must be  used  instead,  be‐
       cause it will block until the entropy pool is initialized.

       If a seed file is saved across reboots as recommended below, the output
       is cryptographically secure against attackers without local root access
       as  soon as it is reloaded in the boot sequence, and perfectly adequate
       for network encryption session keys.  (All  major  Linux  distributions
       have  saved  the  seed file across reboots since 2000 at least.)  Since
       reads from /dev/random may block, users will usually want to open it in
       nonblocking  mode  (or  perform  a read with timeout), and provide some
       sort of user notification if the desired  entropy  is  not  immediately
       available.

   Configuration
       If  your  system does not have /dev/random and /dev/urandom created al‐
       ready, they can be created with the following commands:

           mknod -m 666 /dev/random c 1 8
           mknod -m 666 /dev/urandom c 1 9
           chown root:root /dev/random /dev/urandom

       When a Linux system starts up without much  operator  interaction,  the
       entropy  pool  may  be in a fairly predictable state.  This reduces the
       actual amount of noise in the entropy pool below the estimate.  In  or‐
       der  to counteract this effect, it helps to carry entropy pool informa‐
       tion across shut-downs and start-ups.  To do this, add the lines to  an
       appropriate  script  which  is run during the Linux system start-up se‐
       quence:

           echo "Initializing random number generator..."
           random_seed=/var/run/random-seed
           # Carry a random seed from start-up to start-up
           # Load and then save the whole entropy pool
           if [ -f $random_seed ]; then
               cat $random_seed >/dev/urandom
           else
               touch $random_seed
           fi
           chmod 600 $random_seed
           poolfile=/proc/sys/kernel/random/poolsize
           [ -r $poolfile ] && bits=$(cat $poolfile) || bits=4096
           bytes=$(expr $bits / 8)
           dd if=/dev/urandom of=$random_seed count=1 bs=$bytes

       Also, add the following lines in an appropriate  script  which  is  run
       during the Linux system shutdown:

           # Carry a random seed from shut-down to start-up
           # Save the whole entropy pool
           echo "Saving random seed..."
           random_seed=/var/run/random-seed
           touch $random_seed
           chmod 600 $random_seed
           poolfile=/proc/sys/kernel/random/poolsize
           [ -r $poolfile ] && bits=$(cat $poolfile) || bits=4096
           bytes=$(expr $bits / 8)
           dd if=/dev/urandom of=$random_seed count=1 bs=$bytes

       In   the  above  examples,  we  assume  Linux  2.6.0  or  later,  where
       /proc/sys/kernel/random/poolsize returns the size of the  entropy  pool
       in bits (see below).

   /proc interfaces
       The files in the directory /proc/sys/kernel/random (present since Linux
       2.3.16) provide additional information about the /dev/random device:

       entropy_avail
              This read-only file gives the available entropy, in bits.   This
              will be a number in the range 0 to 4096.

       poolsize
              This  file gives the size of the entropy pool.  The semantics of
              this file vary across kernel versions:

              Linux 2.4:
                     This file gives the size of the entropy  pool  in  bytes.
                     Normally,  this  file  will have the value 512, but it is
                     writable, and can be changed to any value  for  which  an
                     algorithm  is  available.   The  choices are 32, 64, 128,
                     256, 512, 1024, or 2048.

              Linux 2.6 and later:
                     This file is read-only, and gives the size of the entropy
                     pool in bits.  It contains the value 4096.

       read_wakeup_threshold
              This  file  contains  the number of bits of entropy required for
              waking  up  processes  that  sleep  waiting  for  entropy   from
              /dev/random.  The default is 64.

       write_wakeup_threshold
              This  file contains the number of bits of entropy below which we
              wake up processes that do a select(2) or poll(2) for  write  ac‐
              cess  to /dev/random.  These values can be changed by writing to
              the files.

       uuid and boot_id
              These   read-only   files   contain    random    strings    like
              6fd5a44b-35f4-4ad4-a9b9-6b9be13e1fe9.   The  former is generated
              afresh for each read, the latter was generated once.

   ioctl(2) interface
       The following ioctl(2) requests are defined on  file  descriptors  con‐
       nected  to  either /dev/random or /dev/urandom.  All requests performed
       will interact with the input entropy pool  impacting  both  /dev/random
       and /dev/urandom.  The CAP_SYS_ADMIN capability is required for all re‐
       quests except RNDGETENTCNT.

       RNDGETENTCNT
              Retrieve the entropy count of the input pool, the contents  will
              be  the  same  as the entropy_avail file under proc.  The result
              will be stored in the int pointed to by the argument.

       RNDADDTOENTCNT
              Increment or decrement the entropy count of the  input  pool  by
              the value pointed to by the argument.

       RNDGETPOOL
              Removed in Linux 2.6.9.

       RNDADDENTROPY
              Add  some additional entropy to the input pool, incrementing the
              entropy count.  This differs  from  writing  to  /dev/random  or
              /dev/urandom,  which  only adds some data but does not increment
              the entropy count.  The following structure is used:

                  struct rand_pool_info {
                      int    entropy_count;
                      int    buf_size;
                      __u32  buf[0];
                  };

              Here entropy_count is the value added to  (or  subtracted  from)
              the  entropy count, and buf is the buffer of size buf_size which
              gets added to the entropy pool.

       RNDZAPENTCNT, RNDCLEARPOOL
              Zero the entropy count of all pools and  add  some  system  data
              (such as wall clock) to the pools.

FILES
       /dev/random
       /dev/urandom

NOTES
       For  an  overview  and comparison of the various interfaces that can be
       used to obtain randomness, see random(7).

BUGS
       During early boot time, reads from /dev/urandom may return  data  prior
       to the entropy pool being initialized.

SEE ALSO
       mknod(1), getrandom(2), random(7)

       RFC 1750, "Randomness Recommendations for Security"

Linux man-pages 6.04              2022-12-04                         random(4)
random(7)              Miscellaneous Information Manual              random(7)

NAME
       random - overview of interfaces for obtaining randomness

DESCRIPTION
       The  kernel random-number generator relies on entropy gathered from de‐
       vice drivers and other sources of environmental noise to seed a crypto‐
       graphically  secure  pseudorandom number generator (CSPRNG).  It is de‐
       signed for security, rather than speed.

       The following interfaces provide  access  to  output  from  the  kernel
       CSPRNG:

       •  The  /dev/urandom  and  /dev/random  devices, both described in ran‐
          dom(4).  These devices have been present on Linux since early times,
          and are also available on many other systems.

       •  The  Linux-specific  getrandom(2) system call, available since Linux
          3.17.  This system call provides access either to the same source as
          /dev/urandom (called the urandom source in this page) or to the same
          source as /dev/random (called the random source in this page).   The
          default  is  the  urandom  source;  the random source is selected by
          specifying the GRND_RANDOM flag to the  system  call.   (The  geten‐
          tropy(3) function provides a slightly more portable interface on top
          of getrandom(2).)

   Initialization of the entropy pool
       The kernel collects bits of entropy from the environment.  When a  suf‐
       ficient  number  of random bits has been collected, the entropy pool is
       considered to be initialized.

   Choice of random source
       Unless you are doing long-term key generation (and most likely not even
       then), you probably shouldn't be reading from the /dev/random device or
       employing getrandom(2) with the GRND_RANDOM flag.  Instead, either read
       from  the  /dev/urandom  device  or  employ  getrandom(2)  without  the
       GRND_RANDOM flag.  The cryptographic algorithms used  for  the  urandom
       source are quite conservative, and so should be sufficient for all pur‐
       poses.

       The disadvantage of GRND_RANDOM and reads from /dev/random is that  the
       operation  can  block  for  an indefinite period of time.  Furthermore,
       dealing with the partially fulfilled requests that can occur when using
       GRND_RANDOM or when reading from /dev/random increases code complexity.

   Monte Carlo and other probabilistic sampling applications
       Using  these  interfaces  to provide large quantities of data for Monte
       Carlo simulations or other programs/algorithms which are  doing  proba‐
       bilistic  sampling  will  be slow.  Furthermore, it is unnecessary, be‐
       cause such applications do not  need  cryptographically  secure  random
       numbers.   Instead, use the interfaces described in this page to obtain
       a small amount of data to seed a user-space pseudorandom number genera‐
       tor for use by such applications.

   Comparison between getrandom, /dev/urandom, and /dev/random
       The  following  table summarizes the behavior of the various interfaces
       that can be used to obtain randomness.  GRND_NONBLOCK is  a  flag  that
       can  be used to control the blocking behavior of getrandom(2).  The fi‐
       nal column of the table considers the case that can occur in early boot
       time when the entropy pool is not yet initialized.

       ┌──────────────┬──────────────┬────────────────┬────────────────────┐
       │Interface     │ Pool         │ Blocking       │ Behavior when pool │
       │              │              │ behavior       │ is not yet ready   │
       ├──────────────┼──────────────┼────────────────┼────────────────────┤
       │/dev/random   │ Blocking     │ If entropy too │ Blocks until       │
       │              │ pool         │ low, blocks    │ enough entropy     │
       │              │              │ until there is │ gathered           │
       │              │              │ enough entropy │                    │
       │              │              │ again          │                    │
       ├──────────────┼──────────────┼────────────────┼────────────────────┤
       │/dev/urandom  │ CSPRNG out‐  │ Never blocks   │ Returns output     │
       │              │ put          │                │ from uninitialized │
       │              │              │                │ CSPRNG (may be low │
       │              │              │                │ entropy and un‐    │
       │              │              │                │ suitable for cryp‐ │
       │              │              │                │ tography)          │
       ├──────────────┼──────────────┼────────────────┼────────────────────┤
       │getrandom()   │ Same as      │ Does not block │ Blocks until pool  │
       │              │ /dev/urandom │ once is pool   │ ready              │
       │              │              │ ready          │                    │
       ├──────────────┼──────────────┼────────────────┼────────────────────┤
       │getrandom()   │ Same as      │ If entropy too │ Blocks until pool  │
       │GRND_RANDOM   │ /dev/random  │ low, blocks    │ ready              │
       │              │              │ until there is │                    │
       │              │              │ enough entropy │                    │
       │              │              │ again          │                    │
       ├──────────────┼──────────────┼────────────────┼────────────────────┤
       │getrandom()   │ Same as      │ Does not block │ EAGAIN             │
       │GRND_NONBLOCK │ /dev/urandom │ once is pool   │                    │
       │              │              │ ready          │                    │
       ├──────────────┼──────────────┼────────────────┼────────────────────┤
       │getrandom()   │ Same as      │ EAGAIN if not  │ EAGAIN             │
       │GRND_RANDOM + │ /dev/random  │ enough entropy │                    │
       │GRND_NONBLOCK │              │ available      │                    │
       └──────────────┴──────────────┴────────────────┴────────────────────┘
   Generating cryptographic keys
       The amount of seed material required to generate  a  cryptographic  key
       equals  the effective key size of the key.  For example, a 3072-bit RSA
       or Diffie-Hellman private key has an effective key size of 128 bits (it
       requires about 2^128 operations to break) so a key generator needs only
       128 bits (16 bytes) of seed material from /dev/random.

       While some safety margin above that minimum is reasonable, as  a  guard
       against  flaws  in  the  CSPRNG  algorithm,  no cryptographic primitive
       available today can hope to promise more than 256 bits of security,  so
       if any program reads more than 256 bits (32 bytes) from the kernel ran‐
       dom pool per invocation, or per reasonable reseed  interval  (not  less
       than  one minute), that should be taken as a sign that its cryptography
       is not skillfully implemented.

SEE ALSO
       getrandom(2), getauxval(3), getentropy(3), random(4), urandom(4),  sig‐
       nal(7)

Linux man-pages 6.04              2023-02-10                         random(7)
