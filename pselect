PSELECT(3P)                POSIX Programmer's Manual               PSELECT(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       pselect, select — synchronous I/O multiplexing

SYNOPSIS
       #include <sys/select.h>

       int pselect(int nfds, fd_set *restrict readfds,
           fd_set *restrict writefds, fd_set *restrict errorfds,
           const struct timespec *restrict timeout,
           const sigset_t *restrict sigmask);
       int select(int nfds, fd_set *restrict readfds,
           fd_set *restrict writefds, fd_set *restrict errorfds,
           struct timeval *restrict timeout);
       void FD_CLR(int fd, fd_set *fdset);
       int FD_ISSET(int fd, fd_set *fdset);
       void FD_SET(int fd, fd_set *fdset);
       void FD_ZERO(fd_set *fdset);

DESCRIPTION
       The pselect() function shall examine the file descriptor sets whose ad‐
       dresses are passed in the readfds, writefds, and errorfds parameters to
       see whether some of their descriptors are ready for reading, are  ready
       for writing, or have an exceptional condition pending, respectively.

       The  select()  function  shall be equivalent to the pselect() function,
       except as follows:

        *  For the select() function, the timeout period is given  in  seconds
           and microseconds in an argument of type struct timeval, whereas for
           the pselect() function the timeout period is given in  seconds  and
           nanoseconds in an argument of type struct timespec.

        *  The  select()  function has no sigmask argument; it shall behave as
           pselect() does when sigmask is a null pointer.

        *  Upon successful completion, the select() function  may  modify  the
           object pointed to by the timeout argument.

       The  pselect() and select() functions shall support regular files, ter‐
       minal and pseudo-terminal devices, STREAMS-based files,  FIFOs,  pipes,
       and sockets. The behavior of pselect() and select() on file descriptors
       that refer to other types of file is unspecified.

       The nfds argument specifies the range of descriptors to be tested.  The
       first  nfds  descriptors shall be checked in each set; that is, the de‐
       scriptors from zero through nfds-1 in the descriptor sets shall be  ex‐
       amined.

       If  the  readfds argument is not a null pointer, it points to an object
       of type fd_set that on input  specifies  the  file  descriptors  to  be
       checked for being ready to read, and on output indicates which file de‐
       scriptors are ready to read.

       If the writefds argument is not a null pointer, it points to an  object
       of  type  fd_set  that  on  input  specifies the file descriptors to be
       checked for being ready to write, and on output  indicates  which  file
       descriptors are ready to write.

       If  the errorfds argument is not a null pointer, it points to an object
       of type fd_set that on input  specifies  the  file  descriptors  to  be
       checked  for  error  conditions  pending, and on output indicates which
       file descriptors have error conditions pending.

       Upon successful completion, the pselect() or  select()  function  shall
       modify  the  objects  pointed to by the readfds, writefds, and errorfds
       arguments to indicate which file descriptors  are  ready  for  reading,
       ready  for  writing,  or have an error condition pending, respectively,
       and shall return the total number of ready descriptors in all the  out‐
       put  sets.  For  each file descriptor less than nfds, the corresponding
       bit shall be set upon successful completion if it was set on input  and
       the associated condition is true for that file descriptor.

       If  none of the selected descriptors are ready for the requested opera‐
       tion, the pselect() or select() function shall block until at least one
       of the requested operations becomes ready, until the timeout occurs, or
       until interrupted by a signal.  The timeout parameter controls how long
       the pselect() or select() function shall take before timing out. If the
       timeout parameter is not a null pointer, it specifies a maximum  inter‐
       val to wait for the selection to complete. If the specified time inter‐
       val expires without any requested operation becoming ready,  the  func‐
       tion shall return. If the timeout parameter is a null pointer, then the
       call to pselect() or select() shall block indefinitely until  at  least
       one  descriptor  meets  the  specified  criteria. To effect a poll, the
       timeout parameter should not be a null pointer, and should point  to  a
       zero-valued timespec structure.

       The  use  of  a  timeout  does  not affect any pending timers set up by
       alarm() or setitimer().

       Implementations may place limitations on the maximum  timeout  interval
       supported. All implementations shall support a maximum timeout interval
       of at least 31 days. If the timeout argument specifies a timeout inter‐
       val  greater than the implementation-defined maximum value, the maximum
       value shall be used as the actual timeout  value.  Implementations  may
       also  place limitations on the granularity of timeout intervals. If the
       requested timeout interval requires a finer granularity than the imple‐
       mentation  supports, the actual timeout interval shall be rounded up to
       the next supported value.

       If sigmask is not a null pointer, then the pselect() function shall re‐
       place the signal mask of the caller by the set of signals pointed to by
       sigmask before examining the descriptors, and shall restore the  signal
       mask of the calling thread before returning.

       A  descriptor  shall  be considered ready for reading when a call to an
       input function with O_NONBLOCK clear would not block,  whether  or  not
       the  function would transfer data successfully. (The function might re‐
       turn data, an end-of-file indication, or an error other than one  indi‐
       cating  that  it  is blocked, and in each of these cases the descriptor
       shall be considered ready for reading.)

       A descriptor shall be considered ready for writing when a  call  to  an
       output  function  with O_NONBLOCK clear would not block, whether or not
       the function would transfer data successfully.

       If a socket has a pending error, it shall be considered to have an  ex‐
       ceptional condition pending. Otherwise, what constitutes an exceptional
       condition is file type-specific. For a file descriptor for use  with  a
       socket,  it  is protocol-specific except as noted below. For other file
       types it is implementation-defined. If the operation is meaningless for
       a  particular  file type, pselect() or select() shall indicate that the
       descriptor is ready for read or write operations,  and  shall  indicate
       that the descriptor has no exceptional condition pending.

       If  a  descriptor refers to a socket, the implied input function is the
       recvmsg() function with  parameters  requesting  normal  and  ancillary
       data,  such  that the presence of either type shall cause the socket to
       be marked as readable.  The  presence  of  out-of-band  data  shall  be
       checked  if the socket option SO_OOBINLINE has been enabled, as out-of-
       band data is enqueued with normal data. If the socket is currently lis‐
       tening,  then  it shall be marked as readable if an incoming connection
       request has been received, and a call to the  accept()  function  shall
       complete without blocking.

       If  a descriptor refers to a socket, the implied output function is the
       sendmsg() function supplying an amount of normal data equal to the cur‐
       rent  value of the SO_SNDLOWAT option for the socket. If a non-blocking
       call to the connect() function has been made for a socket, and the con‐
       nection attempt has either succeeded or failed leaving a pending error,
       the socket shall be marked as writable.

       A socket shall be considered to have an exceptional  condition  pending
       if a receive operation with O_NONBLOCK clear for the open file descrip‐
       tion and with the MSG_OOB flag set would return out-of-band data  with‐
       out  blocking.  (It is protocol-specific whether the MSG_OOB flag would
       be used to read out-of-band data.) A socket shall also be considered to
       have  an  exceptional  condition pending if an out-of-band data mark is
       present in the receive queue. Other circumstances under which a  socket
       may  be  considered to have an exceptional condition pending are proto‐
       col-specific and implementation-defined.

       If the readfds, writefds, and errorfds arguments are all null  pointers
       and  the  timeout  argument is not a null pointer, the pselect() or se‐
       lect() function shall block for the time  specified,  or  until  inter‐
       rupted  by  a  signal. If the readfds, writefds, and errorfds arguments
       are all null pointers and the timeout argument is a null  pointer,  the
       pselect()  or select() function shall block until interrupted by a sig‐
       nal.

       File descriptors associated with regular files shall always select true
       for ready to read, ready to write, and error conditions.

       On  failure,  the  objects pointed to by the readfds, writefds, and er‐
       rorfds arguments shall not be modified. If the timeout interval expires
       without  the  specified  condition  being true for any of the specified
       file descriptors, the objects pointed to by the readfds, writefds,  and
       errorfds arguments shall have all bits set to 0.

       File descriptor masks of type fd_set can be initialized and tested with
       FD_CLR(), FD_ISSET(),  FD_SET(),  and  FD_ZERO().   It  is  unspecified
       whether  each  of these is a macro or a function. If a macro definition
       is suppressed in order to access an actual function, or a  program  de‐
       fines  an  external identifier with any of these names, the behavior is
       undefined.

       FD_CLR(fd, fdsetp) shall remove the file descriptor  fd  from  the  set
       pointed  to  by fdsetp.  If fd is not a member of this set, there shall
       be no effect on the set, nor will an error be returned.

       FD_ISSET(fd, fdsetp) shall evaluate to non-zero if the file  descriptor
       fd  is  a member of the set pointed to by fdsetp, and shall evaluate to
       zero otherwise.

       FD_SET(fd, fdsetp) shall add the file descriptor fd to the set  pointed
       to  by fdsetp.  If the file descriptor fd is already in this set, there
       shall be no effect on the set, nor will an error be returned.

       FD_ZERO(fdsetp) shall initialize the descriptor set pointed to  by  fd‐
       setp  to  the null set. No error is returned if the set is not empty at
       the time FD_ZERO() is invoked.

       The behavior of these macros is undefined if the fd  argument  is  less
       than  0 or greater than or equal to FD_SETSIZE, or if fd is not a valid
       file descriptor, or if any of the arguments are expressions with  side-
       effects.

       If  a  thread gets canceled during a pselect() call, the signal mask in
       effect when executing the registered cleanup functions  is  either  the
       original  signal  mask or the signal mask installed as part of the pse‐
       lect() call.

RETURN VALUE
       Upon successful completion, the pselect() and select() functions  shall
       return  the  total  number of bits set in the bit masks.  Otherwise, -1
       shall be returned, and errno shall be set to indicate the error.

       FD_CLR(), FD_SET(), and FD_ZERO() do not return  a  value.   FD_ISSET()
       shall  return a non-zero value if the bit for the file descriptor fd is
       set in the file descriptor set pointed to by fdset, and 0 otherwise.

ERRORS
       Under the following conditions, pselect() and select() shall  fail  and
       set errno to:

       EBADF  One  or  more  of  the file descriptor sets specified a file de‐
              scriptor that is not a valid open file descriptor.

       EINTR  The function was interrupted while blocked waiting  for  any  of
              the  selected descriptors to become ready and before the timeout
              interval expired.

                   If SA_RESTART has been set for the interrupting signal,  it
                   is  implementation-defined whether the function restarts or
                   returns with [EINTR].

       EINVAL An invalid timeout interval was specified.

       EINVAL The nfds argument is less than 0 or greater than FD_SETSIZE.

       EINVAL One of the specified file descriptors refers to a STREAM or mul‐
              tiplexer that is linked (directly or indirectly) downstream from
              a multiplexer.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       In earlier versions of the  Single  UNIX  Specification,  the  select()
       function was defined in the <sys/time.h> header. This is now changed to
       <sys/select.h>.  The rationale for this change was as follows: the  in‐
       troduction of the pselect() function included the <sys/select.h> header
       and the <sys/select.h> header defines all the related  definitions  for
       the pselect() and select() functions. Backwards-compatibility to exist‐
       ing XSI implementations is handled by allowing <sys/time.h> to  include
       <sys/select.h>.

       Code  which  wants to avoid the ambiguity of the signal mask for thread
       cancellation handlers can install an  additional  cancellation  handler
       which resets the signal mask to the expected value.

           void cleanup(void *arg)
           {
               sigset_t *ss = (sigset_t *) arg;
               pthread_sigmask(SIG_SETMASK, ss, NULL);
           }

           int call_pselect(int nfds, fd_set *readfds, fd_set *writefds,
               fd_set errorfds, const struct timespec *timeout,
               const sigset_t *sigmask)
           {
               sigset_t oldmask;
               int result;
               pthread_sigmask(SIG_SETMASK, NULL, &oldmask);
               pthread_cleanup_push(cleanup, &oldmask);
               result = pselect(nfds, readfds, writefds, errorfds, timeout, sigmask);
               pthread_cleanup_pop(0);
               return result;
           }

FUTURE DIRECTIONS
       None.

SEE ALSO
       accept(),  alarm(),  connect(),  fcntl(),  getitimer(), poll(), read(),
       recvmsg(), sendmsg(), write()

       The  Base   Definitions   volume   of   POSIX.1‐2017,   <sys_select.h>,
       <sys_time.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                          PSELECT(3P)
select(2)                     System Calls Manual                    select(2)

NAME
       select,  pselect,  FD_CLR, FD_ISSET, FD_SET, FD_ZERO, fd_set - synchro‐
       nous I/O multiplexing

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <sys/select.h>

       typedef /* ... */ fd_set;

       int select(int nfds, fd_set *_Nullable restrict readfds,
                  fd_set *_Nullable restrict writefds,
                  fd_set *_Nullable restrict exceptfds,
                  struct timeval *_Nullable restrict timeout);

       void FD_CLR(int fd, fd_set *set);
       int  FD_ISSET(int fd, fd_set *set);
       void FD_SET(int fd, fd_set *set);
       void FD_ZERO(fd_set *set);

       int pselect(int nfds, fd_set *_Nullable restrict readfds,
                  fd_set *_Nullable restrict writefds,
                  fd_set *_Nullable restrict exceptfds,
                  const struct timespec *_Nullable restrict timeout,
                  const sigset_t *_Nullable restrict sigmask);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       pselect():
           _POSIX_C_SOURCE >= 200112L

DESCRIPTION
       WARNING: select() can monitor only file descriptors  numbers  that  are
       less  than  FD_SETSIZE (1024)—an unreasonably low limit for many modern
       applications—and this limitation will not change.  All modern  applica‐
       tions  should instead use poll(2) or epoll(7), which do not suffer this
       limitation.

       select() allows a program to monitor multiple file descriptors, waiting
       until one or more of the file descriptors become "ready" for some class
       of I/O operation (e.g., input possible).  A file descriptor is  consid‐
       ered  ready  if it is possible to perform a corresponding I/O operation
       (e.g., read(2), or a sufficiently small write(2)) without blocking.

   fd_set
       A structure type that can represent a set of file descriptors.  Accord‐
       ing  to  POSIX,  the  maximum  number  of file descriptors in an fd_set
       structure is the value of the macro FD_SETSIZE.

   File descriptor sets
       The principal arguments of select() are three "sets" of  file  descrip‐
       tors  (declared  with  the type fd_set), which allow the caller to wait
       for three classes of events on the specified set of  file  descriptors.
       Each  of  the  fd_set arguments may be specified as NULL if no file de‐
       scriptors are to be watched for the corresponding class of events.

       Note well: Upon return, each of the file descriptor sets is modified in
       place  to indicate which file descriptors are currently "ready".  Thus,
       if using select() within a loop, the sets must be reinitialized  before
       each call.

       The contents of a file descriptor set can be manipulated using the fol‐
       lowing macros:

       FD_ZERO()
              This macro clears (removes all file descriptors from)  set.   It
              should  be employed as the first step in initializing a file de‐
              scriptor set.

       FD_SET()
              This macro adds the file descriptor fd to set.   Adding  a  file
              descriptor  that  is  already present in the set is a no-op, and
              does not produce an error.

       FD_CLR()
              This macro removes the file descriptor fd from set.  Removing  a
              file  descriptor  that is not present in the set is a no-op, and
              does not produce an error.

       FD_ISSET()
              select() modifies the contents of  the  sets  according  to  the
              rules  described  below.  After calling select(), the FD_ISSET()
              macro can be used to test if a file descriptor is still  present
              in  a set.  FD_ISSET() returns nonzero if the file descriptor fd
              is present in set, and zero if it is not.

   Arguments
       The arguments of select() are as follows:

       readfds
              The file descriptors in this set are watched to see if they  are
              ready  for reading.  A file descriptor is ready for reading if a
              read operation will not block; in particular, a file  descriptor
              is also ready on end-of-file.

              After select() has returned, readfds will be cleared of all file
              descriptors except for those that are ready for reading.

       writefds
              The file descriptors in this set are watched to see if they  are
              ready  for writing.  A file descriptor is ready for writing if a
              write operation will not block.  However, even  if  a  file  de‐
              scriptor indicates as writable, a large write may still block.

              After  select()  has  returned,  writefds will be cleared of all
              file descriptors except for those that are ready for writing.

       exceptfds
              The file descriptors in this set are  watched  for  "exceptional
              conditions".   For  examples of some exceptional conditions, see
              the discussion of POLLPRI in poll(2).

              After select() has returned, exceptfds will be  cleared  of  all
              file  descriptors except for those for which an exceptional con‐
              dition has occurred.

       nfds   This argument should be set to  the  highest-numbered  file  de‐
              scriptor  in  any of the three sets, plus 1.  The indicated file
              descriptors in each set are checked, up to this limit  (but  see
              BUGS).

       timeout
              The  timeout  argument is a timeval structure (shown below) that
              specifies the interval that select() should block waiting for  a
              file  descriptor to become ready.  The call will block until ei‐
              ther:

              •  a file descriptor becomes ready;

              •  the call is interrupted by a signal handler; or

              •  the timeout expires.

              Note that the timeout interval will be rounded up to the  system
              clock  granularity,  and  kernel scheduling delays mean that the
              blocking interval may overrun by a small amount.

              If both fields of the timeval structure are zero, then  select()
              returns immediately.  (This is useful for polling.)

              If  timeout  is  specified as NULL, select() blocks indefinitely
              waiting for a file descriptor to become ready.

   pselect()
       The pselect() system call allows an application to  safely  wait  until
       either a file descriptor becomes ready or until a signal is caught.

       The  operation of select() and pselect() is identical, other than these
       three differences:

       •  select() uses a timeout that is a struct timeval (with  seconds  and
          microseconds),  while pselect() uses a struct timespec (with seconds
          and nanoseconds).

       •  select() may update the timeout argument to indicate how  much  time
          was left.  pselect() does not change this argument.

       •  select()  has  no  sigmask argument, and behaves as pselect() called
          with NULL sigmask.

       sigmask is a pointer to a signal mask (see sigprocmask(2));  if  it  is
       not  NULL, then pselect() first replaces the current signal mask by the
       one pointed to by sigmask, then does the "select"  function,  and  then
       restores  the  original  signal  mask.  (If sigmask is NULL, the signal
       mask is not modified during the pselect() call.)

       Other than the difference in the precision of the timeout argument, the
       following pselect() call:

           ready = pselect(nfds, &readfds, &writefds, &exceptfds,
                           timeout, &sigmask);

       is equivalent to atomically executing the following calls:

           sigset_t origmask;

           pthread_sigmask(SIG_SETMASK, &sigmask, &origmask);
           ready = select(nfds, &readfds, &writefds, &exceptfds, timeout);
           pthread_sigmask(SIG_SETMASK, &origmask, NULL);

       The  reason  that  pselect() is needed is that if one wants to wait for
       either a signal or for a file  descriptor  to  become  ready,  then  an
       atomic  test is needed to prevent race conditions.  (Suppose the signal
       handler sets a global flag and returns.  Then a  test  of  this  global
       flag followed by a call of select() could hang indefinitely if the sig‐
       nal arrived just after the test but just before the call.  By contrast,
       pselect()  allows  one  to first block signals, handle the signals that
       have come in, then call pselect() with the  desired  sigmask,  avoiding
       the race.)

   The timeout
       The timeout argument for select() is a structure of the following type:

           struct timeval {
               time_t      tv_sec;         /* seconds */
               suseconds_t tv_usec;        /* microseconds */
           };

       The corresponding argument for pselect() is a timespec(3) structure.

       On  Linux,  select() modifies timeout to reflect the amount of time not
       slept; most other implementations do not do this.  (POSIX.1 permits ei‐
       ther  behavior.)  This causes problems both when Linux code which reads
       timeout is ported to other operating systems, and when code  is  ported
       to  Linux that reuses a struct timeval for multiple select()s in a loop
       without reinitializing it.  Consider timeout to be undefined after  se‐
       lect() returns.

RETURN VALUE
       On  success,  select() and pselect() return the number of file descrip‐
       tors contained in the three returned descriptor sets (that is, the  to‐
       tal  number of bits that are set in readfds, writefds, exceptfds).  The
       return value may be zero if the timeout expired  before  any  file  de‐
       scriptors became ready.

       On  error,  -1 is returned, and errno is set to indicate the error; the
       file descriptor sets are unmodified, and timeout becomes undefined.

ERRORS
       EBADF  An invalid file descriptor was given in one of the sets.   (Per‐
              haps  a file descriptor that was already closed, or one on which
              an error has occurred.)  However, see BUGS.

       EINTR  A signal was caught; see signal(7).

       EINVAL nfds is negative or exceeds  the  RLIMIT_NOFILE  resource  limit
              (see getrlimit(2)).

       EINVAL The value contained within timeout is invalid.

       ENOMEM Unable to allocate memory for internal tables.

VERSIONS
       On  some other UNIX systems, select() can fail with the error EAGAIN if
       the system fails to allocate  kernel-internal  resources,  rather  than
       ENOMEM  as Linux does.  POSIX specifies this error for poll(2), but not
       for select().  Portable programs may wish to check for EAGAIN and loop,
       just as with EINTR.

STANDARDS
       POSIX.1-2008.

HISTORY
       select()
              POSIX.1-2001, 4.4BSD (first appeared in 4.2BSD).

              Generally  portable to/from non-BSD systems supporting clones of
              the BSD socket layer (including  System V  variants).   However,
              note  that the System V variant typically sets the timeout vari‐
              able before returning, but the BSD variant does not.

       pselect()
              Linux 2.6.16.  POSIX.1g, POSIX.1-2001.

              Prior to this, it was emulated in glibc (but see BUGS).

       fd_set POSIX.1-2001.

NOTES
       The following header also provides the fd_set type: <sys/time.h>.

       An fd_set is a fixed size buffer.  Executing FD_CLR() or FD_SET()  with
       a value of fd that is negative or is equal to or larger than FD_SETSIZE
       will result in undefined behavior.  Moreover, POSIX requires fd to be a
       valid file descriptor.

       The  operation  of select() and pselect() is not affected by the O_NON‐
       BLOCK flag.

   The self-pipe trick
       On systems that lack pselect(), reliable  (and  more  portable)  signal
       trapping can be achieved using the self-pipe trick.  In this technique,
       a signal handler writes a byte to a pipe whose other end  is  monitored
       by  select()  in  the  main  program.  (To avoid possibly blocking when
       writing to a pipe that may be full or reading from a pipe that  may  be
       empty,  nonblocking  I/O  is  used when reading from and writing to the
       pipe.)

   Emulating usleep(3)
       Before the advent of usleep(3), some code employed a call  to  select()
       with  all  three  sets  empty,  nfds  zero, and a non-NULL timeout as a
       fairly portable way to sleep with subsecond precision.

   Correspondence between select() and poll() notifications
       Within the Linux kernel source, we find the following definitions which
       show the correspondence between the readable, writable, and exceptional
       condition notifications of select() and the  event  notifications  pro‐
       vided by poll(2) and epoll(7):

           #define POLLIN_SET  (EPOLLRDNORM | EPOLLRDBAND | EPOLLIN |
                                EPOLLHUP | EPOLLERR)
                              /* Ready for reading */
           #define POLLOUT_SET (EPOLLWRBAND | EPOLLWRNORM | EPOLLOUT |
                                EPOLLERR)
                              /* Ready for writing */
           #define POLLEX_SET  (EPOLLPRI)
                              /* Exceptional condition */

   Multithreaded applications
       If  a  file descriptor being monitored by select() is closed in another
       thread, the result is unspecified.  On some UNIX systems, select()  un‐
       blocks  and  returns,  with  an  indication that the file descriptor is
       ready (a subsequent I/O operation will likely fail with an  error,  un‐
       less  another  process reopens the file descriptor between the time se‐
       lect() returned and the I/O operation is  performed).   On  Linux  (and
       some  other systems), closing the file descriptor in another thread has
       no effect on select().  In summary, any application that  relies  on  a
       particular behavior in this scenario must be considered buggy.

   C library/kernel differences
       The  Linux kernel allows file descriptor sets of arbitrary size, deter‐
       mining the length of the sets to be checked from  the  value  of  nfds.
       However, in the glibc implementation, the fd_set type is fixed in size.
       See also BUGS.

       The pselect() interface described in this page is implemented by glibc.
       The underlying Linux system call is named pselect6().  This system call
       has somewhat different behavior from the glibc wrapper function.

       The Linux pselect6() system call modifies its timeout  argument.   How‐
       ever,  the  glibc wrapper function hides this behavior by using a local
       variable for the timeout argument that is passed to  the  system  call.
       Thus,  the  glibc  pselect() function does not modify its timeout argu‐
       ment; this is the behavior required by POSIX.1-2001.

       The final argument of the pselect6() system call is  not  a  sigset_t *
       pointer, but is instead a structure of the form:

           struct {
               const kernel_sigset_t *ss;   /* Pointer to signal set */
               size_t ss_len;               /* Size (in bytes) of object
                                               pointed to by 'ss' */
           };

       This  allows the system call to obtain both a pointer to the signal set
       and its size, while allowing for the fact that most architectures  sup‐
       port a maximum of 6 arguments to a system call.  See sigprocmask(2) for
       a discussion of the difference between the kernel and  libc  notion  of
       the signal set.

   Historical glibc details
       glibc  2.0 provided an incorrect version of pselect() that did not take
       a sigmask argument.

       From glibc 2.1 to glibc 2.2.1, one must define _GNU_SOURCE in order  to
       obtain the declaration of pselect() from <sys/select.h>.

BUGS
       POSIX allows an implementation to define an upper limit, advertised via
       the constant FD_SETSIZE, on the range of file descriptors that  can  be
       specified  in a file descriptor set.  The Linux kernel imposes no fixed
       limit, but the glibc implementation makes  fd_set  a  fixed-size  type,
       with  FD_SETSIZE  defined  as 1024, and the FD_*() macros operating ac‐
       cording to that limit.  To monitor file descriptors greater than  1023,
       use poll(2) or epoll(7) instead.

       The implementation of the fd_set arguments as value-result arguments is
       a design error that is avoided in poll(2) and epoll(7).

       According to POSIX, select() should check all specified  file  descrip‐
       tors  in  the three file descriptor sets, up to the limit nfds-1.  How‐
       ever, the current implementation ignores any file descriptor  in  these
       sets  that  is greater than the maximum file descriptor number that the
       process currently has open.  According to POSIX, any such file descrip‐
       tor  that  is  specified  in one of the sets should result in the error
       EBADF.

       Starting with glibc 2.1, glibc provided an emulation of pselect()  that
       was implemented using sigprocmask(2) and select().  This implementation
       remained vulnerable to the very race condition that pselect()  was  de‐
       signed  to  prevent.  Modern versions of glibc use the (race-free) pse‐
       lect() system call on kernels where it is provided.

       On Linux, select() may report a socket file descriptor  as  "ready  for
       reading",  while nevertheless a subsequent read blocks.  This could for
       example happen when data has arrived but upon examination has the wrong
       checksum and is discarded.  There may be other circumstances in which a
       file descriptor is spuriously reported as ready.  Thus it may be  safer
       to use O_NONBLOCK on sockets that should not block.

       On  Linux, select() also modifies timeout if the call is interrupted by
       a signal handler (i.e., the EINTR error return).  This is not permitted
       by POSIX.1.  The Linux pselect() system call has the same behavior, but
       the glibc wrapper hides this behavior by internally copying the timeout
       to a local variable and passing that variable to the system call.

EXAMPLES
       #include <stdio.h>
       #include <stdlib.h>
       #include <sys/select.h>

       int
       main(void)
       {
           int             retval;
           fd_set          rfds;
           struct timeval  tv;

           /* Watch stdin (fd 0) to see when it has input. */

           FD_ZERO(&rfds);
           FD_SET(0, &rfds);

           /* Wait up to five seconds. */

           tv.tv_sec = 5;
           tv.tv_usec = 0;

           retval = select(1, &rfds, NULL, NULL, &tv);
           /* Don't rely on the value of tv now! */

           if (retval == -1)
               perror("select()");
           else if (retval)
               printf("Data is available now.\n");
               /* FD_ISSET(0, &rfds) will be true. */
           else
               printf("No data within five seconds.\n");

           exit(EXIT_SUCCESS);
       }

SEE ALSO
       accept(2),  connect(2),  poll(2), read(2), recv(2), restart_syscall(2),
       send(2), sigprocmask(2), write(2), timespec(3), epoll(7), time(7)

       For a tutorial with discussion and examples, see select_tut(2).

Linux man-pages 6.04              2023-03-30                         select(2)
