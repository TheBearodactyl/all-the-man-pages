RMDIR(1)                         User Commands                        RMDIR(1)

NAME
       rmdir - remove empty directories

SYNOPSIS
       rmdir [OPTION]... DIRECTORY...

DESCRIPTION
       Remove the DIRECTORY(ies), if they are empty.

       --ignore-fail-on-non-empty
              ignore each failure to remove a non-empty directory

       -p, --parents
              remove DIRECTORY and its ancestors; e.g., 'rmdir -p a/b' is sim‐
              ilar to 'rmdir a/b a'

       -v, --verbose
              output a diagnostic for every directory processed

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2023 Free Software Foundation, Inc.   License  GPLv3+:  GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you  are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       rmdir(2)

       Full documentation <https://www.gnu.org/software/coreutils/rmdir>
       or available locally via: info '(coreutils) rmdir invocation'

GNU coreutils 9.2                 April 2023                          RMDIR(1)
RMDIR(1P)                  POSIX Programmer's Manual                 RMDIR(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       rmdir — remove directories

SYNOPSIS
       rmdir [-p] dir...

DESCRIPTION
       The rmdir utility shall remove the directory entry  specified  by  each
       dir operand.

       For  each  dir operand, the rmdir utility shall perform actions equiva‐
       lent to the rmdir() function called with the dir operand  as  its  only
       argument.

       Directories  shall  be processed in the order specified. If a directory
       and a subdirectory of that directory are specified in a single  invoca‐
       tion  of the rmdir utility, the application shall specify the subdirec‐
       tory before the parent directory so that the parent directory  will  be
       empty when the rmdir utility tries to remove it.

OPTIONS
       The  rmdir  utility  shall  conform  to  the Base Definitions volume of
       POSIX.1‐2017, Section 12.2, Utility Syntax Guidelines.

       The following option shall be supported:

       -p        Remove all directories in a pathname. For each dir operand:

                  1. The directory entry it names shall be removed.

                  2. If the dir operand includes more than one pathname compo‐
                     nent,  effects  equivalent to the following command shall
                     occur:

                         rmdir -p $(dirname dir)

OPERANDS
       The following operand shall be supported:

       dir       A pathname of an empty directory to be removed.

STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       The following environment  variables  shall  affect  the  execution  of
       rmdir:

       LANG      Provide  a  default  value for the internationalization vari‐
                 ables that are unset or null. (See the Base Definitions  vol‐
                 ume  of POSIX.1‐2017, Section 8.2, Internationalization Vari‐
                 ables for the precedence  of  internationalization  variables
                 used to determine the values of locale categories.)

       LC_ALL    If  set  to  a non-empty string value, override the values of
                 all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of  sequences  of
                 bytes of text data as characters (for example, single-byte as
                 opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format
                 and  contents  of diagnostic messages written to standard er‐
                 ror.

       NLSPATH   Determine the location of message catalogs for the processing
                 of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

        0    Each  directory entry specified by a dir operand was removed suc‐
             cessfully.

       >0    An error occurred.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       The definition of an empty directory is one that contains, at most, di‐
       rectory entries for dot and dot-dot.

EXAMPLES
       If a directory a in the current directory is empty except it contains a
       directory b and a/b is empty except it contains a directory c:

           rmdir -p a/b/c

       removes all three directories.

RATIONALE
       On historical System V systems, the -p option also caused a message  to
       be  written  to  the standard output. The message indicated whether the
       whole path was removed or whether part of the path  remained  for  some
       reason.  The  STDERR  section  requires this diagnostic when the entire
       path specified by a dir operand is not removed, but does not allow  the
       status message reporting success to be written as a diagnostic.

       The rmdir utility on System V also included a -s option that suppressed
       the informational message output by the -p option. This option has been
       omitted because the informational message is not specified by this vol‐
       ume of POSIX.1‐2017.

FUTURE DIRECTIONS
       None.

SEE ALSO
       rm

       The Base Definitions volume of  POSIX.1‐2017,  Chapter  8,  Environment
       Variables, Section 12.2, Utility Syntax Guidelines

       The  System  Interfaces  volume of POSIX.1‐2017, remove(), rmdir(), un‐
       link()

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                            RMDIR(1P)
RMDIR(3P)                  POSIX Programmer's Manual                 RMDIR(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       rmdir — remove a directory

SYNOPSIS
       #include <unistd.h>

       int rmdir(const char *path);

DESCRIPTION
       The rmdir() function shall remove a directory whose name  is  given  by
       path.  The directory shall be removed only if it is an empty directory.

       If the directory is the root directory or the current working directory
       of any process, it is unspecified whether  the  function  succeeds,  or
       whether it shall fail and set errno to [EBUSY].

       If path names a symbolic link, then rmdir() shall fail and set errno to
       [ENOTDIR].

       If the path argument refers to a path whose final component  is  either
       dot or dot-dot, rmdir() shall fail.

       If  the  directory's link count becomes 0 and no process has the direc‐
       tory open, the space occupied by the directory shall be freed  and  the
       directory  shall no longer be accessible. If one or more processes have
       the directory open when the last link is removed, the dot  and  dot-dot
       entries, if present, shall be removed before rmdir() returns and no new
       entries may be created in the directory, but the directory shall not be
       removed until all references to the directory are closed.

       If  the directory is not an empty directory, rmdir() shall fail and set
       errno to [EEXIST] or [ENOTEMPTY].

       Upon successful completion, rmdir() shall mark for update the last data
       modification  and  last file status change timestamps of the parent di‐
       rectory.

RETURN VALUE
       Upon successful completion, the function rmdir() shall return 0. Other‐
       wise,  -1 shall be returned, and errno set to indicate the error. If -1
       is returned, the named directory shall not be changed.

ERRORS
       The rmdir() function shall fail if:

       EACCES Search permission is denied on a component of the  path  prefix,
              or write permission is denied on the parent directory of the di‐
              rectory to be removed.

       EBUSY  The directory to be removed is currently in use by the system or
              some  process and the implementation considers this to be an er‐
              ror.

       [EEXIST] or [ENOTEMPTY]
                   The path argument names a directory that is  not  an  empty
                   directory,  or  there are hard links to the directory other
                   than dot or a single entry in dot-dot.

       EINVAL      The path argument contains a last component that is dot.

       EIO         A physical I/O error has occurred.

       ELOOP       A loop exists in symbolic links encountered during  resolu‐
                   tion of the path argument.

       ENAMETOOLONG
                   The  length  of  a  component  of a pathname is longer than
                   {NAME_MAX}.

       ENOENT      A component of path does not name an existing file, or  the
                   path argument names a nonexistent directory or points to an
                   empty string.

       ENOTDIR     A component of path names an existing file that is  neither
                   a directory nor a symbolic link to a directory.

       [EPERM] or [EACCES]
                   The  S_ISVTX  flag  is  set on the directory containing the
                   file referred to by the path argument and the process  does
                   not  satisfy the criteria specified in the Base Definitions
                   volume of POSIX.1‐2017, Section 4.3, Directory Protection.

       EROFS       The directory entry to be removed resides  on  a  read-only
                   file system.

       The rmdir() function may fail if:

       ELOOP  More  than  {SYMLOOP_MAX} symbolic links were encountered during
              resolution of the path argument.

       ENAMETOOLONG
              The length of a pathname exceeds {PATH_MAX}, or pathname resolu‐
              tion  of  a symbolic link produced an intermediate result with a
              length that exceeds {PATH_MAX}.

       The following sections are informative.

EXAMPLES
   Removing a Directory
       The  following  example  shows  how  to  remove   a   directory   named
       /home/cnd/mod1.

           #include <unistd.h>

           int status;
           ...
           status = rmdir("/home/cnd/mod1");

APPLICATION USAGE
       None.

RATIONALE
       The rmdir() and rename() functions originated in 4.2 BSD, and they used
       [ENOTEMPTY] for the condition when the directory to be removed does not
       exist or new already exists. When the 1984 /usr/group standard was pub‐
       lished, it  contained  [EEXIST]  instead.  When  these  functions  were
       adopted  into System V, the 1984 /usr/group standard was used as a ref‐
       erence. Therefore, several existing  applications  and  implementations
       support/use  both  forms,  and  no agreement could be reached on either
       value. All implementations are required to  supply  both  [EEXIST]  and
       [ENOTEMPTY] in <errno.h> with distinct values, so that applications can
       use both values in C-language case statements.

       The meaning of deleting pathname/dot is unclear, because  the  name  of
       the  file  (directory)  in  the  parent  directory to be removed is not
       clear, particularly in the presence of multiple links to a directory.

       The POSIX.1‐1990 standard was silent with regard  to  the  behavior  of
       rmdir()  when  there are multiple hard links to the directory being re‐
       moved. The requirement to set errno to [EEXIST] or  [ENOTEMPTY]  clari‐
       fies the behavior in this case.

       If  the current working directory of the process is being removed, that
       should be an allowed error.

       Virtually all existing implementations detect [ENOTEMPTY] or  the  case
       of  dot-dot. The text in Section 2.3, Error Numbers about returning any
       one of the possible errors  permits  that  behavior  to  continue.  The
       [ELOOP] error may be returned if more than {SYMLOOP_MAX} symbolic links
       are encountered during resolution of the path argument.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.3, Error Numbers, mkdir(), remove(), rename(), unlink()

       The Base Definitions volume of  POSIX.1‐2017,  Section  4.3,  Directory
       Protection, <unistd.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                            RMDIR(3P)
rmdir(2)                      System Calls Manual                     rmdir(2)

NAME
       rmdir - delete a directory

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       int rmdir(const char *pathname);

DESCRIPTION
       rmdir() deletes a directory, which must be empty.

RETURN VALUE
       On  success,  zero is returned.  On error, -1 is returned, and errno is
       set to indicate the error.

ERRORS
       EACCES Write access to the directory containing pathname  was  not  al‐
              lowed,  or one of the directories in the path prefix of pathname
              did not allow search permission.  (See also path_resolution(7).)

       EBUSY  pathname is currently in use by the system or some process  that
              prevents  its  removal.   On  Linux, this means pathname is cur‐
              rently used as a mount point or is the  root  directory  of  the
              calling process.

       EFAULT pathname points outside your accessible address space.

       EINVAL pathname has .  as last component.

       ELOOP  Too many symbolic links were encountered in resolving pathname.

       ENAMETOOLONG
              pathname was too long.

       ENOENT A  directory  component  in pathname does not exist or is a dan‐
              gling symbolic link.

       ENOMEM Insufficient kernel memory was available.

       ENOTDIR
              pathname, or a component used as a  directory  in  pathname,  is
              not, in fact, a directory.

       ENOTEMPTY
              pathname contains entries other than . and .. ; or, pathname has
              ..  as its final component.  POSIX.1 also allows EEXIST for this
              condition.

       EPERM  The  directory  containing pathname has the sticky bit (S_ISVTX)
              set and the process's effective user ID is neither the  user  ID
              of  the  file to be deleted nor that of the directory containing
              it, and the process is not privileged (Linux: does not have  the
              CAP_FOWNER capability).

       EPERM  The  filesystem containing pathname does not support the removal
              of directories.

       EROFS  pathname refers to a directory on a read-only filesystem.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, SVr4, 4.3BSD.

BUGS
       Infelicities in the protocol underlying NFS can  cause  the  unexpected
       disappearance of directories which are still being used.

SEE ALSO
       rm(1),  rmdir(1),  chdir(2),  chmod(2), mkdir(2), rename(2), unlink(2),
       unlinkat(2)

Linux man-pages 6.04              2023-03-30                          rmdir(2)
