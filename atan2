atan2(3)                                                                                 Library Functions Manual                                                                                 atan2(3)

NAME
       atan2, atan2f, atan2l - arc tangent function of two variables

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       double atan2(double y, double x);
       float atan2f(float y, float x);
       long double atan2l(long double y, long double x);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       atan2f(), atan2l():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       These functions calculate the principal value of the arc tangent of y/x, using the signs of the two arguments to determine the quadrant of the result.

RETURN VALUE
       On success, these functions return the principal value of the arc tangent of y/x in radians; the return value is in the range [-pi, pi].

       If y is +0 (-0) and x is less than 0, +pi (-pi) is returned.

       If y is +0 (-0) and x is greater than 0, +0 (-0) is returned.

       If y is less than 0 and x is +0 or -0, -pi/2 is returned.

       If y is greater than 0 and x is +0 or -0, pi/2 is returned.

       If either x or y is NaN, a NaN is returned.

       If y is +0 (-0) and x is -0, +pi (-pi) is returned.

       If y is +0 (-0) and x is +0, +0 (-0) is returned.

       If y is a finite value greater (less) than 0, and x is negative infinity, +pi (-pi) is returned.

       If y is a finite value greater (less) than 0, and x is positive infinity, +0 (-0) is returned.

       If y is positive infinity (negative infinity), and x is finite, pi/2 (-pi/2) is returned.

       If y is positive infinity (negative infinity) and x is negative infinity, +3*pi/4 (-3*pi/4) is returned.

       If y is positive infinity (negative infinity) and x is positive infinity, +pi/4 (-pi/4) is returned.

ERRORS
       No errors occur.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │atan2(), atan2f(), atan2l()                                                                                                                                             │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       C99, POSIX.1-2001.

       The variant returning double also conforms to SVr4, 4.3BSD, C89.

SEE ALSO
       acos(3), asin(3), atan(3), carg(3), cos(3), sin(3), tan(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        atan2(3)
ATAN2(3P)                                                                                POSIX Programmer's Manual                                                                               ATAN2(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       atan2, atan2f, atan2l — arc tangent functions

SYNOPSIS
       #include <math.h>

       double atan2(double y, double x);
       float atan2f(float y, float x);
       long double atan2l(long double y, long double x);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       These functions shall compute the principal value of the arc tangent of y/x, using the signs of both arguments to determine the quadrant of the return value.

       An  application  wishing  to check for error situations should set errno to zero and call feclearexcept(FE_ALL_EXCEPT) before calling these functions. On return, if errno is non-zero or fetestex‐
       cept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.

RETURN VALUE
       Upon successful completion, these functions shall return the arc tangent of y/x in the range [-π,π] radians.

       If y is ±0 and x is < 0, ±π shall be returned.

       If y is ±0 and x is > 0, ±0 shall be returned.

       If y is < 0 and x is ±0, -π/2 shall be returned.

       If y is > 0 and x is ±0, π/2 shall be returned.

       If x is 0, a pole error shall not occur.

       If either x or y is NaN, a NaN shall be returned.

       If the correct value would cause underflow, a range error may occur, and atan(), atan2f(), and atan2l() shall return an implementation-defined value no greater in magnitude than DBL_MIN, FLT_MIN,
       and LDBL_MIN, respectively.

       If the IEC 60559 Floating-Point option is supported, y/x should be returned.

       If y is ±0 and x is -0, ±π shall be returned.

       If y is ±0 and x is +0, ±0 shall be returned.

       For finite values of ±y > 0, if x is -Inf, ±π shall be returned.

       For finite values of ±y > 0, if x is +Inf, ±0 shall be returned.

       For finite values of x, if y is ±Inf, ±π/2 shall be returned.

       If y is ±Inf and x is -Inf, ±3π/4 shall be returned.

       If y is ±Inf and x is +Inf, ±π/4 shall be returned.

       If both arguments are 0, a domain error shall not occur.

ERRORS
       These functions may fail if:

       Range Error The result underflows.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the underflow floating-point exception shall be raised.

       The following sections are informative.

EXAMPLES
   Converting Cartesian to Polar Coordinates System
       The function below uses atan2() to convert a 2d vector expressed in cartesian coordinates (x,y) to the polar coordinates (rho,theta).  There are other ways  to  compute  the  angle  theta,  using
       asin() acos(), or atan().  However, atan2() presents here two advantages:

        *  The angle's quadrant is automatically determined.

        *  The singular cases (0,y) are taken into account.

       Finally, this example uses hypot() rather than sqrt() since it is better for special cases; see hypot() for more information.

           #include <math.h>

           void
           cartesian_to_polar(const double x, const double y,
                              double *rho, double *theta
               )
           {
               *rho   = hypot (x,y); /* better than sqrt(x*x+y*y) */
               *theta = atan2 (y,x);
           }

APPLICATION USAGE
       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling & MATH_ERREXCEPT) are independent of each other, but at least one of them must be non-zero.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       acos(), asin(), atan(), feclearexcept(), fetestexcept(), hypot(), isnan(), sqrt(), tan()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          ATAN2(3P)
