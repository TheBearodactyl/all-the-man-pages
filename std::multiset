std::multiset< _Key, _CompaLibrarylFstd::multiset<l_Key, _Compare, _Alloc >(3)

NAME
       std::multiset< _Key, _Compare, _Alloc > - A standard container made up
       of elements, which can be retrieved in logarithmic time.

SYNOPSIS
       #include <set>

   Public Types
       typedef _Alloc allocator_type
       typedef _Rep_type::const_iterator const_iterator
       typedef _Alloc_traits::const_pointer const_pointer
       typedef _Alloc_traits::const_reference const_reference
       typedef _Rep_type::const_reverse_iterator const_reverse_iterator
       typedef _Rep_type::difference_type difference_type
       typedef _Rep_type::const_iterator iterator
       typedef _Compare key_compare
       typedef _Key key_type
       using node_type = typename _Rep_type::node_type
       typedef _Alloc_traits::pointer pointer
       typedef _Alloc_traits::reference reference
       typedef _Rep_type::const_reverse_iterator reverse_iterator
       typedef _Rep_type::size_type size_type
       typedef _Compare value_compare
       typedef _Key value_type

   Public Member Functions
       multiset ()=default
           Default constructor creates no elements.
       template<typename _InputIterator > multiset (_InputIterator __first,
           _InputIterator __last)
           Builds a multiset from a range.
       template<typename _InputIterator > multiset (_InputIterator __first,
           _InputIterator __last, const _Compare &__comp, const allocator_type
           &__a=allocator_type())
           Builds a multiset from a range.
       template<typename _InputIterator > multiset (_InputIterator __first,
           _InputIterator __last, const allocator_type &__a)
           Allocator-extended range constructor.
       multiset (const _Compare &__comp, const allocator_type
           &__a=allocator_type())
           Creates a multiset with no elements.
       multiset (const allocator_type &__a)
           Allocator-extended default constructor.
       multiset (const multiset &)=default
           Multiset copy constructor.
       multiset (const multiset &__m, const __type_identity_t< allocator_type
           > &__a)
           Allocator-extended copy constructor.
       multiset (initializer_list< value_type > __l, const _Compare
           &__comp=_Compare(), const allocator_type &__a=allocator_type())
           Builds a multiset from an initializer_list.
       multiset (initializer_list< value_type > __l, const allocator_type
           &__a)
           Allocator-extended initialier-list constructor.
       multiset (multiset &&)=default
           Multiset move constructor.
       multiset (multiset &&__m, const __type_identity_t< allocator_type >
           &__a) noexcept(is_nothrow_copy_constructible< _Compare >::value
           &&_Alloc_traits::_S_always_equal())
           Allocator-extended move constructor.
       ~multiset ()=default
       iterator begin () const noexcept
       iterator cbegin () const noexcept
       iterator cend () const noexcept
       void clear () noexcept
       reverse_iterator crbegin () const noexcept
       reverse_iterator crend () const noexcept
       template<typename... _Args> iterator emplace (_Args &&... __args)
           Builds and inserts an element into the multiset.
       template<typename... _Args> iterator emplace_hint (const_iterator
           __pos, _Args &&... __args)
           Builds and inserts an element into the multiset.
       bool empty () const noexcept
           Returns true if the set is empty.
       iterator end () const noexcept
       size_type erase (const key_type &__x)
           Erases elements according to the provided key.
       _GLIBCXX_ABI_TAG_CXX11 iterator erase (const_iterator __first,
           const_iterator __last)
           Erases a [first,last) range of elements from a multiset.
       _GLIBCXX_ABI_TAG_CXX11 iterator erase (const_iterator __position)
           Erases an element from a multiset.
       node_type extract (const key_type &__x)
           Extract a node.
       node_type extract (const_iterator __pos)
           Extract a node.
       allocator_type get_allocator () const noexcept
           Returns the memory allocation object.
       template<typename _InputIterator > void insert (_InputIterator __first,
           _InputIterator __last)
           A template function that tries to insert a range of elements.
       iterator insert (const value_type &__x)
           Inserts an element into the multiset.
       iterator insert (const_iterator __hint, node_type &&__nh)
           Re-insert an extracted node.
       iterator insert (const_iterator __position, const value_type &__x)
           Inserts an element into the multiset.
       iterator insert (const_iterator __position, value_type &&__x)
       void insert (initializer_list< value_type > __l)
           Attempts to insert a list of elements into the multiset.
       iterator insert (node_type &&__nh)
           Re-insert an extracted node.
       iterator insert (value_type &&__x)
       key_compare key_comp () const
           Returns the comparison object.
       size_type max_size () const noexcept
           Returns the maximum size of the set.
       template<typename _Compare1 > void merge (multiset< _Key, _Compare1,
           _Alloc > &&__source)
       template<typename _Compare1 > void merge (multiset< _Key, _Compare1,
           _Alloc > &__source)
       template<typename _Compare1 > void merge (set< _Key, _Compare1, _Alloc
           > &&__source)
       template<typename _Compare1 > void merge (set< _Key, _Compare1, _Alloc
           > &__source)
       multiset & operator= (const multiset &)=default
           Multiset assignment operator.
       multiset & operator= (initializer_list< value_type > __l)
           Multiset list assignment operator.
       multiset & operator= (multiset &&)=default
           Move assignment operator.
       reverse_iterator rbegin () const noexcept
       reverse_iterator rend () const noexcept
       size_type size () const noexcept
           Returns the size of the set.
       void swap (multiset &__x) noexcept(/*conditional */)
           Swaps data with another multiset.
       value_compare value_comp () const
           Returns the comparison object.

           size_type count (const key_type &__x) const
               Finds the number of elements with given key.
           template<typename _Kt > auto count (const _Kt &__x) const ->
               decltype(_M_t._M_count_tr(__x))
               Finds the number of elements with given key.

           bool contains (const key_type &__x) const
               Finds whether an element with the given key exists.
           template<typename _Kt > auto contains (const _Kt &__x) const ->
               decltype(_M_t._M_find_tr(__x), void(), true)
               Finds whether an element with the given key exists.

           iterator find (const key_type &__x)
               Tries to locate an element in a set.
           const_iterator find (const key_type &__x) const
               Tries to locate an element in a set.
           template<typename _Kt > auto find (const _Kt &__x) ->
               decltype(iterator{_M_t._M_find_tr(__x)})
               Tries to locate an element in a set.
           template<typename _Kt > auto find (const _Kt &__x) const ->
               decltype(const_iterator{_M_t._M_find_tr(__x)})
               Tries to locate an element in a set.

           iterator lower_bound (const key_type &__x)
               Finds the beginning of a subsequence matching given key.
           const_iterator lower_bound (const key_type &__x) const
               Finds the beginning of a subsequence matching given key.
           template<typename _Kt > auto lower_bound (const _Kt &__x) ->
               decltype(iterator(_M_t._M_lower_bound_tr(__x)))
               Finds the beginning of a subsequence matching given key.
           template<typename _Kt > auto lower_bound (const _Kt &__x) const ->
               decltype(iterator(_M_t._M_lower_bound_tr(__x)))
               Finds the beginning of a subsequence matching given key.

           iterator upper_bound (const key_type &__x)
               Finds the end of a subsequence matching given key.
           const_iterator upper_bound (const key_type &__x) const
               Finds the end of a subsequence matching given key.
           template<typename _Kt > auto upper_bound (const _Kt &__x) ->
               decltype(iterator(_M_t._M_upper_bound_tr(__x)))
               Finds the end of a subsequence matching given key.
           template<typename _Kt > auto upper_bound (const _Kt &__x) const ->
               decltype(iterator(_M_t._M_upper_bound_tr(__x)))
               Finds the end of a subsequence matching given key.

           std::pair< iterator, iterator > equal_range (const key_type &__x)
               Finds a subsequence matching given key.
           std::pair< const_iterator, const_iterator > equal_range (const
               key_type &__x) const
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) ->
               decltype(pair< iterator, iterator
               >(_M_t._M_equal_range_tr(__x)))
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) const ->
               decltype(pair< iterator, iterator
               >(_M_t._M_equal_range_tr(__x)))
               Finds a subsequence matching given key.

   Friends
       template<typename _K1 , typename _C1 , typename _A1 > bool operator<
           (const multiset< _K1, _C1, _A1 > &, const multiset< _K1, _C1, _A1 >
           &)
       template<typename _K1 , typename _C1 , typename _A1 > bool operator==
           (const multiset< _K1, _C1, _A1 > &, const multiset< _K1, _C1, _A1 >
           &)
       template<typename , typename > struct std::_Rb_tree_merge_helper

Detailed Description
   template<typename _Key, typename _Compare = std::less<_Key>, typename
       _Alloc = std::allocator<_Key>>
       class std::multiset< _Key, _Compare, _Alloc >"A standard container made
       up of elements, which can be retrieved in logarithmic time.

       Template Parameters
           _Key Type of key objects.
           _Compare Comparison function object type, defaults to less<_Key>.
           _Alloc Allocator type, defaults to allocator<_Key>.

       Meets the requirements of a container, a reversible container, and an
       associative container (using equivalent keys). For a multiset<Key> the
       key_type and value_type are Key.

       Multisets support bidirectional iterators.

       The private tree data is declared exactly the same way for set and
       multiset; the distinction is made entirely in how the tree functions
       are called (*_unique versus *_equal, same as the standard).

       Definition at line 96 of file set.

Member Typedef Documentation
   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Alloc std::multiset< _Key,
       _Compare, _Alloc >::allocator_type
       Definition at line 124 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Rep_type::const_iterator
       std::multiset< _Key, _Compare, _Alloc >::const_iterator
       Definition at line 147 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Alloc_traits::const_pointer
       std::multiset< _Key, _Compare, _Alloc >::const_pointer
       Definition at line 140 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Alloc_traits::const_reference
       std::multiset< _Key, _Compare, _Alloc >::const_reference
       Definition at line 142 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef
       _Rep_type::const_reverse_iterator std::multiset< _Key, _Compare, _Alloc
       >::const_reverse_iterator
       Definition at line 149 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Rep_type::difference_type
       std::multiset< _Key, _Compare, _Alloc >::difference_type
       Definition at line 151 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Rep_type::const_iterator
       std::multiset< _Key, _Compare, _Alloc >::iterator
       Definition at line 146 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Compare std::multiset< _Key,
       _Compare, _Alloc >::key_compare
       Definition at line 122 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Key std::multiset< _Key,
       _Compare, _Alloc >::key_type
       Definition at line 120 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> using std::multiset< _Key, _Compare,
       _Alloc >::node_type =  typename _Rep_type::node_type
       Definition at line 154 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Alloc_traits::pointer
       std::multiset< _Key, _Compare, _Alloc >::pointer
       Definition at line 139 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Alloc_traits::reference
       std::multiset< _Key, _Compare, _Alloc >::reference
       Definition at line 141 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef
       _Rep_type::const_reverse_iterator std::multiset< _Key, _Compare, _Alloc
       >::reverse_iterator
       Definition at line 148 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Rep_type::size_type
       std::multiset< _Key, _Compare, _Alloc >::size_type
       Definition at line 150 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Compare std::multiset< _Key,
       _Compare, _Alloc >::value_compare
       Definition at line 123 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Key std::multiset< _Key,
       _Compare, _Alloc >::value_type
       Definition at line 121 of file set.

Constructor & Destructor Documentation
   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::multiset< _Key, _Compare, _Alloc
       >::multiset () [default]
       Default constructor creates no elements.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::multiset< _Key, _Compare, _Alloc
       >::multiset (const _Compare & __comp, const allocator_type & __a =
       allocator_type()) [inline],  [explicit]
       Creates a multiset with no elements.

       Parameters
           __comp Comparator to use.
           __a An allocator object.

       Definition at line 173 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _InputIterator >
       std::multiset< _Key, _Compare, _Alloc >::multiset (_InputIterator
       __first, _InputIterator __last) [inline]
       Builds a multiset from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.

       Create a multiset consisting of copies of the elements from
       [first,last). This is linear in N if the range is already sorted, and
       NlogN otherwise (where N is distance(__first,__last)).

       Definition at line 187 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _InputIterator >
       std::multiset< _Key, _Compare, _Alloc >::multiset (_InputIterator
       __first, _InputIterator __last, const _Compare & __comp, const
       allocator_type & __a = allocator_type()) [inline]
       Builds a multiset from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.
           __comp A comparison functor.
           __a An allocator object.

       Create a multiset consisting of copies of the elements from
       [__first,__last). This is linear in N if the range is already sorted,
       and NlogN otherwise (where N is distance(__first,__last)).

       Definition at line 203 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::multiset< _Key, _Compare, _Alloc
       >::multiset (const multiset< _Key, _Compare, _Alloc > &) [default]
       Multiset copy constructor. Whether the allocator is copied depends on
       the allocator traits.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::multiset< _Key, _Compare, _Alloc
       >::multiset (multiset< _Key, _Compare, _Alloc > &&) [default]
       Multiset move constructor. The newly-created multiset contains the
       exact contents of the moved instance. The moved instance is a valid,
       but unspecified multiset.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::multiset< _Key, _Compare, _Alloc
       >::multiset (initializer_list< value_type > __l, const _Compare &
       __comp = _Compare(), const allocator_type & __a = allocator_type())
       [inline]
       Builds a multiset from an initializer_list.

       Parameters
           __l An initializer_list.
           __comp A comparison functor.
           __a An allocator object.

       Create a multiset consisting of copies of the elements from the list.
       This is linear in N if the list is already sorted, and NlogN otherwise
       (where N is __l.size()).

       Definition at line 239 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::multiset< _Key, _Compare, _Alloc
       >::multiset (const allocator_type & __a) [inline],  [explicit]
       Allocator-extended default constructor.

       Definition at line 247 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::multiset< _Key, _Compare, _Alloc
       >::multiset (const multiset< _Key, _Compare, _Alloc > & __m, const
       __type_identity_t< allocator_type > & __a) [inline]
       Allocator-extended copy constructor.

       Definition at line 251 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::multiset< _Key, _Compare, _Alloc
       >::multiset (multiset< _Key, _Compare, _Alloc > && __m, const
       __type_identity_t< allocator_type > & __a) [inline],  [noexcept]
       Allocator-extended move constructor.

       Definition at line 256 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::multiset< _Key, _Compare, _Alloc
       >::multiset (initializer_list< value_type > __l, const allocator_type &
       __a) [inline]
       Allocator-extended initialier-list constructor.

       Definition at line 262 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _InputIterator >
       std::multiset< _Key, _Compare, _Alloc >::multiset (_InputIterator
       __first, _InputIterator __last, const allocator_type & __a) [inline]
       Allocator-extended range constructor.

       Definition at line 268 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::multiset< _Key, _Compare, _Alloc
       >::~multiset () [default]
       The dtor only erases the elements, and note that if the elements
       themselves are pointers, the pointed-to memory is not touched in any
       way. Managing the pointer is the user's responsibility.

Member Function Documentation
   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::multiset< _Key, _Compare,
       _Alloc >::begin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the multiset. Iteration is done in ascending order according
       to the keys.

       Definition at line 341 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::multiset< _Key, _Compare,
       _Alloc >::cbegin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the multiset. Iteration is done in ascending order according
       to the keys.

       Definition at line 378 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::multiset< _Key, _Compare,
       _Alloc >::cend () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the multiset. Iteration is done in ascending order according
       to the keys.

       Definition at line 387 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> void std::multiset< _Key, _Compare,
       _Alloc >::clear () [inline],  [noexcept]
       Erases all elements in a multiset. Note that this function only erases
       the elements, and that if the elements themselves are pointers, the
       pointed-to memory is not touched in any way. Managing the pointer is
       the user's responsibility.

       Definition at line 719 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto
       std::multiset< _Key, _Compare, _Alloc >::contains (const _Kt & __x)
       const -> decltype(_M_t._M_find_tr(__x), void(), true)
             [inline]"

       Finds whether an element with the given key exists.

       Parameters
           __x Key of elements to be located.

       Returns
           True if there is any element with the specified key.

       Definition at line 755 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> bool std::multiset< _Key, _Compare,
       _Alloc >::contains (const key_type & __x) const [inline]
       Finds whether an element with the given key exists.

       Parameters
           __x Key of elements to be located.

       Returns
           True if there is any element with the specified key.

       Definition at line 750 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto
       std::multiset< _Key, _Compare, _Alloc >::count (const _Kt & __x) const
       -> decltype(_M_t._M_count_tr(__x))
             [inline]"

       Finds the number of elements with given key.

       Parameters
           __x Key of elements to be located.

       Returns
           Number of elements with specified key.

       Definition at line 737 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> size_type std::multiset< _Key,
       _Compare, _Alloc >::count (const key_type & __x) const [inline]
       Finds the number of elements with given key.

       Parameters
           __x Key of elements to be located.

       Returns
           Number of elements with specified key.

       Definition at line 731 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> reverse_iterator std::multiset< _Key,
       _Compare, _Alloc >::crbegin () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       element in the multiset. Iteration is done in descending order
       according to the keys.

       Definition at line 396 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> reverse_iterator std::multiset< _Key,
       _Compare, _Alloc >::crend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       element in the multiset. Iteration is done in descending order
       according to the keys.

       Definition at line 405 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename... _Args> iterator
       std::multiset< _Key, _Compare, _Alloc >::emplace (_Args &&... __args)
       [inline]
       Builds and inserts an element into the multiset.

       Parameters
           __args Arguments used to generate the element instance to be
           inserted.

       Returns
           An iterator that points to the inserted element.

       This function inserts an element into the multiset. Contrary to a
       std::set the multiset does not rely on unique keys and thus multiple
       copies of the same element can be inserted.

       Insertion requires logarithmic time.

       Definition at line 458 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename... _Args> iterator
       std::multiset< _Key, _Compare, _Alloc >::emplace_hint (const_iterator
       __pos, _Args &&... __args) [inline]
       Builds and inserts an element into the multiset.

       Parameters
           __pos An iterator that serves as a hint as to where the element
           should be inserted.
           __args Arguments used to generate the element instance to be
           inserted.

       Returns
           An iterator that points to the inserted element.

       This function inserts an element into the multiset. Contrary to a
       std::set the multiset does not rely on unique keys and thus multiple
       copies of the same element can be inserted.

       Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires logarithmic time (if the hint is not taken).

       Definition at line 484 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> bool std::multiset< _Key, _Compare,
       _Alloc >::empty () const [inline],  [noexcept]
       Returns true if the set is empty.

       Definition at line 411 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::multiset< _Key, _Compare,
       _Alloc >::end () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the multiset. Iteration is done in ascending order according
       to the keys.

       Definition at line 350 of file set.

       Referenced by std::multiset< _Key, _Compare, _Alloc >::extract().

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto
       std::multiset< _Key, _Compare, _Alloc >::equal_range (const _Kt & __x)
       -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
             [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       This function probably only makes sense for multisets.

       Definition at line 890 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto
       std::multiset< _Key, _Compare, _Alloc >::equal_range (const _Kt & __x)
       const -> decltype(pair<iterator,
       iterator>(_M_t._M_equal_range_tr(__x)))
             [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       This function probably only makes sense for multisets.

       Definition at line 896 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::pair< iterator, iterator >
       std::multiset< _Key, _Compare, _Alloc >::equal_range (const key_type &
       __x) [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       This function probably only makes sense for multisets.

       Definition at line 880 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::pair< const_iterator,
       const_iterator > std::multiset< _Key, _Compare, _Alloc >::equal_range
       (const key_type & __x) const [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       This function probably only makes sense for multisets.

       Definition at line 884 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> size_type std::multiset< _Key,
       _Compare, _Alloc >::erase (const key_type & __x) [inline]
       Erases elements according to the provided key.

       Parameters
           __x Key of element to be erased.

       Returns
           The number of elements erased.

       This function erases all elements located by the given key from a
       multiset. Note that this function only erases the element, and that if
       the element is itself a pointer, the pointed-to memory is not touched
       in any way. Managing the pointer is the user's responsibility.

       Definition at line 670 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> _GLIBCXX_ABI_TAG_CXX11 iterator
       std::multiset< _Key, _Compare, _Alloc >::erase (const_iterator __first,
       const_iterator __last) [inline]
       Erases a [first,last) range of elements from a multiset.

       Parameters
           __first Iterator pointing to the start of the range to be erased.
           __last Iterator pointing to the end of the range to be erased.

       Returns
           The iterator last.

       This function erases a sequence of elements from a multiset. Note that
       this function only erases the elements, and that if the elements
       themselves are pointers, the pointed-to memory is not touched in any
       way. Managing the pointer is the user's responsibility.

       Definition at line 692 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> _GLIBCXX_ABI_TAG_CXX11 iterator
       std::multiset< _Key, _Compare, _Alloc >::erase (const_iterator
       __position) [inline]
       Erases an element from a multiset.

       Parameters
           __position An iterator pointing to the element to be erased.

       Returns
           An iterator pointing to the element immediately following position
           prior to the element being erased. If no such element exists, end()
           is returned.

       This function erases an element, pointed to by the given iterator, from
       a multiset. Note that this function only erases the element, and that
       if the element is itself a pointer, the pointed-to memory is not
       touched in any way. Managing the pointer is the user's responsibility.

       Definition at line 640 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> node_type std::multiset< _Key,
       _Compare, _Alloc >::extract (const key_type & __x) [inline]
       Extract a node.

       Definition at line 579 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> node_type std::multiset< _Key,
       _Compare, _Alloc >::extract (const_iterator __pos) [inline]
       Extract a node.

       Definition at line 571 of file set.

       References std::multiset< _Key, _Compare, _Alloc >::end().

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto
       std::multiset< _Key, _Compare, _Alloc >::find (const _Kt & __x) ->
       decltype(iterator{_M_t._M_find_tr(__x)})
             [inline]"

       Tries to locate an element in a set.

       Parameters
           __x Element to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 786 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto
       std::multiset< _Key, _Compare, _Alloc >::find (const _Kt & __x) const
       -> decltype(const_iterator{_M_t._M_find_tr(__x)})
             [inline]"

       Tries to locate an element in a set.

       Parameters
           __x Element to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 792 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::multiset< _Key, _Compare,
       _Alloc >::find (const key_type & __x) [inline]
       Tries to locate an element in a set.

       Parameters
           __x Element to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 776 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> const_iterator std::multiset< _Key,
       _Compare, _Alloc >::find (const key_type & __x) const [inline]
       Tries to locate an element in a set.

       Parameters
           __x Element to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 780 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> allocator_type std::multiset< _Key,
       _Compare, _Alloc >::get_allocator () const [inline],  [noexcept]
       Returns the memory allocation object.

       Definition at line 332 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _InputIterator > void
       std::multiset< _Key, _Compare, _Alloc >::insert (_InputIterator
       __first, _InputIterator __last) [inline]
       A template function that tries to insert a range of elements.

       Parameters
           __first Iterator pointing to the start of the range to be inserted.
           __last Iterator pointing to the end of the range.

       Complexity similar to that of the range constructor.

       Definition at line 552 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::multiset< _Key, _Compare,
       _Alloc >::insert (const value_type & __x) [inline]
       Inserts an element into the multiset.

       Parameters
           __x Element to be inserted.

       Returns
           An iterator that points to the inserted element.

       This function inserts an element into the multiset. Contrary to a
       std::set the multiset does not rely on unique keys and thus multiple
       copies of the same element can be inserted.

       Insertion requires logarithmic time.

       Definition at line 503 of file set.

       Referenced by std::multiset< _Key, _Compare, _Alloc >::insert().

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::multiset< _Key, _Compare,
       _Alloc >::insert (const_iterator __hint, node_type && __nh) [inline]
       Re-insert an extracted node.

       Definition at line 589 of file set.

       References std::move().

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::multiset< _Key, _Compare,
       _Alloc >::insert (const_iterator __position, const value_type & __x)
       [inline]
       Inserts an element into the multiset.

       Parameters
           __position An iterator that serves as a hint as to where the
           element should be inserted.
           __x Element to be inserted.

       Returns
           An iterator that points to the inserted element.

       This function inserts an element into the multiset. Contrary to a
       std::set the multiset does not rely on unique keys and thus multiple
       copies of the same element can be inserted.

       Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires logarithmic time (if the hint is not taken).

       Definition at line 533 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::multiset< _Key, _Compare,
       _Alloc >::insert (const_iterator __position, value_type && __x)
       [inline]
       Definition at line 538 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> void std::multiset< _Key, _Compare,
       _Alloc >::insert (initializer_list< value_type > __l) [inline]
       Attempts to insert a list of elements into the multiset.

       Parameters
           __l A std::initializer_list<value_type> of elements to be inserted.

       Complexity similar to that of the range constructor.

       Definition at line 564 of file set.

       References std::multiset< _Key, _Compare, _Alloc >::insert().

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::multiset< _Key, _Compare,
       _Alloc >::insert (node_type && __nh) [inline]
       Re-insert an extracted node.

       Definition at line 584 of file set.

       References std::move().

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::multiset< _Key, _Compare,
       _Alloc >::insert (value_type && __x) [inline]
       Definition at line 508 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> key_compare std::multiset< _Key,
       _Compare, _Alloc >::key_comp () const [inline]
       Returns the comparison object.

       Definition at line 324 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto
       std::multiset< _Key, _Compare, _Alloc >::lower_bound (const _Kt & __x)
       -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
             [inline]"

       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to first element equal to or greater than key, or
           end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 821 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto
       std::multiset< _Key, _Compare, _Alloc >::lower_bound (const _Kt & __x)
       const -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
             [inline]"

       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to first element equal to or greater than key, or
           end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 827 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::multiset< _Key, _Compare,
       _Alloc >::lower_bound (const key_type & __x) [inline]
       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to first element equal to or greater than key, or
           end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 811 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> const_iterator std::multiset< _Key,
       _Compare, _Alloc >::lower_bound (const key_type & __x) const [inline]
       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to first element equal to or greater than key, or
           end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 815 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> size_type std::multiset< _Key,
       _Compare, _Alloc >::max_size () const [inline],  [noexcept]
       Returns the maximum size of the set.

       Definition at line 421 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Compare1 > void
       std::multiset< _Key, _Compare, _Alloc >::merge (multiset< _Key,
       _Compare1, _Alloc > && __source) [inline]
       Definition at line 605 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Compare1 > void
       std::multiset< _Key, _Compare, _Alloc >::merge (multiset< _Key,
       _Compare1, _Alloc > & __source) [inline]
       Definition at line 597 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Compare1 > void
       std::multiset< _Key, _Compare, _Alloc >::merge (set< _Key, _Compare1,
       _Alloc > && __source) [inline]
       Definition at line 618 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Compare1 > void
       std::multiset< _Key, _Compare, _Alloc >::merge (set< _Key, _Compare1,
       _Alloc > & __source) [inline]
       Definition at line 610 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> multiset & std::multiset< _Key,
       _Compare, _Alloc >::operator= (const multiset< _Key, _Compare, _Alloc >
       &) [default]
       Multiset assignment operator. Whether the allocator is copied depends
       on the allocator traits.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> multiset & std::multiset< _Key,
       _Compare, _Alloc >::operator= (initializer_list< value_type > __l)
       [inline]
       Multiset list assignment operator.

       Parameters
           __l An initializer_list.

       This function fills a multiset with copies of the elements in the
       initializer list __l.

       Note that the assignment completely changes the multiset and that the
       resulting multiset's size is the same as the number of elements
       assigned.

       Definition at line 313 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> multiset & std::multiset< _Key,
       _Compare, _Alloc >::operator= (multiset< _Key, _Compare, _Alloc > &&)
       [default]
       Move assignment operator.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> reverse_iterator std::multiset< _Key,
       _Compare, _Alloc >::rbegin () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       element in the multiset. Iteration is done in descending order
       according to the keys.

       Definition at line 359 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> reverse_iterator std::multiset< _Key,
       _Compare, _Alloc >::rend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       element in the multiset. Iteration is done in descending order
       according to the keys.

       Definition at line 368 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> size_type std::multiset< _Key,
       _Compare, _Alloc >::size () const [inline],  [noexcept]
       Returns the size of the set.

       Definition at line 416 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> void std::multiset< _Key, _Compare,
       _Alloc >::swap (multiset< _Key, _Compare, _Alloc > & __x) [inline],
       [noexcept]
       Swaps data with another multiset.

       Parameters
           __x A multiset of the same element and allocator types.

       This exchanges the elements between two multisets in constant time. (It
       is only swapping a pointer, an integer, and an instance of the Compare
       type (which itself is often stateless and empty), so it should be quite
       fast.) Note that the global std::swap() function is specialized such
       that std::swap(s1,s2) will feed to this function.

       Whether the allocators are swapped depends on the allocator traits.

       Definition at line 438 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto
       std::multiset< _Key, _Compare, _Alloc >::upper_bound (const _Kt & __x)
       -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
             [inline]"

       Finds the end of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to the first element greater than key, or end().

       Definition at line 851 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto
       std::multiset< _Key, _Compare, _Alloc >::upper_bound (const _Kt & __x)
       const -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
             [inline]"

       Finds the end of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to the first element greater than key, or end().

       Definition at line 857 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::multiset< _Key, _Compare,
       _Alloc >::upper_bound (const key_type & __x) [inline]
       Finds the end of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to the first element greater than key, or end().

       Definition at line 841 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> const_iterator std::multiset< _Key,
       _Compare, _Alloc >::upper_bound (const key_type & __x) const [inline]
       Finds the end of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to the first element greater than key, or end().

       Definition at line 845 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> value_compare std::multiset< _Key,
       _Compare, _Alloc >::value_comp () const [inline]
       Returns the comparison object.

       Definition at line 328 of file set.

Friends And Related Function Documentation
   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename , typename > friend
       struct std::_Rb_tree_merge_helper [friend]
       Definition at line 593 of file set.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed std::multiset< _Key, _Compare, _Alloc >(3)
