__gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc >(3)Library Functions Manual__gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc >(3)

NAME
       __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc > - Functor updating ranks of entrees.

SYNOPSIS
       #include <trie_policy.hpp>

       Inherits __gnu_pbds::detail::trie_policy_base< Node_CItr, Node_Itr, _ATraits, _Alloc >.

   Public Types
       typedef access_traits::const_iterator a_const_iterator
       typedef _ATraits access_traits
       typedef _Alloc allocator_type
       typedef node_const_iterator::value_type const_iterator
       typedef node_iterator::value_type iterator
       typedef base_type::key_const_reference key_const_reference
       typedef base_type::key_type key_type
       typedef size_type metadata_type
       typedef Node_CItr node_const_iterator
       typedef Node_Itr node_iterator
       typedef allocator_type::size_type size_type

   Public Member Functions
       iterator find_by_order (size_type)
           Finds an entry by __order. Returns an iterator to the entry with the __order order, or an iterator to the container object's end if order is at least the size of the container object.
       const_iterator find_by_order (size_type) const
           Finds an entry by __order. Returns a const_iterator to the entry with the __order order, or a const_iterator to the container object's end if order is at least the size of the container
           object.
       size_type order_of_key (key_const_reference) const
           Returns the order of a key within a sequence. For exapmle, if r_key is the smallest key, this method will return 0; if r_key is a key between the smallest and next key, this method will
           return 1; if r_key is a key larger than the largest key, this method will return the size of r_c.
       size_type order_of_prefix (a_const_iterator, a_const_iterator) const
           Returns the order of a prefix within a sequence. For exapmle, if [b, e] is the smallest prefix, this method will return 0; if r_key is a key between the smallest and next key, this method
           will return 1; if r_key is a key larger than the largest key, this method will return the size of r_c.

   Protected Member Functions
       void operator() (node_iterator, node_const_iterator) const
           Updates the rank of a node through a node_iterator node_it; end_nd_it is the end node iterator.

   Private Member Functions
       virtual const_iterator end () const =0
       virtual const access_traits & get_access_traits () const =0

Detailed Description
   template<typename Node_CItr, typename Node_Itr, typename _ATraits, typename _Alloc>
       class __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc >"Functor updating ranks of entrees.

       Definition at line 253 of file trie_policy.hpp.

Member Typedef Documentation
   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > typedef access_traits::const_iterator __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr,
       _ATraits, _Alloc >::a_const_iterator
       Definition at line 260 of file trie_policy.hpp.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > typedef _ATraits __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc
       >::access_traits
       Definition at line 259 of file trie_policy.hpp.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > typedef _Alloc __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc
       >::allocator_type
       Definition at line 261 of file trie_policy.hpp.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > typedef node_const_iterator::value_type __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr,
       _ATraits, _Alloc >::const_iterator
       Definition at line 269 of file trie_policy.hpp.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > typedef node_iterator::value_type __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits,
       _Alloc >::iterator
       Definition at line 270 of file trie_policy.hpp.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > typedef base_type::key_const_reference __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr,
       _ATraits, _Alloc >::key_const_reference
       Definition at line 264 of file trie_policy.hpp.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > typedef base_type::key_type __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits,
       _Alloc >::key_type
       Definition at line 263 of file trie_policy.hpp.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > typedef size_type __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc
       >::metadata_type
       Definition at line 266 of file trie_policy.hpp.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > typedef Node_CItr __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc
       >::node_const_iterator
       Definition at line 267 of file trie_policy.hpp.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > typedef Node_Itr __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc
       >::node_iterator
       Definition at line 268 of file trie_policy.hpp.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > typedef allocator_type::size_type __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits,
       _Alloc >::size_type
       Definition at line 262 of file trie_policy.hpp.

Member Function Documentation
   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > iterator __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc >::find_by_order
       (size_type) [inline]
       Finds an entry by __order. Returns an iterator to the entry with the __order order, or an iterator to the container object's end if order is at least the size of the container object.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > const_iterator __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc
       >::find_by_order (size_type) const [inline]
       Finds an entry by __order. Returns a const_iterator to the entry with the __order order, or a const_iterator to the container object's end if order is at least the size of the container object.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > void __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc >::operator()
       (node_iterator, node_const_iterator) const [inline],  [protected]
       Updates the rank of a node through a node_iterator node_it; end_nd_it is the end node iterator.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > size_type __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc >::order_of_key
       (key_const_reference) const [inline]
       Returns the order of a key within a sequence. For exapmle, if r_key is the smallest key, this method will return 0; if r_key is a key between the smallest and next key, this method will return 1;
       if r_key is a key larger than the largest key, this method will return the size of r_c.

   template<typename Node_CItr , typename Node_Itr , typename _ATraits , typename _Alloc > size_type __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc
       >::order_of_prefix (a_const_iterator, a_const_iterator) const [inline]
       Returns the order of a prefix within a sequence. For exapmle, if [b, e] is the smallest prefix, this method will return 0; if r_key is a key between the smallest and next key, this method will
       return 1; if r_key is a key larger than the largest key, this method will return the size of r_c.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                                                                                     Wed Feb 1 2023     __gnu_pbds::trie_order_statistics_node_update< Node_CItr, Node_Itr, _ATraits, _Alloc >(3)
