timer_settime(2)                                                                            System Calls Manual                                                                           timer_settime(2)

NAME
       timer_settime, timer_gettime - arm/disarm and fetch state of POSIX per-process timer

LIBRARY
       Real-time library (librt, -lrt)

SYNOPSIS
       #include <time.h>

       int timer_gettime(timer_t timerid, struct itimerspec *curr_value);
       int timer_settime(timer_t timerid, int flags,
                         const struct itimerspec *restrict new_value,
                         struct itimerspec *_Nullable restrict old_value);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       timer_settime(), timer_gettime():
           _POSIX_C_SOURCE >= 199309L

DESCRIPTION
       timer_settime()  arms  or  disarms the timer identified by timerid.  The new_value argument is pointer to an itimerspec structure that specifies the new initial value and the new interval for the
       timer.  The itimerspec structure is described in itimerspec(3type).

       Each of the substructures of the itimerspec structure is a timespec(3) structure that allows a time value to be specified in seconds and nanoseconds.  These time values are measured according  to
       the clock that was specified when the timer was created by timer_create(2).

       If new_value->it_value specifies a nonzero value (i.e., either subfield is nonzero), then timer_settime() arms (starts) the timer, setting it to initially expire at the given time.  (If the timer
       was already armed, then the previous settings are overwritten.)  If new_value->it_value specifies a zero value (i.e., both subfields are zero), then the timer is disarmed.

       The new_value->it_interval field specifies the period of the timer, in seconds and nanoseconds.  If this field is nonzero, then each time that an armed timer expires, the timer is  reloaded  from
       the value specified in new_value->it_interval.  If new_value->it_interval specifies a zero value, then the timer expires just once, at the time specified by it_value.

       By  default, the initial expiration time specified in new_value->it_value is interpreted relative to the current time on the timer's clock at the time of the call.  This can be modified by speci‐
       fying TIMER_ABSTIME in flags, in which case new_value->it_value is interpreted as an absolute value as measured on the timer's clock; that is, the timer will expire when the clock  value  reaches
       the  value  specified  by  new_value->it_value.  If the specified absolute time has already passed, then the timer expires immediately, and the overrun count (see timer_getoverrun(2)) will be set
       correctly.

       If the value of the CLOCK_REALTIME clock is adjusted while an absolute timer based on that clock is armed, then the expiration of the timer will be appropriately  adjusted.   Adjustments  to  the
       CLOCK_REALTIME clock have no effect on relative timers based on that clock.

       If  old_value is not NULL, then it points to a buffer that is used to return the previous interval of the timer (in old_value->it_interval) and the amount of time until the timer would previously
       have next expired (in old_value->it_value).

       timer_gettime() returns the time until next expiration, and the interval, for the timer specified by timerid, in the buffer pointed to by curr_value.  The time remaining until the next timer  ex‐
       piration  is  returned  in  curr_value->it_value;  this  is  always  a  relative  value,  regardless  of  whether  the TIMER_ABSTIME flag was used when arming the timer.  If the value returned in
       curr_value->it_value is zero, then the timer is currently disarmed.  The timer interval is returned in curr_value->it_interval.  If the value returned in  curr_value->it_interval  is  zero,  then
       this is a "one-shot" timer.

RETURN VALUE
       On success, timer_settime() and timer_gettime() return 0.  On error, -1 is returned, and errno is set to indicate the error.

ERRORS
       These functions may fail with the following errors:

       EFAULT new_value, old_value, or curr_value is not a valid pointer.

       EINVAL timerid is invalid.

       timer_settime() may fail with the following errors:

       EINVAL new_value.it_value is negative; or new_value.it_value.tv_nsec is negative or greater than 999,999,999.

STANDARDS
       POSIX.1-2008.

HISTORY
       Linux 2.6.  POSIX.1-2001.

EXAMPLES
       See timer_create(2).

SEE ALSO
       timer_create(2), timer_getoverrun(2), timespec(3), time(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                timer_settime(2)
TIMER_GETOVERRUN(3P)                                                                     POSIX Programmer's Manual                                                                    TIMER_GETOVERRUN(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       timer_getoverrun, timer_gettime, timer_settime — per-process timers

SYNOPSIS
       #include <time.h>

       int timer_getoverrun(timer_t timerid);
       int timer_gettime(timer_t timerid, struct itimerspec *value);
       int timer_settime(timer_t timerid, int flags,
           const struct itimerspec *restrict value,
           struct itimerspec *restrict ovalue);

DESCRIPTION
       The timer_gettime() function shall store the amount of time until the specified timer, timerid, expires and the reload value of the timer into the space pointed to  by  the  value  argument.  The
       it_value  member of this structure shall contain the amount of time before the timer expires, or zero if the timer is disarmed. This value is returned as the interval until timer expiration, even
       if the timer was armed with absolute time. The it_interval member of value shall contain the reload value last set by timer_settime().

       The timer_settime() function shall set the time until the next expiration of the timer specified by timerid from the it_value member of the value argument and arm the timer if the it_value member
       of  value is non-zero. If the specified timer was already armed when timer_settime() is called, this call shall reset the time until next expiration to the value specified. If the it_value member
       of value is zero, the timer shall be disarmed. The effect of disarming or resetting a timer with pending expiration notifications is unspecified.

       If the flag TIMER_ABSTIME is not set in the argument flags, timer_settime() shall behave as if the time until next expiration is set to be equal to the interval specified by the  it_value  member
       of  value.  That is, the timer shall expire in it_value nanoseconds from when the call is made. If the flag TIMER_ABSTIME is set in the argument flags, timer_settime() shall behave as if the time
       until next expiration is set to be equal to the difference between the absolute time specified by the it_value member of value and the current value of the clock associated  with  timerid.   That
       is, the timer shall expire when the clock reaches the value specified by the it_value member of value.  If the specified time has already passed, the function shall succeed and the expiration no‐
       tification shall be made.

       The reload value of the timer shall be set to the value specified by the it_interval member of value.  When a timer is armed with a non-zero it_interval, a periodic (or repetitive) timer is spec‐
       ified.

       Time values that are between two consecutive non-negative integer multiples of the resolution of the specified timer shall be rounded up to the larger multiple of the resolution. Quantization er‐
       ror shall not cause the timer to expire earlier than the rounded time value.

       If the argument ovalue is not NULL, the timer_settime() function shall store, in the location referenced by ovalue, a value representing the previous amount of time before the  timer  would  have
       expired, or zero if the timer was disarmed, together with the previous timer reload value. Timers shall not expire before their scheduled time.

       Only  a single signal shall be queued to the process for a given timer at any point in time. When a timer for which a signal is still pending expires, no signal shall be queued, and a timer over‐
       run shall occur.  When a timer expiration signal is delivered to or accepted by a process, the timer_getoverrun() function shall return the timer expiration overrun count for the specified timer.
       The overrun count returned contains the number of extra timer expirations that occurred between the time the signal was generated (queued) and when it was delivered or accepted, up to but not in‐
       cluding an implementation-defined maximum of {DELAYTIMER_MAX}.  If the number of such extra expirations is greater than or equal to {DELAYTIMER_MAX}, then the overrun count shall be set  to  {DE‐
       LAYTIMER_MAX}.   The value returned by timer_getoverrun() shall apply to the most recent expiration signal delivery or acceptance for the timer. If no expiration signal has been delivered for the
       timer, the return value of timer_getoverrun() is unspecified.

       The behavior is undefined if the value specified by the timerid argument to timer_getoverrun(), timer_gettime(), or timer_settime() does not correspond to a timer ID  returned  by  timer_create()
       but not yet deleted by timer_delete().

RETURN VALUE
       If the timer_getoverrun() function succeeds, it shall return the timer expiration overrun count as explained above.

       If the timer_gettime() or timer_settime() functions succeed, a value of 0 shall be returned.

       If an error occurs for any of these functions, the value -1 shall be returned, and errno set to indicate the error.

ERRORS
       The timer_settime() function shall fail if:

       EINVAL A  value structure specified a nanosecond value less than zero or greater than or equal to 1000 million, and the it_value member of that structure did not specify zero seconds and nanosec‐
              onds.

       The timer_settime() function may fail if:

       EINVAL The it_interval member of value is not zero and the timer was created with notification by creation of a new thread (sigev_sigev_notify was SIGEV_THREAD) and a fixed stack address has been
              set in the thread attribute pointed to by sigev_notify_attributes.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       Using fixed stack addresses is problematic when timer expiration is signaled by the creation of a new thread. Since it cannot be assumed that the thread created for one expiration is finished be‐
       fore the next expiration of the timer, it could happen that two threads use the same memory as a stack at the same time. This is invalid and produces undefined results.

RATIONALE
       Practical clocks tick at a finite rate, with rates of 100 hertz and 1000 hertz being common. The inverse of this tick rate is the clock resolution, also called the clock granularity, which in ei‐
       ther case is expressed as a time duration, being 10 milliseconds and 1 millisecond respectively for these common rates. The granularity of practical clocks implies that if one reads a given clock
       twice in rapid succession, one may get the same time value twice; and that timers must wait for the next clock tick after the theoretical expiration time, to ensure that a timer never returns too
       soon. Note also that the granularity of the clock may be significantly coarser than the resolution of the data format used to set and get time and interval values. Also note that some implementa‐
       tions may choose to adjust time and/or interval values to exactly match the ticks of the underlying clock.

       This volume of POSIX.1‐2017 defines functions that allow an application to determine the implementation-supported resolution for the clocks and requires an implementation to document the  resolu‐
       tion supported for timers and nanosleep() if they differ from the supported clock resolution. This is more of a procurement issue than a runtime application issue.

       If  an  implementation detects that the value specified by the timerid argument to timer_getoverrun(), timer_gettime(), or timer_settime() does not correspond to a timer ID returned by timer_cre‐
       ate() but not yet deleted by timer_delete(), it is recommended that the function should fail and report an [EINVAL] error.

FUTURE DIRECTIONS
       None.

SEE ALSO
       clock_getres(), timer_create()

       The Base Definitions volume of POSIX.1‐2017, <time.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                               TIMER_GETOVERRUN(3P)
