SD_JOURNAL_STREAM_FD(3)      sd_journal_stream_fd      SD_JOURNAL_STREAM_FD(3)

NAME
       sd_journal_stream_fd - Create log stream file descriptor to the journal

SYNOPSIS
       #include <systemd/sd-journal.h>

       int sd_journal_stream_fd(const char *identifier, int priority,
                                int level_prefix);

DESCRIPTION
       sd_journal_stream_fd() may be used to create a log stream file
       descriptor. Log messages written to this file descriptor as simple
       newline-separated text strings are written to the journal. This file
       descriptor can be used internally by applications or be made standard
       output or standard error of other processes executed.

       sd_journal_stream_fd() takes a short program identifier string as first
       argument, which will be written to the journal as SYSLOG_IDENTIFIER=
       field for each log entry (see systemd.journal-fields(7) for more
       information). The second argument shall be the default priority level
       for all messages. The priority level is one of LOG_EMERG, LOG_ALERT,
       LOG_CRIT, LOG_ERR, LOG_WARNING, LOG_NOTICE, LOG_INFO, LOG_DEBUG, as
       defined in syslog.h, see syslog(3) for details. The third argument is a
       boolean: if true kernel-style log level prefixes (such as SD_WARNING)
       are interpreted, see sd-daemon(3) for more information.

       It is recommended that applications log UTF-8 messages only with this
       API, but this is not enforced.

       Each invocation of sd_journal_stream_fd() allocates a new log stream
       file descriptor, that is not shared with prior or later invocations.
       The file descriptor is write-only (its reading direction is shut down),
       and O_NONBLOCK is turned off initially.

RETURN VALUE
       The call returns a valid write-only file descriptor on success or a
       negative errno-style error code.

SIGNAL SAFETY
       sd_journal_stream_fd() is "async signal safe" in the meaning of signal-
       safety(7).

NOTES
       All functions listed here are thread-safe and may be called in parallel
       from multiple threads.

       These APIs are implemented as a shared library, which can be compiled
       and linked to with the libsystemd pkg-config(1) file.

EXAMPLES
       Creating a log stream suitable for fprintf(3):

           /* SPDX-License-Identifier: MIT-0 */

           #include <errno.h>
           #include <syslog.h>
           #include <stdio.h>
           #include <unistd.h>
           #include <systemd/sd-journal.h>
           #include <systemd/sd-daemon.h>

           int main(int argc, char *argv[]) {
             int fd;
             FILE *log;
             fd = sd_journal_stream_fd("test", LOG_INFO, 1);
             if (fd < 0) {
               errno = -fd;
               fprintf(stderr, "Failed to create stream fd: %m\n");
               return 1;
             }
             log = fdopen(fd, "w");
             if (!log) {
               fprintf(stderr, "Failed to create file object: %m\n");
               close(fd);
               return 1;
             }
             fprintf(log, "Hello World!\n");
             fprintf(log, SD_WARNING "This is a warning!\n");
             fclose(log);
             return 0;
           }

SEE ALSO
       systemd(1), sd-journal(3), sd-daemon(3), sd_journal_print(3),
       syslog(3), fprintf(3), systemd.journal-fields(7)

systemd 253                                            SD_JOURNAL_STREAM_FD(3)
