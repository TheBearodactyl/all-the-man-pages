DIRNAME(1)                                                                                     User Commands                                                                                    DIRNAME(1)

NAME
       dirname - strip last component from file name

SYNOPSIS
       dirname [OPTION] NAME...

DESCRIPTION
       Output each NAME with its last non-slash component and trailing slashes removed; if NAME contains no /'s, output '.' (meaning the current directory).

       -z, --zero
              end each output line with NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

EXAMPLES
       dirname /usr/bin/
              -> "/usr"

       dirname dir1/str dir2/str
              -> "dir1" followed by "dir2"

       dirname stdio.h
              -> "."

AUTHOR
       Written by David MacKenzie and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2023 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       basename(1), readlink(1)

       Full documentation <https://www.gnu.org/software/coreutils/dirname>
       or available locally via: info '(coreutils) dirname invocation'

GNU coreutils 9.2                                                                               April 2023                                                                                      DIRNAME(1)
DIRNAME(1P)                                                                              POSIX Programmer's Manual                                                                             DIRNAME(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       dirname — return the directory portion of a pathname

SYNOPSIS
       dirname string

DESCRIPTION
       The string operand shall be treated as a pathname, as defined in the Base Definitions volume of POSIX.1‐2017, Section 3.271, Pathname.  The string string shall be converted to the name of the di‐
       rectory containing the filename corresponding to the last pathname component in string, performing actions equivalent to the following steps in order:

        1. If string is //, skip steps 2 to 5.

        2. If string consists entirely of <slash> characters, string shall be set to a single <slash> character. In this case, skip steps 3 to 8.

        3. If there are any trailing <slash> characters in string, they shall be removed.

        4. If there are no <slash> characters remaining in string, string shall be set to a single <period> character. In this case, skip steps 5 to 8.

        5. If there are any trailing non-<slash> characters in string, they shall be removed.

        6. If the remaining string is //, it is implementation-defined whether steps 7 and 8 are skipped or processed.

        7. If there are any trailing <slash> characters in string, they shall be removed.

        8. If the remaining string is empty, string shall be set to a single <slash> character.

       The resulting string shall be written to standard output.

OPTIONS
       None.

OPERANDS
       The following operand shall be supported:

       string    A string.

STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of dirname:

       LANG      Provide  a default value for the internationalization variables that are unset or null. (See the Base Definitions volume of POSIX.1‐2017, Section 8.2, Internationalization Variables for
                 the precedence of internationalization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The dirname utility shall write a line to the standard output in the following format:

           "%s\n", <resulting string>

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       >0    An error occurred.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       The definition of pathname specifies implementation-defined behavior for pathnames starting with two <slash> characters. Therefore, applications shall not arbitrarily add  <slash>  characters  to
       the beginning of a pathname unless they can ensure that there are more or less than two or are prepared to deal with the implementation-defined consequences.

EXAMPLES
       The  EXAMPLES section of the basename() function (see the System Interfaces volume of POSIX.1‐2017, basename()) includes a table showing examples of the results of processing several sample path‐
       names by the basename() and dirname() functions and by the basename and dirname utilities.

       See also the examples for the basename utility.

RATIONALE
       The behaviors of basename and dirname in this volume of POSIX.1‐2017 have been coordinated so that when string is a valid pathname:

           $(basename -- "string")

       would be a valid filename for the file in the directory:

           $(dirname -- "string")

       This would not work for the versions of these utilities in early proposals due to the way processing of trailing <slash> characters was specified. Consideration was given  to  leaving  processing
       unspecified  if there were trailing <slash> characters, but this cannot be done; the Base Definitions volume of POSIX.1‐2017, Section 3.271, Pathname allows trailing <slash> characters. The base‐
       name and dirname utilities have to specify consistent handling for all valid pathnames.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.5, Parameters and Variables, basename

       The Base Definitions volume of POSIX.1‐2017, Section 3.271, Pathname, Chapter 8, Environment Variables

       The System Interfaces volume of POSIX.1‐2017, basename(), dirname()

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                        DIRNAME(1P)
basename(3)                                                                              Library Functions Manual                                                                              basename(3)

NAME
       basename, dirname - parse pathname components

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <libgen.h>

       char *dirname(char *path);
       char *basename(char *path);

DESCRIPTION
       Warning: there are two different functions basename(); see below.

       The  functions  dirname() and basename() break a null-terminated pathname string into directory and filename components.  In the usual case, dirname() returns the string up to, but not including,
       the final '/', and basename() returns the component following the final '/'.  Trailing '/' characters are not counted as part of the pathname.

       If path does not contain a slash, dirname() returns the string "." while basename() returns a copy of path.  If path is the string "/", then both dirname() and basename() return the  string  "/".
       If path is a null pointer or points to an empty string, then both dirname() and basename() return the string ".".

       Concatenating the string returned by dirname(), a "/", and the string returned by basename() yields a complete pathname.

       Both dirname() and basename() may modify the contents of path, so it may be desirable to pass a copy when calling one of these functions.

       These functions may return pointers to statically allocated memory which may be overwritten by subsequent calls.  Alternatively, they may return a pointer to some part of path, so that the string
       referred to by path should not be modified or freed until the pointer returned by the function is no longer required.

       The following list of examples (taken from SUSv2) shows the strings returned by dirname() and basename() for different paths:

              path       dirname   basename
              /usr/lib   /usr      lib
              /usr/      /         usr
              usr        .         usr
              /          /         /
              .          .         .
              ..         .         ..

RETURN VALUE
       Both dirname() and basename() return pointers to null-terminated strings.  (Do not pass these pointers to free(3).)

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │basename(), dirname()                                                                                                                                                   │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
       There are two different versions of basename() - the POSIX version described above, and the GNU version, which one gets after

               #define _GNU_SOURCE         /* See feature_test_macros(7) */
               #include <string.h>

       The GNU version never modifies its argument, and returns the empty string when path has a trailing slash, and in particular also when it is "/".  There is no GNU version of dirname().

       With glibc, one gets the POSIX version of basename() when <libgen.h> is included, and the GNU version otherwise.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

BUGS
       In the glibc implementation, the POSIX versions of these functions modify the path argument, and segfault when called with a static string such as "/usr/".

       Before glibc 2.2.1, the glibc version of dirname() did not correctly handle pathnames with trailing '/' characters, and generated a segfault if given a NULL argument.

EXAMPLES
       The following code snippet demonstrates the use of basename() and dirname():
           char *dirc, *basec, *bname, *dname;
           char *path = "/etc/passwd";

           dirc = strdup(path);
           basec = strdup(path);
           dname = dirname(dirc);
           bname = basename(basec);
           printf("dirname=%s, basename=%s\n", dname, bname);

SEE ALSO
       basename(1), dirname(1)

Linux man-pages 6.04                                                                            2023-03-30                                                                                     basename(3)
DIRNAME(3P)                                                                              POSIX Programmer's Manual                                                                             DIRNAME(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       dirname — report the parent directory name of a file pathname

SYNOPSIS
       #include <libgen.h>

       char *dirname(char *path);

DESCRIPTION
       The dirname() function shall take a pointer to a character string that contains a pathname, and return a pointer to a string that is a pathname of the parent directory of that file. The dirname()
       function  shall  not perform pathname resolution; the result shall not be affected by whether or not path exists or by its file type. Trailing '/' characters in the path that are not also leading
       '/' characters shall not be counted as part of the path.

       If path does not contain a '/', then dirname() shall return a pointer to the string ".".  If path is a null pointer or points to an empty string, dirname() shall return a pointer  to  the  string
       ".".

       The dirname() function may modify the string pointed to by path, and may return a pointer to static storage that may then be overwritten by a subsequent call to dirname().

       The dirname() function need not be thread-safe.

RETURN VALUE
       The dirname() function shall return a pointer to a string as described above.

       The  dirname()  function may modify the string pointed to by path, and may return a pointer to internal storage. The returned pointer might be invalidated or the storage might be overwritten by a
       subsequent call to dirname().  The returned pointer might also be invalidated if the calling thread is terminated.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       The following code fragment reads a pathname, changes the current working directory to the parent directory, and opens the file.

           char *path = NULL, *pathcopy;
           size_t buflen = 0;
           ssize_t linelen = 0;
           int fd;

           linelen = getline(&path, &buflen, stdin);

           path[linelen-1] = 0;
           pathcopy = strdup(path);
           if (chdir(dirname(pathcopy)) < 0) {
               ...
           }
           if ((fd = open(basename(path), O_RDONLY)) >= 0) {
               ...
               close (fd);
           }
           ...
           free (pathcopy);
           free (path);

       The EXAMPLES section of the basename() function (see basename()) includes a table showing examples of the results of processing several sample pathnames by the basename() and dirname()  functions
       and by the basename and dirname utilities.

APPLICATION USAGE
       The dirname() and basename() functions together yield a complete pathname. The expression dirname(path) obtains the pathname of the directory where basename(path) is found.

       Since the meaning of the leading "//" is implementation-defined, dirname("//foo) may return either "//" or '/' (but nothing else).

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       basename()

       The Base Definitions volume of POSIX.1‐2017, <libgen.h>

       The Shell and Utilities volume of POSIX.1‐2017, basename, dirname

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                        DIRNAME(3P)
