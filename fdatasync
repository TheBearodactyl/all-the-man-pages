FDATASYNC(3P)                                                                            POSIX Programmer's Manual                                                                           FDATASYNC(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       fdatasync — synchronize the data of a file (REALTIME)

SYNOPSIS
       #include <unistd.h>

       int fdatasync(int fildes);

DESCRIPTION
       The fdatasync() function shall force all currently queued I/O operations associated with the file indicated by file descriptor fildes to the synchronized I/O completion state.

       The functionality shall be equivalent to fsync() with the symbol _POSIX_SYNCHRONIZED_IO defined, with the exception that all I/O operations shall be completed as defined for synchronized I/O data
       integrity completion.

RETURN VALUE
       If  successful,  the  fdatasync() function shall return the value 0; otherwise, the function shall return the value -1 and set errno to indicate the error. If the fdatasync() function fails, out‐
       standing I/O operations are not guaranteed to have been completed.

ERRORS
       The fdatasync() function shall fail if:

       EBADF  The fildes argument is not a valid file descriptor.

       EINVAL This implementation does not support synchronized I/O for this file.

       In the event that any of the queued I/O operations fail, fdatasync() shall return the error conditions defined for read() and write().

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       Note that even if the file descriptor is not open for writing, if there are any pending write requests on the underlying file, then that I/O will be completed prior to the return of fdatasync().

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       aio_fsync(), fcntl(), fsync(), open(), read(), write()

       The Base Definitions volume of POSIX.1‐2017, <unistd.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                      FDATASYNC(3P)
fsync(2)                                                                                    System Calls Manual                                                                                   fsync(2)

NAME
       fsync, fdatasync - synchronize a file's in-core state with storage device

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       int fsync(int fd);

       int fdatasync(int fd);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       fsync():
           glibc 2.16 and later:
               No feature test macros need be defined
           glibc up to and including 2.15:
               _BSD_SOURCE || _XOPEN_SOURCE
                   || /* Since glibc 2.8: */ _POSIX_C_SOURCE >= 200112L

       fdatasync():
           _POSIX_C_SOURCE >= 199309L || _XOPEN_SOURCE >= 500

DESCRIPTION
       fsync()  transfers  ("flushes")  all modified in-core data of (i.e., modified buffer cache pages for) the file referred to by the file descriptor fd to the disk device (or other permanent storage
       device) so that all changed information can be retrieved even if the system crashes or is rebooted.  This includes writing through or flushing a disk cache if present.  The call blocks until  the
       device reports that the transfer has completed.

       As well as flushing the file data, fsync() also flushes the metadata information associated with the file (see inode(7)).

       Calling fsync() does not necessarily ensure that the entry in the directory containing the file has also reached disk.  For that an explicit fsync() on a file descriptor for the directory is also
       needed.

       fdatasync() is similar to fsync(), but does not flush modified metadata unless that metadata is needed in order to allow a subsequent data retrieval to be correctly handled.  For example, changes
       to  st_atime  or  st_mtime  (respectively, time of last access and time of last modification; see inode(7)) do not require flushing because they are not necessary for a subsequent data read to be
       handled correctly.  On the other hand, a change to the file size (st_size, as made by say ftruncate(2)), would require a metadata flush.

       The aim of fdatasync() is to reduce disk activity for applications that do not require all metadata to be synchronized with the disk.

RETURN VALUE
       On success, these system calls return zero.  On error, -1 is returned, and errno is set to indicate the error.

ERRORS
       EBADF  fd is not a valid open file descriptor.

       EINTR  The function was interrupted by a signal; see signal(7).

       EIO    An error occurred during synchronization.  This error may relate to data written to some other file descriptor on the same file.  Since Linux 4.13, errors from write-back will be  reported
              to  all  file  descriptors  that might have written the data which triggered the error.  Some filesystems (e.g., NFS) keep close track of which data came through which file descriptor, and
              give more precise reporting.  Other filesystems (e.g., most local filesystems) will report errors to all file descriptors that were open on the file when the error was recorded.

       ENOSPC Disk space was exhausted while synchronizing.

       EROFS, EINVAL
              fd is bound to a special file (e.g., a pipe, FIFO, or socket) which does not support synchronization.

       ENOSPC, EDQUOT
              fd is bound to a file on NFS or another filesystem which does not allocate space at the time of a write(2) system call, and some previous write failed due to insufficient storage space.

VERSIONS
       On POSIX systems on which fdatasync() is available, _POSIX_SYNCHRONIZED_IO is defined in <unistd.h> to a value greater than 0.  (See also sysconf(3).)

       On some UNIX systems (but not Linux), fd must be a writable file descriptor.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, 4.3BSD.

       In Linux 2.2 and earlier, fdatasync() is equivalent to fsync(), and so has no performance advantage.

       The fsync() implementations in older kernels and lesser used filesystems do not know how to flush disk caches.  In these cases disk caches need to be disabled  using  hdparm(8)  or  sdparm(8)  to
       guarantee safe operation.

SEE ALSO
       sync(1), bdflush(2), open(2), posix_fadvise(2), pwritev(2), sync(2), sync_file_range(2), fflush(3), fileno(3), hdparm(8), mount(8)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        fsync(2)
