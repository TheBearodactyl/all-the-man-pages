strtol(3)                  Library Functions Manual                  strtol(3)

NAME
       strtol, strtoll, strtoq - convert a string to a long integer

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdlib.h>

       long strtol(const char *restrict nptr,
                   char **restrict endptr, int base);
       long long strtoll(const char *restrict nptr,
                   char **restrict endptr, int base);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       strtoll():
           _ISOC99_SOURCE
               || /* glibc <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE

DESCRIPTION
       The  strtol()  function converts the initial part of the string in nptr
       to a long integer value according to the given base, which must be  be‐
       tween 2 and 36 inclusive, or be the special value 0.

       The string may begin with an arbitrary amount of white space (as deter‐
       mined by isspace(3)) followed by a single optional '+' or '-' sign.  If
       base  is zero or 16, the string may then include a "0x" or "0X" prefix,
       and the number will be read in base 16; otherwise, a zero base is taken
       as  10  (decimal) unless the next character is '0', in which case it is
       taken as 8 (octal).

       The remainder of the string is converted to a long value in the obvious
       manner,  stopping  at the first character which is not a valid digit in
       the given base.  (In bases above 10, the letter 'A' in either uppercase
       or  lowercase  represents 10, 'B' represents 11, and so forth, with 'Z'
       representing 35.)

       If endptr is not NULL, strtol() stores the address of the first invalid
       character  in *endptr.  If there were no digits at all, strtol() stores
       the original value of nptr in *endptr (and returns 0).  In  particular,
       if  *nptr is not '\0' but **endptr is '\0' on return, the entire string
       is valid.

       The strtoll() function works just like the strtol()  function  but  re‐
       turns a long long integer value.

RETURN VALUE
       The  strtol() function returns the result of the conversion, unless the
       value would underflow or overflow.  If an  underflow  occurs,  strtol()
       returns  LONG_MIN.   If  an overflow occurs, strtol() returns LONG_MAX.
       In both cases, errno is set to ERANGE.  Precisely the  same  holds  for
       strtoll()  (with  LLONG_MIN  and  LLONG_MAX  instead  of  LONG_MIN  and
       LONG_MAX).

ERRORS
       EINVAL (not in C99) The given base contains an unsupported value.

       ERANGE The resulting value was out of range.

       The implementation may also set errno to EINVAL in case  no  conversion
       was performed (no digits seen, and 0 returned).

ATTRIBUTES
       For  an  explanation  of  the  terms  used  in  this  section,  see at‐
       tributes(7).

       ┌─────────────────────────────────────┬───────────────┬────────────────┐
       │Interface                            │ Attribute     │ Value          │
       ├─────────────────────────────────────┼───────────────┼────────────────┤
       │strtol(), strtoll(), strtoq()        │ Thread safety │ MT-Safe locale │
       └─────────────────────────────────────┴───────────────┴────────────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       strtol()
              POSIX.1-2001, C89, SVr4, 4.3BSD.

       strtoll()
              POSIX.1-2001, C99.

NOTES
       Since  strtol()  can  legitimately  return  0,  LONG_MAX,  or  LONG_MIN
       (LLONG_MAX or LLONG_MIN for strtoll()) on both success and failure, the
       calling program should set errno to 0 before the call, and then  deter‐
       mine if an error occurred by checking whether errno has a nonzero value
       after the call.

       According to POSIX.1, in locales other  than  "C"  and  "POSIX",  these
       functions may accept other, implementation-defined numeric strings.

       BSD also has

           quad_t strtoq(const char *nptr, char **endptr, int base);

       with completely analogous definition.  Depending on the wordsize of the
       current architecture, this may be equivalent to strtoll()  or  to  str‐
       tol().

EXAMPLES
       The  program  shown  below demonstrates the use of strtol().  The first
       command-line argument specifies a string  from  which  strtol()  should
       parse  a  number.  The second (optional) argument specifies the base to
       be used for the conversion.  (This argument  is  converted  to  numeric
       form  using atoi(3), a function that performs no error checking and has
       a simpler interface than strtol().)  Some examples of the results  pro‐
       duced by this program are the following:

           $ ./a.out 123
           strtol() returned 123
           $ ./a.out '    123'
           strtol() returned 123
           $ ./a.out 123abc
           strtol() returned 123
           Further characters after number: "abc"
           $ ./a.out 123abc 55
           strtol: Invalid argument
           $ ./a.out ''
           No digits were found
           $ ./a.out 4000000000
           strtol: Numerical result out of range

   Program source

       #include <errno.h>
       #include <limits.h>
       #include <stdio.h>
       #include <stdlib.h>

       int
       main(int argc, char *argv[])
       {
           int base;
           char *endptr, *str;
           long val;

           if (argc < 2) {
               fprintf(stderr, "Usage: %s str [base]\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           str = argv[1];
           base = (argc > 2) ? atoi(argv[2]) : 0;

           errno = 0;    /* To distinguish success/failure after call */
           val = strtol(str, &endptr, base);

           /* Check for various possible errors. */

           if (errno != 0) {
               perror("strtol");
               exit(EXIT_FAILURE);
           }

           if (endptr == str) {
               fprintf(stderr, "No digits were found\n");
               exit(EXIT_FAILURE);
           }

           /* If we got here, strtol() successfully parsed a number. */

           printf("strtol() returned %ld\n", val);

           if (*endptr != '\0')        /* Not necessarily an error... */
               printf("Further characters after number: \"%s\"\n", endptr);

           exit(EXIT_SUCCESS);
       }

SEE ALSO
       atof(3), atoi(3), atol(3), strtod(3), strtoimax(3), strtoul(3)

Linux man-pages 6.04              2023-03-30                         strtol(3)
STRTOL(3P)                 POSIX Programmer's Manual                STRTOL(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       strtol, strtoll — convert a string to a long integer

SYNOPSIS
       #include <stdlib.h>

       long strtol(const char *restrict nptr, char **restrict endptr, int base);
       long long strtoll(const char *restrict nptr, char **restrict endptr,
           int base)

DESCRIPTION
       The functionality described on this reference page is aligned with  the
       ISO C  standard.  Any  conflict between the requirements described here
       and the ISO C standard is unintentional. This  volume  of  POSIX.1‐2017
       defers to the ISO C standard.

       These functions shall convert the initial portion of the string pointed
       to by nptr to a type long and long long  representation,  respectively.
       First, they decompose the input string into three parts:

        1. An  initial, possibly empty, sequence of white-space characters (as
           specified by isspace())

        2. A subject sequence interpreted as an integer  represented  in  some
           radix determined by the value of base

        3. A  final  string  of one or more unrecognized characters, including
           the terminating NUL character of the input string.

       Then they shall attempt to convert the subject sequence to an  integer,
       and return the result.

       If the value of base is 0, the expected form of the subject sequence is
       that of a decimal constant, octal constant,  or  hexadecimal  constant,
       any  of  which may be preceded by a '+' or '-' sign. A decimal constant
       begins with a non-zero digit, and consists of  a  sequence  of  decimal
       digits.  An  octal  constant consists of the prefix '0' optionally fol‐
       lowed by a sequence of the digits '0' to '7' only. A  hexadecimal  con‐
       stant  consists  of  the  prefix 0x or 0X followed by a sequence of the
       decimal digits and letters 'a' (or 'A') to 'f' (or 'F') with values  10
       to 15 respectively.

       If the value of base is between 2 and 36, the expected form of the sub‐
       ject sequence is a sequence of letters and digits representing an inte‐
       ger  with  the radix specified by base, optionally preceded by a '+' or
       '-' sign. The letters from 'a' (or 'A') to 'z' (or 'Z')  inclusive  are
       ascribed  the  values  10 to 35; only letters whose ascribed values are
       less than that of base are permitted. If the value of base is  16,  the
       characters  0x or 0X may optionally precede the sequence of letters and
       digits, following the sign if present.

       The subject sequence is defined as the longest initial  subsequence  of
       the  input  string,  starting  with the first non-white-space character
       that is of the expected form. The subject  sequence  shall  contain  no
       characters  if the input string is empty or consists entirely of white-
       space characters, or if the first non-white-space  character  is  other
       than a sign or a permissible letter or digit.

       If  the subject sequence has the expected form and the value of base is
       0, the sequence of characters starting with the first  digit  shall  be
       interpreted as an integer constant. If the subject sequence has the ex‐
       pected form and the value of base is between 2 and 36, it shall be used
       as the base for conversion, ascribing to each letter its value as given
       above. If the subject sequence begins with a <hyphen-minus>, the  value
       resulting  from the conversion shall be negated. A pointer to the final
       string shall be stored in the object pointed  to  by  endptr,  provided
       that endptr is not a null pointer.

       In other than the C or POSIX locale, additional locale-specific subject
       sequence forms may be accepted.

       If the subject sequence is empty or does not have the expected form, no
       conversion  is  performed; the value of nptr shall be stored in the ob‐
       ject pointed to by endptr, provided that endptr is not a null pointer.

       These functions shall not change the setting of errno if successful.

       Since 0, {LONG_MIN} or {LLONG_MIN}, and {LONG_MAX} or  {LLONG_MAX}  are
       returned on error and are also valid returns on success, an application
       wishing to check for error situations should set errno to 0, then  call
       strtol() or strtoll(), then check errno.

RETURN VALUE
       Upon  successful completion, these functions shall return the converted
       value, if any. If no conversion could be performed, 0 shall be returned
       and errno may be set to [EINVAL].

       If  the  value  of base is not supported, 0 shall be returned and errno
       shall be set to [EINVAL].

       If the correct value is outside  the  range  of  representable  values,
       {LONG_MIN},  {LONG_MAX},  {LLONG_MIN}, or {LLONG_MAX} shall be returned
       (according to the sign of the value), and errno set to [ERANGE].

ERRORS
       These functions shall fail if:

       EINVAL The value of base is not supported.

       ERANGE The value to be returned is not representable.

       These functions may fail if:

       EINVAL No conversion could be performed.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       Since the value of *endptr is unspecified if the value of base  is  not
       supported,  applications should either ensure that base has a supported
       value (0 or between 2 and 36) before the call, or check for an [EINVAL]
       error before examining *endptr.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       fscanf(), isalpha(), strtod()

       The Base Definitions volume of POSIX.1‐2017, <stdlib.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                           STRTOL(3P)
