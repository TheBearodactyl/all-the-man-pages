getcwd(3)                                                                                Library Functions Manual                                                                                getcwd(3)

NAME
       getcwd, getwd, get_current_dir_name - get current working directory

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       char *getcwd(char buf[.size], size_t size);
       char *get_current_dir_name(void);

       [[deprecated]] char *getwd(char buf[PATH_MAX]);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       get_current_dir_name():
           _GNU_SOURCE

       getwd():
           Since glibc 2.12:
               (_XOPEN_SOURCE >= 500) && ! (_POSIX_C_SOURCE >= 200809L)
                   || /* glibc >= 2.19: */ _DEFAULT_SOURCE
                   || /* glibc <= 2.19: */ _BSD_SOURCE
           Before glibc 2.12:
               _BSD_SOURCE || _XOPEN_SOURCE >= 500

DESCRIPTION
       These  functions return a null-terminated string containing an absolute pathname that is the current working directory of the calling process.  The pathname is returned as the function result and
       via the argument buf, if present.

       The getcwd() function copies an absolute pathname of the current working directory to the array pointed to by buf, which is of length size.

       If the length of the absolute pathname of the current working directory, including the terminating null byte, exceeds size bytes, NULL is returned, and errno is  set  to  ERANGE;  an  application
       should check for this error, and allocate a larger buffer if necessary.

       As an extension to the POSIX.1-2001 standard, glibc's getcwd() allocates the buffer dynamically using malloc(3) if buf is NULL.  In this case, the allocated buffer has the length size unless size
       is zero, when buf is allocated as big as necessary.  The caller should free(3) the returned buffer.

       get_current_dir_name() will malloc(3) an array big enough to hold the absolute pathname of the current working directory.  If the environment variable PWD is set, and its value is  correct,  then
       that value will be returned.  The caller should free(3) the returned buffer.

       getwd()  does  not  malloc(3) any memory.  The buf argument should be a pointer to an array at least PATH_MAX bytes long.  If the length of the absolute pathname of the current working directory,
       including the terminating null byte, exceeds PATH_MAX bytes, NULL is returned, and errno is set to ENAMETOOLONG.  (Note that on some systems, PATH_MAX may not be a compile-time constant; further‐
       more, its value may depend on the filesystem, see pathconf(3).)  For portability and security reasons, use of getwd() is deprecated.

RETURN VALUE
       On success, these functions return a pointer to a string containing the pathname of the current working directory.  In the case of getcwd() and getwd() this is the same value as buf.

       On failure, these functions return NULL, and errno is set to indicate the error.  The contents of the array pointed to by buf are undefined on error.

ERRORS
       EACCES Permission to read or search a component of the filename was denied.

       EFAULT buf points to a bad address.

       EINVAL The size argument is zero and buf is not a null pointer.

       EINVAL getwd(): buf is NULL.

       ENAMETOOLONG
              getwd(): The size of the null-terminated absolute pathname string exceeds PATH_MAX bytes.

       ENOENT The current working directory has been unlinked.

       ENOMEM Out of memory.

       ERANGE The size argument is less than the length of the absolute pathname of the working directory, including the terminating null byte.  You need to allocate a bigger array and try again.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────────┐
       │Interface                                                                                                                                                           │ Attribute     │ Value       │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────────┤
       │getcwd(), getwd()                                                                                                                                                   │ Thread safety │ MT-Safe     │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────────┤
       │get_current_dir_name()                                                                                                                                              │ Thread safety │ MT-Safe env │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────────┘

VERSIONS
       POSIX.1-2001 leaves the behavior of getcwd() unspecified if buf is NULL.

       POSIX.1-2001 does not define any errors for getwd().

VERSIONS
   C library/kernel differences
       On  Linux,  the  kernel  provides a getcwd() system call, which the functions described in this page will use if possible.  The system call takes the same arguments as the library function of the
       same name, but is limited to returning at most PATH_MAX bytes.  (Before Linux 3.12, the limit on the size of the returned pathname was the system page size.  On many architectures,  PATH_MAX  and
       the  system  page  size  are both 4096 bytes, but a few architectures have a larger page size.)  If the length of the pathname of the current working directory exceeds this limit, then the system
       call fails with the error ENAMETOOLONG.  In this case, the library functions fall back to a (slower) alternative implementation that returns the full pathname.

       Following a change in Linux 2.6.36, the pathname returned by the getcwd() system call will be prefixed with the string "(unreachable)" if the current directory is not below the root directory  of
       the current process (e.g., because the process set a new filesystem root using chroot(2) without changing its current directory into the new root).  Such behavior can also be caused by an unpriv‐
       ileged user by changing the current directory into another mount namespace.  When dealing with pathname from untrusted sources, callers of the functions described in  this  page  should  consider
       checking whether the returned pathname starts with '/' or '(' to avoid misinterpreting an unreachable path as a relative pathname.

STANDARDS
       getcwd()
              POSIX.1-2008.

       get_current_dir_name()
              GNU.

       getwd()
              None.

HISTORY
       getcwd()
              POSIX.1-2001.

       getwd()
              POSIX.1-2001, but marked LEGACY.  Removed in POSIX.1-2008.  Use getcwd() instead.

       Under  Linux,  these functions make use of the getcwd() system call (available since Linux 2.1.92).  On older systems they would query /proc/self/cwd.  If both system call and proc filesystem are
       missing, a generic implementation is called.  Only in that case can these calls fail under Linux with EACCES.

NOTES
       These functions are often used to save the location of the current working directory for the purpose of returning to it later.  Opening the current directory (".") and calling fchdir(2) to return
       is usually a faster and more reliable alternative when sufficiently many file descriptors are available, especially on platforms other than Linux.

BUGS
       Since the Linux 2.6.36 change that added "(unreachable)" in the circumstances described above, the glibc implementation of getcwd() has failed to conform to POSIX and returned a relative pathname
       when the API contract requires an absolute pathname.  With glibc 2.27 onwards this is corrected; calling getcwd() from such a pathname will now result in failure with ENOENT.

SEE ALSO
       pwd(1), chdir(2), fchdir(2), open(2), unlink(2), free(3), malloc(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                       getcwd(3)
GETCWD(3P)                                                                               POSIX Programmer's Manual                                                                              GETCWD(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       getcwd — get the pathname of the current working directory

SYNOPSIS
       #include <unistd.h>

       char *getcwd(char *buf, size_t size);

DESCRIPTION
       The getcwd() function shall place an absolute pathname of the current working directory in the array pointed to by buf, and return buf.  The pathname shall contain no components that are  dot  or
       dot-dot, or are symbolic links.

       If there are multiple pathnames that getcwd() could place in the array pointed to by buf, one beginning with a single <slash> character and one or more beginning with two <slash> characters, then
       getcwd() shall place the pathname beginning with a single <slash> character in the array. The pathname shall not contain any unnecessary <slash> characters after the leading one  or  two  <slash>
       characters.

       The size argument is the size in bytes of the character array pointed to by the buf argument. If buf is a null pointer, the behavior of getcwd() is unspecified.

RETURN VALUE
       Upon  successful  completion,  getcwd() shall return the buf argument. Otherwise, getcwd() shall return a null pointer and set errno to indicate the error. The contents of the array pointed to by
       buf are then undefined.

ERRORS
       The getcwd() function shall fail if:

       EINVAL The size argument is 0.

       ERANGE The size argument is greater than 0, but is smaller than the length of the string +1.

       The getcwd() function may fail if:

       EACCES Search permission was denied for the current directory, or read or search permission was denied for a directory above the current directory in the file hierarchy.

       ENOMEM Insufficient storage space is available.

       The following sections are informative.

EXAMPLES
       The following example uses {PATH_MAX} as the initial buffer size (unless it is indeterminate or very large), and calls getcwd() with progressively  larger  buffers  until  it  does  not  give  an
       [ERANGE] error.

           #include <stdlib.h>
           #include <errno.h>
           #include <unistd.h>

           ...

           long path_max;
           size_t size;
           char *buf;
           char *ptr;

           path_max = pathconf(".", _PC_PATH_MAX);
           if (path_max == -1)
               size = 1024;
           else if (path_max > 10240)
               size = 10240;
           else
               size = path_max;

           for (buf = ptr = NULL; ptr == NULL; size *= 2)
           {
               if ((buf = realloc(buf, size)) == NULL)
               {
                   ... handle error ...
               }

               ptr = getcwd(buf, size);
               if (ptr == NULL && errno != ERANGE)
               {
                   ... handle error ...
               }
           }
           ...
           free (buf);

APPLICATION USAGE
       If  the  pathname obtained from getcwd() is longer than {PATH_MAX} bytes, it could produce an [ENAMETOOLONG] error if passed to chdir().  Therefore, in order to return to that directory it may be
       necessary to break the pathname into sections shorter than {PATH_MAX} bytes and call chdir() on each section in turn (the first section being an absolute pathname and  subsequent  sections  being
       relative pathnames). A simpler way to handle saving and restoring the working directory when it may be deeper than {PATH_MAX} bytes in the file hierarchy is to use a file descriptor and fchdir(),
       rather than getcwd() and chdir().  However, the two methods do have some differences. The fchdir() approach causes the program to restore a working directory even if it has been  renamed  in  the
       meantime,  whereas  the chdir() approach restores to a directory with the same name as the original, even if the directories were renamed in the meantime. Since the fchdir() approach does not ac‐
       cess parent directories, it can succeed when getcwd() would fail due to permissions problems. In applications conforming to earlier versions of this standard, it  was  not  possible  to  use  the
       fchdir() approach when the working directory is searchable but not readable, as the only way to open a directory was with O_RDONLY, whereas the getcwd() approach can succeed in this case.

RATIONALE
       Having getcwd() take no arguments and instead use the malloc() function to produce space for the returned argument was considered.  The advantage is that getcwd() knows how big the working direc‐
       tory pathname is and can allocate an appropriate amount of space. But the programmer would have to use the free() function to free the resulting object, or each use of getcwd() would further  re‐
       duce the available memory. Finally, getcwd() is taken from the SVID where it has the two arguments used in this volume of POSIX.1‐2017.

       The older function getwd() was rejected for use in this context because it had only a buffer argument and no size argument, and thus had no way to prevent overwriting the buffer, except to depend
       on the programmer to provide a large enough buffer.

       On some implementations, if buf is a null pointer, getcwd() may obtain size bytes of memory using malloc().  In this case, the pointer returned by getcwd() may be used as the argument in a subse‐
       quent call to free().  Invoking getcwd() with buf as a null pointer is not recommended in conforming applications.

       Earlier  implementations  of getcwd() sometimes generated pathnames like "../../../subdirname" internally, using them to explore the path of ancestor directories back to the root. If one of these
       internal pathnames exceeded {PATH_MAX} in length, the implementation could fail with errno set to [ENAMETOOLONG].  This is no longer allowed.

       If a program is operating in a directory where some (grand)parent directory does not permit reading, getcwd() may fail, as in most implementations it must read the directory to determine the name
       of  the  file. This can occur if search, but not read, permission is granted in an intermediate directory, or if the program is placed in that directory by some more privileged process (for exam‐
       ple, login). Including the [EACCES] error condition makes the reporting of the error consistent and warns the application developer that getcwd() can fail for reasons beyond the  control  of  the
       application  developer or user. Some implementations can avoid this occurrence (for example, by implementing getcwd() using pwd, where pwd is a set-user-root process), thus the error was made op‐
       tional. Since this volume of POSIX.1‐2017 permits the addition of other errors, this would be a common addition and yet one that applications could not be expected to deal with without this addi‐
       tion.

FUTURE DIRECTIONS
       None.

SEE ALSO
       malloc()

       The Base Definitions volume of POSIX.1‐2017, <unistd.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                         GETCWD(3P)
