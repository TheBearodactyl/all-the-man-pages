std::linear_congruential_engine< _UIntType, __a, __c, __m >(3)                           Library Functions Manual                           std::linear_congruential_engine< _UIntType, __a, __c, __m >(3)

NAME
       std::linear_congruential_engine< _UIntType, __a, __c, __m > - A model of a linear congruential random number generator.

SYNOPSIS
       #include <random>

   Public Types
       typedef _UIntType result_type

   Public Member Functions
       linear_congruential_engine ()
           Constructs a linear_congruential_engine random number generator engine with seed 1.
       template<typename _Sseq , typename  = _If_seed_seq<_Sseq>> linear_congruential_engine (_Sseq &__q)
           Constructs a linear_congruential_engine random number generator engine seeded from the seed sequence __q.
       linear_congruential_engine (result_type __s)
           Constructs a linear_congruential_engine random number generator engine with seed __s. The default seed value is 1.
       void discard (unsigned long long __z)
           Discard a sequence of random numbers.
       result_type operator() ()
           Gets the next random number in the sequence.
       template<typename _Sseq > _If_seed_seq< _Sseq > seed (_Sseq &__q)
           Reseeds the linear_congruential_engine random number generator engine sequence using values from the seed sequence __q.
       template<typename _Sseq > auto seed (_Sseq &__q) -> _If_seed_seq< _Sseq >
       void seed (result_type __s=default_seed)
           Reseeds the linear_congruential_engine random number generator engine sequence to the seed __s.

   Static Public Member Functions
       static constexpr result_type max ()
           Gets the largest possible value in the output range.
       static constexpr result_type min ()
           Gets the smallest possible value in the output range.

   Static Public Attributes
       static constexpr result_type default_seed
       static constexpr result_type increment
       static constexpr result_type modulus
       static constexpr result_type multiplier

   Friends
       template<typename _UIntType1 , _UIntType1 __a1, _UIntType1 __c1, _UIntType1 __m1, typename _CharT , typename _Traits > std::basic_ostream< _CharT, _Traits > & operator<< (std::basic_ostream<
           _CharT, _Traits > &__os, const std::linear_congruential_engine< _UIntType1, __a1, __c1, __m1 > &__lcr)
           Writes the textual representation of the state x(i) of x to __os.
       bool operator== (const linear_congruential_engine &__lhs, const linear_congruential_engine &__rhs)
           Compares two linear congruential random number generator objects of the same type for equality.
       template<typename _UIntType1 , _UIntType1 __a1, _UIntType1 __c1, _UIntType1 __m1, typename _CharT , typename _Traits > std::basic_istream< _CharT, _Traits > & operator>> (std::basic_istream<
           _CharT, _Traits > &__is, std::linear_congruential_engine< _UIntType1, __a1, __c1, __m1 > &__lcr)
           Sets the state of the engine by reading its textual representation from __is.

Detailed Description
   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
       class std::linear_congruential_engine< _UIntType, __a, __c, __m >"A model of a linear congruential random number generator.

       A random number generator thatoproduces pseudorandom numbers via linear function:
           x_{i+1}tarrow(ax_{i} + c) d ]

       The template parameter _UIntType must be an unsigned integral type large enough to store values up to (__m-1). If the template parameter __m is 0, the modulus __m used is
       std::numeric_limits<_UIntType>::max() plus 1. Otherwise, the template parameters __a and __c must be less than __m.

       The size of the state is $1$.

       Definition at line 258 of file random.

Member Typedef Documentation
   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> typedef _UIntType std::linear_congruential_engine< _UIntType, __a, __c, __m >::result_type
       The type of the generated random value.

       Definition at line 271 of file random.

Constructor & Destructor Documentation
   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> std::linear_congruential_engine< _UIntType, __a, __c, __m >::linear_congruential_engine () [inline]
       Constructs a linear_congruential_engine random number generator engine with seed 1.

       Definition at line 285 of file random.

   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> std::linear_congruential_engine< _UIntType, __a, __c, __m >::linear_congruential_engine (result_type __s) [inline],
       [explicit]
       Constructs a linear_congruential_engine random number generator engine with seed __s. The default seed value is 1.

       Parameters
           __s The initial seed value.

       Definition at line 296 of file random.

       References std::linear_congruential_engine< _UIntType, __a, __c, __m >::seed().

   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> template<typename _Sseq , typename  = _If_seed_seq<_Sseq>> std::linear_congruential_engine< _UIntType, __a, __c, __m
       >::linear_congruential_engine (_Sseq & __q) [inline],  [explicit]
       Constructs a linear_congruential_engine random number generator engine seeded from the seed sequence __q.

       Parameters
           __q the seed sequence.

       Definition at line 307 of file random.

       References std::linear_congruential_engine< _UIntType, __a, __c, __m >::seed().

Member Function Documentation
   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> void std::linear_congruential_engine< _UIntType, __a, __c, __m >::discard (unsigned long long __z) [inline]
       Discard a sequence of random numbers.

       Definition at line 351 of file random.

   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> static constexpr result_type std::linear_congruential_engine< _UIntType, __a, __c, __m >::max () [inline],  [static],
       [constexpr]
       Gets the largest possible value in the output range.

       Definition at line 344 of file random.

   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> static constexpr result_type std::linear_congruential_engine< _UIntType, __a, __c, __m >::min () [inline],  [static],
       [constexpr]
       Gets the smallest possible value in the output range. The minimum depends on the __c parameter: if it is zero, the minimum generated must be > 0, otherwise 0 is allowed.

       Definition at line 337 of file random.

   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> result_type std::linear_congruential_engine< _UIntType, __a, __c, __m >::operator() () [inline]
       Gets the next random number in the sequence.

       Definition at line 361 of file random.

   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> template<typename _Sseq > _If_seed_seq< _Sseq > std::linear_congruential_engine< _UIntType, __a, __c, __m >::seed (_Sseq &
       __q)
       Reseeds the linear_congruential_engine random number generator engine sequence using values from the seed sequence __q.

       Parameters
           __q the seed sequence.

   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> template<typename _Sseq > auto std::linear_congruential_engine< _UIntType, __a, __c, __m >::seed (_Sseq & __q) ->
       _If_seed_seq<_Sseq>
             " Seeds the LCR engine with a value generated by __q.

       Definition at line 134 of file bits/random.tcc.

       References std::__lg().

   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> void std::linear_congruential_engine< _UIntType, __a, __c, __m >::seed (result_type __s = default_seed)
       Reseeds the linear_congruential_engine random number generator engine sequence to the seed __s.

       Parameters
           __s The new seed.

       Seeds the LCR with integral value __s, adjusted so that the ring identity is never a member of the convergence set.

       Definition at line 118 of file bits/random.tcc.

       Referenced by std::linear_congruential_engine< _UIntType, __a, __c, __m >::linear_congruential_engine().

Friends And Related Function Documentation
   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> template<typename _UIntType1 , _UIntType1 __a1, _UIntType1 __c1, _UIntType1 __m1, typename _CharT , typename _Traits >
       std::basic_ostream< _CharT, _Traits > & operator<< (std::basic_ostream< _CharT, _Traits > & __os, const std::linear_congruential_engine< _UIntType1, __a1, __c1, __m1 > & __lcr) [friend]
       Writes the textual representation of the state x(i) of x to __os.

       Parameters
           __os The output stream.
           __lcr A % linear_congruential_engine random number generator.

       Returns
           __os.

   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> bool operator== (const linear_congruential_engine< _UIntType, __a, __c, __m > & __lhs, const linear_congruential_engine<
       _UIntType, __a, __c, __m > & __rhs) [friend]
       Compares two linear congruential random number generator objects of the same type for equality.

       Parameters
           __lhs A linear congruential random number generator object.
           __rhs Another linear congruential random number generator object.

       Returns
           true if the infinite sequences of generated values would be equal, false otherwise.

       Definition at line 379 of file random.

   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> template<typename _UIntType1 , _UIntType1 __a1, _UIntType1 __c1, _UIntType1 __m1, typename _CharT , typename _Traits >
       std::basic_istream< _CharT, _Traits > & operator>> (std::basic_istream< _CharT, _Traits > & __is, std::linear_congruential_engine< _UIntType1, __a1, __c1, __m1 > & __lcr) [friend]
       Sets the state of the engine by reading its textual representation from __is. The textual representation must have been previously written using an output stream whose imbued locale and whose
       type's template specialization arguments _CharT and _Traits were the same as those of __is.

       Parameters
           __is The input stream.
           __lcr A % linear_congruential_engine random number generator.

       Returns
           __is.

Member Data Documentation
   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> constexpr result_type std::linear_congruential_engine< _UIntType, __a, __c, __m >::default_seed [static],  [constexpr]
       Definition at line 279 of file random.

   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> constexpr result_type std::linear_congruential_engine< _UIntType, __a, __c, __m >::increment [static],  [constexpr]
       An increment.

       Definition at line 276 of file random.

   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> constexpr result_type std::linear_congruential_engine< _UIntType, __a, __c, __m >::modulus [static],  [constexpr]
       The modulus.

       Definition at line 278 of file random.

   template<typename _UIntType , _UIntType __a, _UIntType __c, _UIntType __m> constexpr result_type std::linear_congruential_engine< _UIntType, __a, __c, __m >::multiplier [static],  [constexpr]
       The multiplier.

       Definition at line 274 of file random.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                                                                                     Wed Feb 1 2023                                std::linear_congruential_engine< _UIntType, __a, __c, __m >(3)
