getnameinfo(3)                                                                           Library Functions Manual                                                                           getnameinfo(3)

NAME
       getnameinfo - address-to-name translation in protocol-independent manner

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <sys/socket.h>
       #include <netdb.h>

       int getnameinfo(const struct sockaddr *restrict addr, socklen_t addrlen,
                       char host[_Nullable restrict .hostlen],
                       socklen_t hostlen,
                       char serv[_Nullable restrict .servlen],
                       socklen_t servlen,
                       int flags);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       getnameinfo():
           Since glibc 2.22:
               _POSIX_C_SOURCE >= 200112L
           glibc 2.21 and earlier:
               _POSIX_C_SOURCE

DESCRIPTION
       The  getnameinfo() function is the inverse of getaddrinfo(3): it converts a socket address to a corresponding host and service, in a protocol-independent manner.  It combines the functionality of
       gethostbyaddr(3) and getservbyport(3), but unlike those functions, getnameinfo() is reentrant and allows programs to eliminate IPv4-versus-IPv6 dependencies.

       The addr argument is a pointer to a generic socket address structure (of type sockaddr_in or sockaddr_in6) of size addrlen that holds the input IP address and port number.  The arguments host and
       serv  are  pointers  to  caller-allocated  buffers (of size hostlen and servlen respectively) into which getnameinfo() places null-terminated strings containing the host and service names respec‐
       tively.

       The caller can specify that no hostname (or no service name) is required by providing a NULL host (or serv) argument or a zero hostlen (or servlen) argument.  However, at least one of hostname or
       service name must be requested.

       The flags argument modifies the behavior of getnameinfo() as follows:

       NI_NAMEREQD
              If set, then an error is returned if the hostname cannot be determined.

       NI_DGRAM
              If set, then the service is datagram (UDP) based rather than stream (TCP) based.  This is required for the few ports (512–514) that have different services for UDP and TCP.

       NI_NOFQDN
              If set, return only the hostname part of the fully qualified domain name for local hosts.

       NI_NUMERICHOST
              If set, then the numeric form of the hostname is returned.  (When not set, this will still happen in case the node's name cannot be determined.)

       NI_NUMERICSERV
              If set, then the numeric form of the service address is returned.  (When not set, this will still happen in case the service's name cannot be determined.)

   Extensions to getnameinfo() for Internationalized Domain Names
       Starting  with  glibc 2.3.4, getnameinfo() has been extended to selectively allow hostnames to be transparently converted to and from the Internationalized Domain Name (IDN) format (see RFC 3490,
       Internationalizing Domain Names in Applications (IDNA)).  Three new flags are defined:

       NI_IDN If this flag is used, then the name found in the lookup process is converted from IDN format to the locale's encoding if necessary.  ASCII-only names are not affected  by  the  conversion,
              which makes this flag usable in existing programs and environments.

       NI_IDN_ALLOW_UNASSIGNED, NI_IDN_USE_STD3_ASCII_RULES
              Setting  these flags will enable the IDNA_ALLOW_UNASSIGNED (allow unassigned Unicode code points) and IDNA_USE_STD3_ASCII_RULES (check output to make sure it is a STD3 conforming hostname)
              flags respectively to be used in the IDNA handling.

RETURN VALUE
       On success, 0 is returned, and node and service names, if requested, are filled with null-terminated strings, possibly truncated to fit the specified buffer lengths.  On error, one of the follow‐
       ing nonzero error codes is returned:

       EAI_AGAIN
              The name could not be resolved at this time.  Try again later.

       EAI_BADFLAGS
              The flags argument has an invalid value.

       EAI_FAIL
              A nonrecoverable error occurred.

       EAI_FAMILY
              The address family was not recognized, or the address length was invalid for the specified family.

       EAI_MEMORY
              Out of memory.

       EAI_NONAME
              The name does not resolve for the supplied arguments.  NI_NAMEREQD is set and the host's name cannot be located, or neither hostname nor service name were requested.

       EAI_OVERFLOW
              The buffer pointed to by host or serv was too small.

       EAI_SYSTEM
              A system error occurred.  The error code can be found in errno.

       The gai_strerror(3) function translates these error codes to a human readable string, suitable for error reporting.

FILES
       /etc/hosts
       /etc/nsswitch.conf
       /etc/resolv.conf

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬────────────────────┐
       │Interface                                                                                                                                                    │ Attribute     │ Value              │
       ├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼────────────────────┤
       │getnameinfo()                                                                                                                                                │ Thread safety │ MT-Safe env locale │
       └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴────────────────────┘

STANDARDS
       POSIX.1-2008.  RFC 2553.

HISTORY
       glibc 2.1.  POSIX.1-2001.

       Before glibc 2.2, the hostlen and servlen arguments were typed as size_t.

NOTES
       In order to assist the programmer in choosing reasonable sizes for the supplied buffers, <netdb.h> defines the constants

           #define NI_MAXHOST      1025
           #define NI_MAXSERV      32

       Since glibc 2.8, these definitions are exposed only if suitable feature test macros are defined, namely: _GNU_SOURCE, _DEFAULT_SOURCE (since glibc 2.19), or (in glibc versions up to and including
       2.19) _BSD_SOURCE or _SVID_SOURCE.

       The former is the constant MAXDNAME in recent versions of BIND's <arpa/nameser.h> header file.  The latter is a guess based on the services listed in the current Assigned Numbers RFC.

EXAMPLES
       The following code tries to get the numeric hostname and service name, for a given socket address.  Note that there is no hardcoded reference to a particular address family.

           struct sockaddr *addr;     /* input */
           socklen_t addrlen;         /* input */
           char hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];

           if (getnameinfo(addr, addrlen, hbuf, sizeof(hbuf), sbuf,
                       sizeof(sbuf), NI_NUMERICHOST | NI_NUMERICSERV) == 0)
               printf("host=%s, serv=%s\n", hbuf, sbuf);

       The following version checks if the socket address has a reverse address mapping.

           struct sockaddr *addr;     /* input */
           socklen_t addrlen;         /* input */
           char hbuf[NI_MAXHOST];

           if (getnameinfo(addr, addrlen, hbuf, sizeof(hbuf),
                       NULL, 0, NI_NAMEREQD))
               printf("could not resolve hostname");
           else
               printf("host=%s\n", hbuf);

       An example program using getnameinfo() can be found in getaddrinfo(3).

SEE ALSO
       accept(2), getpeername(2), getsockname(2), recvfrom(2), socket(2), getaddrinfo(3), gethostbyaddr(3), getservbyname(3), getservbyport(3), inet_ntop(3), hosts(5), services(5), hostname(7), named(8)

       R. Gilligan, S. Thomson, J. Bound and W. Stevens, Basic Socket Interface Extensions for IPv6, RFC 2553, March 1999.

       Tatsuya   Jinmei   and   Atsushi   Onoe,   An   Extension   of   Format   for   IPv6    Scoped    Addresses,    internet    draft,    work    in    progress    ⟨ftp://ftp.ietf.org/internet-drafts
       /draft-ietf-ipngwg-scopedaddr-format-02.txt⟩.

       Craig Metz, Protocol Independence Using the Sockets API, Proceedings of the freenix track: 2000 USENIX annual technical conference, June 2000 ⟨http://www.usenix.org/publications/library
       /proceedings/usenix2000/freenix/metzprotocol.html⟩.

Linux man-pages 6.04                                                                            2023-03-30                                                                                  getnameinfo(3)
GETNAMEINFO(3P)                                                                          POSIX Programmer's Manual                                                                         GETNAMEINFO(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       getnameinfo — get name information

SYNOPSIS
       #include <sys/socket.h>
       #include <netdb.h>

       int getnameinfo(const struct sockaddr *restrict sa, socklen_t salen,
           char *restrict node, socklen_t nodelen, char *restrict service,
           socklen_t servicelen, int flags);

DESCRIPTION
       The getnameinfo() function shall translate a socket address to a node name and service location, all of which are defined as in freeaddrinfo().

       The sa argument points to a socket address structure to be translated. The salen argument contains the length of the address pointed to by sa.

       If the socket address structure contains an IPv4-mapped IPv6 address or an IPv4-compatible IPv6 address, the implementation shall extract the embedded IPv4 address and lookup the  node  name  for
       that IPv4 address.

       If the address is the IPv6 unspecified address ("::"), a lookup shall not be performed and the behavior shall be the same as when the node's name cannot be located.

       If  the  node argument is non-NULL and the nodelen argument is non-zero, then the node argument points to a buffer able to contain up to nodelen bytes that receives the node name as a null-termi‐
       nated string. If the node argument is NULL or the nodelen argument is zero, the node name shall not be returned. If the node's name cannot be located, the numeric form of the address contained in
       the socket address structure pointed to by the sa argument is returned instead of its name.

       If  the service argument is non-NULL and the servicelen argument is non-zero, then the service argument points to a buffer able to contain up to servicelen bytes that receives the service name as
       a null-terminated string.  If the service argument is NULL or the servicelen argument is zero, the service name shall not be returned. If the service's name cannot be located, the numeric form of
       the service address (for example, its port number) shall be returned instead of its name.

       The flags argument is a flag that changes the default actions of the function. By default the fully-qualified domain name (FQDN) for the host shall be returned, but:

        *  If the flag bit NI_NOFQDN is set, only the node name portion of the FQDN shall be returned for local hosts.

        *  If the flag bit NI_NUMERICHOST is set, the numeric form of the address contained in the socket address structure pointed to by the sa argument shall be returned instead of its name.

        *  If the flag bit NI_NAMEREQD is set, an error shall be returned if the host's name cannot be located.

        *  If the flag bit NI_NUMERICSERV is set, the numeric form of the service address shall be returned (for example, its port number) instead of its name.

        *  If the flag bit NI_NUMERICSCOPE is set, the numeric form of the scope identifier shall be returned (for example, interface index) instead of its name. This flag shall be ignored if the sa ar‐
           gument is not an IPv6 address.

        *  If the flag bit NI_DGRAM is set, this indicates that the service is a datagram service (SOCK_DGRAM). The default behavior shall assume that the service is a stream service (SOCK_STREAM).

       Notes:

                  1. The two NI_NUMERICxxx flags are required to support the -n flag that many commands provide.

                  2. The NI_DGRAM flag is required for the few AF_INET and AF_INET6 port numbers (for example, [512,514]) that represent different services for UDP and TCP.

       The getnameinfo() function shall be thread-safe.

RETURN VALUE
       A zero return value for getnameinfo() indicates successful completion; a non-zero return value indicates failure. The possible values for the failures are listed in the ERRORS section.

       Upon successful completion, getnameinfo() shall return the node and service names, if requested, in the buffers provided. The returned names are always null-terminated strings.

ERRORS
       The getnameinfo() function shall fail and return the corresponding value if:

       [EAI_AGAIN] The name could not be resolved at this time. Future attempts may succeed.

       [EAI_BADFLAGS]
                   The flags had an invalid value.

       [EAI_FAIL]  A non-recoverable error occurred.

       [EAI_FAMILY]
                   The address family was not recognized or the address length was invalid for the specified family.

       [EAI_MEMORY]
                   There was a memory allocation failure.

       [EAI_NONAME]
                   The name does not resolve for the supplied parameters.

                   NI_NAMEREQD is set and the host's name cannot be located, or both nodename and servname were null.

       [EAI_OVERFLOW]
                   An argument buffer overflowed. The buffer pointed to by the node argument or the service argument was too small.

       [EAI_SYSTEM]
                   A system error occurred. The error code can be found in errno.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       If the returned values are to be used as part of any further name resolution (for example, passed to getaddrinfo()), applications should provide buffers large enough to store any result  possible
       on the system.

       Given the IPv4-mapped IPv6 address "::ffff:1.2.3.4", the implementation performs a lookup as if the socket address structure contains the IPv4 address "1.2.3.4".

       The IPv6 unspecified address ("::") and the IPv6 loopback address ("::1") are not IPv4-compatible addresses.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       endservent(), freeaddrinfo(), gai_strerror(), inet_ntop(), socket()

       The Base Definitions volume of POSIX.1‐2017, <netdb.h>, <sys_socket.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                    GETNAMEINFO(3P)
