resolver(3)                Library Functions Manual                resolver(3)

NAME
       res_ninit,  res_nquery,  res_nsearch,  res_nquerydomain,  res_nmkquery,
       res_nsend, res_nclose, res_init,  res_query,  res_search,  res_querydo‐
       main, res_mkquery, res_send, dn_comp, dn_expand - resolver routines

LIBRARY
       Resolver library (libresolv, -lresolv)

SYNOPSIS
       #include <netinet/in.h>
       #include <arpa/nameser.h>
       #include <resolv.h>

       struct __res_state;
       typedef struct __res_state *res_state;

       int res_ninit(res_state statep);

       void res_nclose(res_state statep);

       int res_nquery(res_state statep,
                  const char *dname, int class, int type,
                  unsigned char answer[.anslen], int anslen);

       int res_nsearch(res_state statep,
                  const char *dname, int class, int type,
                  unsigned char answer[.anslen], int anslen);

       int res_nquerydomain(res_state statep,
                  const char *name, const char *domain,
                  int class, int type, unsigned char answer[.anslen],
                  int anslen);

       int res_nmkquery(res_state statep,
                  int op, const char *dname, int class,
                  int type, const unsigned char data[.datalen], int datalen,
                  const unsigned char *newrr,
                  unsigned char buf[.buflen], int buflen);

       int res_nsend(res_state statep,
                  const unsigned char msg[.msglen], int msglen,
                  unsigned char answer[.anslen], int anslen);

       int dn_comp(const char *exp_dn, unsigned char comp_dn[.length],
                  int length, unsigned char **dnptrs,
                  unsigned char **lastdnptr);

       int dn_expand(const unsigned char *msg,
                  const unsigned char *eomorig,
                  const unsigned char *comp_dn, char exp_dn[.length],
                  int length);

       [[deprecated]] extern struct __res_state _res;

       [[deprecated]] int res_init(void);

       [[deprecated]]
       int res_query(const char *dname, int class, int type,
                  unsigned char answer[.anslen], int anslen);

       [[deprecated]]
       int res_search(const char *dname, int class, int type,
                  unsigned char answer[.anslen], int anslen);

       [[deprecated]]
       int res_querydomain(const char *name, const char *domain,
                  int class, int type, unsigned char answer[.anslen],
                  int anslen);

       [[deprecated]]
       int res_mkquery(int op, const char *dname, int class,
                  int type, const unsigned char data[.datalen], int datalen,
                  const unsigned char *newrr,
                  unsigned char buf[.buflen], int buflen);

       [[deprecated]]
       int res_send(const unsigned char msg[.msglen], int msglen,
                  unsigned char answer[.anslen], int anslen);

DESCRIPTION
       Note:  This  page is incomplete (various resolver functions provided by
       glibc are not described) and likely out of date.

       The functions described below make queries to  and  interpret  the  re‐
       sponses from Internet domain name servers.

       The  API  consists  of a set of more modern, reentrant functions and an
       older set of nonreentrant functions that  have  been  superseded.   The
       traditional  resolver interfaces such as res_init() and res_query() use
       some static (global) state stored  in  the  _res  structure,  rendering
       these  functions non-thread-safe.  BIND 8.2 introduced a set of new in‐
       terfaces res_ninit(), res_nquery(), and so on, which take  a  res_state
       as their first argument, so you can use a per-thread resolver state.

       The  res_ninit()  and res_init() functions read the configuration files
       (see resolv.conf(5)) to get the default domain name and name server ad‐
       dress(es).   If no server is given, the local host is tried.  If no do‐
       main is given, that associated with the local host is used.  It can  be
       overridden  with  the environment variable LOCALDOMAIN.  res_ninit() or
       res_init() is normally executed by the first call to one of  the  other
       functions.   Every call to res_ninit() requires a corresponding call to
       res_nclose() to free memory allocated  by  res_ninit()  and  subsequent
       calls to res_nquery().

       The  res_nquery()  and  res_query() functions query the name server for
       the fully qualified domain name name of specified type and class.   The
       reply  is  left  in  the buffer answer of length anslen supplied by the
       caller.

       The res_nsearch() and res_search() functions make a query and waits for
       the  response  like  res_nquery() and res_query(), but in addition they
       implement the default and search rules controlled by  RES_DEFNAMES  and
       RES_DNSRCH (see description of _res options below).

       The res_nquerydomain() and res_querydomain() functions make a query us‐
       ing res_nquery()/res_query() on the concatenation of name and domain.

       The   following   functions   are   lower-level   routines   used    by
       res_nquery()/res_query().

       The  res_nmkquery()  and res_mkquery() functions construct a query mes‐
       sage in buf of length buflen for the domain name dname.  The query type
       op is one of the following (typically QUERY):

       QUERY  Standard query.

       IQUERY Inverse  query.  This option was removed in glibc 2.26, since it
              has not been supported by DNS servers for a very long time.

       NS_NOTIFY_OP
              Notify secondary of SOA (Start of Authority) change.

       newrr is currently unused.

       The res_nsend() and res_send() function send a preformatted query given
       in  msg  of  length msglen and returns the answer in answer which is of
       length anslen.  They will call res_ninit()/res_init() if it has not al‐
       ready been called.

       The  dn_comp() function compresses the domain name exp_dn and stores it
       in the buffer comp_dn of length length.  The compression uses an  array
       of  pointers  dnptrs to previously compressed names in the current mes‐
       sage.  The first pointer points to the beginning of the message and the
       list ends with NULL.  The limit of the array is specified by lastdnptr.
       If dnptr is NULL, domain names are not  compressed.   If  lastdnptr  is
       NULL, the list of labels is not updated.

       The  dn_expand() function expands the compressed domain name comp_dn to
       a full domain name, which is  placed  in  the  buffer  exp_dn  of  size
       length.   The compressed name is contained in a query or reply message,
       and msg points to the beginning of the message.

       The resolver routines use configuration and state information contained
       in a __res_state structure (either passed as the statep argument, or in
       the global variable _res, in the case of the older  nonreentrant  func‐
       tions).   The only field of this structure that is normally manipulated
       by the user is the options field.  This field can contain  the  bitwise
       "OR" of the following options:

       RES_INIT
              True if res_ninit() or res_init() has been called.

       RES_DEBUG
              Print  debugging  messages.   This  option  is available only if
              glibc was built with debugging enabled, which  is  not  the  de‐
              fault.

       RES_AAONLY (unimplemented; deprecated in glibc 2.25)
              Accept  authoritative  answers only.  res_send() continues until
              it finds an authoritative answer or returns an error.  This  op‐
              tion was present but unimplemented until glibc 2.24; since glibc
              2.25, it is deprecated, and its usage produces a warning.

       RES_USEVC
              Use TCP connections for queries rather than UDP datagrams.

       RES_PRIMARY (unimplemented; deprecated in glibc 2.25)
              Query primary domain name server only.  This option was  present
              but unimplemented until glibc 2.24; since glibc 2.25, it is dep‐
              recated, and its usage produces a warning.

       RES_IGNTC
              Ignore truncation errors.  Don't retry with TCP.

       RES_RECURSE
              Set the recursion desired bit in queries.  Recursion is  carried
              out  by  the domain name server, not by res_send().  [Enabled by
              default].

       RES_DEFNAMES
              If set, res_search() will append the default domain name to sin‐
              gle  component  names—that  is, those that do not contain a dot.
              [Enabled by default].

       RES_STAYOPEN
              Used with RES_USEVC to keep  the  TCP  connection  open  between
              queries.

       RES_DNSRCH
              If  set,  res_search()  will search for hostnames in the current
              domain and in parent domains.  This option is used by gethostby‐
              name(3).  [Enabled by default].

       RES_INSECURE1
              Accept  a response from a wrong server.  This can be used to de‐
              tect potential security hazards, but you need to  compile  glibc
              with  debugging enabled and use RES_DEBUG option (for debug pur‐
              pose only).

       RES_INSECURE2
              Accept a response which contains a wrong  query.   This  can  be
              used  to detect potential security hazards, but you need to com‐
              pile glibc with debugging enabled and use RES_DEBUG option  (for
              debug purpose only).

       RES_NOALIASES
              Disable usage of HOSTALIASES environment variable.

       RES_USE_INET6
              Try  an AAAA query before an A query inside the gethostbyname(3)
              function, and map IPv4 responses in IPv6 "tunneled form"  if  no
              AAAA  records are found but an A record set exists.  Since glibc
              2.25, this option is deprecated, and its usage produces a  warn‐
              ing;  applications  should use getaddrinfo(3), rather than geth‐
              ostbyname(3).

       RES_ROTATE
              Causes round-robin selection of name servers  from  among  those
              listed.   This  has the effect of spreading the query load among
              all listed servers, rather than having all clients try the first
              listed server first every time.

       RES_NOCHECKNAME (unimplemented; deprecated in glibc 2.25)
              Disable  the modern BIND checking of incoming hostnames and mail
              names for invalid characters such as underscore (_),  non-ASCII,
              or  control  characters.   This  option  was present until glibc
              2.24; since glibc 2.25, it is deprecated, and its usage produces
              a warning.

       RES_KEEPTSIG (unimplemented; deprecated in glibc 2.25)
              Do not strip TSIG records.  This option was present but unimple‐
              mented until glibc 2.24; since glibc 2.25, it is deprecated, and
              its usage produces a warning.

       RES_BLAST (unimplemented; deprecated in glibc 2.25)
              Send  each  query simultaneously and recursively to all servers.
              This option was present  but  unimplemented  until  glibc  2.24;
              since  glibc  2.25,  it  is deprecated, and its usage produces a
              warning.

       RES_USEBSTRING (glibc 2.3.4 to glibc 2.24)
              Make reverse IPv6 lookups using the bit-label  format  described
              in  RFC  2673; if this option is not set (which is the default),
              then nibble format is used.  This option was  removed  in  glibc
              2.25,  since  it relied on a backward-incompatible DNS extension
              that was never deployed on the Internet.

       RES_NOIP6DOTINT (glibc 2.24 and earlier)
              Use ip6.arpa zone in IPv6 reverse  lookup  instead  of  ip6.int,
              which  is  deprecated since glibc 2.3.4.  This option is present
              up to and including glibc 2.24, where it is enabled by  default.
              In glibc 2.25, this option was removed.

       RES_USE_EDNS0 (since glibc 2.6)
              Enables  support for the DNS extensions (EDNS0) described in RFC
              2671.

       RES_SNGLKUP (since glibc 2.10)
              By default, glibc performs IPv4 and  IPv6  lookups  in  parallel
              since glibc 2.9.  Some appliance DNS servers cannot handle these
              queries properly and make the requests time  out.   This  option
              disables  the behavior and makes glibc perform the IPv6 and IPv4
              requests sequentially (at the cost of some slowdown of  the  re‐
              solving process).

       RES_SNGLKUPREOP
              When  RES_SNGLKUP  option is enabled, opens a new socket for the
              each request.

       RES_USE_DNSSEC
              Use DNSSEC with OK bit  in  OPT  record.   This  option  implies
              RES_USE_EDNS0.

       RES_NOTLDQUERY
              Do not look up unqualified name as a top-level domain (TLD).

       RES_DEFAULT
              Default   option   which   implies:  RES_RECURSE,  RES_DEFNAMES,
              RES_DNSRCH, and RES_NOIP6DOTINT.

RETURN VALUE
       The res_ninit() and res_init() functions return 0 on success, or -1  if
       an error occurs.

       The res_nquery(), res_query(), res_nsearch(), res_search(), res_nquery‐
       domain(),     res_querydomain(),     res_nmkquery(),     res_mkquery(),
       res_nsend(),  and  res_send()  functions  return  the length of the re‐
       sponse, or -1 if an error occurs.

       The dn_comp() and dn_expand() functions return the length of  the  com‐
       pressed name, or -1 if an error occurs.

       In  the  case  of  an  error  return  from  res_nquery(),  res_query(),
       res_nsearch(), res_search(), res_nquerydomain(), or  res_querydomain(),
       the  global variable h_errno (see gethostbyname(3)) can be consulted to
       determine the cause of the error.

FILES
       /etc/resolv.conf
              resolver configuration file

       /etc/host.conf
              resolver configuration file

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌─────────────────────────────────────┬───────────────┬────────────────┐
       │Interface                            │ Attribute     │ Value          │
       ├─────────────────────────────────────┼───────────────┼────────────────┤
       │res_ninit(), res_nclose(),           │ Thread safety │ MT-Safe locale │
       │res_nquery(), res_nsearch(),         │               │                │
       │res_nquerydomain(), res_nsend()      │               │                │
       ├─────────────────────────────────────┼───────────────┼────────────────┤
       │res_nmkquery(), dn_comp(),           │ Thread safety │ MT-Safe        │
       │dn_expand()                          │               │                │
       └─────────────────────────────────────┴───────────────┴────────────────┘

STANDARDS
       None.

HISTORY
       4.3BSD.

SEE ALSO
       gethostbyname(3), resolv.conf(5), resolver(5), hostname(7), named(8)

       The GNU C library source file resolv/README.

Linux man-pages 6.04              2023-03-30                       resolver(3)
resolv.conf(5)                File Formats Manual               resolv.conf(5)

NAME
       resolv.conf - resolver configuration file

SYNOPSIS
       /etc/resolv.conf

DESCRIPTION
       The  resolver is a set of routines in the C library that provide access
       to the Internet Domain Name System (DNS).  The  resolver  configuration
       file  contains  information  that  is read by the resolver routines the
       first time they are invoked by a process.  The file is designed  to  be
       human readable and contains a list of keywords with values that provide
       various types of resolver information.  The configuration file is  con‐
       sidered  a  trusted  source of DNS information; see the trust-ad option
       below for details.

       If this file does not exist, only the name server on the local  machine
       will be queried, and the search list contains the local domain name de‐
       termined from the hostname.

       The different configuration options are:

       nameserver Name server IP address
              Internet address of a  name  server  that  the  resolver  should
              query,  either an IPv4 address (in dot notation), or an IPv6 ad‐
              dress in colon (and possibly dot) notation as per RFC 2373.   Up
              to  MAXNS  (currently  3,  see  <resolv.h>)  name servers may be
              listed, one per keyword.  If there are multiple servers, the re‐
              solver  library  queries  them in the order listed.  If no name‐
              server entries are present, the  default  is  to  use  the  name
              server  on  the  local machine.  (The algorithm used is to try a
              name server, and if the query times out, try the next, until out
              of name servers, then repeat trying all the name servers until a
              maximum number of retries are made.)

       search Search list for host-name lookup.
              By default, the search list contains one entry, the local domain
              name.   It  is  determined  from  the local hostname returned by
              gethostname(2); the local domain name is taken to be  everything
              after  the first '.'.  Finally, if the hostname does not contain
              a '.', the root domain is assumed as the local domain name.

              This may be changed by listing the desired  domain  search  path
              following  the search keyword with spaces or tabs separating the
              names.  Resolver queries having fewer than ndots  dots  (default
              is  1)  in  them  will  be attempted using each component of the
              search path in turn until a match is  found.   For  environments
              with  multiple  subdomains  please read options ndots:n below to
              avoid man-in-the-middle attacks and unnecessary traffic for  the
              root-dns-servers.   Note  that this process may be slow and will
              generate a lot of network traffic if the servers for the  listed
              domains  are  not  local,  and  that queries will time out if no
              server is available for one of the domains.

              If there are multiple search directives, only  the  search  list
              from the last instance is used.

              In glibc 2.25 and earlier, the search list is limited to six do‐
              mains with a total of 256 characters.   Since  glibc  2.26,  the
              search list is unlimited.

              The  domain  directive is an obsolete name for the search direc‐
              tive that handles one search list entry only.

       sortlist
              This option allows addresses returned by gethostbyname(3) to  be
              sorted.   A  sortlist  is specified by IP-address-netmask pairs.
              The netmask is optional and defaults to the natural  netmask  of
              the  net.   The  IP address and optional network pairs are sepa‐
              rated by slashes.  Up to 10 pairs may be specified.  Here is  an
              example:

                  sortlist 130.155.160.0/255.255.240.0 130.155.0.0

       options
              Options  allows  certain internal resolver variables to be modi‐
              fied.  The syntax is

                     options option ...

              where option is one of the following:

              debug  Sets RES_DEBUG in _res.options (effective only  if  glibc
                     was built with debug support; see resolver(3)).

              ndots:n
                     Sets a threshold for the number of dots which must appear
                     in a name given to res_query(3) (see resolver(3))  before
                     an  initial absolute query will be made.  The default for
                     n is 1, meaning that if there are any dots in a name, the
                     name  will  be tried first as an absolute name before any
                     search list elements are appended to it.  The  value  for
                     this option is silently capped to 15.

              timeout:n
                     Sets  the amount of time the resolver will wait for a re‐
                     sponse from a remote  name  server  before  retrying  the
                     query  via  a different name server.  This may not be the
                     total time taken by any resolver API call and there is no
                     guarantee  that a single resolver API call maps to a sin‐
                     gle  timeout.   Measured  in  seconds,  the  default   is
                     RES_TIMEOUT (currently 5, see <resolv.h>).  The value for
                     this option is silently capped to 30.

              attempts:n
                     Sets the number of times the resolver will send  a  query
                     to its name servers before giving up and returning an er‐
                     ror  to  the  calling  application.    The   default   is
                     RES_DFLRETRY  (currently  2,  see <resolv.h>).  The value
                     for this option is silently capped to 5.

              rotate Sets RES_ROTATE in _res.options, which causes round-robin
                     selection  of name servers from among those listed.  This
                     has the effect of spreading  the  query  load  among  all
                     listed  servers,  rather  than having all clients try the
                     first listed server first every time.

              no-check-names
                     Sets RES_NOCHECKNAME in _res.options, which disables  the
                     modern BIND checking of incoming hostnames and mail names
                     for invalid characters such as underscore (_), non-ASCII,
                     or control characters.

              inet6  Sets  RES_USE_INET6 in _res.options.  This has the effect
                     of trying an AAAA query before  an  A  query  inside  the
                     gethostbyname(3)  function, and of mapping IPv4 responses
                     in IPv6 "tunneled form" if no AAAA records are found  but
                     an A record set exists.  Since glibc 2.25, this option is
                     deprecated;  applications  should   use   getaddrinfo(3),
                     rather than gethostbyname(3).

              ip6-bytestring (since glibc 2.3.4 to glibc 2.24)
                     Sets RES_USEBSTRING in _res.options.  This causes reverse
                     IPv6 lookups to be made using the  bit-label  format  de‐
                     scribed  in RFC 2673; if this option is not set (which is
                     the default), then nibble format is  used.   This  option
                     was removed in glibc 2.25, since it relied on a backward-
                     incompatible DNS extension that was never deployed on the
                     Internet.

              ip6-dotint/no-ip6-dotint (glibc 2.3.4 to glibc 2.24)
                     Clear/set RES_NOIP6DOTINT in _res.options.  When this op‐
                     tion is clear (ip6-dotint), reverse IPv6 lookups are made
                     in the (deprecated) ip6.int zone; when this option is set
                     (no-ip6-dotint), reverse IPv6 lookups  are  made  in  the
                     ip6.arpa zone by default.  These options are available up
                     to glibc 2.24, where no-ip6-dotint is the default.  Since
                     ip6-dotint support long ago ceased to be available on the
                     Internet, these options were removed in glibc 2.25.

              edns0 (since glibc 2.6)
                     Sets RES_USE_EDNS0 in _res.options.  This enables support
                     for the DNS extensions described in RFC 2671.

              single-request (since glibc 2.10)
                     Sets RES_SNGLKUP in _res.options.  By default, glibc per‐
                     forms IPv4 and IPv6 lookups in parallel since glibc  2.9.
                     Some  appliance  DNS  servers cannot handle these queries
                     properly and make the requests  time  out.   This  option
                     disables  the  behavior  and makes glibc perform the IPv6
                     and IPv4 requests sequentially (at the cost of some slow‐
                     down of the resolving process).

              single-request-reopen (since glibc 2.9)
                     Sets  RES_SNGLKUPREOP in _res.options.  The resolver uses
                     the same socket for the A and AAAA requests.  Some  hard‐
                     ware  mistakenly  sends  back  only one reply.  When that
                     happens the client system will sit and wait for the  sec‐
                     ond  reply.  Turning this option on changes this behavior
                     so that if two requests from the same port are  not  han‐
                     dled  correctly  it  will close the socket and open a new
                     one before sending the second request.

              no-tld-query (since glibc 2.14)
                     Sets RES_NOTLDQUERY in _res.options.  This option  causes
                     res_nsearch()  to  not  attempt to resolve an unqualified
                     name as if it were a top level domain (TLD).  This option
                     can cause problems if the site has ``localhost'' as a TLD
                     rather than having localhost on one or more  elements  of
                     the  search  list.   This option has no effect if neither
                     RES_DEFNAMES or RES_DNSRCH is set.

              use-vc (since glibc 2.14)
                     Sets RES_USEVC in _res.options.  This option  forces  the
                     use of TCP for DNS resolutions.

              no-reload (since glibc 2.26)
                     Sets  RES_NORELOAD in _res.options.  This option disables
                     automatic reloading of a changed configuration file.

              trust-ad (since glibc 2.31)
                     Sets RES_TRUSTAD in _res.options.  This  option  controls
                     the  AD bit behavior of the stub resolver.  If a validat‐
                     ing resolver sets the AD bit in a response, it  indicates
                     that  the  data in the response was verified according to
                     the DNSSEC protocol.  In order to rely on the AD bit, the
                     local  system has to trust both the DNSSEC-validating re‐
                     solver and the network path to it, which is  why  an  ex‐
                     plicit opt-in is required.  If the trust-ad option is ac‐
                     tive, the stub resolver sets the AD bit in  outgoing  DNS
                     queries  (to enable AD bit support), and preserves the AD
                     bit in responses.  Without this option, the AD bit is not
                     set  in  queries, and it is always removed from responses
                     before they are returned to the application.  This  means
                     that  applications  can  trust the AD bit in responses if
                     the trust-ad option has been set correctly.

                     In glibc 2.30 and earlier, the AD is  not  set  automati‐
                     cally  in queries, and is passed through unchanged to ap‐
                     plications in responses.

       The search keyword of a system's resolv.conf file can be overridden  on
       a  per-process basis by setting the environment variable LOCALDOMAIN to
       a space-separated list of search domains.

       The options keyword of a system's resolv.conf file can be amended on  a
       per-process  basis by setting the environment variable RES_OPTIONS to a
       space-separated list of resolver options as explained above  under  op‐
       tions.

       The  keyword  and  value  must appear on a single line, and the keyword
       (e.g., nameserver) must start the line.  The value follows the keyword,
       separated by white space.

       Lines  that  contain a semicolon (;) or hash character (#) in the first
       column are treated as comments.

FILES
       /etc/resolv.conf, <resolv.h>

SEE ALSO
       gethostbyname(3),    resolver(3),    host.conf(5),    hosts(5),    nss‐
       witch.conf(5), hostname(7), named(8)

       Name Server Operations Guide for BIND

4th Berkeley Distribution         2023-02-05                    resolv.conf(5)
