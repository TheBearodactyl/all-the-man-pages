malloc(3)                  Library Functions Manual                  malloc(3)

NAME
       malloc, free, calloc, realloc, reallocarray - allocate and free dynamic
       memory

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdlib.h>

       void *malloc(size_t size);
       void free(void *ptr);
       void *calloc(size_t nmemb, size_t size);
       void *realloc(void *ptr, size_t size);
       void *reallocarray(void *ptr, size_t nmemb, size_t size);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       reallocarray():
           Since glibc 2.29:
               _DEFAULT_SOURCE
           glibc 2.28 and earlier:
               _GNU_SOURCE

DESCRIPTION
   malloc()
       The malloc() function allocates size bytes and returns a pointer to the
       allocated  memory.   The memory is not initialized.  If size is 0, then
       malloc() returns a unique pointer value that can later be  successfully
       passed to free().  (See "Nonportable behavior" for portability issues.)

   free()
       The  free()  function  frees  the memory space pointed to by ptr, which
       must have been returned by a previous call to malloc() or related func‐
       tions.  Otherwise, or if ptr has already been freed, undefined behavior
       occurs.  If ptr is NULL, no operation is performed.

   calloc()
       The calloc() function allocates memory for an array of  nmemb  elements
       of  size bytes each and returns a pointer to the allocated memory.  The
       memory is set to zero.  If nmemb or size is 0, then calloc() returns  a
       unique pointer value that can later be successfully passed to free().

       If  the  multiplication of nmemb and size would result in integer over‐
       flow, then calloc() returns an error.  By contrast, an integer overflow
       would  not  be detected in the following call to malloc(), with the re‐
       sult that an incorrectly sized block of memory would be allocated:

           malloc(nmemb * size);

   realloc()
       The realloc() function changes the size of the memory block pointed  to
       by  ptr to size bytes.  The contents of the memory will be unchanged in
       the range from the start of the region up to the minimum of the old and
       new sizes.  If the new size is larger than the old size, the added mem‐
       ory will not be initialized.

       If ptr is NULL, then the call is equivalent to  malloc(size),  for  all
       values of size.

       If size is equal to zero, and ptr is not NULL, then the call is equiva‐
       lent to free(ptr) (but see "Nonportable behavior" for  portability  is‐
       sues).

       Unless  ptr  is  NULL, it must have been returned by an earlier call to
       malloc or related functions.  If the  area  pointed  to  was  moved,  a
       free(ptr) is done.

   reallocarray()
       The  reallocarray()  function  changes the size of (and possibly moves)
       the memory block pointed to by ptr to be large enough for an  array  of
       nmemb  elements,  each of which is size bytes.  It is equivalent to the
       call

           realloc(ptr, nmemb * size);

       However, unlike that realloc() call, reallocarray() fails safely in the
       case  where the multiplication would overflow.  If such an overflow oc‐
       curs, reallocarray() returns an error.

RETURN VALUE
       The malloc(), calloc(), realloc(), and reallocarray() functions  return
       a  pointer  to  the allocated memory, which is suitably aligned for any
       type that fits into the requested size or less.  On error, these  func‐
       tions  return  NULL  and  set  errno.  Attempting to allocate more than
       PTRDIFF_MAX bytes is considered an error, as an object that large could
       cause later pointer subtraction to overflow.

       The free() function returns no value, and preserves errno.

       The  realloc()  and  reallocarray() functions return NULL if ptr is not
       NULL and the requested size is zero; this is not considered  an  error.
       (See  "Nonportable  behavior"  for portability issues.)  Otherwise, the
       returned pointer may be the same as ptr if the allocation was not moved
       (e.g.,  there was room to expand the allocation in-place), or different
       from ptr if the allocation was moved to a new address.  If these  func‐
       tions  fail,  the  original block is left untouched; it is not freed or
       moved.

ERRORS
       calloc(), malloc(), realloc(), and reallocarray()  can  fail  with  the
       following error:

       ENOMEM Out  of  memory.  Possibly, the application hit the RLIMIT_AS or
              RLIMIT_DATA limit described in getrlimit(2).

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │malloc(), free(), calloc(), realloc()       │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       malloc()
       free()
       calloc()
       realloc()
              C11, POSIX.1-2008.

       reallocarray()
              None.

HISTORY
       malloc()
       free()
       calloc()
       realloc()
              POSIX.1-2001, C89.

       reallocarray()
              glibc 2.26.  OpenBSD 5.6, FreeBSD 11.0.

       malloc()  and related functions rejected sizes greater than PTRDIFF_MAX
       starting in glibc 2.30.

       free() preserved errno starting in glibc 2.33.

NOTES
       By default, Linux follows an  optimistic  memory  allocation  strategy.
       This  means  that  when malloc() returns non-NULL there is no guarantee
       that the memory really is available.  In case it  turns  out  that  the
       system  is  out  of memory, one or more processes will be killed by the
       OOM  killer.   For   more   information,   see   the   description   of
       /proc/sys/vm/overcommit_memory and /proc/sys/vm/oom_adj in proc(5), and
       the  Linux  kernel  source  file   Documentation/vm/overcommit-account‐
       ing.rst.

       Normally, malloc() allocates memory from the heap, and adjusts the size
       of the heap as required, using sbrk(2).  When allocating blocks of mem‐
       ory larger than MMAP_THRESHOLD bytes, the glibc malloc() implementation
       allocates the memory as a  private  anonymous  mapping  using  mmap(2).
       MMAP_THRESHOLD  is  128 kB  by  default,  but  is adjustable using mal‐
       lopt(3).  Prior to Linux 4.7 allocations performed using  mmap(2)  were
       unaffected  by  the  RLIMIT_DATA  resource limit; since Linux 4.7, this
       limit is also enforced for allocations performed using mmap(2).

       To avoid corruption in multithreaded applications, mutexes are used in‐
       ternally  to  protect the memory-management data structures employed by
       these functions.  In a multithreaded application in which  threads  si‐
       multaneously  allocate  and  free memory, there could be contention for
       these mutexes.  To scalably handle memory allocation  in  multithreaded
       applications,  glibc creates additional memory allocation arenas if mu‐
       tex contention is detected.  Each arena is a  large  region  of  memory
       that  is  internally allocated by the system (using brk(2) or mmap(2)),
       and managed with its own mutexes.

       If your program uses a private memory allocator, it should do so by re‐
       placing  malloc(),  free(),  calloc(),  and realloc().  The replacement
       functions must implement the documented glibc behaviors, including  er‐
       rno  handling, size-zero allocations, and overflow checking; otherwise,
       other library routines may crash or operate incorrectly.  For  example,
       if the replacement free() does not preserve errno, then seemingly unre‐
       lated library routines may fail without having a valid reason in errno.
       Private  memory  allocators  may also need to replace other glibc func‐
       tions; see "Replacing malloc" in the glibc manual for details.

       Crashes in memory allocators are almost always related to heap  corrup‐
       tion, such as overflowing an allocated chunk or freeing the same point‐
       er twice.

       The malloc() implementation is tunable via environment  variables;  see
       mallopt(3) for details.

   Nonportable behavior
       The  behavior  of  these  functions  when the requested size is zero is
       glibc specific; other implementations may return NULL  without  setting
       errno,  and portable POSIX programs should tolerate such behavior.  See
       realloc(3p).

       POSIX requires memory allocators to set errno upon  failure.   However,
       the C standard does not require this, and applications portable to non-
       POSIX platforms should not assume this.

       Portable programs should not use private memory  allocators,  as  POSIX
       and  the  C standard do not allow replacement of malloc(), free(), cal‐
       loc(), and realloc().

EXAMPLES
       #include <err.h>
       #include <stddef.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <string.h>

       #define MALLOCARRAY(n, type)  ((type *) my_mallocarray(n, sizeof(type)))
       #define MALLOC(type)          MALLOCARRAY(1, type)

       static inline void *my_mallocarray(size_t nmemb, size_t size);

       int
       main(void)
       {
           char  *p;

           p = MALLOCARRAY(32, char);
           if (p == NULL)
               err(EXIT_FAILURE, "malloc");

           strlcpy(p, "foo", 32);
           puts(p);
       }

       static inline void *
       my_mallocarray(size_t nmemb, size_t size)
       {
           return reallocarray(NULL, nmemb, size);
       }

SEE ALSO
       valgrind(1), brk(2), mmap(2), alloca(3), malloc_get_state(3),
       malloc_info(3), malloc_trim(3), malloc_usable_size(3), mallopt(3),
       mcheck(3), mtrace(3), posix_memalign(3)

       For details of the GNU C library implementation, see
       ⟨https://sourceware.org/glibc/wiki/MallocInternals⟩.

Linux man-pages 6.04              2023-03-30                         malloc(3)
REALLOC(3P)                POSIX Programmer's Manual               REALLOC(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       realloc — memory reallocator

SYNOPSIS
       #include <stdlib.h>

       void *realloc(void *ptr, size_t size);

DESCRIPTION
       The functionality described on this reference page is aligned with  the
       ISO C  standard.  Any  conflict between the requirements described here
       and the ISO C standard is unintentional. This  volume  of  POSIX.1‐2017
       defers to the ISO C standard.

       The  realloc()  function  shall deallocate the old object pointed to by
       ptr and return a pointer to a new object that has the size specified by
       size.   The contents of the new object shall be the same as that of the
       old object prior to deallocation, up to the lesser of the new  and  old
       sizes.  Any  bytes  in the new object beyond the size of the old object
       have indeterminate values. If the size of the space requested is  zero,
       the  behavior shall be implementation-defined: either a null pointer is
       returned, or the behavior shall be as if the size  were  some  non-zero
       value, except that the behavior is undefined if the returned pointer is
       used to access an object. If the space cannot be allocated, the  object
       shall remain unchanged.

       If ptr is a null pointer, realloc() shall be equivalent to malloc() for
       the specified size.

       If ptr does not match a pointer returned earlier by calloc(), malloc(),
       or  realloc() or if the space has previously been deallocated by a call
       to free() or realloc(), the behavior is undefined.

       The order and contiguity of storage allocated by  successive  calls  to
       realloc()  is  unspecified. The pointer returned if the allocation suc‐
       ceeds shall be suitably aligned so that it may be assigned to a pointer
       to  any  type  of  object and then used to access such an object in the
       space allocated (until the space is explicitly freed  or  reallocated).
       Each  such  allocation shall yield a pointer to an object disjoint from
       any other object. The pointer returned shall point to the start (lowest
       byte address) of the allocated space. If the space cannot be allocated,
       a null pointer shall be returned.

RETURN VALUE
       Upon successful completion, realloc() shall return  a  pointer  to  the
       (possibly moved) allocated space. If size is 0, either:

        *  A null pointer shall be returned and, if ptr is not a null pointer,
           errno shall be set to an implementation-defined value.

        *  A pointer to the allocated space shall be returned, and the  memory
           object  pointed to by ptr shall be freed. The application shall en‐
           sure that the pointer is not used to access an object.

       If there is not enough available memory, realloc() shall return a  null
       pointer and set errno to [ENOMEM].  If realloc() returns a null pointer
       and errno has been set to [ENOMEM], the memory referenced by ptr  shall
       not be changed.

ERRORS
       The realloc() function shall fail if:

       ENOMEM Insufficient memory is available.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       The  description  of realloc() has been modified from previous versions
       of this standard to align with the ISO/IEC 9899:1999 standard. Previous
       versions explicitly permitted a call to realloc(p, 0) to free the space
       pointed to by p and return a null pointer. While this behavior could be
       interpreted  as  permitted  by this version of the standard, the C lan‐
       guage committee have indicated that this interpretation  is  incorrect.
       Applications  should  assume  that if realloc() returns a null pointer,
       the space pointed to by p has not been freed. Since this could lead  to
       double-frees,  implementations  should also set errno if a null pointer
       actually indicates a failure, and applications  should  only  free  the
       space if errno was changed.

RATIONALE
       None.

FUTURE DIRECTIONS
       This  standard  defers  to the ISO C standard. While that standard cur‐
       rently has language that might permit realloc(p, 0), where p is  not  a
       null  pointer, to free p while still returning a null pointer, the com‐
       mittee responsible for that standard is considering clarifying the lan‐
       guage to explicitly prohibit that alternative.

SEE ALSO
       calloc(), free(), malloc()

       The Base Definitions volume of POSIX.1‐2017, <stdlib.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                          REALLOC(3P)
