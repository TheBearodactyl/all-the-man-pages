sigset(3)                  Library Functions Manual                  sigset(3)

NAME
       sigset, sighold, sigrelse, sigignore - System V signal API

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <signal.h>

       typedef void (*sighandler_t)(int);

       [[deprecated]] sighandler_t sigset(int sig, sighandler_t disp);

       [[deprecated]] int sighold(int sig);
       [[deprecated]] int sigrelse(int sig);
       [[deprecated]] int sigignore(int sig);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       sigset(), sighold(), sigrelse(), sigignore():
           _XOPEN_SOURCE >= 500

DESCRIPTION
       These  functions are provided in glibc as a compatibility interface for
       programs that make use of the historical System V signal API.  This API
       is  obsolete:  new applications should use the POSIX signal API (sigac‐
       tion(2), sigprocmask(2), etc.)

       The sigset() function modifies the disposition of the signal sig.   The
       disp  argument  can be the address of a signal handler function, or one
       of the following constants:

       SIG_DFL
              Reset the disposition of sig to the default.

       SIG_IGN
              Ignore sig.

       SIG_HOLD
              Add sig to the process's signal mask, but leave the  disposition
              of sig unchanged.

       If disp specifies the address of a signal handler, then sig is added to
       the process's signal mask during execution of the handler.

       If disp was specified as a value other than SIG_HOLD, then sig  is  re‐
       moved from the process's signal mask.

       The dispositions for SIGKILL and SIGSTOP cannot be changed.

       The sighold() function adds sig to the calling process's signal mask.

       The  sigrelse()  function removes sig from the calling process's signal
       mask.

       The sigignore() function sets the disposition of sig to SIG_IGN.

RETURN VALUE
       On success, sigset() returns SIG_HOLD if sig  was  blocked  before  the
       call, or the signal's previous disposition if it was not blocked before
       the call.  On error, sigset() returns -1, with errno  set  to  indicate
       the error.  (But see BUGS below.)

       The  sighold(),  sigrelse(), and sigignore() functions return 0 on suc‐
       cess; on error, these functions return -1 and set errno to indicate the
       error.

ERRORS
       For sigset() see the ERRORS under sigaction(2) and sigprocmask(2).

       For sighold() and sigrelse() see the ERRORS under sigprocmask(2).

       For sigignore(), see the errors under sigaction(2).

ATTRIBUTES
       For  an  explanation  of  the  terms  used  in  this  section,  see at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │sigset(), sighold(), sigrelse(),            │ Thread safety │ MT-Safe │
       │sigignore()                                 │               │         │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

       sighandler_t
              GNU.  POSIX.1 uses the same type but without a typedef.

HISTORY
       glibc  2.1.  SVr4, POSIX.1-2001.  POSIX.1-2008 marks these functions as
       obsolete,  recommending  the  use  of   sigaction(2),   sigprocmask(2),
       pthread_sigmask(3), and sigsuspend(2) instead.

NOTES
       The  sigset()  function provides reliable signal handling semantics (as
       when calling sigaction(2) with sa_mask equal to 0).

       On System V, the signal() function provides  unreliable  semantics  (as
       when calling sigaction(2) with sa_mask equal to SA_RESETHAND | SA_NODE‐
       FER).  On BSD,  signal()  provides  reliable  semantics.   POSIX.1-2001
       leaves  these  aspects of signal() unspecified.  See signal(2) for fur‐
       ther details.

       In order to wait for a signal, BSD and System V both provided  a  func‐
       tion  named  sigpause(3), but this function has a different argument on
       the two systems.  See sigpause(3) for details.

BUGS
       Before glibc 2.2, sigset() did not unblock sig if disp was specified as
       a value other than SIG_HOLD.

       Before  glibc 2.5, sigset() does not correctly return the previous dis‐
       position of the signal in two cases.  First, if disp  is  specified  as
       SIG_HOLD, then a successful sigset() always returns SIG_HOLD.  Instead,
       it should return the previous disposition of  the  signal  (unless  the
       signal  was  blocked, in which case SIG_HOLD should be returned).  Sec‐
       ond, if the signal is currently blocked, then the  return  value  of  a
       successful sigset() should be SIG_HOLD.  Instead, the previous disposi‐
       tion of the signal is returned.  These problems have been  fixed  since
       glibc 2.5.

SEE ALSO
       kill(2),  pause(2),  sigaction(2), signal(2), sigprocmask(2), raise(3),
       sigpause(3), sigvec(3), signal(7)

Linux man-pages 6.04              2023-03-30                         sigset(3)
SIGHOLD(3P)                POSIX Programmer's Manual               SIGHOLD(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       sighold, sigignore, sigpause, sigrelse, sigset — signal management

SYNOPSIS
       #include <signal.h>

       int sighold(int sig);
       int sigignore(int sig);
       int sigpause(int sig);
       int sigrelse(int sig);
       void (*sigset(int sig, void (*disp)(int)))(int);

DESCRIPTION
       Use of any of  these  functions  is  unspecified  in  a  multi-threaded
       process.

       The  sighold(), sigignore(), sigpause(), sigrelse(), and sigset() func‐
       tions provide simplified signal management.

       The sigset() function shall modify signal dispositions. The  sig  argu‐
       ment  specifies  the signal, which may be any signal except SIGKILL and
       SIGSTOP. The disp argument specifies the  signal's  disposition,  which
       may  be  SIG_DFL,  SIG_IGN,  or  the  address  of  a signal handler. If
       sigset() is used, and disp is the address of a signal handler, the sys‐
       tem shall add sig to the signal mask of the calling process before exe‐
       cuting the signal handler; when the signal handler returns, the  system
       shall restore the signal mask of the calling process to its state prior
       to the delivery of the signal. In addition, if sigset()  is  used,  and
       disp is equal to SIG_HOLD, sig shall be added to the signal mask of the
       calling process  and  sig's  disposition  shall  remain  unchanged.  If
       sigset()  is  used, and disp is not equal to SIG_HOLD, sig shall be re‐
       moved from the signal mask of the calling process.

       The sighold() function shall add sig to the signal mask of the  calling
       process.

       The  sigrelse()  function  shall remove sig from the signal mask of the
       calling process.

       The sigignore() function shall set the disposition of sig to SIG_IGN.

       The sigpause() function shall remove sig from the signal  mask  of  the
       calling  process  and suspend the calling process until a signal is re‐
       ceived. The sigpause() function shall restore the signal  mask  of  the
       process to its original state before returning.

       If the action for the SIGCHLD signal is set to SIG_IGN, child processes
       of the calling processes shall not be transformed into zombie processes
       when  they terminate. If the calling process subsequently waits for its
       children, and the process has no unwaited-for children that were trans‐
       formed  into zombie processes, it shall block until all of its children
       terminate, and wait(), waitid(), and waitpid() shall fail and set errno
       to [ECHILD].

RETURN VALUE
       Upon  successful completion, sigset() shall return SIG_HOLD if the sig‐
       nal had been blocked and the signal's previous disposition  if  it  had
       not been blocked. Otherwise, SIG_ERR shall be returned and errno set to
       indicate the error.

       The sigpause() function shall suspend execution of the thread  until  a
       signal  is  received,  whereupon  it  shall  return -1 and set errno to
       [EINTR].

       For all other functions, upon successful completion,  0  shall  be  re‐
       turned.   Otherwise, -1 shall be returned and errno set to indicate the
       error.

ERRORS
       These functions shall fail if:

       EINVAL The sig argument is an illegal signal number.

       The sigset() and sigignore() functions shall fail if:

       EINVAL An attempt is made to catch a signal that cannot be  caught,  or
              to ignore a signal that cannot be ignored.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       The  sigaction()  function  provides  a more comprehensive and reliable
       mechanism for controlling signals;  new  applications  should  use  the
       sigaction() function instead of the obsolescent sigset() function.

       The  sighold()  function, in conjunction with sigrelse() or sigpause(),
       may be used to establish critical regions of code that require the  de‐
       livery of a signal to be temporarily deferred. For broader portability,
       the pthread_sigmask() or sigprocmask() functions should be used instead
       of the obsolescent sighold() and sigrelse() functions.

       For  broader  portability, the sigsuspend() function should be used in‐
       stead of the obsolescent sigpause() function.

RATIONALE
       Each of these historic functions has a direct analog in the other func‐
       tions  which  are required to be per-thread and thread-safe (aside from
       sigprocmask(), which is replaced by pthread_sigmask()).   The  sigset()
       function  can  be implemented as a simple wrapper for sigaction().  The
       sighold() function is equivalent to sigprocmask() or  pthread_sigmask()
       with  SIG_BLOCK  set.  The sigignore() function is equivalent to sigac‐
       tion() with SIG_IGN set. The sigpause() function is equivalent to  sig‐
       suspend().   The  sigrelse() function is equivalent to sigprocmask() or
       pthread_sigmask() with SIG_UNBLOCK set.

FUTURE DIRECTIONS
       These functions may be removed in a future version.

SEE ALSO
       Section 2.4, Signal Concepts, exec, pause(), pthread_sigmask(),  sigac‐
       tion(), signal(), sigsuspend(), wait(), waitid()

       The Base Definitions volume of POSIX.1‐2017, <signal.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                          SIGHOLD(3P)
