hypot(3)                                                                                 Library Functions Manual                                                                                 hypot(3)

NAME
       hypot, hypotf, hypotl - Euclidean distance function

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       double hypot(double x, double y);
       float hypotf(float x, float y);
       long double hypotl(long double x, long double y);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       hypot():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || _XOPEN_SOURCE
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

       hypotf(), hypotl():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       These functions return sqrt(x*x+y*y).  This is the length of the hypotenuse of a right-angled triangle with sides of length x and y, or the distance of the point (x,y) from the origin.

       The calculation is performed without undue overflow or underflow during the intermediate steps of the calculation.

RETURN VALUE
       On success, these functions return the length of the hypotenuse of a right-angled triangle with sides of length x and y.

       If x or y is an infinity, positive infinity is returned.

       If x or y is a NaN, and the other argument is not an infinity, a NaN is returned.

       If the result overflows, a range error occurs, and the functions return HUGE_VAL, HUGE_VALF, or HUGE_VALL, respectively.

       If both arguments are subnormal, and the result is subnormal, a range error occurs, and the correct result is returned.

ERRORS
       See math_error(7) for information on how to determine whether an error has occurred when calling these functions.

       The following errors can occur:

       Range error: result overflow
              errno is set to ERANGE.  An overflow floating-point exception (FE_OVERFLOW) is raised.

       Range error: result underflow
              An underflow floating-point exception (FE_UNDERFLOW) is raised.

              These functions do not set errno for this case.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │hypot(), hypotf(), hypotl()                                                                                                                                             │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       C99, POSIX.1-2001.

       The variant returning double also conforms to SVr4, 4.3BSD.

SEE ALSO
       cabs(3), sqrt(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        hypot(3)
HYPOT(3P)                                                                                POSIX Programmer's Manual                                                                               HYPOT(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       hypot, hypotf, hypotl — Euclidean distance function

SYNOPSIS
       #include <math.h>

       double hypot(double x, double y);
       float hypotf(float x, float y);
       long double hypotl(long double x, long double y);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       These functions shall compute the value of the square root of x2+y2 without undue overflow or underflow.

       An  application  wishing  to check for error situations should set errno to zero and call feclearexcept(FE_ALL_EXCEPT) before calling these functions. On return, if errno is non-zero or fetestex‐
       cept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.

RETURN VALUE
       Upon successful completion, these functions shall return the length of the hypotenuse of a right-angled triangle with sides of length x and y.

       If the correct value would cause overflow, a range error shall occur and hypot(), hypotf(), and hypotl() shall return the value of the macro HUGE_VAL, HUGE_VALF, and HUGE_VALL, respectively.

       If x or y is ±Inf, +Inf shall be returned (even if one of x or y is NaN).

       If x or y is NaN, and the other is not ±Inf, a NaN shall be returned.

       If both arguments are subnormal and the correct result is subnormal, a range error may occur and the correct result shall be returned.

ERRORS
       These functions shall fail if:

       Range Error The result overflows.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the overflow floating-point exception shall be raised.

       These functions may fail if:

       Range Error The result underflows.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the underflow floating-point exception shall be raised.

       The following sections are informative.

EXAMPLES
       See the EXAMPLES section in atan2().

APPLICATION USAGE
       hypot(x,y), hypot(y,x), and hypot(x, -y) are equivalent.

       hypot(x, ±0) is equivalent to fabs(x).

       Underflow only happens when both x and y are subnormal and the (inexact) result is also subnormal.

       These functions take precautions against overflow during intermediate steps of the computation.

       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling & MATH_ERREXCEPT) are independent of each other, but at least one of them must be non-zero.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       atan2(), feclearexcept(), fetestexcept(), isnan(), sqrt()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          HYPOT(3P)
