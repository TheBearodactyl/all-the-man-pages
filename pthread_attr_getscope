pthread_attr_setscope(3)   Library Functions Manual   pthread_attr_setscope(3)

NAME
       pthread_attr_setscope, pthread_attr_getscope - set/get contention scope
       attribute in thread attributes object

LIBRARY
       POSIX threads library (libpthread, -lpthread)

SYNOPSIS
       #include <pthread.h>

       int pthread_attr_setscope(pthread_attr_t *attr, int scope);
       int pthread_attr_getscope(const pthread_attr_t *restrict attr,
                                 int *restrict scope);

DESCRIPTION
       The pthread_attr_setscope() function sets the contention  scope  attri‐
       bute  of  the thread attributes object referred to by attr to the value
       specified in scope.  The contention scope attribute defines the set  of
       threads  against which a thread competes for resources such as the CPU.
       POSIX.1 specifies two possible values for scope:

       PTHREAD_SCOPE_SYSTEM
              The thread competes for resources with all other threads in  all
              processes  on the system that are in the same scheduling alloca‐
              tion   domain   (a   group   of   one   or   more   processors).
              PTHREAD_SCOPE_SYSTEM  threads  are scheduled relative to one an‐
              other according to their scheduling policy and priority.

       PTHREAD_SCOPE_PROCESS
              The thread competes for resources with all other threads in  the
              same    process    that    were    also    created    with   the
              PTHREAD_SCOPE_PROCESS contention  scope.   PTHREAD_SCOPE_PROCESS
              threads  are  scheduled relative to other threads in the process
              according to their  scheduling  policy  and  priority.   POSIX.1
              leaves  it  unspecified  how  these  threads  contend with other
              threads in other process on the system or with other threads  in
              the same process that were created with the PTHREAD_SCOPE_SYSTEM
              contention scope.

       POSIX.1 requires that an implementation support at least one  of  these
       contention   scopes.   Linux  supports  PTHREAD_SCOPE_SYSTEM,  but  not
       PTHREAD_SCOPE_PROCESS.

       On systems that support multiple contention scopes, then, in order  for
       the  parameter  setting  made by pthread_attr_setscope() to have effect
       when calling pthread_create(3), the caller must  use  pthread_attr_set‐
       inheritsched(3)  to  set  the  inherit-scheduler  attribute  of the at‐
       tributes object attr to PTHREAD_EXPLICIT_SCHED.

       The pthread_attr_getscope() function returns the contention  scope  at‐
       tribute of the thread attributes object referred to by attr in the buf‐
       fer pointed to by scope.

RETURN VALUE
       On success, these functions return 0; on error, they return  a  nonzero
       error number.

ERRORS
       pthread_attr_setscope() can fail with the following errors:

       EINVAL An invalid value was specified in scope.

       ENOTSUP
              scope  specified  the  value PTHREAD_SCOPE_PROCESS, which is not
              supported on Linux.

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │pthread_attr_setscope(),                    │ Thread safety │ MT-Safe │
       │pthread_attr_getscope()                     │               │         │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

NOTES
       The PTHREAD_SCOPE_SYSTEM contention scope typically  indicates  that  a
       user-space thread is bound directly to a single kernel-scheduling enti‐
       ty.  This is the case on Linux for the obsolete LinuxThreads  implemen‐
       tation and the modern NPTL implementation, which are both 1:1 threading
       implementations.

       POSIX.1 specifies that the default contention scope is  implementation-
       defined.

SEE ALSO
       pthread_attr_init(3), pthread_attr_setaffinity_np(3),
       pthread_attr_setinheritsched(3), pthread_attr_setschedparam(3),
       pthread_attr_setschedpolicy(3), pthread_create(3), pthreads(7)

Linux man-pages 6.04              2023-03-30          pthread_attr_setscope(3)
PTHREAD_ATTR_GETSCOPE(3P)  POSIX Programmer's Manual PTHREAD_ATTR_GETSCOPE(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       pthread_attr_getscope, pthread_attr_setscope — get  and  set  the  con‐
       tentionscope attribute (REALTIME THREADS)

SYNOPSIS
       #include <pthread.h>

       int pthread_attr_getscope(const pthread_attr_t *restrict attr,
           int *restrict contentionscope);
       int pthread_attr_setscope(pthread_attr_t *attr, int contentionscope);

DESCRIPTION
       The  pthread_attr_getscope() and pthread_attr_setscope() functions, re‐
       spectively, shall get and set the contentionscope attribute in the attr
       object.

       The contentionscope attribute may have the values PTHREAD_SCOPE_SYSTEM,
       signifying     system     scheduling     contention      scope,      or
       PTHREAD_SCOPE_PROCESS,  signifying process scheduling contention scope.
       The symbols PTHREAD_SCOPE_SYSTEM and PTHREAD_SCOPE_PROCESS are  defined
       in the <pthread.h> header.

       The  behavior  is undefined if the value specified by the attr argument
       to pthread_attr_getscope() or pthread_attr_setscope() does not refer to
       an initialized thread attributes object.

RETURN VALUE
       If  successful, the pthread_attr_getscope() and pthread_attr_setscope()
       functions shall return zero; otherwise, an error number  shall  be  re‐
       turned to indicate the error.

ERRORS
       The pthread_attr_setscope() function shall fail if:

       ENOTSUP
              An  attempt  was  made  to  set  the attribute to an unsupported
              value.

       The pthread_attr_setscope() function may fail if:

       EINVAL The value of contentionscope is not valid.

       These functions shall not return an error code of [EINTR].

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       After these attributes have been set, a thread can be created with  the
       specified attributes using pthread_create().  Using these routines does
       not affect the current running thread.

       See Section 2.9.4, Thread Scheduling  for  further  details  on  thread
       scheduling attributes and their default settings.

RATIONALE
       If an implementation detects that the value specified by the attr argu‐
       ment to pthread_attr_getscope() or pthread_attr_setscope() does not re‐
       fer  to an initialized thread attributes object, it is recommended that
       the function should fail and report an [EINVAL] error.

FUTURE DIRECTIONS
       None.

SEE ALSO
       pthread_attr_destroy(), pthread_attr_getinheritsched(),
       pthread_attr_getschedpolicy(), pthread_attr_getschedparam(),
       pthread_create()

       The Base Definitions volume of POSIX.1‐2017, <pthread.h>, <sched.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017            PTHREAD_ATTR_GETSCOPE(3P)
