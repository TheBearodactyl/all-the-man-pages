getdate(3)                                                                               Library Functions Manual                                                                               getdate(3)

NAME
       getdate, getdate_r - convert a date-plus-time string to broken-down time

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <time.h>

       struct tm *getdate(const char *string);

       extern int getdate_err;

       int getdate_r(const char *restrict string, struct tm *restrict res);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       getdate():
           _XOPEN_SOURCE >= 500

       getdate_r():
           _GNU_SOURCE

DESCRIPTION
       The  function  getdate() converts a string representation of a date and time, contained in the buffer pointed to by string, into a broken-down time.  The broken-down time is stored in a tm struc‐
       ture, and a pointer to this structure is returned as the function result.  This tm structure is allocated in static storage, and consequently it will be overwritten by further calls to getdate().

       In contrast to strptime(3), (which has a format argument), getdate() uses the formats found in the file whose full pathname is given in the environment variable DATEMSK.  The first  line  in  the
       file that matches the given input string is used for the conversion.

       The matching is done case insensitively.  Superfluous whitespace, either in the pattern or in the string to be converted, is ignored.

       The conversion specifications that a pattern can contain are those given for strptime(3).  One more conversion specification is specified in POSIX.1-2001:

       %Z     Timezone name.  This is not implemented in glibc.

       When %Z is given, the structure containing the broken-down time is initialized with values corresponding to the current time in the given timezone.  Otherwise, the structure is initialized to the
       broken-down time corresponding to the current local time (as by a call to localtime(3)).

       When only the day of the week is given, the day is taken to be the first such day on or after today.

       When only the month is given (and no year), the month is taken to be the first such month equal to or after the current month.  If no day is given, it is the first day of the month.

       When no hour, minute, and second are given, the current hour, minute, and second are taken.

       If no date is given, but we know the hour, then that hour is taken to be the first such hour equal to or after the current hour.

       getdate_r() is a GNU extension that provides a reentrant version of getdate().  Rather than using a global variable to report errors and a static buffer to return the broken down time, it returns
       errors via the function result value, and returns the resulting broken-down time in the caller-allocated buffer pointed to by the argument res.

RETURN VALUE
       When  successful,  getdate()  returns a pointer to a struct tm.  Otherwise, it returns NULL and sets the global variable getdate_err to one of the error numbers shown below.  Changes to errno are
       unspecified.

       On success getdate_r() returns 0; on error it returns one of the error numbers shown below.

ERRORS
       The following errors are returned via getdate_err (for getdate()) or as the function result (for getdate_r()):

       1   The DATEMSK environment variable is not defined, or its value is an empty string.

       2   The template file specified by DATEMSK cannot be opened for reading.

       3   Failed to get file status information.

       4   The template file is not a regular file.

       5   An error was encountered while reading the template file.

       6   Memory allocation failed (not enough memory available).

       7   There is no line in the file that matches the input.

       8   Invalid input specification.

ENVIRONMENT
       DATEMSK
              File containing format patterns.

       TZ, LC_TIME
              Variables used by strptime(3).

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────┬───────────────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
       │Interface   │ Attribute     │ Value                                                                                                                                                               │
       ├────────────┼───────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
       │getdate()   │ Thread safety │ MT-Unsafe race:getdate env locale                                                                                                                                   │
       ├────────────┼───────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
       │getdate_r() │ Thread safety │ MT-Safe env locale                                                                                                                                                  │
       └────────────┴───────────────┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

VERSIONS
       The POSIX.1 specification for strptime(3) contains conversion specifications using the %E or %O modifier, while such specifications are not given for getdate().  In glibc, getdate() is implement‐
       ed using strptime(3), so that precisely the same conversions are supported by both.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

EXAMPLES
       The  program  below  calls  getdate() for each of its command-line arguments, and for each call displays the values in the fields of the returned tm structure.  The following shell session demon‐
       strates the operation of the program:

           $ TFILE=$PWD/tfile
           $ echo '%A' > $TFILE       # Full name of the day of the week
           $ echo '%T' >> $TFILE      # Time (HH:MM:SS)
           $ echo '%F' >> $TFILE      # ISO date (YYYY-MM-DD)
           $ date
           $ export DATEMSK=$TFILE
           $ ./a.out Tuesday '2009-12-28' '12:22:33'
           Sun Sep  7 06:03:36 CEST 2008
           Call 1 ("Tuesday") succeeded:
               tm_sec   = 36
               tm_min   = 3
               tm_hour  = 6
               tm_mday  = 9
               tm_mon   = 8
               tm_year  = 108
               tm_wday  = 2
               tm_yday  = 252
               tm_isdst = 1
           Call 2 ("2009-12-28") succeeded:
               tm_sec   = 36
               tm_min   = 3
               tm_hour  = 6
               tm_mday  = 28
               tm_mon   = 11
               tm_year  = 109
               tm_wday  = 1
               tm_yday  = 361
               tm_isdst = 0
           Call 3 ("12:22:33") succeeded:
               tm_sec   = 33
               tm_min   = 22
               tm_hour  = 12
               tm_mday  = 7
               tm_mon   = 8
               tm_year  = 108
               tm_wday  = 0
               tm_yday  = 250
               tm_isdst = 1

   Program source

       #define _GNU_SOURCE
       #include <stdio.h>
       #include <stdlib.h>
       #include <time.h>

       int
       main(int argc, char *argv[])
       {
           struct tm *tmp;

           for (size_t j = 1; j < argc; j++) {
               tmp = getdate(argv[j]);

               if (tmp == NULL) {
                   printf("Call %zu failed; getdate_err = %d\n",
                          j, getdate_err);
                   continue;
               }

               printf("Call %zu (\"%s\") succeeded:\n", j, argv[j]);
               printf("    tm_sec   = %d\n", tmp->tm_sec);
               printf("    tm_min   = %d\n", tmp->tm_min);
               printf("    tm_hour  = %d\n", tmp->tm_hour);
               printf("    tm_mday  = %d\n", tmp->tm_mday);
               printf("    tm_mon   = %d\n", tmp->tm_mon);
               printf("    tm_year  = %d\n", tmp->tm_year);
               printf("    tm_wday  = %d\n", tmp->tm_wday);
               printf("    tm_yday  = %d\n", tmp->tm_yday);
               printf("    tm_isdst = %d\n", tmp->tm_isdst);
           }

           exit(EXIT_SUCCESS);
       }

SEE ALSO
       time(2), localtime(3), setlocale(3), strftime(3), strptime(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                      getdate(3)
GETDATE(3P)                                                                              POSIX Programmer's Manual                                                                             GETDATE(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       getdate — convert user format date and time

SYNOPSIS
       #include <time.h>

       struct tm *getdate(const char *string);

DESCRIPTION
       The getdate() function shall convert a string representation of a date or time into a broken-down time.

       The external variable or macro getdate_err, which has type int, is used by getdate() to return error values. It is unspecified whether getdate_err is a macro or an identifier declared with exter‐
       nal  linkage,  and whether or not it is a modifiable lvalue. If a macro definition is suppressed in order to access an actual object, or a program defines an identifier with the name getdate_err,
       the behavior is undefined.

       Templates are used to parse and interpret the input string. The templates are contained in a text file identified by the environment variable DATEMSK.  The DATEMSK variable should be set to indi‐
       cate  the  full  pathname  of the file that contains the templates. The first line in the template that matches the input specification is used for interpretation and conversion into the internal
       time format.

       The following conversion specifications shall be supported:

       %%      Equivalent to %.

       %a      Abbreviated weekday name.

       %A      Full weekday name.

       %b      Abbreviated month name.

       %B      Full month name.

       %c      Locale's appropriate date and time representation.

       %C      Century number [00,99]; leading zeros are permitted but not required.

       %d      Day of month [01,31]; the leading 0 is optional.

       %D      Date as %m/%d/%y.

       %e      Equivalent to %d.

       %h      Abbreviated month name.

       %H      Hour [00,23].

       %I      Hour [01,12].

       %m      Month number [01,12].

       %M      Minute [00,59].

       %n      Equivalent to <newline>.

       %p      Locale's equivalent of either AM or PM.

       %r      The locale's appropriate representation of time in AM and PM notation.  In the POSIX locale, this shall be equivalent to %I:%M:%S %p.

       %R      Time as %H:%M.

       %S      Seconds [00,60]. The range goes to 60 (rather than stopping at 59) to allow positive leap seconds to be expressed. Since leap seconds cannot be predicted by  any  algorithm,  leap  second
               data must come from some external source.

       %t      Equivalent to <tab>.

       %T      Time as %H:%M:%S.

       %w      Weekday number (Sunday = [0,6]).

       %x      Locale's appropriate date representation.

       %X      Locale's appropriate time representation.

       %y      Year  within  century.  When  a century is not otherwise specified, values in the range [69,99] shall refer to years 1969 to 1999 inclusive, and values in the range [00,68] shall refer to
               years 2000 to 2068 inclusive.

               Note:     It is expected that in a future version of this standard the default century inferred from a 2-digit year will change. (This would apply to all commands accepting a 2-digit year
                         as input.)

       %Y      Year as "ccyy" (for example, 2001).

       %Z      Timezone  name  or  no  characters if no timezone exists. If the timezone supplied by %Z is not the timezone that getdate() expects, an invalid input specification error shall result. The
               getdate() function calculates an expected timezone based on information supplied to the function (such as the hour, day, and month).

       The match between the template and input specification performed by getdate() shall be case-insensitive.

       The month and weekday names can consist of any combination of upper and lowercase letters. The process can request that the input date or time specification be in a specific language  by  setting
       the LC_TIME category (see setlocale()).

       Leading  zeros  are not necessary for the descriptors that allow leading zeros. However, at most two digits are allowed for those descriptors, including leading zeros. Extra white space in either
       the template file or in string shall be ignored.

       The results are undefined if the conversion specifications %c, %x, and %X include unsupported conversion specifications.

       The following rules apply for converting the input specification into the internal format:

        *  If %Z is being scanned, then getdate() shall initialize the broken-down time to be the current time in the scanned timezone. Otherwise, it shall initialize the broken-down time based  on  the
           current local time as if localtime() had been called.

        *  If only the weekday is given, the day chosen shall be the day, starting with today and moving into the future, which first matches the named day.

        *  If  only  the month (and no year) is given, the month chosen shall be the month, starting with the current month and moving into the future, which first matches the named month. The first day
           of the month shall be assumed if no day is given.

        *  If no hour, minute, and second are given, the current hour, minute, and second shall be assumed.

        *  If no date is given, the hour chosen shall be the hour, starting with the current hour and moving into the future, which first matches the named hour.

       If a conversion specification in the DATEMSK file does not correspond to one of the conversion specifications above, the behavior is unspecified.

       The getdate() function need not be thread-safe.

RETURN VALUE
       Upon successful completion, getdate() shall return a pointer to a struct tm.  Otherwise, it shall return a null pointer and set getdate_err to indicate the error.

ERRORS
       The getdate() function shall fail in the following cases, setting getdate_err to the value shown in the list below. Any changes to errno are unspecified.

        1. The DATEMSK environment variable is null or undefined.

        2. The template file cannot be opened for reading.

        3. Failed to get file status information.

        4. The template file is not a regular file.

        5. An I/O error is encountered while reading the template file.

        6. Memory allocation failed (not enough memory available).

        7. There is no line in the template that matches the input.

        8. Invalid input specification. For example, February 31; or a time is specified that cannot be represented in a time_t (representing the time in seconds since the Epoch).

       The following sections are informative.

EXAMPLES
        1. The following example shows the possible contents of a template:

               %m
               %A %B %d, %Y, %H:%M:%S
               %A
               %B
               %m/%d/%y %I %p
               %d,%m,%Y %H:%M
               at %A the %dst of %B in %Y
               run job at %I %p,%B %dnd
               %A den %d. %B %Y %H.%M Uhr

        2. The following are examples of valid input specifications for the template in Example 1:

               getdate("10/1/87 4 PM");
               getdate("Friday");
               getdate("Friday September 18, 1987, 10:30:30");
               getdate("24,9,1986 10:30");
               getdate("at monday the 1st of december in 1986");
               getdate("run job at 3 PM, december 2nd");

           If the LC_TIME category is set to a German locale that includes freitag as a weekday name and oktober as a month name, the following would be valid:

               getdate("freitag den 10. oktober 1986 10.30 Uhr");

        3. The following example shows how local date and time specification can be defined in the template:

                                                                                   ┌───────────────────────────┬──────────────────┐
                                                                                   │        Invocation         │ Line in Template │
                                                                                   ├───────────────────────────┼──────────────────┤
                                                                                   │getdate("11/27/86")        │ %m/%d/%y         │
                                                                                   │getdate("27.11.86")        │ %d.%m.%y         │
                                                                                   │getdate("86-11-27")        │ %y-%m-%d         │
                                                                                   │getdate("Friday 12:00:00") │ %A %H:%M:%S      │
                                                                                   └───────────────────────────┴──────────────────┘
        4. The following examples help to illustrate the above rules assuming that the current date is Mon Sep 22 12:19:47 EDT 1986 and the LC_TIME category is set to the default C or POSIX locale:

                                                                          ┌─────────────┬──────────────────┬──────────────────────────────┐
                                                                          │   Input     │ Line in Template │             Date             │
                                                                          ├─────────────┼──────────────────┼──────────────────────────────┤
                                                                          │Mon          │ %a               │ Mon Sep 22 12:19:47 EDT 1986 │
                                                                          │Sun          │ %a               │ Sun Sep 28 12:19:47 EDT 1986 │
                                                                          │Fri          │ %a               │ Fri Sep 26 12:19:47 EDT 1986 │
                                                                          │September    │ %B               │ Mon Sep 1 12:19:47 EDT 1986  │
                                                                          │January      │ %B               │ Thu Jan 1 12:19:47 EST 1987  │
                                                                          │December     │ %B               │ Mon Dec 1 12:19:47 EST 1986  │
                                                                          │Sep Mon      │ %b %a            │ Mon Sep 1 12:19:47 EDT 1986  │
                                                                          │Jan Fri      │ %b %a            │ Fri Jan 2 12:19:47 EST 1987  │
                                                                          │Dec Mon      │ %b %a            │ Mon Dec 1 12:19:47 EST 1986  │
                                                                          │Jan Wed 1989 │ %b %a %Y         │ Wed Jan 4 12:19:47 EST 1989  │
                                                                          │Fri 9        │ %a %H            │ Fri Sep 26 09:00:00 EDT 1986 │
                                                                          │Feb 10:30    │ %b %H:%S         │ Sun Feb 1 10:00:30 EST 1987  │
                                                                          │10:30        │ %H:%M            │ Tue Sep 23 10:30:00 EDT 1986 │
                                                                          │13:30        │ %H:%M            │ Mon Sep 22 13:30:00 EDT 1986 │
                                                                          └─────────────┴──────────────────┴──────────────────────────────┘
APPLICATION USAGE
       Although historical versions of getdate() did not require that <time.h> declare the external variable getdate_err, this volume of POSIX.1‐2017 does require it. The standard  developers  encourage
       applications to remove declarations of getdate_err and instead incorporate the declaration by including <time.h>.

       Applications should use %Y (4-digit years) in preference to %y (2-digit years).

RATIONALE
       In standard locales, the conversion specifications %c, %x, and %X do not include unsupported conversion specifiers and so the text regarding results being undefined is not a problem in that case.

FUTURE DIRECTIONS
       None.

SEE ALSO
       ctime(), localtime(), setlocale(), strftime(), times()

       The Base Definitions volume of POSIX.1‐2017, <time.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                        GETDATE(3P)
