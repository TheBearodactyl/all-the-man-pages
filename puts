puts(n)                      Tcl Built-In Commands                     puts(n)

______________________________________________________________________________

NAME
       puts - Write to a channel

SYNOPSIS
       puts ?-nonewline? ?channelId? string
______________________________________________________________________________

DESCRIPTION
       Writes  the  characters  given  by string to the channel given by chan‐
       nelId.

       ChannelId must be an identifier for an open channel such as a Tcl stan‐
       dard channel (stdout or stderr), the return value from an invocation of
       open or socket, or the result of a channel creation command provided by
       a Tcl extension. The channel must have been opened for output.

       If  no channelId is specified then it defaults to stdout. Puts normally
       outputs a newline character after string, but this feature may be  sup‐
       pressed by specifying the -nonewline switch.

       Newline  characters  in  the output are translated by puts to platform-
       specific end-of-line sequences according to the current  value  of  the
       -translation  option  for the channel (for example, on PCs newlines are
       normally replaced with  carriage-return-linefeed  sequences.   See  the
       fconfigure  manual  entry  for a discussion on ways in which fconfigure
       will alter output.

       Tcl buffers output internally, so characters written with puts may  not
       appear immediately on the output file or device;  Tcl will normally de‐
       lay output until the buffer is full or the channel is closed.  You  can
       force output to appear immediately with the flush command.

       When  the  output buffer fills up, the puts command will normally block
       until all the buffered data has been accepted for output by the operat‐
       ing  system.  If channelId is in nonblocking mode then the puts command
       will not block even if the operating system  cannot  accept  the  data.
       Instead,  Tcl  continues  to buffer the data and writes it in the back‐
       ground as fast as the underlying file or device can accept it.  The ap‐
       plication  must  use the Tcl event loop for nonblocking output to work;
       otherwise Tcl never finds out that the file or device is ready for more
       output data.  It is possible for an arbitrarily large amount of data to
       be buffered for a channel in nonblocking mode, which  could  consume  a
       large  amount  of  memory.   To  avoid  wasting memory, nonblocking I/O
       should normally be used in an event-driven fashion with  the  fileevent
       command  (do not invoke puts unless you have recently been notified via
       a file event that the channel is ready for more output data).

EXAMPLES
       Write a short message to the console (or wherever stdout is directed):

              puts "Hello, World!"

       Print a message in several parts:

              puts -nonewline "Hello, "
              puts "World!"

       Print a message to the standard error channel:

              puts stderr "Hello, World!"

       Append a log message to a file:

              set chan [open my.log a]
              set timestamp [clock format [clock seconds]]
              puts $chan "$timestamp - Hello, World!"
              close $chan

SEE ALSO
       file(n), fileevent(n), Tcl_StandardChannels(3)

KEYWORDS
       channel, newline, output, write

Tcl                                   7.5                              puts(n)
puts(3)                    Library Functions Manual                    puts(3)

NAME
       fputc, fputs, putc, putchar, puts - output of characters and strings

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdio.h>

       int fputc(int c, FILE *stream);
       int putc(int c, FILE *stream);
       int putchar(int c);

       int fputs(const char *restrict s, FILE *restrict stream);
       int puts(const char *s);

DESCRIPTION
       fputc() writes the character c, cast to an unsigned char, to stream.

       putc()  is equivalent to fputc() except that it may be implemented as a
       macro which evaluates stream more than once.

       putchar(c) is equivalent to putc(c, stdout).

       fputs() writes the string s to stream,  without  its  terminating  null
       byte ('\0').

       puts() writes the string s and a trailing newline to stdout.

       Calls  to the functions described here can be mixed with each other and
       with calls to other output functions from the  stdio  library  for  the
       same output stream.

       For nonlocking counterparts, see unlocked_stdio(3).

RETURN VALUE
       fputc(),  putc(),  and putchar() return the character written as an un‐
       signed char cast to an int or EOF on error.

       puts() and fputs() return a nonnegative number on success,  or  EOF  on
       error.

ATTRIBUTES
       For  an  explanation  of  the  terms  used  in  this  section,  see at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │fputc(), fputs(), putc(), putchar(), puts() │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       POSIX.1-2001, C89, C99.

BUGS
       It is not advisable to mix calls to output functions from the stdio li‐
       brary  with low-level calls to write(2) for the file descriptor associ‐
       ated with the same output stream; the results  will  be  undefined  and
       very probably not what you want.

SEE ALSO
       write(2),   ferror(3),   fgets(3),   fopen(3),   fputwc(3),  fputws(3),
       fseek(3), fwrite(3), putwchar(3), scanf(3), unlocked_stdio(3)

Linux man-pages 6.04              2023-03-30                           puts(3)
PUTS(3P)                   POSIX Programmer's Manual                  PUTS(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       puts — put a string on standard output

SYNOPSIS
       #include <stdio.h>

       int puts(const char *s);

DESCRIPTION
       The functionality described on this reference page is aligned with  the
       ISO C  standard.  Any  conflict between the requirements described here
       and the ISO C standard is unintentional. This  volume  of  POSIX.1‐2017
       defers to the ISO C standard.

       The puts() function shall write the string pointed to by s, followed by
       a <newline>, to the standard output  stream  stdout.   The  terminating
       null byte shall not be written.

       The  last  data  modification and last file status change timestamps of
       the file shall be marked for update between the successful execution of
       puts()  and  the  next  successful  completion of a call to fflush() or
       fclose() on the same stream or a call to exit() or abort().

RETURN VALUE
       Upon successful completion, puts() shall return a non-negative  number.
       Otherwise,  it  shall  return EOF, shall set an error indicator for the
       stream, and errno shall be set to indicate the error.

ERRORS
       Refer to fputc().

       The following sections are informative.

EXAMPLES
   Printing to Standard Output
       The following example gets the current time, converts it  to  a  string
       using localtime() and asctime(), and prints it to standard output using
       puts().  It then prints the number of minutes to an event for which  it
       is waiting.

           #include <time.h>
           #include <stdio.h>
           ...
           time_t now;
           int minutes_to_event;
           ...
           time(&now);
           printf("The time is ");
           puts(asctime(localtime(&now)));
           printf("There are %d minutes to the event.\n",
               minutes_to_event);
           ...

APPLICATION USAGE
       The puts() function appends a <newline>, while fputs() does not.

       This  volume of POSIX.1‐2017 requires that successful completion simply
       return a non-negative integer. There are at least three known different
       implementation conventions for this requirement:

        *  Return a constant value.

        *  Return the last character written.

        *  Return  the  number of bytes written. Note that this implementation
           convention cannot be adhered to for strings longer  than  {INT_MAX}
           bytes as the value would not be representable in the return type of
           the function. For backwards compatibility, implementations can  re‐
           turn  the number of bytes for strings of up to {INT_MAX} bytes, and
           return {INT_MAX} for all longer strings.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.5, Standard I/O Streams, fopen(), fputs(), putc()

       The Base Definitions volume of POSIX.1‐2017, <stdio.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                             PUTS(3P)
