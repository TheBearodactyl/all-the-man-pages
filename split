SPLIT(1)                         User Commands                        SPLIT(1)

NAME
       split - split a file into pieces

SYNOPSIS
       split [OPTION]... [FILE [PREFIX]]

DESCRIPTION
       Output  pieces of FILE to PREFIXaa, PREFIXab, ...; default size is 1000
       lines, and default PREFIX is 'x'.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are  mandatory  for  short  options
       too.

       -a, --suffix-length=N
              generate suffixes of length N (default 2)

       --additional-suffix=SUFFIX
              append an additional SUFFIX to file names

       -b, --bytes=SIZE
              put SIZE bytes per output file

       -C, --line-bytes=SIZE
              put at most SIZE bytes of records per output file

       -d     use numeric suffixes starting at 0, not alphabetic

       --numeric-suffixes[=FROM]
              same as -d, but allow setting the start value

       -x     use hex suffixes starting at 0, not alphabetic

       --hex-suffixes[=FROM]
              same as -x, but allow setting the start value

       -e, --elide-empty-files
              do not generate empty output files with '-n'

       --filter=COMMAND
              write to shell COMMAND; file name is $FILE

       -l, --lines=NUMBER
              put NUMBER lines/records per output file

       -n, --number=CHUNKS
              generate CHUNKS output files; see explanation below

       -t, --separator=SEP
              use  SEP instead of newline as the record separator; '\0' (zero)
              specifies the NUL character

       -u, --unbuffered
              immediately copy input to output with '-n r/...'

       --verbose
              print a diagnostic just before each output file is opened

       --help display this help and exit

       --version
              output version information and exit

       The SIZE argument is an integer and  optional  unit  (example:  10K  is
       10*1024).   Units are K,M,G,T,P,E,Z,Y,R,Q (powers of 1024) or KB,MB,...
       (powers of 1000).  Binary prefixes can be used, too: KiB=K, MiB=M,  and
       so on.

   CHUNKS may be:
       N      split into N files based on size of input

       K/N    output Kth of N to stdout

       l/N    split into N files without splitting lines/records

       l/K/N  output Kth of N to stdout without splitting lines/records

       r/N    like 'l' but use round robin distribution

       r/K/N  likewise but only output Kth of N to stdout

AUTHOR
       Written by Torbjorn Granlund and Richard M. Stallman.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright  ©  2023  Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free  to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation <https://www.gnu.org/software/coreutils/split>
       or available locally via: info '(coreutils) split invocation'

GNU coreutils 9.2                 April 2023                          SPLIT(1)
SPLIT(1P)                  POSIX Programmer's Manual                 SPLIT(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       split — split a file into pieces

SYNOPSIS
       split [-l line_count] [-a suffix_length] [file [name]]

       split -b n[k|m] [-a suffix_length] [file [name]]

DESCRIPTION
       The split utility shall read an input file and write zero or more  out‐
       put  files.   The default size of each output file shall be 1000 lines.
       The size of the output files can be modified by specification of the -b
       or  -l options. Each output file shall be created with a unique suffix.
       The suffix shall consist of  exactly  suffix_length  lowercase  letters
       from  the  POSIX  locale. The letters of the suffix shall be used as if
       they were a base-26 digit system, with the first suffix to  be  created
       consisting  of  all 'a' characters, the second with a 'b' replacing the
       last 'a', and so on, until a name of all 'z' characters is created.  By
       default, the names of the output files shall be 'x', followed by a two-
       character suffix from the character set as  described  above,  starting
       with "aa", "ab", "ac", and so on, and continuing until the suffix "zz",
       for a maximum of 676 files.

       If the number of files required exceeds the maximum allowed by the suf‐
       fix  length provided, such that the last allowable file would be larger
       than the requested size, the split utility shall  fail  after  creating
       the  last file with a valid suffix; split shall not delete the files it
       created with valid suffixes. If the file limit  is  not  exceeded,  the
       last  file  created  shall contain the remainder of the input file, and
       may be smaller than the requested size. If the input is an empty  file,
       no  output file shall be created and this shall not be considered to be
       an error.

OPTIONS
       The split utility shall conform  to  the  Base  Definitions  volume  of
       POSIX.1‐2017, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported:

       -a suffix_length
                 Use  suffix_length  letters to form the suffix portion of the
                 filenames of the split file. If -a is not specified, the  de‐
                 fault  suffix length shall be two. If the sum of the name op‐
                 erand and the suffix_length option-argument  would  create  a
                 filename  exceeding  {NAME_MAX} bytes, an error shall result;
                 split shall exit with a diagnostic message and no files shall
                 be created.

       -b n      Split a file into pieces n bytes in size.

       -b nk     Split a file into pieces n*1024 bytes in size.

       -b nm     Split a file into pieces n*1048576 bytes in size.

       -l line_count
                 Specify the number of lines in each resulting file piece. The
                 line_count argument is an unsigned decimal integer.  The  de‐
                 fault  is  1000.  If the input does not end with a <newline>,
                 the partial line shall be included in the last output file.

OPERANDS
       The following operands shall be supported:

       file      The pathname of the ordinary file to be split.  If  no  input
                 file  is  given  or  file is '-', the standard input shall be
                 used.

       name      The prefix to be used for each of the  files  resulting  from
                 the  split operation. If no name argument is given, 'x' shall
                 be used as the prefix  of  the  output  files.  The  combined
                 length of the basename of prefix and suffix_length cannot ex‐
                 ceed {NAME_MAX} bytes. See the OPTIONS section.

STDIN
       See the INPUT FILES section.

INPUT FILES
       Any file can be used as input.

ENVIRONMENT VARIABLES
       The following environment  variables  shall  affect  the  execution  of
       split:

       LANG      Provide  a  default  value for the internationalization vari‐
                 ables that are unset or null. (See the Base Definitions  vol‐
                 ume  of POSIX.1‐2017, Section 8.2, Internationalization Vari‐
                 ables for the precedence  of  internationalization  variables
                 used to determine the values of locale categories.)

       LC_ALL    If  set  to  a non-empty string value, override the values of
                 all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of  sequences  of
                 bytes of text data as characters (for example, single-byte as
                 opposed to  multi-byte  characters  in  arguments  and  input
                 files).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format
                 and contents of diagnostic messages written to  standard  er‐
                 ror.

       NLSPATH   Determine the location of message catalogs for the processing
                 of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       The output files contain portions of the original  input  file;  other‐
       wise, unchanged.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       >0    An error occurred.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       In the following examples foo is a text file that contains 5000 lines.

        1. Create five files, xaa, xab, xac, xad, and xae:

               split foo

        2. Create  five  files,  but the suffixed portion of the created files
           consists of three letters, xaaa, xaab, xaac, xaad, and xaae:

               split -a 3 foo

        3. Create three files with four-letter suffixes and a supplied prefix,
           bar_aaaa, bar_aaab, and bar_aaac:

               split -a 4 -l 2000 foo bar_

        4. Create  as  many  files as are necessary to contain at most 20*1024
           bytes, each with the default prefix of x and a five-letter suffix:

               split -a 5 -b 20k foo

RATIONALE
       The -b option was added to provide  a  mechanism  for  splitting  files
       other than by lines. While most uses of the -b option are for transmit‐
       ting files over networks, some believed it would have additional uses.

       The -a option was added to overcome the limitation  of  being  able  to
       create only 676 files.

       Consideration  was  given to deleting this utility, using the rationale
       that the functionality provided by this utility is  available  via  the
       csplit  utility  (see  csplit).  Upon reconsideration of the purpose of
       the User Portability Utilities option, it was decided  to  retain  both
       this  utility  and  the csplit utility because users use both utilities
       and have historical expectations of their  behavior.  Furthermore,  the
       splitting  on  byte  boundaries  in split cannot be duplicated with the
       historical csplit.

       The text ``split shall not delete the files it created with valid  suf‐
       fixes''  would  normally  be  assumed,  but  since the related utility,
       csplit, does delete files under some circumstances, the historical  be‐
       havior of split is made explicit to avoid misinterpretation.

       Earlier  versions  of  this standard allowed a -line_count option. This
       form is no longer specified by POSIX.1‐2008 but may be present in  some
       implementations.

FUTURE DIRECTIONS
       None.

SEE ALSO
       csplit

       The  Base  Definitions  volume  of POSIX.1‐2017, Chapter 8, Environment
       Variables, Section 12.2, Utility Syntax Guidelines

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                            SPLIT(1P)
split(n)                     Tcl Built-In Commands                    split(n)

______________________________________________________________________________

NAME
       split - Split a string into a proper Tcl list

SYNOPSIS
       split string ?splitChars?
______________________________________________________________________________

DESCRIPTION
       Returns a list created by splitting string at each character that is in
       the splitChars argument.  Each element of the result list will  consist
       of the characters from string that lie between instances of the charac‐
       ters in splitChars.  Empty list elements will be  generated  if  string
       contains  adjacent  characters  in  splitChars, or if the first or last
       character of string is in splitChars.  If splitChars is an empty string
       then  each character of string becomes a separate element of the result
       list.  SplitChars defaults to the standard white-space characters.

EXAMPLES
       Divide up a USENET group name into its hierarchical components:

              split "comp.lang.tcl" .
                    → comp lang tcl

       See how the split command splits  on  every  character  in  splitChars,
       which can result in information loss if you are not careful:

              split "alpha beta gamma" "temp"
                    → al {ha b} {} {a ga} {} a

       Extract the list words from a string that is not a well-formed list:

              split "Example with {unbalanced brace character"
                    → Example with \{unbalanced brace character

       Split a string into its constituent characters

              split "Hello world" {}
                    → H e l l o { } w o r l d

   PARSING RECORD-ORIENTED FILES
       Parse  a  Unix  /etc/passwd file, which consists of one entry per line,
       with each line consisting of a colon-separated list of fields:

              ## Read the file
              set fid [open /etc/passwd]
              set content [read $fid]
              close $fid

              ## Split into records on newlines
              set records [split $content "\n"]

              ## Iterate over the records
              foreach rec $records {

                  ## Split into fields on colons
                  set fields [split $rec ":"]

                  ## Assign fields to variables and print some out...
                  lassign $fields \
                          userName password uid grp longName homeDir shell
                  puts "$longName uses [file tail $shell] for a login shell"
              }

SEE ALSO
       join(n), list(n), string(n)

KEYWORDS
       list, split, string

Tcl                                                                   split(n)
