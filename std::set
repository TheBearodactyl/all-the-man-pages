std::set< _Key, _Compare, _Library(Functistd::set<l_Key, _Compare, _Alloc >(3)

NAME
       std::set< _Key, _Compare, _Alloc > - A standard container made up of
       unique keys, which can be retrieved in logarithmic time.

SYNOPSIS
       #include <set>

   Public Types
       using insert_return_type = typename _Rep_type::insert_return_type
       using node_type = typename _Rep_type::node_type

           typedef _Key key_type
               Public typedefs.
           typedef _Key value_type
               Public typedefs.
           typedef _Compare key_compare
               Public typedefs.
           typedef _Compare value_compare
               Public typedefs.
           typedef _Alloc allocator_type
               Public typedefs.

           typedef _Alloc_traits::pointer pointer
               Iterator-related typedefs.
           typedef _Alloc_traits::const_pointer const_pointer
               Iterator-related typedefs.
           typedef _Alloc_traits::reference reference
               Iterator-related typedefs.
           typedef _Alloc_traits::const_reference const_reference
               Iterator-related typedefs.
           typedef _Rep_type::const_iterator iterator
               Iterator-related typedefs.
           typedef _Rep_type::const_iterator const_iterator
               Iterator-related typedefs.
           typedef _Rep_type::const_reverse_iterator reverse_iterator
               Iterator-related typedefs.
           typedef _Rep_type::const_reverse_iterator const_reverse_iterator
               Iterator-related typedefs.
           typedef _Rep_type::size_type size_type
               Iterator-related typedefs.
           typedef _Rep_type::difference_type difference_type
               Iterator-related typedefs.

   Public Member Functions
       set ()=default
           Default constructor creates no elements.
       template<typename _InputIterator > set (_InputIterator __first,
           _InputIterator __last)
           Builds a set from a range.
       template<typename _InputIterator > set (_InputIterator __first,
           _InputIterator __last, const _Compare &__comp, const allocator_type
           &__a=allocator_type())
           Builds a set from a range.
       template<typename _InputIterator > set (_InputIterator __first,
           _InputIterator __last, const allocator_type &__a)
           Allocator-extended range constructor.
       set (const _Compare &__comp, const allocator_type
           &__a=allocator_type())
           Creates a set with no elements.
       set (const allocator_type &__a)
           Allocator-extended default constructor.
       set (const set &)=default
           Set copy constructor.
       set (const set &__x, const __type_identity_t< allocator_type > &__a)
           Allocator-extended copy constructor.
       set (initializer_list< value_type > __l, const _Compare
           &__comp=_Compare(), const allocator_type &__a=allocator_type())
           Builds a set from an initializer_list.
       set (initializer_list< value_type > __l, const allocator_type &__a)
           Allocator-extended initialier-list constructor.
       set (set &&)=default
           Set move constructor
       set (set &&__x, const __type_identity_t< allocator_type > &__a)
           noexcept(is_nothrow_copy_constructible< _Compare >::value
           &&_Alloc_traits::_S_always_equal())
           Allocator-extended move constructor.
       ~set ()=default
       iterator begin () const noexcept
       iterator cbegin () const noexcept
       iterator cend () const noexcept
       void clear () noexcept
       reverse_iterator crbegin () const noexcept
       reverse_iterator crend () const noexcept
       template<typename... _Args> std::pair< iterator, bool > emplace (_Args
           &&... __args)
           Attempts to build and insert an element into the set.
       template<typename... _Args> iterator emplace_hint (const_iterator
           __pos, _Args &&... __args)
           Attempts to insert an element into the set.
       bool empty () const noexcept
           Returns true if the set is empty.
       iterator end () const noexcept
       size_type erase (const key_type &__x)
           Erases elements according to the provided key.
       _GLIBCXX_ABI_TAG_CXX11 iterator erase (const_iterator __first,
           const_iterator __last)
           Erases a [__first,__last) range of elements from a set.
       _GLIBCXX_ABI_TAG_CXX11 iterator erase (const_iterator __position)
           Erases an element from a set.
       node_type extract (const key_type &__x)
           Extract a node.
       node_type extract (const_iterator __pos)
           Extract a node.
       allocator_type get_allocator () const noexcept
           Returns the allocator object with which the set was constructed.
       template<typename _InputIterator > void insert (_InputIterator __first,
           _InputIterator __last)
           A template function that attempts to insert a range of elements.
       std::pair< iterator, bool > insert (const value_type &__x)
           Attempts to insert an element into the set.
       iterator insert (const_iterator __hint, node_type &&__nh)
           Re-insert an extracted node.
       iterator insert (const_iterator __position, const value_type &__x)
           Attempts to insert an element into the set.
       iterator insert (const_iterator __position, value_type &&__x)
       void insert (initializer_list< value_type > __l)
           Attempts to insert a list of elements into the set.
       insert_return_type insert (node_type &&__nh)
           Re-insert an extracted node.
       std::pair< iterator, bool > insert (value_type &&__x)
       key_compare key_comp () const
           Returns the comparison object with which the set was constructed.
       size_type max_size () const noexcept
           Returns the maximum size of the set.
       template<typename _Compare1 > void merge (multiset< _Key, _Compare1,
           _Alloc > &&__source)
       template<typename _Compare1 > void merge (multiset< _Key, _Compare1,
           _Alloc > &__source)
       template<typename _Compare1 > void merge (set< _Key, _Compare1, _Alloc
           > &&__source)
       template<typename _Compare1 > void merge (set< _Key, _Compare1, _Alloc
           > &__source)
       set & operator= (const set &)=default
           Set assignment operator.
       set & operator= (initializer_list< value_type > __l)
           Set list assignment operator.
       set & operator= (set &&)=default
           Move assignment operator.
       reverse_iterator rbegin () const noexcept
       reverse_iterator rend () const noexcept
       size_type size () const noexcept
           Returns the size of the set.
       void swap (set &__x) noexcept(/*conditional */)
           Swaps data with another set.
       value_compare value_comp () const
           Returns the comparison object with which the set was constructed.

           size_type count (const key_type &__x) const
               Finds the number of elements.
           template<typename _Kt > auto count (const _Kt &__x) const ->
               decltype(_M_t._M_count_tr(__x))
               Finds the number of elements.

           bool contains (const key_type &__x) const
               Finds whether an element with the given key exists.
           template<typename _Kt > auto contains (const _Kt &__x) const ->
               decltype(_M_t._M_find_tr(__x), void(), true)
               Finds whether an element with the given key exists.

           iterator find (const key_type &__x)
               Tries to locate an element in a set.
           const_iterator find (const key_type &__x) const
               Tries to locate an element in a set.
           template<typename _Kt > auto find (const _Kt &__x) ->
               decltype(iterator{_M_t._M_find_tr(__x)})
               Tries to locate an element in a set.
           template<typename _Kt > auto find (const _Kt &__x) const ->
               decltype(const_iterator{_M_t._M_find_tr(__x)})
               Tries to locate an element in a set.

           iterator lower_bound (const key_type &__x)
               Finds the beginning of a subsequence matching given key.
           const_iterator lower_bound (const key_type &__x) const
               Finds the beginning of a subsequence matching given key.
           template<typename _Kt > auto lower_bound (const _Kt &__x) ->
               decltype(iterator(_M_t._M_lower_bound_tr(__x)))
               Finds the beginning of a subsequence matching given key.
           template<typename _Kt > auto lower_bound (const _Kt &__x) const ->
               decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
               Finds the beginning of a subsequence matching given key.

           iterator upper_bound (const key_type &__x)
               Finds the end of a subsequence matching given key.
           const_iterator upper_bound (const key_type &__x) const
               Finds the end of a subsequence matching given key.
           template<typename _Kt > auto upper_bound (const _Kt &__x) ->
               decltype(iterator(_M_t._M_upper_bound_tr(__x)))
               Finds the end of a subsequence matching given key.
           template<typename _Kt > auto upper_bound (const _Kt &__x) const ->
               decltype(iterator(_M_t._M_upper_bound_tr(__x)))
               Finds the end of a subsequence matching given key.

           std::pair< iterator, iterator > equal_range (const key_type &__x)
               Finds a subsequence matching given key.
           std::pair< const_iterator, const_iterator > equal_range (const
               key_type &__x) const
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) ->
               decltype(pair< iterator, iterator
               >(_M_t._M_equal_range_tr(__x)))
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) const ->
               decltype(pair< iterator, iterator
               >(_M_t._M_equal_range_tr(__x)))
               Finds a subsequence matching given key.

   Friends
       template<typename _K1 , typename _C1 , typename _A1 > bool operator<
           (const set< _K1, _C1, _A1 > &, const set< _K1, _C1, _A1 > &)
       template<typename _K1 , typename _C1 , typename _A1 > bool operator==
           (const set< _K1, _C1, _A1 > &, const set< _K1, _C1, _A1 > &)
       template<typename , typename > struct std::_Rb_tree_merge_helper

Detailed Description
   template<typename _Key, typename _Compare = std::less<_Key>, typename
       _Alloc = std::allocator<_Key>>
       class std::set< _Key, _Compare, _Alloc >"A standard container made up
       of unique keys, which can be retrieved in logarithmic time.

       Template Parameters
           _Key Type of key objects.
           _Compare Comparison function object type, defaults to less<_Key>.
           _Alloc Allocator type, defaults to allocator<_Key>.

       Meets the requirements of a container, a reversible container, and an
       associative container (using unique keys).

       Sets support bidirectional iterators.

       The private tree data is declared exactly the same way for set and
       multiset; the distinction is made entirely in how the tree functions
       are called (*_unique versus *_equal, same as the standard).

       Definition at line 94 of file set.

Member Typedef Documentation
   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Alloc std::set< _Key,
       _Compare, _Alloc >::allocator_type
       Public typedefs.

       Definition at line 124 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Rep_type::const_iterator
       std::set< _Key, _Compare, _Alloc >::const_iterator
       Iterator-related typedefs.

       Definition at line 148 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Alloc_traits::const_pointer
       std::set< _Key, _Compare, _Alloc >::const_pointer
       Iterator-related typedefs.

       Definition at line 141 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Alloc_traits::const_reference
       std::set< _Key, _Compare, _Alloc >::const_reference
       Iterator-related typedefs.

       Definition at line 143 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef
       _Rep_type::const_reverse_iterator std::set< _Key, _Compare, _Alloc
       >::const_reverse_iterator
       Iterator-related typedefs.

       Definition at line 150 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Rep_type::difference_type
       std::set< _Key, _Compare, _Alloc >::difference_type
       Iterator-related typedefs.

       Definition at line 152 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> using std::set< _Key, _Compare, _Alloc
       >::insert_return_type =  typename _Rep_type::insert_return_type
       Definition at line 157 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Rep_type::const_iterator
       std::set< _Key, _Compare, _Alloc >::iterator
       Iterator-related typedefs.

       Definition at line 147 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Compare std::set< _Key,
       _Compare, _Alloc >::key_compare
       Public typedefs.

       Definition at line 122 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Key std::set< _Key, _Compare,
       _Alloc >::key_type
       Public typedefs.

       Definition at line 120 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> using std::set< _Key, _Compare, _Alloc
       >::node_type =  typename _Rep_type::node_type
       Definition at line 156 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Alloc_traits::pointer
       std::set< _Key, _Compare, _Alloc >::pointer
       Iterator-related typedefs.

       Definition at line 140 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Alloc_traits::reference
       std::set< _Key, _Compare, _Alloc >::reference
       Iterator-related typedefs.

       Definition at line 142 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef
       _Rep_type::const_reverse_iterator std::set< _Key, _Compare, _Alloc
       >::reverse_iterator
       Iterator-related typedefs.

       Definition at line 149 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Rep_type::size_type std::set<
       _Key, _Compare, _Alloc >::size_type
       Iterator-related typedefs.

       Definition at line 151 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Compare std::set< _Key,
       _Compare, _Alloc >::value_compare
       Public typedefs.

       Definition at line 123 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> typedef _Key std::set< _Key, _Compare,
       _Alloc >::value_type
       Public typedefs.

       Definition at line 121 of file set.

Constructor & Destructor Documentation
   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::set< _Key, _Compare, _Alloc >::set
       () [default]
       Default constructor creates no elements.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::set< _Key, _Compare, _Alloc >::set
       (const _Compare & __comp, const allocator_type & __a =
       allocator_type()) [inline],  [explicit]
       Creates a set with no elements.

       Parameters
           __comp Comparator to use.
           __a An allocator object.

       Definition at line 176 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _InputIterator >
       std::set< _Key, _Compare, _Alloc >::set (_InputIterator __first,
       _InputIterator __last) [inline]
       Builds a set from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.

       Create a set consisting of copies of the elements from
       [__first,__last). This is linear in N if the range is already sorted,
       and NlogN otherwise (where N is distance(__first,__last)).

       Definition at line 191 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _InputIterator >
       std::set< _Key, _Compare, _Alloc >::set (_InputIterator __first,
       _InputIterator __last, const _Compare & __comp, const allocator_type &
       __a = allocator_type()) [inline]
       Builds a set from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.
           __comp A comparison functor.
           __a An allocator object.

       Create a set consisting of copies of the elements from
       [__first,__last). This is linear in N if the range is already sorted,
       and NlogN otherwise (where N is distance(__first,__last)).

       Definition at line 208 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::set< _Key, _Compare, _Alloc >::set
       (const set< _Key, _Compare, _Alloc > &) [default]
       Set copy constructor. Whether the allocator is copied depends on the
       allocator traits.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::set< _Key, _Compare, _Alloc >::set
       (set< _Key, _Compare, _Alloc > &&) [default]
       Set move constructor The newly-created set contains the exact contents
       of the moved instance. The moved instance is a valid, but unspecified,
       set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::set< _Key, _Compare, _Alloc >::set
       (initializer_list< value_type > __l, const _Compare & __comp =
       _Compare(), const allocator_type & __a = allocator_type()) [inline]
       Builds a set from an initializer_list.

       Parameters
           __l An initializer_list.
           __comp A comparison functor.
           __a An allocator object.

       Create a set consisting of copies of the elements in the list. This is
       linear in N if the list is already sorted, and NlogN otherwise (where N
       is __l.size()).

       Definition at line 243 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::set< _Key, _Compare, _Alloc >::set
       (const allocator_type & __a) [inline],  [explicit]
       Allocator-extended default constructor.

       Definition at line 251 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::set< _Key, _Compare, _Alloc >::set
       (const set< _Key, _Compare, _Alloc > & __x, const __type_identity_t<
       allocator_type > & __a) [inline]
       Allocator-extended copy constructor.

       Definition at line 255 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::set< _Key, _Compare, _Alloc >::set
       (set< _Key, _Compare, _Alloc > && __x, const __type_identity_t<
       allocator_type > & __a) [inline],  [noexcept]
       Allocator-extended move constructor.

       Definition at line 259 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::set< _Key, _Compare, _Alloc >::set
       (initializer_list< value_type > __l, const allocator_type & __a)
       [inline]
       Allocator-extended initialier-list constructor.

       Definition at line 265 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _InputIterator >
       std::set< _Key, _Compare, _Alloc >::set (_InputIterator __first,
       _InputIterator __last, const allocator_type & __a) [inline]
       Allocator-extended range constructor.

       Definition at line 271 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::set< _Key, _Compare, _Alloc
       >::~set () [default]
       The dtor only erases the elements, and note that if the elements
       themselves are pointers, the pointed-to memory is not touched in any
       way. Managing the pointer is the user's responsibility.

Member Function Documentation
   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::set< _Key, _Compare,
       _Alloc >::begin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the set. Iteration is done in ascending order according to
       the keys.

       Definition at line 344 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::set< _Key, _Compare,
       _Alloc >::cbegin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the set. Iteration is done in ascending order according to
       the keys.

       Definition at line 381 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::set< _Key, _Compare,
       _Alloc >::cend () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the set. Iteration is done in ascending order according to
       the keys.

       Definition at line 390 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> void std::set< _Key, _Compare, _Alloc
       >::clear () [inline],  [noexcept]
       Erases all elements in a set. Note that this function only erases the
       elements, and that if the elements themselves are pointers, the
       pointed-to memory is not touched in any way. Managing the pointer is
       the user's responsibility.

       Definition at line 733 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto std::set<
       _Key, _Compare, _Alloc >::contains (const _Kt & __x) const ->
       decltype(_M_t._M_find_tr(__x), void(), true)
             [inline]"

       Finds whether an element with the given key exists.

       Parameters
           __x Key of elements to be located.

       Returns
           True if there is an element with the specified key.

       Definition at line 773 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> bool std::set< _Key, _Compare, _Alloc
       >::contains (const key_type & __x) const [inline]
       Finds whether an element with the given key exists.

       Parameters
           __x Key of elements to be located.

       Returns
           True if there is an element with the specified key.

       Definition at line 768 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto std::set<
       _Key, _Compare, _Alloc >::count (const _Kt & __x) const ->
       decltype(_M_t._M_count_tr(__x))
             [inline]"

       Finds the number of elements.

       Parameters
           __x Element to located.

       Returns
           Number of elements with specified key.

       This function only makes sense for multisets; for set the result will
       either be 0 (not present) or 1 (present).

       Definition at line 754 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> size_type std::set< _Key, _Compare,
       _Alloc >::count (const key_type & __x) const [inline]
       Finds the number of elements.

       Parameters
           __x Element to located.

       Returns
           Number of elements with specified key.

       This function only makes sense for multisets; for set the result will
       either be 0 (not present) or 1 (present).

       Definition at line 748 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> reverse_iterator std::set< _Key,
       _Compare, _Alloc >::crbegin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the last element
       in the set. Iteration is done in descending order according to the
       keys.

       Definition at line 399 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> reverse_iterator std::set< _Key,
       _Compare, _Alloc >::crend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       pair in the set. Iteration is done in descending order according to the
       keys.

       Definition at line 408 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename... _Args> std::pair<
       iterator, bool > std::set< _Key, _Compare, _Alloc >::emplace (_Args
       &&... __args) [inline]
       Attempts to build and insert an element into the set.

       Parameters
           __args Arguments used to generate an element.

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted element, and the second is a bool that is
           true if the element was actually inserted.

       This function attempts to build and insert an element into the set. A
       set relies on unique keys and thus an element is only inserted if it is
       not already present in the set.

       Insertion requires logarithmic time.

       Definition at line 462 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename... _Args> iterator
       std::set< _Key, _Compare, _Alloc >::emplace_hint (const_iterator __pos,
       _Args &&... __args) [inline]
       Attempts to insert an element into the set.

       Parameters
           __pos An iterator that serves as a hint as to where the element
           should be inserted.
           __args Arguments used to generate the element to be inserted.

       Returns
           An iterator that points to the element with key equivalent to the
           one generated from __args (may or may not be the element itself).

       This function is not concerned about whether the insertion took place,
       and thus does not return a boolean like the single-argument emplace()
       does. Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       For more on hinting, see:
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints

       Insertion requires logarithmic time (if the hint is not taken).

       Definition at line 488 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> bool std::set< _Key, _Compare, _Alloc
       >::empty () const [inline],  [noexcept]
       Returns true if the set is empty.

       Definition at line 414 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::set< _Key, _Compare,
       _Alloc >::end () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the set. Iteration is done in ascending order according to
       the keys.

       Definition at line 353 of file set.

       Referenced by std::set< _Key, _Compare, _Alloc >::extract().

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto std::set<
       _Key, _Compare, _Alloc >::equal_range (const _Kt & __x) ->
       decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
             [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       This function probably only makes sense for multisets.

       Definition at line 908 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto std::set<
       _Key, _Compare, _Alloc >::equal_range (const _Kt & __x) const ->
       decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
             [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       This function probably only makes sense for multisets.

       Definition at line 914 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::pair< iterator, iterator >
       std::set< _Key, _Compare, _Alloc >::equal_range (const key_type & __x)
       [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       This function probably only makes sense for multisets.

       Definition at line 898 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::pair< const_iterator,
       const_iterator > std::set< _Key, _Compare, _Alloc >::equal_range (const
       key_type & __x) const [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       This function probably only makes sense for multisets.

       Definition at line 902 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> size_type std::set< _Key, _Compare,
       _Alloc >::erase (const key_type & __x) [inline]
       Erases elements according to the provided key.

       Parameters
           __x Key of element to be erased.

       Returns
           The number of elements erased.

       This function erases all the elements located by the given key from a
       set. Note that this function only erases the element, and that if the
       element is itself a pointer, the pointed-to memory is not touched in
       any way. Managing the pointer is the user's responsibility.

       Definition at line 684 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> _GLIBCXX_ABI_TAG_CXX11 iterator
       std::set< _Key, _Compare, _Alloc >::erase (const_iterator __first,
       const_iterator __last) [inline]
       Erases a [__first,__last) range of elements from a set.

       Parameters
           __first Iterator pointing to the start of the range to be erased.
           __last Iterator pointing to the end of the range to be erased.

       Returns
           The iterator __last.

       This function erases a sequence of elements from a set. Note that this
       function only erases the element, and that if the element is itself a
       pointer, the pointed-to memory is not touched in any way. Managing the
       pointer is the user's responsibility.

       Definition at line 706 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> _GLIBCXX_ABI_TAG_CXX11 iterator
       std::set< _Key, _Compare, _Alloc >::erase (const_iterator __position)
       [inline]
       Erases an element from a set.

       Parameters
           __position An iterator pointing to the element to be erased.

       Returns
           An iterator pointing to the element immediately following
           __position prior to the element being erased. If no such element
           exists, end() is returned.

       This function erases an element, pointed to by the given iterator, from
       a set. Note that this function only erases the element, and that if the
       element is itself a pointer, the pointed-to memory is not touched in
       any way. Managing the pointer is the user's responsibility.

       Definition at line 654 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> node_type std::set< _Key, _Compare,
       _Alloc >::extract (const key_type & __x) [inline]
       Extract a node.

       Definition at line 593 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> node_type std::set< _Key, _Compare,
       _Alloc >::extract (const_iterator __pos) [inline]
       Extract a node.

       Definition at line 585 of file set.

       References std::set< _Key, _Compare, _Alloc >::end().

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto std::set<
       _Key, _Compare, _Alloc >::find (const _Kt & __x) ->
       decltype(iterator{_M_t._M_find_tr(__x)})
             [inline]"

       Tries to locate an element in a set.

       Parameters
           __x Element to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 804 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto std::set<
       _Key, _Compare, _Alloc >::find (const _Kt & __x) const ->
       decltype(const_iterator{_M_t._M_find_tr(__x)})
             [inline]"

       Tries to locate an element in a set.

       Parameters
           __x Element to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 810 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::set< _Key, _Compare,
       _Alloc >::find (const key_type & __x) [inline]
       Tries to locate an element in a set.

       Parameters
           __x Element to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 794 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> const_iterator std::set< _Key,
       _Compare, _Alloc >::find (const key_type & __x) const [inline]
       Tries to locate an element in a set.

       Parameters
           __x Element to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 798 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> allocator_type std::set< _Key,
       _Compare, _Alloc >::get_allocator () const [inline],  [noexcept]
       Returns the allocator object with which the set was constructed.

       Definition at line 335 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _InputIterator > void
       std::set< _Key, _Compare, _Alloc >::insert (_InputIterator __first,
       _InputIterator __last) [inline]
       A template function that attempts to insert a range of elements.

       Parameters
           __first Iterator pointing to the start of the range to be inserted.
           __last Iterator pointing to the end of the range.

       Complexity similar to that of the range constructor.

       Definition at line 566 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::pair< iterator, bool > std::set<
       _Key, _Compare, _Alloc >::insert (const value_type & __x) [inline]
       Attempts to insert an element into the set.

       Parameters
           __x Element to be inserted.

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted element, and the second is a bool that is
           true if the element was actually inserted.

       This function attempts to insert an element into the set. A set relies
       on unique keys and thus an element is only inserted if it is not
       already present in the set.

       Insertion requires logarithmic time.

       Definition at line 509 of file set.

       References std::pair< _T1, _T2 >::first, and std::pair< _T1, _T2
       >::second.

       Referenced by std::set< _Key, _Compare, _Alloc >::insert().

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::set< _Key, _Compare,
       _Alloc >::insert (const_iterator __hint, node_type && __nh) [inline]
       Re-insert an extracted node.

       Definition at line 603 of file set.

       References std::move().

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::set< _Key, _Compare,
       _Alloc >::insert (const_iterator __position, const value_type & __x)
       [inline]
       Attempts to insert an element into the set.

       Parameters
           __position An iterator that serves as a hint as to where the
           element should be inserted.
           __x Element to be inserted.

       Returns
           An iterator that points to the element with key of __x (may or may
           not be the element passed in).

       This function is not concerned about whether the insertion took place,
       and thus does not return a boolean like the single-argument insert()
       does. Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       For more on hinting, see:
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints

       Insertion requires logarithmic time (if the hint is not taken).

       Definition at line 546 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::set< _Key, _Compare,
       _Alloc >::insert (const_iterator __position, value_type && __x)
       [inline]
       Definition at line 551 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> void std::set< _Key, _Compare, _Alloc
       >::insert (initializer_list< value_type > __l) [inline]
       Attempts to insert a list of elements into the set.

       Parameters
           __l A std::initializer_list<value_type> of elements to be inserted.

       Complexity similar to that of the range constructor.

       Definition at line 578 of file set.

       References std::set< _Key, _Compare, _Alloc >::insert().

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> insert_return_type std::set< _Key,
       _Compare, _Alloc >::insert (node_type && __nh) [inline]
       Re-insert an extracted node.

       Definition at line 598 of file set.

       References std::move().

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> std::pair< iterator, bool > std::set<
       _Key, _Compare, _Alloc >::insert (value_type && __x) [inline]
       Definition at line 518 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> key_compare std::set< _Key, _Compare,
       _Alloc >::key_comp () const [inline]
       Returns the comparison object with which the set was constructed.

       Definition at line 327 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto std::set<
       _Key, _Compare, _Alloc >::lower_bound (const _Kt & __x) ->
       decltype(iterator(_M_t._M_lower_bound_tr(__x)))
             [inline]"

       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to first element equal to or greater than key, or
           end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 839 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto std::set<
       _Key, _Compare, _Alloc >::lower_bound (const _Kt & __x) const ->
       decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
             [inline]"

       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to first element equal to or greater than key, or
           end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 845 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::set< _Key, _Compare,
       _Alloc >::lower_bound (const key_type & __x) [inline]
       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to first element equal to or greater than key, or
           end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 829 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> const_iterator std::set< _Key,
       _Compare, _Alloc >::lower_bound (const key_type & __x) const [inline]
       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to first element equal to or greater than key, or
           end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 833 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> size_type std::set< _Key, _Compare,
       _Alloc >::max_size () const [inline],  [noexcept]
       Returns the maximum size of the set.

       Definition at line 424 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Compare1 > void
       std::set< _Key, _Compare, _Alloc >::merge (multiset< _Key, _Compare1,
       _Alloc > && __source) [inline]
       Definition at line 632 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Compare1 > void
       std::set< _Key, _Compare, _Alloc >::merge (multiset< _Key, _Compare1,
       _Alloc > & __source) [inline]
       Definition at line 624 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Compare1 > void
       std::set< _Key, _Compare, _Alloc >::merge (set< _Key, _Compare1, _Alloc
       > && __source) [inline]
       Definition at line 619 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Compare1 > void
       std::set< _Key, _Compare, _Alloc >::merge (set< _Key, _Compare1, _Alloc
       > & __source) [inline]
       Definition at line 611 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> set & std::set< _Key, _Compare, _Alloc
       >::operator= (const set< _Key, _Compare, _Alloc > &) [default]
       Set assignment operator. Whether the allocator is copied depends on the
       allocator traits.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> set & std::set< _Key, _Compare, _Alloc
       >::operator= (initializer_list< value_type > __l) [inline]
       Set list assignment operator.

       Parameters
           __l An initializer_list.

       This function fills a set with copies of the elements in the
       initializer list __l.

       Note that the assignment completely changes the set and that the
       resulting set's size is the same as the number of elements assigned.

       Definition at line 316 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> set & std::set< _Key, _Compare, _Alloc
       >::operator= (set< _Key, _Compare, _Alloc > &&) [default]
       Move assignment operator.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> reverse_iterator std::set< _Key,
       _Compare, _Alloc >::rbegin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the last element
       in the set. Iteration is done in descending order according to the
       keys.

       Definition at line 362 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> reverse_iterator std::set< _Key,
       _Compare, _Alloc >::rend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       pair in the set. Iteration is done in descending order according to the
       keys.

       Definition at line 371 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> size_type std::set< _Key, _Compare,
       _Alloc >::size () const [inline],  [noexcept]
       Returns the size of the set.

       Definition at line 419 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> void std::set< _Key, _Compare, _Alloc
       >::swap (set< _Key, _Compare, _Alloc > & __x) [inline],  [noexcept]
       Swaps data with another set.

       Parameters
           __x A set of the same element and allocator types.

       This exchanges the elements between two sets in constant time. (It is
       only swapping a pointer, an integer, and an instance of the Compare
       type (which itself is often stateless and empty), so it should be quite
       fast.) Note that the global std::swap() function is specialized such
       that std::swap(s1,s2) will feed to this function.

       Whether the allocators are swapped depends on the allocator traits.

       Definition at line 441 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto std::set<
       _Key, _Compare, _Alloc >::upper_bound (const _Kt & __x) ->
       decltype(iterator(_M_t._M_upper_bound_tr(__x)))
             [inline]"

       Finds the end of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to the first element greater than key, or end().

       Definition at line 869 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename _Kt > auto std::set<
       _Key, _Compare, _Alloc >::upper_bound (const _Kt & __x) const ->
       decltype(iterator(_M_t._M_upper_bound_tr(__x)))
             [inline]"

       Finds the end of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to the first element greater than key, or end().

       Definition at line 875 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> iterator std::set< _Key, _Compare,
       _Alloc >::upper_bound (const key_type & __x) [inline]
       Finds the end of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to the first element greater than key, or end().

       Definition at line 859 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> const_iterator std::set< _Key,
       _Compare, _Alloc >::upper_bound (const key_type & __x) const [inline]
       Finds the end of a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to the first element greater than key, or end().

       Definition at line 863 of file set.

   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> value_compare std::set< _Key, _Compare,
       _Alloc >::value_comp () const [inline]
       Returns the comparison object with which the set was constructed.

       Definition at line 331 of file set.

Friends And Related Function Documentation
   template<typename _Key , typename _Compare  = std::less<_Key>, typename
       _Alloc  = std::allocator<_Key>> template<typename , typename > friend
       struct std::_Rb_tree_merge_helper [friend]
       Definition at line 607 of file set.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Feb 1std::set< _Key, _Compare, _Alloc >(3)
