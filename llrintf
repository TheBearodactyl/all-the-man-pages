lrint(3)                                                                                 Library Functions Manual                                                                                 lrint(3)

NAME
       lrint, lrintf, lrintl, llrint, llrintf, llrintl - round to nearest integer

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       long lrint(double x);
       long lrintf(float x);
       long lrintl(long double x);

       long long llrint(double x);
       long long llrintf(float x);
       long long llrintl(long double x);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       All functions shown above:
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L

DESCRIPTION
       These functions round their argument to the nearest integer value, using the current rounding direction (see fesetround(3)).

       Note that unlike the rint(3) family of functions, the return type of these functions differs from that of their arguments.

RETURN VALUE
       These functions return the rounded integer value.

       If  x  is a NaN or an infinity, or the rounded value is too large to be stored in a long (long long in the case of the ll* functions), then a domain error occurs, and the return value is unspeci‐
       fied.

ERRORS
       See math_error(7) for information on how to determine whether an error has occurred when calling these functions.

       The following errors can occur:

       Domain error: x is a NaN or infinite, or the rounded value is too large
              An invalid floating-point exception (FE_INVALID) is raised.

       These functions do not set errno.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │lrint(), lrintf(), lrintl(), llrint(), llrintf(), llrintl()                                                                                                             │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       glibc 2.1.  C99, POSIX.1-2001.

SEE ALSO
       ceil(3), floor(3), lround(3), nearbyint(3), rint(3), round(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        lrint(3)
LLRINT(3P)                                                                               POSIX Programmer's Manual                                                                              LLRINT(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       llrint, llrintf, llrintl — round to the nearest integer value using current rounding direction

SYNOPSIS
       #include <math.h>

       long long llrint(double x);
       long long llrintf(float x);
       long long llrintl(long double x);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       These functions shall round their argument to the nearest integer value, rounding according to the current rounding direction.

       An  application  wishing  to check for error situations should set errno to zero and call feclearexcept(FE_ALL_EXCEPT) before calling these functions. On return, if errno is non-zero or fetestex‐
       cept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.

RETURN VALUE
       Upon successful completion, these functions shall return the rounded integer value.

       If x is NaN, a domain error shall occur, and an unspecified value is returned.

       If x is +Inf, a domain error shall occur and an unspecified value is returned.

       If x is -Inf, a domain error shall occur and an unspecified value is returned.

       If the correct value is positive and too large to represent as a long long, an unspecified value shall be returned.  On systems that support the IEC 60559 Floating-Point option,  a  domain  error
       shall occur; otherwise, a domain error may occur.

       If  the  correct  value is negative and too large to represent as a long long, an unspecified value shall be returned.  On systems that support the IEC 60559 Floating-Point option, a domain error
       shall occur; otherwise, a domain error may occur.

ERRORS
       These functions shall fail if:

       Domain Error
                   The x argument is NaN or ±Inf, or the correct value is not representable as an integer.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [EDOM].  If the integer expression (math_errhandling & MATH_ERREXCEPT)  is  non-zero,
                   then the invalid floating-point exception shall be raised.

       These functions may fail if:

       Domain Error
                   The correct value is not representable as an integer.

                   If  the  integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [EDOM].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the invalid floating-point exception shall be raised.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling & MATH_ERREXCEPT) are independent of each other, but at least one of them must be non-zero.

RATIONALE
       These functions provide floating-to-integer conversions. They round according to the current rounding direction. If the rounded value is outside the range of the return type, the  numeric  result
       is  unspecified  and  the  invalid floating-point exception is raised. When they raise no other floating-point exception and the result differs from the argument, they raise the inexact floating-
       point exception.

FUTURE DIRECTIONS
       None.

SEE ALSO
       feclearexcept(), fetestexcept(), lrint()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                         LLRINT(3P)
