std::allocator_traits< _AllLibrary Functionsstd::allocator_traits< _Alloc >(3)

NAME
       std::allocator_traits< _Alloc > - Uniform interface to all allocator
       types.

SYNOPSIS
       #include <memory>

       Inherits __allocator_traits_base.

       Inherited by __gnu_cxx::__alloc_traits< _Tp_alloc_type >, and
       __gnu_cxx::__alloc_traits< _Alloc, typename >.

   Public Types
       typedef _Alloc allocator_type
           The allocator type.
       using const_pointer = typename _Ptr< __c_pointer, const value_type
           >::type
           The allocator's const pointer type.
       using const_void_pointer = typename _Ptr< __cv_pointer, const void
           >::type
           The allocator's const void pointer type.
       using difference_type = typename _Diff< _Alloc, pointer >::type
           The allocator's difference type.
       using is_always_equal = __detected_or_t< typename is_empty< _Alloc
           >::type, __equal, _Alloc >
           Whether all instances of the allocator type compare equal.
       using pointer = __detected_or_t< value_type *, __pointer, _Alloc >
           The allocator's pointer type.
       using propagate_on_container_copy_assignment = __detected_or_t<
           false_type, __pocca, _Alloc >
           How the allocator is propagated on copy assignment.
       using propagate_on_container_move_assignment = __detected_or_t<
           false_type, __pocma, _Alloc >
           How the allocator is propagated on move assignment.
       using propagate_on_container_swap = __detected_or_t< false_type,
           __pocs, _Alloc >
           How the allocator is propagated on swap.
       template<typename _Tp > using rebind_alloc = __alloc_rebind< _Alloc,
           _Tp >
       template<typename _Tp > using rebind_traits = allocator_traits<
           rebind_alloc< _Tp > >
       using size_type = typename _Size< _Alloc, difference_type >::type
           The allocator's size type.
       typedef _Alloc::value_type value_type
           The allocated type.
       using void_pointer = typename _Ptr< __v_pointer, void >::type
           The allocator's void pointer type.

   Static Public Member Functions
       static constexpr pointer allocate (_Alloc &__a, size_type __n)
           Allocate memory.
       static constexpr pointer allocate (_Alloc &__a, size_type __n,
           const_void_pointer __hint)
           Allocate memory.
       template<typename _Tp , typename... _Args> static constexpr auto
           construct (_Alloc &__a, _Tp *__p, _Args &&... __args)
           noexcept(noexcept(_S_construct(__a, __p, std::forward< _Args
           >(__args)...))) -> decltype(_S_construct(__a, __p, std::forward<
           _Args >(__args)...))
           Construct an object of type _Tp
       static constexpr void deallocate (_Alloc &__a, pointer __p, size_type
           __n)
           Deallocate memory.
       template<typename _Tp > static constexpr void destroy (_Alloc &__a, _Tp
           *__p) noexcept(noexcept(_S_destroy(__a, __p, 0)))
           Destroy an object of type _Tp.
       static constexpr size_type max_size (const _Alloc &__a) noexcept
           The maximum supported allocation size.
       static constexpr _Alloc select_on_container_copy_construction (const
           _Alloc &__rhs)
           Obtain an allocator to use when copying a container.

Detailed Description
   template<typename _Alloc>
       struct std::allocator_traits< _Alloc >"Uniform interface to all
       allocator types.

       Since
           C++11

       Definition at line 90 of file bits/alloc_traits.h.

Member Typedef Documentation
   template<typename _Alloc > typedef _Alloc std::allocator_traits< _Alloc
       >::allocator_type
       The allocator type.

       Definition at line 93 of file bits/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc
       >::const_pointer =  typename _Ptr<__c_pointer, const value_type>::type
       The allocator's const pointer type. Alloc::const_pointer if that type
       exists, otherwise  pointer_traits<pointer>::rebind<const value_type>

       Definition at line 142 of file bits/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc
       >::const_void_pointer =  typename _Ptr<__cv_pointer, const void>::type
       The allocator's const void pointer type. Alloc::const_void_pointer if
       that type exists, otherwise  pointer_traits<pointer>::rebind<const
       void>

       Definition at line 158 of file bits/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc
       >::difference_type =  typename _Diff<_Alloc, pointer>::type
       The allocator's difference type. Alloc::difference_type if that type
       exists, otherwise  pointer_traits<pointer>::difference_type

       Definition at line 166 of file bits/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc
       >::is_always_equal =  __detected_or_t<typename is_empty<_Alloc>::type,
       __equal, _Alloc>
       Whether all instances of the allocator type compare equal.
       Alloc::is_always_equal if that type exists, otherwise
       is_empty<Alloc>::type

       Definition at line 209 of file bits/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc >::pointer =
       __detected_or_t<value_type*, __pointer, _Alloc>
       The allocator's pointer type. Alloc::pointer if that type exists,
       otherwise value_type*

       Definition at line 102 of file bits/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc
       >::propagate_on_container_copy_assignment =
       __detected_or_t<false_type, __pocca, _Alloc>
       How the allocator is propagated on copy assignment.
       Alloc::propagate_on_container_copy_assignment if that type exists,
       otherwise false_type

       Definition at line 182 of file bits/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc
       >::propagate_on_container_move_assignment =
       __detected_or_t<false_type, __pocma, _Alloc>
       How the allocator is propagated on move assignment.
       Alloc::propagate_on_container_move_assignment if that type exists,
       otherwise false_type

       Definition at line 191 of file bits/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc
       >::propagate_on_container_swap =  __detected_or_t<false_type, __pocs,
       _Alloc>
       How the allocator is propagated on swap.
       Alloc::propagate_on_container_swap if that type exists, otherwise
       false_type

       Definition at line 200 of file bits/alloc_traits.h.

   template<typename _Alloc > template<typename _Tp > using
       std::allocator_traits< _Alloc >::rebind_alloc =  __alloc_rebind<_Alloc,
       _Tp>
       Definition at line 213 of file bits/alloc_traits.h.

   template<typename _Alloc > template<typename _Tp > using
       std::allocator_traits< _Alloc >::rebind_traits =
       allocator_traits<rebind_alloc<_Tp> >
       Definition at line 215 of file bits/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc >::size_type
       =  typename _Size<_Alloc, difference_type>::type
       The allocator's size type. Alloc::size_type if that type exists,
       otherwise  make_unsigned<difference_type>::type

       Definition at line 174 of file bits/alloc_traits.h.

   template<typename _Alloc > typedef _Alloc::value_type
       std::allocator_traits< _Alloc >::value_type
       The allocated type.

       Definition at line 95 of file bits/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc
       >::void_pointer =  typename _Ptr<__v_pointer, void>::type
       The allocator's void pointer type. Alloc::void_pointer if that type
       exists, otherwise  pointer_traits<pointer>::rebind<void>

       Definition at line 150 of file bits/alloc_traits.h.

Member Function Documentation
   template<typename _Alloc > static constexpr pointer std::allocator_traits<
       _Alloc >::allocate (_Alloc & __a, size_type __n) [inline],  [static],
       [constexpr]
       Allocate memory.

       Parameters
           __a An allocator.
           __n The number of objects to allocate space for.

       Calls a.allocate(n)

       Definition at line 317 of file bits/alloc_traits.h.

   template<typename _Alloc > static constexpr pointer std::allocator_traits<
       _Alloc >::allocate (_Alloc & __a, size_type __n, const_void_pointer
       __hint) [inline],  [static],  [constexpr]
       Allocate memory.

       Parameters
           __a An allocator.
           __n The number of objects to allocate space for.
           __hint Aid to locality.

       Returns
           Memory of suitable size and alignment for n objects of type
           value_type

       Returns  a.allocate(n, hint)  if that expression is well-formed,
       otherwise returns a.allocate(n)

       Definition at line 332 of file bits/alloc_traits.h.

   template<typename _Alloc > template<typename _Tp , typename... _Args>
       static constexpr auto std::allocator_traits< _Alloc >::construct
       (_Alloc & __a, _Tp * __p, _Args &&... __args) ->
       decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
             [inline],  [static],  [constexpr],  [noexcept]"

       Construct an object of type _Tp

       Parameters
           __a An allocator.
           __p Pointer to memory of suitable size and alignment for Tp
           __args Constructor arguments.

       Calls  __a.construct(__p, std::forward<Args>(__args)...)  if that
       expression is well-formed, otherwise uses placement-new to construct an
       object of type _Tp at location __p from the arguments __args...

       Definition at line 360 of file bits/alloc_traits.h.

   template<typename _Alloc > static constexpr void std::allocator_traits<
       _Alloc >::deallocate (_Alloc & __a, pointer __p, size_type __n)
       [inline],  [static],  [constexpr]
       Deallocate memory.

       Parameters
           __a An allocator.
           __p Pointer to the memory to deallocate.
           __n The number of objects space was allocated for.

       Calls  a.deallocate(p, n)

       Definition at line 344 of file bits/alloc_traits.h.

   template<typename _Alloc > template<typename _Tp > static constexpr void
       std::allocator_traits< _Alloc >::destroy (_Alloc & __a, _Tp * __p)
       [inline],  [static],  [constexpr],  [noexcept]
       Destroy an object of type _Tp.

       Parameters
           __a An allocator.
           __p Pointer to the object to destroy

       Calls __a.destroy(__p) if that expression is well-formed, otherwise
       calls __p->~_Tp()

       Definition at line 376 of file bits/alloc_traits.h.

       Referenced by std::_Destroy().

   template<typename _Alloc > static constexpr size_type
       std::allocator_traits< _Alloc >::max_size (const _Alloc & __a)
       [inline],  [static],  [constexpr],  [noexcept]
       The maximum supported allocation size.

       Parameters
           __a An allocator.

       Returns
           __a.max_size() or numeric_limits<size_type>::max()

       Returns __a.max_size() if that expression is well-formed, otherwise
       returns numeric_limits<size_type>::max()

       Definition at line 389 of file bits/alloc_traits.h.

   template<typename _Alloc > static constexpr _Alloc std::allocator_traits<
       _Alloc >::select_on_container_copy_construction (const _Alloc & __rhs)
       [inline],  [static],  [constexpr]
       Obtain an allocator to use when copying a container.

       Parameters
           __rhs An allocator.

       Returns
           __rhs.select_on_container_copy_construction() or __rhs

       Returns __rhs.select_on_container_copy_construction() if that
       expression is well-formed, otherwise returns __rhs

       Definition at line 401 of file bits/alloc_traits.h.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Feb 1 20std::allocator_traits< _Alloc >(3)
