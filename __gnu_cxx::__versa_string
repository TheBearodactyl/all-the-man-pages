__gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >(3)                           Library Functions Manual                           __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >(3)

NAME
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base > - Template class __versa_string.

SYNOPSIS
       #include <vstring.h>

       Inherits _Base< _CharT, _Traits, _Alloc >.

   Public Types
       typedef _Alloc allocator_type
       typedef __gnu_cxx::__normal_iterator< const_pointer, __versa_string > const_iterator
       typedef _CharT_alloc_traits::const_pointer const_pointer
       typedef const value_type & const_reference
       typedef std::reverse_iterator< const_iterator > const_reverse_iterator
       typedef _CharT_alloc_type::difference_type difference_type
       typedef __gnu_cxx::__normal_iterator< pointer, __versa_string > iterator
       typedef _CharT_alloc_traits::pointer pointer
       typedef value_type & reference
       typedef std::reverse_iterator< iterator > reverse_iterator
       typedef _CharT_alloc_type::size_type size_type
       typedef _Traits traits_type
       typedef _Traits::char_type value_type

   Public Member Functions
       __versa_string (__versa_string &&__str) noexcept
           String move constructor.
       template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> __versa_string (_InputIterator __beg, _InputIterator __end, const _Alloc &__a=_Alloc())
           Construct string as copy of a range.
       __versa_string (const __versa_string &__str)
           Construct string with copy of value of __str.
       __versa_string (const __versa_string &__str, size_type __pos, size_type __n, const _Alloc &__a)
           Construct string as copy of a substring.
       __versa_string (const __versa_string &__str, size_type __pos, size_type __n=npos)
           Construct string as copy of a substring.
       __versa_string (const _Alloc &__a=_Alloc()) noexcept
           Construct an empty string using allocator a.
       __versa_string (const _CharT *__s, const _Alloc &__a=_Alloc())
           Construct string as copy of a C string.
       __versa_string (const _CharT *__s, size_type __n, const _Alloc &__a=_Alloc())
           Construct string initialized by a character array.
       __versa_string (size_type __n, _CharT __c, const _Alloc &__a=_Alloc())
           Construct string as multiple characters.
       __versa_string (std::initializer_list< _CharT > __l, const _Alloc &__a=_Alloc())
           Construct string from an initializer list.
       ~__versa_string () noexcept
           Destroy the string instance.
       template<typename _InputIterator > __versa_string< _CharT, _Traits, _Alloc, _Base > & _M_replace_dispatch (const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2,
           std::__false_type)
       template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> __versa_string & append (_InputIterator __first, _InputIterator __last)
           Append a range of characters.
       __versa_string & append (const __versa_string &__str)
           Append a string to this string.
       __versa_string & append (const __versa_string &__str, size_type __pos, size_type __n)
           Append a substring.
       __versa_string & append (const _CharT *__s)
           Append a C string.
       __versa_string & append (const _CharT *__s, size_type __n)
           Append a C substring.
       __versa_string & append (size_type __n, _CharT __c)
           Append multiple characters.
       __versa_string & append (std::initializer_list< _CharT > __l)
           Append an initializer_list of characters.
       __versa_string & assign (__versa_string &&__str) noexcept
           Set value to contents of another string.
       template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> __versa_string & assign (_InputIterator __first, _InputIterator __last)
           Set value to a range of characters.
       __versa_string & assign (const __versa_string &__str)
           Set value to contents of another string.
       __versa_string & assign (const __versa_string &__str, size_type __pos, size_type __n)
           Set value to a substring of a string.
       __versa_string & assign (const _CharT *__s)
           Set value to contents of a C string.
       __versa_string & assign (const _CharT *__s, size_type __n)
           Set value to a C substring.
       __versa_string & assign (size_type __n, _CharT __c)
           Set value to multiple characters.
       __versa_string & assign (std::initializer_list< _CharT > __l)
           Set value to an initializer_list of characters.
       reference at (size_type __n)
           Provides access to the data contained in the string.
       const_reference at (size_type __n) const
           Provides access to the data contained in the string.
       const_reference back () const noexcept
       reference back () noexcept
       const_iterator begin () const noexcept
       iterator begin () noexcept
       const _CharT * c_str () const noexcept
           Return const pointer to null-terminated contents.
       size_type capacity () const noexcept
       const_iterator cbegin () const noexcept
       const_iterator cend () const noexcept
       void clear () noexcept
       int compare (const __versa_string &__str) const
           Compare to a string.
       int compare (const _CharT *__s) const
           Compare to a C string.
       int compare (size_type __pos, size_type __n, const __versa_string &__str) const
           Compare substring to a string.
       int compare (size_type __pos, size_type __n1, const _CharT *__s) const
           Compare substring to a C string.
       int compare (size_type __pos, size_type __n1, const _CharT *__s, size_type __n2) const
           Compare substring against a character array.
       int compare (size_type __pos1, size_type __n1, const __versa_string &__str, size_type __pos2, size_type __n2) const
           Compare substring to a substring.
       size_type copy (_CharT *__s, size_type __n, size_type __pos=0) const
           Copy substring into C string.
       const_reverse_iterator crbegin () const noexcept
       const_reverse_iterator crend () const noexcept
       const _CharT * data () const noexcept
           Return const pointer to contents.
       bool empty () const noexcept
       const_iterator end () const noexcept
       iterator end () noexcept
       iterator erase (const_iterator __first, const_iterator __last)
           Remove a range of characters.
       iterator erase (const_iterator __position)
           Remove one character.
       __versa_string & erase (size_type __pos=0, size_type __n=npos)
           Remove characters.
       size_type find (_CharT __c, size_type __pos=0) const noexcept
           Find position of a character.
       size_type find (const __versa_string &__str, size_type __pos=0) const noexcept
           Find position of a string.
       size_type find (const _CharT *__s, size_type __pos, size_type __n) const
           Find position of a C substring.
       size_type find (const _CharT *__s, size_type __pos=0) const
           Find position of a C string.
       size_type find_first_not_of (_CharT __c, size_type __pos=0) const noexcept
           Find position of a different character.
       size_type find_first_not_of (const __versa_string &__str, size_type __pos=0) const noexcept
           Find position of a character not in string.
       size_type find_first_not_of (const _CharT *__s, size_type __pos, size_type __n) const
           Find position of a character not in C substring.
       size_type find_first_not_of (const _CharT *__s, size_type __pos=0) const
           Find position of a character not in C string.
       size_type find_first_of (_CharT __c, size_type __pos=0) const noexcept
           Find position of a character.
       size_type find_first_of (const __versa_string &__str, size_type __pos=0) const noexcept
           Find position of a character of string.
       size_type find_first_of (const _CharT *__s, size_type __pos, size_type __n) const
           Find position of a character of C substring.
       size_type find_first_of (const _CharT *__s, size_type __pos=0) const
           Find position of a character of C string.
       size_type find_last_not_of (_CharT __c, size_type __pos=npos) const noexcept
           Find last position of a different character.
       size_type find_last_not_of (const __versa_string &__str, size_type __pos=npos) const noexcept
           Find last position of a character not in string.
       size_type find_last_not_of (const _CharT *__s, size_type __pos, size_type __n) const
           Find last position of a character not in C substring.
       size_type find_last_not_of (const _CharT *__s, size_type __pos=npos) const
           Find last position of a character not in C string.
       size_type find_last_of (_CharT __c, size_type __pos=npos) const noexcept
           Find last position of a character.
       size_type find_last_of (const __versa_string &__str, size_type __pos=npos) const noexcept
           Find last position of a character of string.
       size_type find_last_of (const _CharT *__s, size_type __pos, size_type __n) const
           Find last position of a character of C substring.
       size_type find_last_of (const _CharT *__s, size_type __pos=npos) const
           Find last position of a character of C string.
       const_reference front () const noexcept
       reference front () noexcept
       allocator_type get_allocator () const noexcept
           Return copy of allocator used to construct this string.
       iterator insert (const_iterator __p, _CharT __c)
           Insert one character.
       template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> iterator insert (const_iterator __p, _InputIterator __beg, _InputIterator __end)
           Insert a range of characters.
       iterator insert (const_iterator __p, size_type __n, _CharT __c)
           Insert multiple characters.
       iterator insert (const_iterator __p, std::initializer_list< _CharT > __l)
           Insert an initializer_list of characters.
       __versa_string & insert (size_type __pos, const _CharT *__s)
           Insert a C string.
       __versa_string & insert (size_type __pos, const _CharT *__s, size_type __n)
           Insert a C substring.
       __versa_string & insert (size_type __pos, size_type __n, _CharT __c)
           Insert multiple characters.
       __versa_string & insert (size_type __pos1, const __versa_string &__str)
           Insert value of a string.
       __versa_string & insert (size_type __pos1, const __versa_string &__str, size_type __pos2, size_type __n)
           Insert a substring.
       size_type length () const noexcept
           Returns the number of characters in the string, not including any null-termination.
       size_type max_size () const noexcept
           Returns the size() of the largest possible string.
       __versa_string & operator+= (_CharT __c)
           Append a character.
       __versa_string & operator+= (const __versa_string &__str)
           Append a string to this string.
       __versa_string & operator+= (const _CharT *__s)
           Append a C string.
       __versa_string & operator+= (std::initializer_list< _CharT > __l)
           Append an initializer_list of characters.
       __versa_string & operator= (__versa_string &&__str) noexcept
           String move assignment operator.
       __versa_string & operator= (_CharT __c)
           Set value to string of length 1.
       __versa_string & operator= (const __versa_string &__str)
           Assign the value of str to this string.
       __versa_string & operator= (const _CharT *__s)
           Copy contents of __s into this string.
       __versa_string & operator= (std::initializer_list< _CharT > __l)
           Set value to string constructed from initializer list.
       const_reference operator[] (size_type __pos) const noexcept
           Subscript access to the data contained in the string.
       reference operator[] (size_type __pos) noexcept
           Subscript access to the data contained in the string.
       void pop_back ()
           Remove the last character.
       void push_back (_CharT __c)
           Append a single character.
       const_reverse_iterator rbegin () const noexcept
       reverse_iterator rbegin () noexcept
       const_reverse_iterator rend () const noexcept
       reverse_iterator rend () noexcept
       __versa_string & replace (const_iterator __i1, const_iterator __i2, _CharT *__k1, _CharT *__k2)
       template<class _InputIterator , typename  = std::_RequireInputIter<_InputIterator>> __versa_string & replace (const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2)
           Replace range of characters with range.
       __versa_string & replace (const_iterator __i1, const_iterator __i2, const __versa_string &__str)
           Replace range of characters with string.
       __versa_string & replace (const_iterator __i1, const_iterator __i2, const _CharT *__k1, const _CharT *__k2)
       __versa_string & replace (const_iterator __i1, const_iterator __i2, const _CharT *__s)
           Replace range of characters with C string.
       __versa_string & replace (const_iterator __i1, const_iterator __i2, const _CharT *__s, size_type __n)
           Replace range of characters with C substring.
       __versa_string & replace (const_iterator __i1, const_iterator __i2, const_iterator __k1, const_iterator __k2)
       __versa_string & replace (const_iterator __i1, const_iterator __i2, iterator __k1, iterator __k2)
       __versa_string & replace (const_iterator __i1, const_iterator __i2, size_type __n, _CharT __c)
           Replace range of characters with multiple characters.
       __versa_string & replace (const_iterator __i1, const_iterator __i2, std::initializer_list< _CharT > __l)
           Replace range of characters with initializer_list.
       __versa_string & replace (size_type __pos, size_type __n, const __versa_string &__str)
           Replace characters with value from another string.
       __versa_string & replace (size_type __pos, size_type __n1, const _CharT *__s)
           Replace characters with value of a C string.
       __versa_string & replace (size_type __pos, size_type __n1, const _CharT *__s, size_type __n2)
           Replace characters with value of a C substring.
       __versa_string & replace (size_type __pos, size_type __n1, size_type __n2, _CharT __c)
           Replace characters with multiple characters.
       __versa_string & replace (size_type __pos1, size_type __n1, const __versa_string &__str, size_type __pos2, size_type __n2)
           Replace characters with value from another string.
       void reserve (size_type __res_arg=0)
           Attempt to preallocate enough memory for specified number of characters.
       void resize (size_type __n)
           Resizes the string to the specified number of characters.
       void resize (size_type __n, _CharT __c)
           Resizes the string to the specified number of characters.
       size_type rfind (_CharT __c, size_type __pos=npos) const noexcept
           Find last position of a character.
       size_type rfind (const __versa_string &__str, size_type __pos=npos) const noexcept
           Find last position of a string.
       size_type rfind (const _CharT *__s, size_type __pos, size_type __n) const
           Find last position of a C substring.
       size_type rfind (const _CharT *__s, size_type __pos=npos) const
           Find last position of a C string.
       void shrink_to_fit () noexcept
           A non-binding request to reduce capacity() to size().
       size_type size () const noexcept
           Returns the number of characters in the string, not including any null-termination.
       __versa_string substr (size_type __pos=0, size_type __n=npos) const
           Get a substring.
       void swap (__versa_string &__s) noexcept
           Swap contents with another string.

   Static Public Attributes
       static const size_type npos
           Value returned by various member functions when they fail.

Detailed Description
   template<typename _CharT, typename _Traits, typename _Alloc, template< typename, typename, typename > class _Base>
       class __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >"Template class __versa_string.

       Data structure managing sequences of characters and character-like objects.

       Definition at line 57 of file vstring.h.

Member Typedef Documentation
   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> typedef _Alloc __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::allocator_type
       Definition at line 68 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> typedef __gnu_cxx::__normal_iterator<const_pointer, __versa_string>
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::const_iterator
       Definition at line 77 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> typedef _CharT_alloc_traits::const_pointer __gnu_cxx::__versa_string< _CharT,
       _Traits, _Alloc, _Base >::const_pointer
       Definition at line 74 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> typedef const value_type& __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc,
       _Base >::const_reference
       Definition at line 72 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> typedef std::reverse_iterator<const_iterator> __gnu_cxx::__versa_string< _CharT,
       _Traits, _Alloc, _Base >::const_reverse_iterator
       Definition at line 78 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> typedef _CharT_alloc_type::difference_type __gnu_cxx::__versa_string< _CharT,
       _Traits, _Alloc, _Base >::difference_type
       Definition at line 70 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> typedef __gnu_cxx::__normal_iterator<pointer, __versa_string>
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::iterator
       Definition at line 75 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> typedef _CharT_alloc_traits::pointer __gnu_cxx::__versa_string< _CharT, _Traits,
       _Alloc, _Base >::pointer
       Definition at line 73 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> typedef value_type& __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::reference
       Definition at line 71 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> typedef std::reverse_iterator<iterator> __gnu_cxx::__versa_string< _CharT,
       _Traits, _Alloc, _Base >::reverse_iterator
       Definition at line 79 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> typedef _CharT_alloc_type::size_type __gnu_cxx::__versa_string< _CharT, _Traits,
       _Alloc, _Base >::size_type
       Definition at line 69 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> typedef _Traits __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::traits_type
       Definition at line 66 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> typedef _Traits::char_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc,
       _Base >::value_type
       Definition at line 67 of file vstring.h.

Constructor & Destructor Documentation
   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::__versa_string
       (const _Alloc & __a = _Alloc()) [inline],  [explicit],  [noexcept]
       Construct an empty string using allocator a.

       Definition at line 139 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::__versa_string
       (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str) [inline]
       Construct string with copy of value of __str.

       Parameters
           __str Source string.

       Definition at line 147 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::__versa_string
       (__versa_string< _CharT, _Traits, _Alloc, _Base > && __str) [inline],  [noexcept]
       String move constructor.

       Parameters
           __str Source string.

       The newly-constructed string contains the exact contents of __str. The contents of __str are a valid, but unspecified string.

       Definition at line 159 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::__versa_string
       (std::initializer_list< _CharT > __l, const _Alloc & __a = _Alloc()) [inline]
       Construct string from an initializer list.

       Parameters
           __l std::initializer_list of characters.
           __a Allocator to use (default is default allocator).

       Definition at line 167 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::__versa_string
       (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos, size_type __n = npos) [inline]
       Construct string as copy of a substring.

       Parameters
           __str Source string.
           __pos Index of first character to copy from.
           __n Number of characters to copy (default remainder).

       Definition at line 178 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::__versa_string
       (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos, size_type __n, const _Alloc & __a) [inline]
       Construct string as copy of a substring.

       Parameters
           __str Source string.
           __pos Index of first character to copy from.
           __n Number of characters to copy.
           __a Allocator to use.

       Definition at line 193 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::__versa_string
       (const _CharT * __s, size_type __n, const _Alloc & __a = _Alloc()) [inline]
       Construct string initialized by a character array.

       Parameters
           __s Source character array.
           __n Number of characters to copy.
           __a Allocator to use (default is default allocator).

       NB: __s must have at least __n characters, '\0' has no special meaning.

       Definition at line 210 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::__versa_string
       (const _CharT * __s, const _Alloc & __a = _Alloc()) [inline]
       Construct string as copy of a C string.

       Parameters
           __s Source C string.
           __a Allocator to use (default is default allocator).

       Definition at line 219 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::__versa_string
       (size_type __n, _CharT __c, const _Alloc & __a = _Alloc()) [inline]
       Construct string as multiple characters.

       Parameters
           __n Number of characters.
           __c Character to use.
           __a Allocator to use (default is default allocator).

       Definition at line 229 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> template<class _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::__versa_string (_InputIterator __beg, _InputIterator __end, const _Alloc & __a = _Alloc())
       [inline]
       Construct string as copy of a range.

       Parameters
           __beg Start of range.
           __end End of range.
           __a Allocator to use (default is default allocator).

       Definition at line 244 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::~__versa_string ()
       [inline],  [noexcept]
       Destroy the string instance.

       Definition at line 251 of file vstring.h.

Member Function Documentation
   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> template<typename _InputIterator > __versa_string< _CharT, _Traits, _Alloc, _Base
       > & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::_M_replace_dispatch (const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2, std::__false_type)
       Definition at line 83 of file vstring.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> template<class _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append (_InputIterator __first, _InputIterator __last) [inline]
       Append a range of characters.

       Parameters
           __first Iterator referencing the first character to append.
           __last Iterator marking the end of the range.

       Returns
           Reference to this string.

       Appends characters in the range [first,last) to this string.

       Definition at line 782 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::append (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str) [inline]
       Append a string to this string.

       Parameters
           __str The string to append.

       Returns
           Reference to this string.

       Definition at line 694 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append(), std::getline(), __gnu_cxx::operator+(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::operator+=().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::append (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos, size_type __n) [inline]
       Append a substring.

       Parameters
           __str The string to append.
           __pos Index of the first character of str to append.
           __n The number of characters to append.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range if pos is not a valid index.

       This function appends __n characters from __str starting at __pos to this string. If __n is is larger than the number of available characters in __str, the remainder of __str is appended.

       Definition at line 711 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::append (const _CharT * __s) [inline]
       Append a C string.

       Parameters
           __s The C string to append.

       Returns
           Reference to this string.

       Definition at line 736 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::append (const _CharT * __s, size_type __n) [inline]
       Append a C substring.

       Parameters
           __s The C string to append.
           __n The number of characters to append.

       Returns
           Reference to this string.

       Definition at line 723 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::append (size_type __n, _CharT __c) [inline]
       Append multiple characters.

       Parameters
           __n The number of characters to append.
           __c The character to use.

       Returns
           Reference to this string.

       Appends n copies of c to this string.

       Definition at line 753 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::append (std::initializer_list< _CharT > __l) [inline]
       Append an initializer_list of characters.

       Parameters
           __l The initializer_list of characters to append.

       Returns
           Reference to this string.

       Definition at line 763 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::assign (__versa_string< _CharT, _Traits, _Alloc, _Base > && __str) [inline],  [noexcept]
       Set value to contents of another string.

       Parameters
           __str Source string to use.

       Returns
           Reference to this string.

       This function sets this string to the exact contents of __str. __str is a valid, but unspecified string.

       Definition at line 821 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::swap().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> template<class _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign (_InputIterator __first, _InputIterator __last) [inline]
       Set value to a range of characters.

       Parameters
           __first Iterator referencing the first character to append.
           __last Iterator marking the end of the range.

       Returns
           Reference to this string.

       Sets value of string to characters in the range [first,last).

       Definition at line 911 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::assign (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str) [inline]
       Set value to contents of another string.

       Parameters
           __str Source string to use.

       Returns
           Reference to this string.

       Definition at line 805 of file vstring.h.

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator=().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::assign (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos, size_type __n) [inline]
       Set value to a substring of a string.

       Parameters
           __str The string to use.
           __pos Index of the first character of str.
           __n Number of characters to use.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range if __pos is not a valid index.

       This function sets this string to the substring of __str consisting of __n characters at __pos. If __n is is larger than the number of available characters in __str, the remainder of __str is
       used.

       Definition at line 842 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::assign (const _CharT * __s) [inline]
       Set value to contents of a C string.

       Parameters
           __s The C string to use.

       Returns
           Reference to this string.

       This function sets the value of this string to the value of __s. The data is copied, so there is no dependence on __s once the function returns.

       Definition at line 875 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::assign (const _CharT * __s, size_type __n) [inline]
       Set value to a C substring.

       Parameters
           __s The C string to use.
           __n Number of characters to use.

       Returns
           Reference to this string.

       This function sets the value of this string to the first __n characters of __s. If __n is is larger than the number of available characters in __s, the remainder of __s is used.

       Definition at line 859 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::assign (size_type __n, _CharT __c) [inline]
       Set value to multiple characters.

       Parameters
           __n Length of the resulting string.
           __c The character to use.

       Returns
           Reference to this string.

       This function sets the value of this string to __n copies of character __c.

       Definition at line 892 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::assign (std::initializer_list< _CharT > __l) [inline]
       Set value to an initializer_list of characters.

       Parameters
           __l The initializer_list of characters to assign.

       Returns
           Reference to this string.

       Definition at line 921 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> reference __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::at
       (size_type __n) [inline]
       Provides access to the data contained in the string.

       Parameters
           __n The index of the character to access.

       Returns
           Read/write reference to the character.

       Exceptions
           std::out_of_range If __n is an invalid index.

       This function provides for safer data access. The parameter is first checked that it is in the range of the string. The function throws out_of_range if the check fails. Success results in
       unsharing the string.

       Definition at line 601 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const_reference __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::at
       (size_type __n) const [inline]
       Provides access to the data contained in the string.

       Parameters
           __n The index of the character to access.

       Returns
           Read-only (const) reference to the character.

       Exceptions
           std::out_of_range If __n is an invalid index.

       This function provides for safer data access. The parameter is first checked that it is in the range of the string. The function throws out_of_range if the check fails.

       Definition at line 579 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const_reference __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::back
       () const [inline],  [noexcept]
       Returns a read-only (constant) reference to the data at the last element of the string.

       Definition at line 642 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator[](), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> reference __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::back ()
       [inline],  [noexcept]
       Returns a read/write reference to the data at the last element of the string.

       Definition at line 634 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator[](), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const_iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::begin
       () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first character in the string.

       Definition at line 328 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::begin ()
       [inline],  [noexcept]
       Returns a read/write iterator that points to the first character in the string. Unshares the string.

       Definition at line 317 of file vstring.h.

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::crend(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rend().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const _CharT * __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::c_str
       () const [inline],  [noexcept]
       Return const pointer to null-terminated contents. This is a handle to internal data. Do not modify or dire things may happen.

       Definition at line 1649 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::capacity
       () const [inline],  [noexcept]
       Returns the total number of characters that the string can hold before needing to allocate more memory.

       Definition at line 488 of file vstring.h.

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::push_back(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::shrink_to_fit().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const_iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::cbegin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first character in the string.

       Definition at line 392 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const_iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::cend
       () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last character in the string.

       Definition at line 400 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> void __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::clear ()
       [inline],  [noexcept]
       Erases the string, making it empty.

       Definition at line 516 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> int __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare (const
       __versa_string< _CharT, _Traits, _Alloc, _Base > & __str) const [inline]
       Compare to a string.

       Parameters
           __str String to compare against.

       Returns
           Integer < 0, 0, or > 0.

       Returns an integer < 0 if this string is ordered before __str, 0 if their values are equivalent, or > 0 if this string is ordered after __str. Determines the effective length rlen of the strings
       to compare as the smallest of size() and str.size(). The function then compares the two strings by calling traits::compare(data(), str.data(),rlen). If the result of the comparison is nonzero
       returns it, otherwise the shorter one is ordered first.

       Definition at line 2075 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), std::min(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

       Referenced by __gnu_cxx::operator<(), __gnu_cxx::operator<=(), __gnu_cxx::operator==(), __gnu_cxx::operator>(), and __gnu_cxx::operator>=().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> int __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare (const
       _CharT * __s) const
       Compare to a C string.

       Parameters
           __s C string to compare against.

       Returns
           Integer < 0, 0, or > 0.

       Returns an integer < 0 if this string is ordered before __s, 0 if their values are equivalent, or > 0 if this string is ordered after __s. Determines the effective length rlen of the strings to
       compare as the smallest of size() and the length of a string constructed from __s. The function then compares the two strings by calling traits::compare(data(),s,rlen). If the result of the
       comparison is nonzero returns it, otherwise the shorter one is ordered first.

       Definition at line 495 of file vstring.tcc.

       References std::min().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> int __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare
       (size_type __pos, size_type __n, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str) const
       Compare substring to a string.

       Parameters
           __pos Index of first character of substring.
           __n Number of characters in substring.
           __str String to compare against.

       Returns
           Integer < 0, 0, or > 0.

       Form the substring of this string from the __n characters starting at __pos. Returns an integer < 0 if the substring is ordered before __str, 0 if their values are equivalent, or > 0 if the
       substring is ordered after __str. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and __str.size(). The function then compares the
       two strings by calling traits::compare(substring.data(),str.data(),rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first.

       Definition at line 459 of file vstring.tcc.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), std::min(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> int __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare
       (size_type __pos, size_type __n1, const _CharT * __s) const
       Compare substring to a C string.

       Parameters
           __pos Index of first character of substring.
           __n1 Number of characters in substring.
           __s C string to compare against.

       Returns
           Integer < 0, 0, or > 0.

       Form the substring of this string from the __n1 characters starting at __pos. Returns an integer < 0 if the substring is ordered before __s, 0 if their values are equivalent, or > 0 if the
       substring is ordered after __s. Determines the effective length rlen of the strings to compare as the smallest of the length of the substring and the length of a string constructed from __s. The
       function then compares the two string by calling traits::compare(substring.data(),s,rlen). If the result of the comparison is nonzero returns it, otherwise the shorter one is ordered first.

       Definition at line 511 of file vstring.tcc.

       References std::min().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> int __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare
       (size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const
       Compare substring against a character array.

       Parameters
           __pos Index of first character of substring.
           __n1 Number of characters in substring.
           __s character array to compare against.
           __n2 Number of characters of s.

       Returns
           Integer < 0, 0, or > 0.

       Form the substring of this string from the __n1 characters starting at __pos. Form a string from the first __n2 characters of __s. Returns an integer < 0 if this substring is ordered before the
       string from __s, 0 if their values are equivalent, or > 0 if this substring is ordered after the string from __s. Determines the effective length rlen of the strings to compare as the smallest of
       the length of the substring and __n2. The function then compares the two strings by calling traits::compare(substring.data(),__s,rlen). If the result of the comparison is nonzero returns it,
       otherwise the shorter one is ordered first.

       NB: __s must have at least n2 characters, \0 has no special meaning.

       Definition at line 528 of file vstring.tcc.

       References std::min().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> int __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare
       (size_type __pos1, size_type __n1, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos2, size_type __n2) const
       Compare substring to a substring.

       Parameters
           __pos1 Index of first character of substring.
           __n1 Number of characters in substring.
           __str String to compare against.
           __pos2 Index of first character of substring of str.
           __n2 Number of characters in substring of str.

       Returns
           Integer < 0, 0, or > 0.

       Form the substring of this string from the __n1 characters starting at __pos1. Form the substring of __str from the __n2 characters starting at __pos2. Returns an integer < 0 if this substring is
       ordered before the substring of __str, 0 if their values are equivalent, or > 0 if this substring is ordered after the substring of __str. Determines the effective length rlen of the strings to
       compare as the smallest of the lengths of the substrings. The function then compares the two strings by calling traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen). If the result of
       the comparison is nonzero returns it, otherwise the shorter one is ordered first.

       Definition at line 476 of file vstring.tcc.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), and std::min().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string< _CharT, _Traits, _Alloc, _Base >::size_type
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::copy (_CharT * __s, size_type __n, size_type __pos = 0) const
       Copy substring into C string.

       Parameters
           __s C string to copy value into.
           __n Number of characters to copy.
           __pos Index of first character to copy.

       Returns
           Number of characters actually copied

       Exceptions
           std::out_of_range If pos > size().

       Copies up to __n characters starting at __pos into the C string s. If __pos is greater than size(), out_of_range is thrown.

       Definition at line 254 of file vstring.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const_reverse_iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::crbegin () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last character in the string. Iteration is done in reverse element order.

       Definition at line 409 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::end().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const_reverse_iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::crend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one before the first character in the string. Iteration is done in reverse element order.

       Definition at line 418 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::begin().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const _CharT * __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data
       () const [inline],  [noexcept]
       Return const pointer to contents. This is a handle to internal data. Do not modify or dire things may happen.

       Definition at line 1659 of file vstring.h.

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), __gnu_cxx::__versa_string< _CharT,
       _Traits, _Alloc, _Base >::find_first_not_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::find_last_of().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> bool __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::empty () const
       [inline],  [noexcept]
       Returns true if the string is empty. Equivalent to *this == ''.

       Definition at line 524 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const_iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::end
       () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last character in the string.

       Definition at line 347 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::end ()
       [inline],  [noexcept]
       Returns a read/write iterator that points one past the last character in the string. Unshares the string.

       Definition at line 336 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::crbegin(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rbegin().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::erase
       (const_iterator __first, const_iterator __last) [inline]
       Remove a range of characters.

       Parameters
           __first Iterator referencing the first character to remove.
           __last Iterator referencing the end of the range.

       Returns
           Iterator referencing location of first after removal.

       Removes the characters in the range [first,last) from this string. The value of the string doesn't change if an error is thrown.

       Definition at line 1217 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::erase
       (const_iterator __position) [inline]
       Remove one character.

       Parameters
           __position Iterator referencing the character to remove.

       Returns
           iterator referencing same location after removal.

       Removes the character at __position from this string. The value of the string doesn't change if an error is thrown.

       Definition at line 1192 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::erase (size_type __pos = 0, size_type __n = npos) [inline]
       Remove characters.

       Parameters
           __pos Index of first character to remove (default 0).
           __n Number of characters to remove (default remainder).

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range If __pos is beyond the end of this string.

       Removes __n characters from this string starting at __pos. The length of the string is reduced by __n. If there are < __n characters to remove, the remainder of the string is truncated. If __p is
       beyond end of string, out_of_range is thrown. The value of the string doesn't change if an error is thrown.

       Definition at line 1175 of file vstring.h.

       Referenced by std::getline().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string< _CharT, _Traits, _Alloc, _Base >::size_type
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find (_CharT __c, size_type __pos = 0) const [noexcept]
       Find position of a character.

       Parameters
           __c Character to locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for __c within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 293 of file vstring.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find
       (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = 0) const [inline],  [noexcept]
       Find position of a string.

       Parameters
           __str String to locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of start of first occurrence.

       Starting from __pos, searches forward for value of __str within this string. If found, returns the index where it begins. If not found, returns npos.

       Definition at line 1695 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), and __gnu_cxx::__versa_string< _CharT,
       _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string< _CharT, _Traits, _Alloc, _Base >::size_type
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find (const _CharT * __s, size_type __pos, size_type __n) const
       Find position of a C substring.

       Parameters
           __s C string to locate.
           __pos Index of character to search from.
           __n Number of characters from __s to search for.

       Returns
           Index of start of first occurrence.

       Starting from __pos, searches forward for the first __n characters in __s within this string. If found, returns the index where it begins. If not found, returns npos.

       Definition at line 269 of file vstring.tcc.

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find
       (const _CharT * __s, size_type __pos = 0) const [inline]
       Find position of a C string.

       Parameters
           __s C string to locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of start of first occurrence.

       Starting from __pos, searches forward for the value of __s within this string. If found, returns the index where it begins. If not found, returns npos.

       Definition at line 1710 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string< _CharT, _Traits, _Alloc, _Base >::size_type
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of (_CharT __c, size_type __pos = 0) const [noexcept]
       Find position of a different character.

       Parameters
           __c Character to avoid.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for a character other than __c within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 404 of file vstring.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::find_first_not_of (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = 0) const [inline],  [noexcept]
       Find position of a character not in string.

       Parameters
           __str String containing characters to avoid.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for a character not contained in __str within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 1927 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of(), and __gnu_cxx::__versa_string<
       _CharT, _Traits, _Alloc, _Base >::size().

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string< _CharT, _Traits, _Alloc, _Base >::size_type
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of (const _CharT * __s, size_type __pos, size_type __n) const
       Find position of a character not in C substring.

       Parameters
           __s C string containing characters to avoid.
           __pos Index of character to search from.
           __n Number of characters from s to consider.

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for a character not contained in the first __n characters of __s within this string. If found, returns the index where it was found. If not found, returns
       npos.

       Definition at line 391 of file vstring.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::find_first_not_of (const _CharT * __s, size_type __pos = 0) const [inline]
       Find position of a character not in C string.

       Parameters
           __s C string containing characters to avoid.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for a character not contained in __s within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 1958 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::find_first_of (_CharT __c, size_type __pos = 0) const [inline],  [noexcept]
       Find position of a character.

       Parameters
           __c Character to locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for the character __c within this string. If found, returns the index where it was found. If not found, returns npos.

       Note: equivalent to find(c, pos).

       Definition at line 1849 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::find_first_of (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = 0) const [inline],  [noexcept]
       Find position of a character of string.

       Parameters
           __str String containing characters to locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for one of the characters of __str within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 1800 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of(), and __gnu_cxx::__versa_string<
       _CharT, _Traits, _Alloc, _Base >::size().

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string< _CharT, _Traits, _Alloc, _Base >::size_type
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of (const _CharT * __s, size_type __pos, size_type __n) const
       Find position of a character of C substring.

       Parameters
           __s String containing characters to locate.
           __pos Index of character to search from.
           __n Number of characters from s to search for.

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for one of the first __n characters of __s within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 352 of file vstring.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::find_first_of (const _CharT * __s, size_type __pos = 0) const [inline]
       Find position of a character of C string.

       Parameters
           __s String containing characters to locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for one of the characters of __s within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 1830 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_of().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string< _CharT, _Traits, _Alloc, _Base >::size_type
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_not_of (_CharT __c, size_type __pos = npos) const [noexcept]
       Find last position of a different character.

       Parameters
           __c Character to avoid.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for a character other than __c within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 438 of file vstring.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::find_last_not_of (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = npos) const [inline],  [noexcept]
       Find last position of a character not in string.

       Parameters
           __str String containing characters to avoid.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for a character not contained in __str within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 1990 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_not_of().

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_not_of().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string< _CharT, _Traits, _Alloc, _Base >::size_type
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_not_of (const _CharT * __s, size_type __pos, size_type __n) const
       Find last position of a character not in C substring.

       Parameters
           __s C string containing characters to avoid.
           __pos Index of character to search back from.
           __n Number of characters from s to consider.

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for a character not contained in the first __n characters of __s within this string. If found, returns the index where it was found. If not found, returns
       npos.

       Definition at line 416 of file vstring.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::find_last_not_of (const _CharT * __s, size_type __pos = npos) const [inline]
       Find last position of a character not in C string.

       Parameters
           __s C string containing characters to avoid.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for a character not contained in __s within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 2021 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_not_of().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::find_last_of (_CharT __c, size_type __pos = npos) const [inline],  [noexcept]
       Find last position of a character.

       Parameters
           __c Character to locate.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for __c within this string. If found, returns the index where it was found. If not found, returns npos.

       Note: equivalent to rfind(c, pos).

       Definition at line 1913 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::find_last_of (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = npos) const [inline],  [noexcept]
       Find last position of a character of string.

       Parameters
           __str String containing characters to locate.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for one of the characters of __str within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 1864 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::data(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of(), and __gnu_cxx::__versa_string< _CharT,
       _Traits, _Alloc, _Base >::size().

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string< _CharT, _Traits, _Alloc, _Base >::size_type
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of (const _CharT * __s, size_type __pos, size_type __n) const
       Find last position of a character of C substring.

       Parameters
           __s C string containing characters to locate.
           __pos Index of character to search back from.
           __n Number of characters from s to search for.

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for one of the first __n characters of __s within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 369 of file vstring.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::find_last_of (const _CharT * __s, size_type __pos = npos) const [inline]
       Find last position of a character of C string.

       Parameters
           __s C string containing characters to locate.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for one of the characters of __s within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 1894 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const_reference __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::front () const [inline],  [noexcept]
       Returns a read-only (constant) reference to the data at the first element of the string.

       Definition at line 626 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator[]().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> reference __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::front ()
       [inline],  [noexcept]
       Returns a read/write reference to the data at the first element of the string.

       Definition at line 618 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator[]().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> allocator_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::get_allocator () const [inline],  [noexcept]
       Return copy of allocator used to construct this string.

       Definition at line 1666 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::insert
       (const_iterator __p, _CharT __c) [inline]
       Insert one character.

       Parameters
           __p Iterator referencing position in string to insert at.
           __c The character to insert.

       Returns
           Iterator referencing newly inserted char.

       Exceptions
           std::length_error If new length exceeds max_size().

       Inserts character __c at position referenced by __p. If adding character causes the length to exceed max_size(), length_error is thrown. If __p is beyond end of string, out_of_range is thrown.
       The value of the string doesn't change if an error is thrown.

       Definition at line 1147 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> template<class _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::insert (const_iterator __p, _InputIterator __beg, _InputIterator __end) [inline]
       Insert a range of characters.

       Parameters
           __p Const_iterator referencing location in string to insert at.
           __beg Start of range.
           __end End of range.

       Returns
           Iterator referencing the first inserted char.

       Exceptions
           std::length_error If new length exceeds max_size().

       Inserts characters in range [beg,end). If adding characters causes the length to exceed max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown.

       Definition at line 986 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::insert
       (const_iterator __p, size_type __n, _CharT __c) [inline]
       Insert multiple characters.

       Parameters
           __p Const_iterator referencing location in string to insert at.
           __n Number of characters to insert
           __c The character to insert.

       Returns
           Iterator referencing the first inserted char.

       Exceptions
           std::length_error If new length exceeds max_size().

       Inserts __n copies of character __c starting at the position referenced by iterator __p. If adding characters causes the length to exceed max_size(), length_error is thrown. The value of the
       string doesn't change if an error is thrown.

       Definition at line 942 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::insert().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::insert
       (const_iterator __p, std::initializer_list< _CharT > __l) [inline]
       Insert an initializer_list of characters.

       Parameters
           __p Const_iterator referencing location in string to insert at.
           __l The initializer_list of characters to insert.

       Returns
           Iterator referencing the first inserted char.

       Exceptions
           std::length_error If new length exceeds max_size().

       Definition at line 1022 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::insert().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::insert (size_type __pos, const _CharT * __s) [inline]
       Insert a C string.

       Parameters
           __pos Iterator referencing location in string to insert at.
           __s The C string to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().
           std::out_of_range If __pos is beyond the end of this string.

       Inserts the first __n characters of __s starting at __pos. If adding characters causes the length to exceed max_size(), length_error is thrown. If __pos is beyond end(), out_of_range is thrown.
       The value of the string doesn't change if an error is thrown.

       Definition at line 1104 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::insert (size_type __pos, const _CharT * __s, size_type __n) [inline]
       Insert a C substring.

       Parameters
           __pos Iterator referencing location in string to insert at.
           __s The C string to insert.
           __n The number of characters to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().
           std::out_of_range If __pos is beyond the end of this string.

       Inserts the first __n characters of __s starting at __pos. If adding characters causes the length to exceed max_size(), length_error is thrown. If __pos is beyond end(), out_of_range is thrown.
       The value of the string doesn't change if an error is thrown.

       Definition at line 1085 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::insert (size_type __pos, size_type __n, _CharT __c) [inline]
       Insert multiple characters.

       Parameters
           __pos Index in string to insert at.
           __n Number of characters to insert
           __c The character to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().
           std::out_of_range If __pos is beyond the end of this string.

       Inserts __n copies of character __c starting at index __pos. If adding characters causes the length to exceed max_size(), length_error is thrown. If __pos > length(), out_of_range is thrown. The
       value of the string doesn't change if an error is thrown.

       Definition at line 1128 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::insert (size_type __pos1, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str) [inline]
       Insert value of a string.

       Parameters
           __pos1 Iterator referencing location in string to insert at.
           __str The string to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Inserts value of __str starting at __pos1. If adding characters causes the length to exceed max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown.

       Definition at line 1039 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::insert (size_type __pos1, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos2, size_type __n) [inline]
       Insert a substring.

       Parameters
           __pos1 Iterator referencing location in string to insert at.
           __str The string to insert.
           __pos2 Start of characters in str to insert.
           __n Number of characters to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().
           std::out_of_range If __pos1 > size() or __pos2 > __str.size().

       Starting at __pos1, insert __n character of __str beginning with __pos2. If adding characters causes the length to exceed max_size(), length_error is thrown. If __pos1 is beyond the end of this
       string or __pos2 is beyond the end of __str, out_of_range is thrown. The value of the string doesn't change if an error is thrown.

       Definition at line 1062 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::length ()
       const [inline],  [noexcept]
       Returns the number of characters in the string, not including any null-termination.

       Definition at line 433 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::max_size
       () const [inline],  [noexcept]
       Returns the size() of the largest possible string.

       Definition at line 438 of file vstring.h.

       Referenced by std::getline().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::operator+= (_CharT __c) [inline]
       Append a character.

       Parameters
           __c The character to append.

       Returns
           Reference to this string.

       Definition at line 671 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::push_back().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::operator+= (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str) [inline]
       Append a string to this string.

       Parameters
           __str The string to append.

       Returns
           Reference to this string.

       Definition at line 653 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::operator+= (const _CharT * __s) [inline]
       Append a C string.

       Parameters
           __s The C string to append.

       Returns
           Reference to this string.

       Definition at line 662 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::operator+= (std::initializer_list< _CharT > __l) [inline]
       Append an initializer_list of characters.

       Parameters
           __l The initializer_list of characters to be appended.

       Returns
           Reference to this string.

       Definition at line 684 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::operator= (__versa_string< _CharT, _Traits, _Alloc, _Base > && __str) [inline],  [noexcept]
       String move assignment operator.

       Parameters
           __str Source string.

       The contents of __str are moved into this string (without copying). __str is a valid, but unspecified string.

       Definition at line 270 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::swap().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::operator= (_CharT __c) [inline]
       Set value to string of length 1.

       Parameters
           __c Source character.

       Assigning to a character makes this string length 1 and (*this)[0] == __c.

       Definition at line 305 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::operator= (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str) [inline]
       Assign the value of str to this string.

       Parameters
           __str Source string.

       Definition at line 258 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::operator= (const _CharT * __s) [inline]
       Copy contents of __s into this string.

       Parameters
           __s Source null-terminated string.

       Definition at line 294 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::operator= (std::initializer_list< _CharT > __l) [inline]
       Set value to string constructed from initializer list.

       Parameters
           __l std::initializer_list.

       Definition at line 282 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const_reference __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::operator[] (size_type __pos) const [inline],  [noexcept]
       Subscript access to the data contained in the string.

       Parameters
           __pos The index of the character to access.

       Returns
           Read-only (constant) reference to the character.

       This operator allows for easy, array-style, data access. Note that data access with this operator is unchecked and out_of_range lookups are not defined. (For checked lookups see at().)

       Definition at line 539 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::back(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::front().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> reference __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator[]
       (size_type __pos) [inline],  [noexcept]
       Subscript access to the data contained in the string.

       Parameters
           __pos The index of the character to access.

       Returns
           Read/write reference to the character.

       This operator allows for easy, array-style, data access. Note that data access with this operator is unchecked and out_of_range lookups are not defined. (For checked lookups see at().) Unshares
       the string.

       Definition at line 556 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> void __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::pop_back ()
       [inline]
       Remove the last character. The string must be non-empty.

       Definition at line 1237 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> void __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::push_back
       (_CharT __c) [inline]
       Append a single character.

       Parameters
           __c Character to append.

       Definition at line 790 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::capacity(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

       Referenced by __gnu_cxx::operator+(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator+=().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const_reverse_iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::rbegin () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last character in the string. Iteration is done in reverse element order.

       Definition at line 365 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::end().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> reverse_iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::rbegin () [inline],  [noexcept]
       Returns a read/write reverse iterator that points to the last character in the string. Iteration is done in reverse element order. Unshares the string.

       Definition at line 356 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::end().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const_reverse_iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::rend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one before the first character in the string. Iteration is done in reverse element order.

       Definition at line 383 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::begin().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> reverse_iterator __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::rend () [inline],  [noexcept]
       Returns a read/write reverse iterator that points to one before the first character in the string. Iteration is done in reverse element order. Unshares the string.

       Definition at line 374 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::begin().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (const_iterator __i1, const_iterator __i2, _CharT * __k1, _CharT * __k2) [inline]
       Definition at line 1507 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> template<class _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace (const_iterator __i1, const_iterator __i2, _InputIterator __k1,
       _InputIterator __k2) [inline]
       Replace range of characters with range.

       Parameters
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __k1 Iterator referencing start of range to insert.
           __k2 Iterator referencing end of range to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [i1,i2). In place, characters in the range [k1,k2) are inserted. If the length of result exceeds max_size(), length_error is thrown. The value of the string
       doesn't change if an error is thrown.

       Definition at line 1480 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (const_iterator __i1, const_iterator __i2, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str) [inline]
       Replace range of characters with string.

       Parameters
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __str String value to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [i1,i2). In place, the value of __str is inserted. If the length of result exceeds max_size(), length_error is thrown. The value of the string doesn't change
       if an error is thrown.

       Definition at line 1377 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (const_iterator __i1, const_iterator __i2, const _CharT * __k1, const _CharT * __k2) [inline]
       Definition at line 1523 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (const_iterator __i1, const_iterator __i2, const _CharT * __s) [inline]
       Replace range of characters with C string.

       Parameters
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __s C string value to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [i1,i2). In place, the characters of __s are inserted. If the length of result exceeds max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1426 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (const_iterator __i1, const_iterator __i2, const _CharT * __s, size_type __n) [inline]
       Replace range of characters with C substring.

       Parameters
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __s C string value to insert.
           __n Number of characters from s to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [i1,i2). In place, the first n characters of __s are inserted. If the length of result exceeds max_size(), length_error is thrown. The value of the string
       doesn't change if an error is thrown.

       Definition at line 1400 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (const_iterator __i1, const_iterator __i2, const_iterator __k1, const_iterator __k2) [inline]
       Definition at line 1555 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (const_iterator __i1, const_iterator __i2, iterator __k1, iterator __k2) [inline]
       Definition at line 1539 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (const_iterator __i1, const_iterator __i2, size_type __n, _CharT __c) [inline]
       Replace range of characters with multiple characters.

       Parameters
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __n Number of characters to insert.
           __c Character to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [i1,i2). In place, __n copies of __c are inserted. If the length of result exceeds max_size(), length_error is thrown. The value of the string doesn't change
       if an error is thrown.

       Definition at line 1451 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (const_iterator __i1, const_iterator __i2, std::initializer_list< _CharT > __l) [inline]
       Replace range of characters with initializer_list.

       Parameters
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __l The initializer_list of characters to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [i1,i2). In place, characters in the range [k1,k2) are inserted. If the length of result exceeds max_size(), length_error is thrown. The value of the string
       doesn't change if an error is thrown.

       Definition at line 1584 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (size_type __pos, size_type __n, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str) [inline]
       Replace characters with value from another string.

       Parameters
           __pos Index of first character to replace.
           __n Number of characters to be replaced.
           __str String to insert.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range If __pos is beyond the end of this string.
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [pos,pos+n) from this string. In place, the value of __str is inserted. If __pos is beyond end of string, out_of_range is thrown. If the length of the result
       exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown.

       Definition at line 1259 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size().

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign(), __gnu_cxx::__versa_string< _CharT,
       _Traits, _Alloc, _Base >::insert(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (size_type __pos, size_type __n1, const _CharT * __s) [inline]
       Replace characters with value of a C string.

       Parameters
           __pos Index of first character to replace.
           __n1 Number of characters to be replaced.
           __s C string to insert.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range If __pos > size().
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [pos,pos + n1) from this string. In place, the characters of __s are inserted. If pos is beyond end of string, out_of_range is thrown. If the length of result
       exceeds max_size(), length_error is thrown.
        The value of the string doesn't change if an error is thrown.

       Definition at line 1334 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) [inline]
       Replace characters with value of a C substring.

       Parameters
           __pos Index of first character to replace.
           __n1 Number of characters to be replaced.
           __s C string to insert.
           __n2 Number of characters from __s to use.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range If __pos1 > size().
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [pos,pos + n1) from this string. In place, the first __n2 characters of __s are inserted, or all of __s if __n2 is too large. If __pos is beyond end of string,
       out_of_range is thrown. If the length of result exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown.

       Definition at line 1310 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (size_type __pos, size_type __n1, size_type __n2, _CharT __c) [inline]
       Replace characters with multiple characters.

       Parameters
           __pos Index of first character to replace.
           __n1 Number of characters to be replaced.
           __n2 Number of characters to insert.
           __c Character to insert.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range If __pos > size().
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [pos,pos + n1) from this string. In place, __n2 copies of __c are inserted. If __pos is beyond end of string, out_of_range is thrown. If the length of result
       exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown.

       Definition at line 1358 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string & __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::replace (size_type __pos1, size_type __n1, const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos2, size_type __n2) [inline]
       Replace characters with value from another string.

       Parameters
           __pos1 Index of first character to replace.
           __n1 Number of characters to be replaced.
           __str String to insert.
           __pos2 Index of first character of str to use.
           __n2 Number of characters from str to use.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range If __pos1 > size() or __pos2 > str.size().
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [pos1,pos1 + n) from this string. In place, the value of __str is inserted. If __pos is beyond end of string, out_of_range is thrown. If the length of the
       result exceeds max_size(), length_error is thrown. The value of the string doesn't change if an error is thrown.

       Definition at line 1282 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> void __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::reserve
       (size_type __res_arg = 0) [inline]
       Attempt to preallocate enough memory for specified number of characters.

       Parameters
           __res_arg Number of characters required.

       Exceptions
           std::length_error If __res_arg exceeds max_size().

       This function attempts to reserve enough memory for the string to hold the specified number of characters. If the number requested is more than max_size(), length_error is thrown.

       The advantage of this function is that if optimal code is a necessity and the user can determine the string length that will be required, the user can reserve the memory in advance, and thus
       prevent a possible reallocation of memory and copying of string data.

       Definition at line 509 of file vstring.h.

       Referenced by __gnu_cxx::operator+(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::shrink_to_fit().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> void __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::resize
       (size_type __n) [inline]
       Resizes the string to the specified number of characters.

       Parameters
           __n Number of characters the string should contain.

       This function will resize the string to the specified length. If the new size is smaller than the string's current size the string is truncated, otherwise the string is extended and new
       characters are default-constructed. For basic types such as char, this means setting them to 0.

       Definition at line 465 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::resize().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> void __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::resize
       (size_type __n, _CharT __c)
       Resizes the string to the specified number of characters.

       Parameters
           __n Number of characters the string should contain.
           __c Character to fill any new elements.

       This function will resize the string to the specified number of characters. If the number is smaller than the string's current size the string is truncated, otherwise the string is extended and
       new elements are set to __c.

       Definition at line 49 of file vstring.tcc.

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::resize().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string< _CharT, _Traits, _Alloc, _Base >::size_type
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind (_CharT __c, size_type __pos = npos) const [noexcept]
       Find last position of a character.

       Parameters
           __c Character to locate.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for __c within this string. If found, returns the index where it was found. If not found, returns npos.

       Definition at line 334 of file vstring.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind
       (const __versa_string< _CharT, _Traits, _Alloc, _Base > & __str, size_type __pos = npos) const [inline],  [noexcept]
       Find last position of a string.

       Parameters
           __str String to locate.
           __pos Index of character to search back from (default end).

       Returns
           Index of start of last occurrence.

       Starting from __pos, searches backward for value of __str within this string. If found, returns the index where it begins. If not found, returns npos.

       Definition at line 1740 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind().

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of(), and __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string< _CharT, _Traits, _Alloc, _Base >::size_type
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind (const _CharT * __s, size_type __pos, size_type __n) const
       Find last position of a C substring.

       Parameters
           __s C string to locate.
           __pos Index of character to search back from.
           __n Number of characters from s to search for.

       Returns
           Index of start of last occurrence.

       Starting from __pos, searches backward for the first __n characters in __s within this string. If found, returns the index where it begins. If not found, returns npos.

       Definition at line 312 of file vstring.tcc.

       References std::min().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind
       (const _CharT * __s, size_type __pos = npos) const [inline]
       Find last position of a C string.

       Parameters
           __s C string to locate.
           __pos Index of character to start search at (default end).

       Returns
           Index of start of last occurrence.

       Starting from __pos, searches backward for the value of __s within this string. If found, returns the index where it begins. If not found, returns npos.

       Definition at line 1770 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::rfind().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> void __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::shrink_to_fit
       () [inline],  [noexcept]
       A non-binding request to reduce capacity() to size().

       Definition at line 471 of file vstring.h.

       References __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::capacity(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::reserve(), and __gnu_cxx::__versa_string< _CharT,
       _Traits, _Alloc, _Base >::size().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> size_type __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::size ()
       const [inline],  [noexcept]
       Returns the number of characters in the string, not including any null-termination.

       Definition at line 427 of file vstring.h.

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::append(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign(), __gnu_cxx::__versa_string< _CharT,
       _Traits, _Alloc, _Base >::at(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::back(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::cend(),
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::compare(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::empty(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc,
       _Base >::end(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_first_not_of(), __gnu_cxx::__versa_string<
       _CharT, _Traits, _Alloc, _Base >::find_first_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::find_last_of(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::insert(), __gnu_cxx::operator+(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator[](), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::pop_back(),
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::push_back(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::replace(), and __gnu_cxx::__versa_string< _CharT, _Traits,
       _Alloc, _Base >::shrink_to_fit().

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> __versa_string __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base
       >::substr (size_type __pos = 0, size_type __n = npos) const [inline]
       Get a substring.

       Parameters
           __pos Index of first character (default 0).
           __n Number of characters in substring (default remainder).

       Returns
           The new string.

       Exceptions
           std::out_of_range If pos > size().

       Construct and return a new string using the __n characters starting at __pos. If the string is too short, use the remainder of the characters. If __pos is beyond the end of the string,
       out_of_range is thrown.

       Definition at line 2054 of file vstring.h.

   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> void __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::swap
       (__versa_string< _CharT, _Traits, _Alloc, _Base > & __s) [inline],  [noexcept]
       Swap contents with another string.

       Parameters
           __s String to swap with.

       Exchanges the contents of this string with that of __s in constant time.

       Definition at line 1638 of file vstring.h.

       Referenced by __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::assign(), __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::operator=(), and __gnu_cxx::swap().

Member Data Documentation
   template<typename _CharT , typename _Traits , typename _Alloc , template< typename, typename, typename > class _Base> const __versa_string< _CharT, _Traits, _Alloc, _Base >::size_type
       __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >::npos [static]
       Value returned by various member functions when they fail.

       Definition at line 83 of file vstring.h.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                                                                                     Wed Feb 1 2023                                __gnu_cxx::__versa_string< _CharT, _Traits, _Alloc, _Base >(3)
