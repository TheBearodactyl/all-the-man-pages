pthread_setconcurrency(3)  Library Functions Manual  pthread_setconcurrency(3)

NAME
       pthread_setconcurrency,  pthread_getconcurrency  -  set/get the concur‐
       rency level

LIBRARY
       POSIX threads library (libpthread, -lpthread)

SYNOPSIS
       #include <pthread.h>

       int pthread_setconcurrency(int new_level);
       int pthread_getconcurrency(void);

DESCRIPTION
       The pthread_setconcurrency() function informs the implementation of the
       application's  desired  concurrency level, specified in new_level.  The
       implementation takes this only as a hint: POSIX.1 does not specify  the
       level  of  concurrency  that  should be provided as a result of calling
       pthread_setconcurrency().

       Specifying new_level as 0 instructs the implementation  to  manage  the
       concurrency level as it deems appropriate.

       pthread_getconcurrency()  returns  the current value of the concurrency
       level for this process.

RETURN VALUE
       On success, pthread_setconcurrency() returns 0; on error, it returns  a
       nonzero error number.

       pthread_getconcurrency()  always  succeeds,  returning  the concurrency
       level set by a previous call  to  pthread_setconcurrency(),  or  0,  if
       pthread_setconcurrency() has not previously been called.

ERRORS
       pthread_setconcurrency() can fail with the following error:

       EINVAL new_level is negative.

       POSIX.1  also  documents  an  EAGAIN  error  ("the  value  specified by
       new_level would cause a system resource to be exceeded").

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │pthread_setconcurrency(),                   │ Thread safety │ MT-Safe │
       │pthread_getconcurrency()                    │               │         │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       glibc 2.1.  POSIX.1-2001.

NOTES
       The default concurrency level is 0.

       Concurrency levels are meaningful only for  M:N  threading  implementa‐
       tions,  where  at  any moment a subset of a process's set of user-level
       threads may be bound to a smaller number of kernel-scheduling entities.
       Setting the concurrency level allows the application to give the system
       a hint as to the number of kernel-scheduling entities  that  should  be
       provided for efficient execution of the application.

       Both  LinuxThreads  and NPTL are 1:1 threading implementations, so set‐
       ting the concurrency level has no meaning.  In other  words,  on  Linux
       these  functions merely exist for compatibility with other systems, and
       they have no effect on the execution of a program.

SEE ALSO
       pthread_attr_setscope(3), pthreads(7)

Linux man-pages 6.04              2023-03-30         pthread_setconcurrency(3)
PTHREAD_SETCONCURRENCY(3P) POSIX Programmer's ManualPTHREAD_SETCONCURRENCY(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       pthread_setconcurrency — set the level of concurrency

SYNOPSIS
       #include <pthread.h>

       int pthread_setconcurrency(int new_level);

DESCRIPTION
       Refer to pthread_getconcurrency().

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017           PTHREAD_SETCONCURRENCY(3P)
