getopt(3)                  Library Functions Manual                  getopt(3)

NAME
       getopt, getopt_long, getopt_long_only, optarg, optind, opterr, optopt -
       Parse command-line options

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       int getopt(int argc, char *argv[],
                  const char *optstring);

       extern char *optarg;
       extern int optind, opterr, optopt;

       #include <getopt.h>

       int getopt_long(int argc, char *argv[],
                  const char *optstring,
                  const struct option *longopts, int *longindex);
       int getopt_long_only(int argc, char *argv[],
                  const char *optstring,
                  const struct option *longopts, int *longindex);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       getopt():
           _POSIX_C_SOURCE >= 2 || _XOPEN_SOURCE

       getopt_long(), getopt_long_only():
           _GNU_SOURCE

DESCRIPTION
       The getopt() function parses the command-line arguments.  Its arguments
       argc  and argv are the argument count and array as passed to the main()
       function on program invocation.  An element of argv  that  starts  with
       '-' (and is not exactly "-" or "--") is an option element.  The charac‐
       ters of this element (aside from the initial '-')  are  option  charac‐
       ters.   If  getopt() is called repeatedly, it returns successively each
       of the option characters from each of the option elements.

       The variable optind is the index of the next element to be processed in
       argv.  The system initializes this value to 1.  The caller can reset it
       to 1 to restart scanning of the same argv, or when scanning a new argu‐
       ment vector.

       If  getopt() finds another option character, it returns that character,
       updating the external variable optind and a static variable nextchar so
       that  the  next call to getopt() can resume the scan with the following
       option character or argv-element.

       If there are no more option  characters,  getopt()  returns  -1.   Then
       optind  is  the  index in argv of the first argv-element that is not an
       option.

       optstring is a string containing the legitimate option  characters.   A
       legitimate  option character is any visible one byte ascii(7) character
       (for which isgraph(3) would return nonzero) that is not  '-',  ':',  or
       ';'.   If  such a character is followed by a colon, the option requires
       an argument, so getopt() places a pointer to the following text in  the
       same  argv-element,  or  the text of the following argv-element, in op‐
       targ.  Two colons mean an option takes an optional  arg;  if  there  is
       text  in the current argv-element (i.e., in the same word as the option
       name itself, for example, "-oarg"), then it is returned in optarg, oth‐
       erwise  optarg  is set to zero.  This is a GNU extension.  If optstring
       contains W followed by a semicolon, then -W foo is treated as the  long
       option --foo.  (The -W option is reserved by POSIX.2 for implementation
       extensions.)  This behavior is a GNU extension, not available with  li‐
       braries before glibc 2.

       By default, getopt() permutes the contents of argv as it scans, so that
       eventually all the nonoptions are at the end.  Two other scanning modes
       are  also  implemented.   If the first character of optstring is '+' or
       the environment variable POSIXLY_CORRECT is set, then option processing
       stops  as  soon  as a nonoption argument is encountered.  If '+' is not
       the first character of optstring, it is treated as a normal option.  If
       POSIXLY_CORRECT  behaviour is required in this case optstring will con‐
       tain two '+' symbols.  If the first character of optstring is '-', then
       each nonoption argv-element is handled as if it were the argument of an
       option with character code 1.  (This is  used  by  programs  that  were
       written to expect options and other argv-elements in any order and that
       care about the ordering of the two.)  The special argument "--"  forces
       an end of option-scanning regardless of the scanning mode.

       While  processing the option list, getopt() can detect two kinds of er‐
       rors: (1) an option character that was not specified in  optstring  and
       (2)  a  missing option argument (i.e., an option at the end of the com‐
       mand line without an expected argument).  Such errors are  handled  and
       reported as follows:

       •  By  default,  getopt()  prints  an  error message on standard error,
          places the erroneous option character in optopt, and returns '?'  as
          the function result.

       •  If  the  caller  has  set  the  global variable opterr to zero, then
          getopt() does not print an error message.  The caller can  determine
          that there was an error by testing whether the function return value
          is '?'.  (By default, opterr has a nonzero value.)

       •  If the first character (following any optional '+' or '-'  described
          above)  of  optstring  is a colon (':'), then getopt() likewise does
          not print an error message.  In addition, it returns ':' instead  of
          '?'  to  indicate a missing option argument.  This allows the caller
          to distinguish the two different types of errors.

   getopt_long() and getopt_long_only()
       The getopt_long() function works like getopt() except that it also  ac‐
       cepts  long  options, started with two dashes.  (If the program accepts
       only long options, then optstring  should  be  specified  as  an  empty
       string  (""),  not  NULL.)  Long option names may be abbreviated if the
       abbreviation is unique or is an exact match for some defined option.  A
       long  option  may  take  a  parameter, of the form --arg=param or --arg
       param.

       longopts is a pointer to the first element of an array of struct option
       declared in <getopt.h> as

           struct option {
               const char *name;
               int         has_arg;
               int        *flag;
               int         val;
           };

       The meanings of the different fields are:

       name   is the name of the long option.

       has_arg
              is:  no_argument (or 0) if the option does not take an argument;
              required_argument (or 1) if the option requires an argument;  or
              optional_argument  (or  2) if the option takes an optional argu‐
              ment.

       flag   specifies how results are returned for a long option.   If  flag
              is  NULL,  then  getopt_long()  returns  val.  (For example, the
              calling program may set val to the equivalent short option char‐
              acter.)   Otherwise, getopt_long() returns 0, and flag points to
              a variable which is set to val if the option is found, but  left
              unchanged if the option is not found.

       val    is  the value to return, or to load into the variable pointed to
              by flag.

       The last element of the array has to be filled with zeros.

       If longindex is not NULL, it points to a variable which is set  to  the
       index of the long option relative to longopts.

       getopt_long_only()  is  like getopt_long(), but '-' as well as "--" can
       indicate a long option.  If an option that starts with '-'  (not  "--")
       doesn't  match  a  long  option,  but  does match a short option, it is
       parsed as a short option instead.

RETURN VALUE
       If an option was successfully found, then getopt() returns  the  option
       character.  If all command-line options have been parsed, then getopt()
       returns -1.  If getopt() encounters an option character that was not in
       optstring, then '?' is returned.  If getopt() encounters an option with
       a missing argument, then the return value depends on the first  charac‐
       ter  in optstring: if it is ':', then ':' is returned; otherwise '?' is
       returned.

       getopt_long() and getopt_long_only() also return the  option  character
       when  a short option is recognized.  For a long option, they return val
       if flag is NULL, and 0 otherwise.  Error and -1 returns are the same as
       for  getopt(), plus '?' for an ambiguous match or an extraneous parame‐
       ter.

ENVIRONMENT
       POSIXLY_CORRECT
              If this is set, then option processing stops as soon as a nonop‐
              tion argument is encountered.

       _<PID>_GNU_nonoption_argv_flags_
              This  variable  was  used by bash(1) 2.0 to communicate to glibc
              which arguments are the results of  wildcard  expansion  and  so
              should  not be considered as options.  This behavior was removed
              in bash(1) 2.01, but the support remains in glibc.

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌───────────────────┬───────────────┬──────────────────────────────────┐
       │Interface          │ Attribute     │ Value                            │
       ├───────────────────┼───────────────┼──────────────────────────────────┤
       │getopt(),          │ Thread safety │ MT-Unsafe race:getopt env        │
       │getopt_long(),     │               │                                  │
       │getopt_long_only() │               │                                  │
       └───────────────────┴───────────────┴──────────────────────────────────┘

VERSIONS
       POSIX specifies that the argv array argument should be const, but these
       functions permute its elements unless the environment  variable  POSIX‐
       LY_CORRECT is set.  const is used in the actual prototype to be compat‐
       ible with other systems; however, this page doesn't show the qualifier,
       to avoid confusing readers.

STANDARDS
       getopt()
              POSIX.1-2008.

       getopt_long()
       getopt_long_only()
              GNU.

              The use of '+' and '-' in optstring is a GNU extension.

HISTORY
       getopt()
              POSIX.1-2001, and POSIX.2.

       On  some  older  implementations,  getopt()  was declared in <stdio.h>.
       SUSv1 permitted the declaration  to  appear  in  either  <unistd.h>  or
       <stdio.h>.   POSIX.1-1996  marked the use of <stdio.h> for this purpose
       as LEGACY.  POSIX.1-2001 does not require the declaration to appear  in
       <stdio.h>.

NOTES
       A  program  that  scans  multiple argument vectors, or rescans the same
       vector more than once, and wants to make use of GNU extensions such  as
       '+'  and  '-' at the start of optstring, or changes the value of POSIX‐
       LY_CORRECT between  scans,  must  reinitialize  getopt()  by  resetting
       optind  to  0, rather than the traditional value of 1.  (Resetting to 0
       forces the  invocation  of  an  internal  initialization  routine  that
       rechecks POSIXLY_CORRECT and checks for GNU extensions in optstring.)

       Command-line  arguments  are parsed in strict order meaning that an op‐
       tion requiring an argument will consume the next  argument,  regardless
       of  whether that argument is the correctly specified option argument or
       simply the next option (in the scenario the user mis-specifies the com‐
       mand  line).   For  example, if optstring is specified as "1n:" and the
       user specifies the command line arguments  incorrectly  as  prog -n -1,
       the  -n  option  will be given the optarg value "-1", and the -1 option
       will be considered to have not been specified.

EXAMPLES
   getopt()
       The following trivial example program uses getopt() to handle two  pro‐
       gram  options:  -n, with no associated value; and -t val, which expects
       an associated value.

       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>

       int
       main(int argc, char *argv[])
       {
           int flags, opt;
           int nsecs, tfnd;

           nsecs = 0;
           tfnd = 0;
           flags = 0;
           while ((opt = getopt(argc, argv, "nt:")) != -1) {
               switch (opt) {
               case 'n':
                   flags = 1;
                   break;
               case 't':
                   nsecs = atoi(optarg);
                   tfnd = 1;
                   break;
               default: /* '?' */
                   fprintf(stderr, "Usage: %s [-t nsecs] [-n] name\n",
                           argv[0]);
                   exit(EXIT_FAILURE);
               }
           }

           printf("flags=%d; tfnd=%d; nsecs=%d; optind=%d\n",
                  flags, tfnd, nsecs, optind);

           if (optind >= argc) {
               fprintf(stderr, "Expected argument after options\n");
               exit(EXIT_FAILURE);
           }

           printf("name argument = %s\n", argv[optind]);

           /* Other code omitted */

           exit(EXIT_SUCCESS);
       }

   getopt_long()
       The following example program illustrates the use of getopt_long() with
       most of its features.

       #include <getopt.h>
       #include <stdio.h>     /* for printf */
       #include <stdlib.h>    /* for exit */

       int
       main(int argc, char *argv[])
       {
           int c;
           int digit_optind = 0;

           while (1) {
               int this_option_optind = optind ? optind : 1;
               int option_index = 0;
               static struct option long_options[] = {
                   {"add",     required_argument, 0,  0 },
                   {"append",  no_argument,       0,  0 },
                   {"delete",  required_argument, 0,  0 },
                   {"verbose", no_argument,       0,  0 },
                   {"create",  required_argument, 0, 'c'},
                   {"file",    required_argument, 0,  0 },
                   {0,         0,                 0,  0 }
               };

               c = getopt_long(argc, argv, "abc:d:012",
                               long_options, &option_index);
               if (c == -1)
                   break;

               switch (c) {
               case 0:
                   printf("option %s", long_options[option_index].name);
                   if (optarg)
                       printf(" with arg %s", optarg);
                   printf("\n");
                   break;

               case '0':
               case '1':
               case '2':
                   if (digit_optind != 0 && digit_optind != this_option_optind)
                     printf("digits occur in two different argv-elements.\n");
                   digit_optind = this_option_optind;
                   printf("option %c\n", c);
                   break;

               case 'a':
                   printf("option a\n");
                   break;

               case 'b':
                   printf("option b\n");
                   break;

               case 'c':
                   printf("option c with value '%s'\n", optarg);
                   break;

               case 'd':
                   printf("option d with value '%s'\n", optarg);
                   break;

               case '?':
                   break;

               default:
                   printf("?? getopt returned character code 0%o ??\n", c);
               }
           }

           if (optind < argc) {
               printf("non-option ARGV-elements: ");
               while (optind < argc)
                   printf("%s ", argv[optind++]);
               printf("\n");
           }

           exit(EXIT_SUCCESS);
       }

SEE ALSO
       getopt(1), getsubopt(3)

Linux man-pages 6.04              2023-04-03                         getopt(3)
GETOPT(3P)                 POSIX Programmer's Manual                GETOPT(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       getopt, optarg, opterr, optind, optopt — command option parsing

SYNOPSIS
       #include <unistd.h>

       int getopt(int argc, char * const argv[], const char *optstring);
       extern char *optarg;
       extern int opterr, optind, optopt;

DESCRIPTION
       The getopt() function is a command-line parser that shall follow  Util‐
       ity  Syntax Guidelines 3, 4, 5, 6, 7, 9, and 10 in the Base Definitions
       volume of POSIX.1‐2017, Section 12.2, Utility Syntax Guidelines.

       The parameters argc and argv are the argument count and argument  array
       as  passed  to main() (see exec()).  The argument optstring is a string
       of recognized option characters;  if  a  character  is  followed  by  a
       <colon>, the option takes an argument. All option characters allowed by
       Utility Syntax Guideline 3 are allowed in optstring.   The  implementa‐
       tion may accept other characters as an extension.

       The variable optind is the index of the next element of the argv[] vec‐
       tor to be processed. It shall be initialized to 1 by  the  system,  and
       getopt()  shall update it when it finishes with each element of argv[].
       If the application sets optind to zero before calling getopt(), the be‐
       havior  is unspecified. When an element of argv[] contains multiple op‐
       tion characters, it is unspecified how getopt()  determines  which  op‐
       tions have already been processed.

       The getopt() function shall return the next option character (if one is
       found) from argv that matches a character in optstring, if there is one
       that  matches.  If the option takes an argument, getopt() shall set the
       variable optarg to point to the option-argument as follows:

        1. If the option was the last character in the string pointed to by an
           element  of  argv,  then  optarg  shall contain the next element of
           argv, and optind shall be incremented by 2. If the resulting  value
           of optind is greater than argc, this indicates a missing option-ar‐
           gument, and getopt() shall return an error indication.

        2. Otherwise, optarg shall point to the string  following  the  option
           character  in that element of argv, and optind shall be incremented
           by 1.

       If, when getopt() is called:

            argv[optind]  is a null pointer
           *argv[optind]  is not the character -
            argv[optind]  points to the string "-"

       getopt() shall return -1 without changing optind.  If:

           argv[optind]   points to the string "--"

       getopt() shall return -1 after incrementing optind.

       If getopt() encounters an option character that  is  not  contained  in
       optstring,  it shall return the <question-mark> ('?')  character. If it
       detects a missing option-argument, it shall return the <colon>  charac‐
       ter  (':')  if  the  first  character  of optstring was a <colon>, or a
       <question-mark> character ('?')  otherwise. In  either  case,  getopt()
       shall  set  the variable optopt to the option character that caused the
       error. If the application has not set the variable opterr to 0 and  the
       first  character  of  optstring  is  not a <colon>, getopt() shall also
       print a diagnostic message to stderr in the format  specified  for  the
       getopts  utility,  unless  the  stderr  stream has wide orientation, in
       which case the behavior is undefined.

       The getopt() function need not be thread-safe.

RETURN VALUE
       The getopt() function shall return the next option character  specified
       on the command line.

       A  <colon>  (':') shall be returned if getopt() detects a missing argu‐
       ment and the first character of optstring was a <colon> (':').

       A <question-mark> ('?')  shall be returned if  getopt()  encounters  an
       option character not in optstring or detects a missing argument and the
       first character of optstring was not a <colon> (':').

       Otherwise, getopt() shall return -1 when all command line  options  are
       parsed.

ERRORS
       If  the  application  has  not  set the variable opterr to 0, the first
       character of optstring is not a <colon>, and a write error occurs while
       getopt() is printing a diagnostic message to stderr, then the error in‐
       dicator for stderr shall be set; but getopt() shall still  succeed  and
       the value of errno after getopt() is unspecified.

       The following sections are informative.

EXAMPLES
   Parsing Command Line Options
       The  following  code fragment shows how you might process the arguments
       for a utility that can take the mutually-exclusive options a and b  and
       the options f and o, both of which require arguments:

           #include <stdio.h>
           #include <stdlib.h>
           #include <unistd.h>

           int
           main(int argc, char *argv[ ])
           {
               int c;
               int bflg = 0, aflg = 0, errflg = 0;
               char *ifile;
               char *ofile;
               . . .
               while ((c = getopt(argc, argv, ":abf:o:")) != -1) {
                   switch(c) {
                   case 'a':
                       if (bflg)
                           errflg++;
                       else
                           aflg++;
                       break;
                   case 'b':
                       if (aflg)
                           errflg++;
                       else
                           bflg++;
                       break;
                   case 'f':
                       ifile = optarg;
                       break;
                   case 'o':
                       ofile = optarg;
                       break;
                   case ':':       /* -f or -o without operand */
                       fprintf(stderr,
                           "Option -%c requires an operand\n", optopt);
                       errflg++;
                       break;
                   case '?':
                       fprintf(stderr,
                           "Unrecognized option: '-%c'\n", optopt);
                       errflg++;
                   }
               }
               if (errflg) {
                   fprintf(stderr, "usage: . . . ");
                   exit(2);
               }
               for ( ; optind < argc; optind++) {
                   if (access(argv[optind], R_OK)) {
               . . .
           }

       This code accepts any of the following as equivalent:

           cmd -ao arg path path
           cmd -a -o arg path path
           cmd -o arg -a path path
           cmd -a -o arg -- path path
           cmd -a -oarg path path
           cmd -aoarg path path

   Selecting Options from the Command Line
       The  following  example  selects the type of database routines the user
       wants to use based on the Options argument.

           #include <unistd.h>
           #include <string.h>
           ...
           const char *Options = "hdbtl";
           ...
           int dbtype, c;
           char *st;
           ...
           dbtype = 0;
           while ((c = getopt(argc, argv, Options)) != -1) {
               if ((st = strchr(Options, c)) != NULL) {
                   dbtype = st - Options;
                   break;
               }
           }

APPLICATION USAGE
       The getopt() function is only required to support option characters in‐
       cluded  in  Utility Syntax Guideline 3. Many historical implementations
       of getopt() support other characters as options. This is an allowed ex‐
       tension,  but applications that use extensions are not maximally porta‐
       ble. Note that support for multi-byte option characters is only  possi‐
       ble when such characters can be represented as type int.

       Applications  which  use  wide-character  output  functions with stderr
       should ensure that any calls to getopt() do not write to stderr, either
       by  setting opterr to 0 or by ensuring the first character of optstring
       is always a <colon>.

       While ferror(stderr) may be used to detect failures to write a diagnos‐
       tic to stderr when getopt() returns '?', the value of errno is unspeci‐
       fied in such a condition. Applications desiring more control over  han‐
       dling  write  failures should set opterr to 0 and independently perform
       output to stderr, rather than relying on getopt() to do the output.

RATIONALE
       The optopt variable represents historical practice and allows  the  ap‐
       plication to obtain the identity of the invalid option.

       The  description  has been written to make it clear that getopt(), like
       the getopts utility, deals with option-arguments whether separated from
       the  option by <blank> characters or not. Note that the requirements on
       getopt() and getopts are more stringent than the Utility Syntax  Guide‐
       lines.

       The  getopt()  function  shall  return  -1,  rather  than  EOF, so that
       <stdio.h> is not required.

       The special significance of a <colon> as the first  character  of  opt‐
       string makes getopt() consistent with the getopts utility. It allows an
       application to make a distinction between a missing argument and an in‐
       correct  option  letter without having to examine the option letter. It
       is true that a missing argument can only be detected in one  case,  but
       that is a case that has to be considered.

FUTURE DIRECTIONS
       None.

SEE ALSO
       exec

       The Base Definitions volume of POSIX.1‐2017, Section 12.2, Utility Syn‐
       tax Guidelines, <unistd.h>

       The Shell and Utilities volume of POSIX.1‐2017, getopts

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                           GETOPT(3P)
