std::forward_list< _Tp, _AlLibrary)Functionstd::forward_list< _Tp, _Alloc >(3)

NAME
       std::forward_list< _Tp, _Alloc > - A standard container with linear
       time access to elements, and fixed time insertion/deletion at any point
       in the sequence.

SYNOPSIS
       #include <forward_list>

       Inherits std::_Fwd_list_base< _Tp, _Alloc >.

   Public Types
       typedef _Alloc allocator_type
       typedef _Base::const_iterator const_iterator
       typedef _Alloc_traits::const_pointer const_pointer
       typedef const value_type & const_reference
       typedef std::ptrdiff_t difference_type
       typedef _Base::iterator iterator
       typedef _Alloc_traits::pointer pointer
       typedef value_type & reference
       typedef std::size_t size_type
       typedef _Tp value_type

   Public Member Functions
       forward_list ()=default
           Creates a forward_list with no elements.
       template<typename _InputIterator , typename  =
           std::_RequireInputIter<_InputIterator>> forward_list
           (_InputIterator __first, _InputIterator __last, const _Alloc
           &__al=_Alloc())
           Builds a forward_list from a range.
       forward_list (const _Alloc &__al) noexcept
           Creates a forward_list with no elements.
       forward_list (const forward_list &__list)
           The forward_list copy constructor.
       forward_list (const forward_list &__list, const __type_identity_t<
           _Alloc > &__al)
           Copy constructor with allocator argument.
       forward_list (forward_list &&)=default
           The forward_list move constructor.
       forward_list (forward_list &&__list, const __type_identity_t< _Alloc >
           &__al) noexcept(_Node_alloc_traits::_S_always_equal())
           Move constructor with allocator argument.
       forward_list (size_type __n, const _Alloc &__al=_Alloc())
           Creates a forward_list with default constructed elements.
       forward_list (size_type __n, const _Tp &__value, const _Alloc
           &__al=_Alloc())
           Creates a forward_list with copies of an exemplar element.
       forward_list (std::initializer_list< _Tp > __il, const _Alloc
           &__al=_Alloc())
           Builds a forward_list from an initializer_list.
       ~forward_list () noexcept
           The forward_list dtor.
       template<typename _InputIterator , typename  =
           std::_RequireInputIter<_InputIterator>> void assign (_InputIterator
           __first, _InputIterator __last)
           Assigns a range to a forward_list.
       void assign (size_type __n, const _Tp &__val)
           Assigns a given value to a forward_list.
       void assign (std::initializer_list< _Tp > __il)
           Assigns an initializer_list to a forward_list.
       const_iterator before_begin () const noexcept
       iterator before_begin () noexcept
       const_iterator begin () const noexcept
       iterator begin () noexcept
       const_iterator cbefore_begin () const noexcept
       const_iterator cbegin () const noexcept
       const_iterator cend () const noexcept
       void clear () noexcept
           Erases all the elements.
       template<typename... _Args> iterator emplace_after (const_iterator
           __pos, _Args &&... __args)
           Constructs object in forward_list after the specified iterator.
       template<typename... _Args> reference emplace_front (_Args &&...
           __args)
           Constructs object in forward_list at the front of the list.
       bool empty () const noexcept
       const_iterator end () const noexcept
       iterator end () noexcept
       iterator erase_after (const_iterator __pos)
           Removes the element pointed to by the iterator following pos.
       iterator erase_after (const_iterator __pos, const_iterator __last)
           Remove a range of elements.
       reference front ()
       const_reference front () const
       allocator_type get_allocator () const noexcept
           Get a copy of the memory allocation object.
       template<typename _InputIterator , typename  =
           std::_RequireInputIter<_InputIterator>> iterator insert_after
           (const_iterator __pos, _InputIterator __first, _InputIterator
           __last)
           Inserts a range into the forward_list.
       iterator insert_after (const_iterator __pos, _Tp &&__val)
       iterator insert_after (const_iterator __pos, const _Tp &__val)
           Inserts given value into forward_list after specified iterator.
       iterator insert_after (const_iterator __pos, size_type __n, const _Tp
           &__val)
           Inserts a number of copies of given data into the forward_list.
       iterator insert_after (const_iterator __pos, std::initializer_list< _Tp
           > __il)
           Inserts the contents of an initializer_list into forward_list after
           the specified iterator.
       size_type max_size () const noexcept
       void merge (forward_list &&__list)
           Merge sorted lists.
       template<typename _Comp > void merge (forward_list &&__list, _Comp
           __comp)
           Merge sorted lists according to comparison function.
       void merge (forward_list &__list)
       template<typename _Comp > void merge (forward_list &__list, _Comp
           __comp)
       forward_list & operator= (const forward_list &__list)
           The forward_list assignment operator.
       forward_list & operator= (forward_list &&__list)
           noexcept(_Node_alloc_traits::_S_nothrow_move())
           The forward_list move assignment operator.
       forward_list & operator= (std::initializer_list< _Tp > __il)
           The forward_list initializer list assignment operator.
       void pop_front ()
           Removes first element.
       void push_front (_Tp &&__val)
       void push_front (const _Tp &__val)
           Add data to the front of the forward_list.
       __remove_return_type remove (const _Tp &__val)
           Remove all elements equal to value.
       template<typename _Pred > __remove_return_type remove_if (_Pred __pred)
           Remove all elements satisfying a predicate.
       template<typename _Pred > auto remove_if (_Pred __pred) ->
           __remove_return_type
       void resize (size_type __sz)
           Resizes the forward_list to the specified number of elements.
       void resize (size_type __sz, const value_type &__val)
           Resizes the forward_list to the specified number of elements.
       void reverse () noexcept
           Reverse the elements in list.
       void sort ()
           Sort the elements of the list.
       template<typename _Comp > void sort (_Comp __comp)
           Sort the forward_list using a comparison function.
       void splice_after (const_iterator __pos, forward_list &&__list)
           noexcept
           Insert contents of another forward_list.
       void splice_after (const_iterator __pos, forward_list &&__list,
           const_iterator __i) noexcept
           Insert element from another forward_list.
       void splice_after (const_iterator __pos, forward_list &__list) noexcept
       void splice_after (const_iterator __pos, forward_list &__list,
           const_iterator __i) noexcept
       void swap (forward_list &__list) noexcept
           Swaps data with another forward_list.
       __remove_return_type unique ()
           Remove consecutive duplicate elements.
       template<typename _BinPred > __remove_return_type unique (_BinPred
           __binary_pred)
           Remove consecutive elements satisfying a predicate.
       template<typename _BinPred > auto unique (_BinPred __binary_pred) ->
           __remove_return_type

           void splice_after (const_iterator __pos, forward_list &&,
               const_iterator __before, const_iterator __last) noexcept
               Insert range from another forward_list.
           void splice_after (const_iterator __pos, forward_list &,
               const_iterator __before, const_iterator __last) noexcept
               Insert range from another forward_list.

Detailed Description
   template<typename _Tp, typename _Alloc = allocator<_Tp>>
       class std::forward_list< _Tp, _Alloc >"A standard container with linear
       time access to elements, and fixed time insertion/deletion at any point
       in the sequence.

       Template Parameters
           _Tp Type of element.
           _Alloc Allocator type, defaults to allocator<_Tp>.

       Meets the requirements of a container, a sequence, including the
       optional sequence requirements with the exception of at and operator[].

       This is a singly linked list. Traversal up the list requires linear
       time, but adding and removing elements (or nodes) is done in constant
       time, regardless of where the change takes place. Unlike std::vector
       and std::deque, random-access iterators are not provided, so
       subscripting ( [] ) access is not allowed. For algorithms which only
       need sequential access, this lack makes no difference.

       Also unlike the other standard containers, std::forward_list provides
       specialized algorithms unique to linked lists, such as splicing,
       sorting, and in-place reversal.

       Definition at line 431 of file forward_list.

Member Typedef Documentation
   template<typename _Tp , typename _Alloc  = allocator<_Tp>> typedef _Alloc
       std::forward_list< _Tp, _Alloc >::allocator_type
       Definition at line 460 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> typedef
       _Base::const_iterator std::forward_list< _Tp, _Alloc >::const_iterator
       Definition at line 457 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> typedef
       _Alloc_traits::const_pointer std::forward_list< _Tp, _Alloc
       >::const_pointer
       Definition at line 452 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> typedef const
       value_type& std::forward_list< _Tp, _Alloc >::const_reference
       Definition at line 454 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> typedef
       std::ptrdiff_t std::forward_list< _Tp, _Alloc >::difference_type
       Definition at line 459 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> typedef
       _Base::iterator std::forward_list< _Tp, _Alloc >::iterator
       Definition at line 456 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> typedef
       _Alloc_traits::pointer std::forward_list< _Tp, _Alloc >::pointer
       Definition at line 451 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> typedef
       value_type& std::forward_list< _Tp, _Alloc >::reference
       Definition at line 453 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> typedef
       std::size_t std::forward_list< _Tp, _Alloc >::size_type
       Definition at line 458 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> typedef _Tp
       std::forward_list< _Tp, _Alloc >::value_type
       Definition at line 450 of file forward_list.

Constructor & Destructor Documentation
   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       std::forward_list< _Tp, _Alloc >::forward_list () [default]
       Creates a forward_list with no elements.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       std::forward_list< _Tp, _Alloc >::forward_list (const _Alloc & __al)
       [inline],  [explicit],  [noexcept]
       Creates a forward_list with no elements.

       Parameters
           __al An allocator object.

       Definition at line 474 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       std::forward_list< _Tp, _Alloc >::forward_list (const forward_list<
       _Tp, _Alloc > & __list, const __type_identity_t< _Alloc > & __al)
       [inline]
       Copy constructor with allocator argument.

       Parameters
           __list Input list to copy.
           __al An allocator object.

       Definition at line 483 of file forward_list.

       References std::forward_list< _Tp, _Alloc >::begin(), and
       std::forward_list< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       std::forward_list< _Tp, _Alloc >::forward_list (forward_list< _Tp,
       _Alloc > && __list, const __type_identity_t< _Alloc > & __al) [inline],
       [noexcept]
       Move constructor with allocator argument.

       Parameters
           __list Input list to move.
           __al An allocator object.

       Definition at line 512 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       std::forward_list< _Tp, _Alloc >::forward_list (size_type __n, const
       _Alloc & __al = _Alloc()) [inline],  [explicit]
       Creates a forward_list with default constructed elements.

       Parameters
           __n The number of elements to initially create.
           __al An allocator object.

       This constructor creates the forward_list with __n default constructed
       elements.

       Definition at line 528 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       std::forward_list< _Tp, _Alloc >::forward_list (size_type __n, const
       _Tp & __value, const _Alloc & __al = _Alloc()) [inline]
       Creates a forward_list with copies of an exemplar element.

       Parameters
           __n The number of elements to initially create.
           __value An element to copy.
           __al An allocator object.

       This constructor fills the forward_list with __n copies of __value.

       Definition at line 541 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       template<typename _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> std::forward_list< _Tp, _Alloc
       >::forward_list (_InputIterator __first, _InputIterator __last, const
       _Alloc & __al = _Alloc()) [inline]
       Builds a forward_list from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.
           __al An allocator object.

       Create a forward_list consisting of copies of the elements from
       [__first,__last). This is linear in N (where N is
       distance(__first,__last)).

       Definition at line 558 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       std::forward_list< _Tp, _Alloc >::forward_list (const forward_list<
       _Tp, _Alloc > & __list) [inline]
       The forward_list copy constructor.

       Parameters
           __list A forward_list of identical element and allocator types.

       Definition at line 568 of file forward_list.

       References std::forward_list< _Tp, _Alloc >::begin(), and
       std::forward_list< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       std::forward_list< _Tp, _Alloc >::forward_list (forward_list< _Tp,
       _Alloc > &&) [default]
       The forward_list move constructor.

       Parameters
           __list A forward_list of identical element and allocator types.

       The newly-created forward_list contains the exact contents of the moved
       instance. The contents of the moved instance are a valid, but
       unspecified forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       std::forward_list< _Tp, _Alloc >::forward_list (std::initializer_list<
       _Tp > __il, const _Alloc & __al = _Alloc()) [inline]
       Builds a forward_list from an initializer_list.

       Parameters
           __il An initializer_list of value_type.
           __al An allocator object.

       Create a forward_list consisting of copies of the elements in the
       initializer_list __il. This is linear in __il.size().

       Definition at line 592 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       std::forward_list< _Tp, _Alloc >::~forward_list () [inline],
       [noexcept]
       The forward_list dtor.

       Definition at line 600 of file forward_list.

Member Function Documentation
   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       template<typename _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> void std::forward_list< _Tp,
       _Alloc >::assign (_InputIterator __first, _InputIterator __last)
       [inline]
       Assigns a range to a forward_list.

       Parameters
           __first An input iterator.
           __last An input iterator.

       This function fills a forward_list with copies of the elements in the
       range [__first,__last).

       Note that the assignment completely changes the forward_list and that
       the number of elements of the resulting forward_list is the same as the
       number of elements assigned.

       Definition at line 668 of file forward_list.

       Referenced by std::forward_list< _Tp, _Alloc >::assign(), and
       std::forward_list< _Tp, _Alloc >::operator=().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::assign (size_type __n, const _Tp &
       __val) [inline]
       Assigns a given value to a forward_list.

       Parameters
           __n Number of elements to be assigned.
           __val Value to be assigned.

       This function fills a forward_list with __n copies of the given value.
       Note that the assignment completely changes the forward_list, and that
       the resulting forward_list has __n elements.

       Definition at line 685 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::assign (std::initializer_list< _Tp >
       __il) [inline]
       Assigns an initializer_list to a forward_list.

       Parameters
           __il An initializer_list of value_type.

       Replace the contents of the forward_list with copies of the elements in
       the initializer_list __il. This is linear in il.size().

       Definition at line 697 of file forward_list.

       References std::forward_list< _Tp, _Alloc >::assign().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> const_iterator
       std::forward_list< _Tp, _Alloc >::before_begin () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points before the first
       element in the forward_list. Iteration is done in ordinary element
       order.

       Definition at line 723 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> iterator
       std::forward_list< _Tp, _Alloc >::before_begin () [inline],  [noexcept]
       Returns a read/write iterator that points before the first element in
       the forward_list. Iteration is done in ordinary element order.

       Definition at line 713 of file forward_list.

       Referenced by std::forward_list< _Tp, _Alloc >::insert_after().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> const_iterator
       std::forward_list< _Tp, _Alloc >::begin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the forward_list. Iteration is done in ordinary element
       order.

       Definition at line 742 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> iterator
       std::forward_list< _Tp, _Alloc >::begin () [inline],  [noexcept]
       Returns a read/write iterator that points to the first element in the
       forward_list. Iteration is done in ordinary element order.

       Definition at line 732 of file forward_list.

       Referenced by std::forward_list< _Tp, _Alloc >::forward_list().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> const_iterator
       std::forward_list< _Tp, _Alloc >::cbefore_begin () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points before the first
       element in the forward_list. Iteration is done in ordinary element
       order.

       Definition at line 782 of file forward_list.

       Referenced by std::forward_list< _Tp, _Alloc >::emplace_front(),
       std::forward_list< _Tp, _Alloc >::push_front(), and std::forward_list<
       _Tp, _Alloc >::remove().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> const_iterator
       std::forward_list< _Tp, _Alloc >::cbegin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the forward_list. Iteration is done in ordinary element
       order.

       Definition at line 772 of file forward_list.

       Referenced by std::operator<(), std::forward_list< _Tp, _Alloc
       >::operator=(), and std::operator==().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> const_iterator
       std::forward_list< _Tp, _Alloc >::cend () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the forward_list. Iteration is done in ordinary element
       order.

       Definition at line 792 of file forward_list.

       Referenced by std::operator<(), std::forward_list< _Tp, _Alloc
       >::operator=(), and std::operator==().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::clear () [inline],  [noexcept]
       Erases all the elements. Note that this function only erases the
       elements, and that if the elements themselves are pointers, the
       pointed-to memory is not touched in any way. Managing the pointer is
       the user's responsibility.

       Definition at line 1109 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       template<typename... _Args> iterator std::forward_list< _Tp, _Alloc
       >::emplace_after (const_iterator __pos, _Args &&... __args) [inline]
       Constructs object in forward_list after the specified iterator.

       Parameters
           __pos A const_iterator into the forward_list.
           __args Arguments.

       Returns
           An iterator that points to the inserted data.

       This function will insert an object of type T constructed with
       T(std::forward<Args>(args)...) after the specified location. Due to the
       nature of a forward_list this operation can be done in constant time,
       and does not invalidate iterators and references.

       Definition at line 918 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       template<typename... _Args> reference std::forward_list< _Tp, _Alloc
       >::emplace_front (_Args &&... __args) [inline]
       Constructs object in forward_list at the front of the list.

       Parameters
           __args Arguments.

       This function will insert an object of type Tp constructed with
       Tp(std::forward<Args>(args)...) at the front of the list Due to the
       nature of a forward_list this operation can be done in constant time,
       and does not invalidate iterators and references.

       Definition at line 857 of file forward_list.

       References std::forward_list< _Tp, _Alloc >::cbefore_begin(), and
       std::forward_list< _Tp, _Alloc >::front().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> bool
       std::forward_list< _Tp, _Alloc >::empty () const [inline],  [noexcept]
       Returns true if the forward_list is empty. (Thus begin() would equal
       end().)

       Definition at line 801 of file forward_list.

       Referenced by std::forward_list< _Tp, _Alloc >::insert_after().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> const_iterator
       std::forward_list< _Tp, _Alloc >::end () const [inline],  [noexcept]
       Returns a read-only iterator that points one past the last element in
       the forward_list. Iteration is done in ordinary element order.

       Definition at line 762 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> iterator
       std::forward_list< _Tp, _Alloc >::end () [inline],  [noexcept]
       Returns a read/write iterator that points one past the last element in
       the forward_list. Iteration is done in ordinary element order.

       Definition at line 752 of file forward_list.

       Referenced by std::forward_list< _Tp, _Alloc >::forward_list(), and
       std::forward_list< _Tp, _Alloc >::insert_after().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> iterator
       std::forward_list< _Tp, _Alloc >::erase_after (const_iterator __pos)
       [inline]
       Removes the element pointed to by the iterator following pos.

       Parameters
           __pos Iterator pointing before element to be erased.

       Returns
           An iterator pointing to the element following the one that was
           erased, or end() if no such element exists.

       This function will erase the element at the given position and thus
       shorten the forward_list by one.

       Due to the nature of a forward_list this operation can be done in
       constant time, and only invalidates iterators/references to the element
       being removed. The user is also cautioned that this function only
       erases the element, and that if the element is itself a pointer, the
       pointed-to memory is not touched in any way. Managing the pointer is
       the user's responsibility.

       Definition at line 1021 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> iterator
       std::forward_list< _Tp, _Alloc >::erase_after (const_iterator __pos,
       const_iterator __last) [inline]
       Remove a range of elements.

       Parameters
           __pos Iterator pointing before the first element to be erased.
           __last Iterator pointing to one past the last element to be erased.

       Returns
           @ __last.

       This function will erase the elements in the range (__pos,__last) and
       shorten the forward_list accordingly.

       This operation is linear time in the size of the range and only
       invalidates iterators/references to the element being removed. The user
       is also cautioned that this function only erases the elements, and that
       if the elements themselves are pointers, the pointed-to memory is not
       touched in any way. Managing the pointer is the user's responsibility.

       Definition at line 1044 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> reference
       std::forward_list< _Tp, _Alloc >::front () [inline]
       Returns a read/write reference to the data at the first element of the
       forward_list.

       Definition at line 820 of file forward_list.

       Referenced by std::forward_list< _Tp, _Alloc >::emplace_front().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> const_reference
       std::forward_list< _Tp, _Alloc >::front () const [inline]
       Returns a read-only (constant) reference to the data at the first
       element of the forward_list.

       Definition at line 832 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> allocator_type
       std::forward_list< _Tp, _Alloc >::get_allocator () const [inline],
       [noexcept]
       Get a copy of the memory allocation object.

       Definition at line 702 of file forward_list.

   template<typename _Tp , typename _Alloc > template<typename _InputIterator
       , typename > forward_list< _Tp, _Alloc >::iterator
       forward_list::insert_after (const_iterator __pos, _InputIterator
       __first, _InputIterator __last)
       Inserts a range into the forward_list.

       Parameters
           __pos An iterator into the forward_list.
           __first An input iterator.
           __last An input iterator.

       Returns
           An iterator pointing to the last inserted element or __pos if
           __first == __last.

       This function will insert copies of the data in the range
       [__first,__last) into the forward_list after the location specified by
       __pos.

       This operation is linear in the number of elements inserted and does
       not invalidate iterators and references.

       Definition at line 270 of file forward_list.tcc.

       References std::forward_list< _Tp, _Alloc >::before_begin(),
       std::forward_list< _Tp, _Alloc >::empty(), and std::forward_list< _Tp,
       _Alloc >::end().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> iterator
       std::forward_list< _Tp, _Alloc >::insert_after (const_iterator __pos,
       _Tp && __val) [inline]
       Definition at line 942 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> iterator
       std::forward_list< _Tp, _Alloc >::insert_after (const_iterator __pos,
       const _Tp & __val) [inline]
       Inserts given value into forward_list after specified iterator.

       Parameters
           __pos An iterator into the forward_list.
           __val Data to be inserted.

       Returns
           An iterator that points to the inserted data.

       This function will insert a copy of the given value after the specified
       location. Due to the nature of a forward_list this operation can be
       done in constant time, and does not invalidate iterators and
       references.

       Definition at line 935 of file forward_list.

       Referenced by std::forward_list< _Tp, _Alloc >::insert_after().

   template<typename _Tp , typename _Alloc > forward_list< _Tp, _Alloc
       >::iterator forward_list::insert_after (const_iterator __pos, size_type
       __n, const _Tp & __val)
       Inserts a number of copies of given data into the forward_list.

       Parameters
           __pos An iterator into the forward_list.
           __n Number of elements to be inserted.
           __val Data to be inserted.

       Returns
           An iterator pointing to the last inserted copy of val or pos if n
           == 0.

       This function will insert a specified number of copies of the given
       data after the location specified by pos.

       This operation is linear in the number of elements inserted and does
       not invalidate iterators and references.

       Definition at line 255 of file forward_list.tcc.

       References std::forward_list< _Tp, _Alloc >::before_begin(), and
       std::forward_list< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> iterator
       std::forward_list< _Tp, _Alloc >::insert_after (const_iterator __pos,
       std::initializer_list< _Tp > __il) [inline]
       Inserts the contents of an initializer_list into forward_list after the
       specified iterator.

       Parameters
           __pos An iterator into the forward_list.
           __il An initializer_list of value_type.

       Returns
           An iterator pointing to the last inserted element or __pos if __il
           is empty.

       This function will insert copies of the data in the initializer_list
       __il into the forward_list before the location specified by __pos.

       This operation is linear in the number of elements inserted and does
       not invalidate iterators and references.

       Definition at line 1000 of file forward_list.

       References std::forward_list< _Tp, _Alloc >::insert_after().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> size_type
       std::forward_list< _Tp, _Alloc >::max_size () const [inline],
       [noexcept]
       Returns the largest possible number of elements of forward_list.

       Definition at line 809 of file forward_list.

       References __gnu_cxx::__alloc_traits< _Alloc, typename >::max_size().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::merge (forward_list< _Tp, _Alloc > &&
       __list) [inline]
       Merge sorted lists.

       Parameters
           __list Sorted list to merge.

       Assumes that both list and this list are sorted according to
       operator<(). Merges elements of __list into this list in sorted order,
       leaving __list empty when complete. Elements in this list precede
       elements in __list that are equal.

       Definition at line 1265 of file forward_list.

       References std::forward_list< _Tp, _Alloc >::merge(), and std::move().

       Referenced by std::forward_list< _Tp, _Alloc >::merge().

   template<typename _Tp , typename _Alloc > template<typename _Comp > void
       forward_list::merge (forward_list< _Tp, _Alloc > && __list, _Comp
       __comp)
       Merge sorted lists according to comparison function.

       Parameters
           __list Sorted list to merge.
           __comp Comparison function defining sort order.

       Assumes that both __list and this list are sorted according to comp.
       Merges elements of __list into this list in sorted order, leaving
       __list empty when complete. Elements in this list precede elements in
       __list that are equivalent according to comp().

       Definition at line 367 of file forward_list.tcc.

       References std::__addressof(), and std::move().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::merge (forward_list< _Tp, _Alloc > &
       __list) [inline]
       Definition at line 1269 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       template<typename _Comp > void std::forward_list< _Tp, _Alloc >::merge
       (forward_list< _Tp, _Alloc > & __list, _Comp __comp) [inline]
       Definition at line 1289 of file forward_list.

   template<typename _Tp , typename _Alloc > forward_list< _Tp, _Alloc > &
       forward_list::operator= (const forward_list< _Tp, _Alloc > & __list)
       The forward_list assignment operator.

       Parameters
           __list A forward_list of identical element and allocator types.

       All the elements of __list are copied.

       Whether the allocator is copied depends on the allocator traits.

       Definition at line 139 of file forward_list.tcc.

       References std::__addressof(), std::forward_list< _Tp, _Alloc
       >::cbegin(), and std::forward_list< _Tp, _Alloc >::cend().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> forward_list &
       std::forward_list< _Tp, _Alloc >::operator= (forward_list< _Tp, _Alloc
       > && __list) [inline],  [noexcept]
       The forward_list move assignment operator.

       Parameters
           __list A forward_list of identical element and allocator types.

       The contents of __list are moved into this forward_list (without
       copying, if the allocators permit it).

       Afterwards __list is a valid, but unspecified forward_list

       Whether the allocator is moved depends on the allocator traits.

       Definition at line 628 of file forward_list.

       References std::move().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> forward_list &
       std::forward_list< _Tp, _Alloc >::operator= (std::initializer_list< _Tp
       > __il) [inline]
       The forward_list initializer list assignment operator.

       Parameters
           __il An initializer_list of value_type.

       Replace the contents of the forward_list with copies of the elements in
       the initializer_list __il. This is linear in __il.size().

       Definition at line 647 of file forward_list.

       References std::forward_list< _Tp, _Alloc >::assign().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::pop_front () [inline]
       Removes first element. This is a typical stack operation. It shrinks
       the forward_list by one. Due to the nature of a forward_list this
       operation can be done in constant time, and only invalidates
       iterators/references to the element being removed.

       Note that no data is returned, and if the first element's data is
       needed, it should be retrieved before pop_front() is called.

       Definition at line 900 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::push_front (_Tp && __val) [inline]
       Definition at line 884 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::push_front (const _Tp & __val)
       [inline]
       Add data to the front of the forward_list.

       Parameters
           __val Data to be added.

       This is a typical stack operation. The function creates an element at
       the front of the forward_list and assigns the given data to it. Due to
       the nature of a forward_list this operation can be done in constant
       time, and does not invalidate iterators and references.

       Definition at line 877 of file forward_list.

       References std::forward_list< _Tp, _Alloc >::cbefore_begin().

   template<typename _Tp , typename _Alloc > auto forward_list::remove (const
       _Tp & __val)
       Remove all elements equal to value.

       Parameters
           __val The value to remove.

       Removes every element in the list equal to __val. Remaining elements
       stay in list order. Note that this function only erases the elements,
       and that if the elements themselves are pointers, the pointed-to memory
       is not touched in any way. Managing the pointer is the user's
       responsibility.

       Definition at line 289 of file forward_list.tcc.

       References std::forward_list< _Tp, _Alloc >::cbefore_begin(), and
       std::forward_list< _Tp, _Alloc >::splice_after().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       template<typename _Pred > __remove_return_type std::forward_list< _Tp,
       _Alloc >::remove_if (_Pred __pred)
       Remove all elements satisfying a predicate.

       Parameters
           __pred Unary predicate function or object.

       Removes every element in the list for which the predicate returns true.
       Remaining elements stay in list order. Note that this function only
       erases the elements, and that if the elements themselves are pointers,
       the pointed-to memory is not touched in any way. Managing the pointer
       is the user's responsibility.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       template<typename _Pred > auto std::forward_list< _Tp, _Alloc
       >::remove_if (_Pred __pred) -> __remove_return_type
             "

       Definition at line 312 of file forward_list.tcc.

   template<typename _Tp , typename _Alloc > void forward_list::resize
       (size_type __sz)
       Resizes the forward_list to the specified number of elements.

       Parameters
           __sz Number of elements the forward_list should contain.

       This function will resize the forward_list to the specified number of
       elements. If the number is smaller than the forward_list's current
       number of elements the forward_list is truncated, otherwise the
       forward_list is extended and the new elements are default constructed.

       Definition at line 181 of file forward_list.tcc.

   template<typename _Tp , typename _Alloc > void forward_list::resize
       (size_type __sz, const value_type & __val)
       Resizes the forward_list to the specified number of elements.

       Parameters
           __sz Number of elements the forward_list should contain.
           __val Data with which new elements should be populated.

       This function will resize the forward_list to the specified number of
       elements. If the number is smaller than the forward_list's current
       number of elements the forward_list is truncated, otherwise the
       forward_list is extended and new elements are populated with given
       data.

       Definition at line 200 of file forward_list.tcc.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::reverse () [inline],  [noexcept]
       Reverse the elements in list. Reverse the order of elements in the list
       in linear time.

       Definition at line 1318 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::sort () [inline]
       Sort the elements of the list. Sorts the elements of this list in NlogN
       time. Equivalent elements remain in list order.

       Definition at line 1299 of file forward_list.

       References std::forward_list< _Tp, _Alloc >::sort().

       Referenced by std::forward_list< _Tp, _Alloc >::sort().

   template<typename _Tp , class _Alloc > template<typename _Comp > void
       forward_list::sort (_Comp __comp)
       Sort the forward_list using a comparison function. Sorts the elements
       of this list in NlogN time. Equivalent elements remain in list order.

       Definition at line 416 of file forward_list.tcc.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::splice_after (const_iterator __pos,
       forward_list< _Tp, _Alloc > &&, const_iterator __before, const_iterator
       __last) [inline],  [noexcept]
       Insert range from another forward_list.

       Parameters
           __pos Iterator referencing the element to insert after.
           __list Source list.
           __before Iterator referencing before the start of range in list.
           __last Iterator referencing the end of range in list.

       Removes elements in the range (__before,__last) and inserts them after
       __pos in constant time.

       Undefined if __pos is in (__before,__last).

       Definition at line 1170 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::splice_after (const_iterator __pos,
       forward_list< _Tp, _Alloc > && __list) [inline],  [noexcept]
       Insert contents of another forward_list.

       Parameters
           __pos Iterator referencing the element to insert after.
           __list Source list.

       The elements of list are inserted in constant time after the element
       referenced by pos. list becomes an empty list.

       Requires this != x.

       Definition at line 1126 of file forward_list.

       Referenced by std::forward_list< _Tp, _Alloc >::remove().

   template<typename _Tp , typename _Alloc > void forward_list::splice_after
       (const_iterator __pos, forward_list< _Tp, _Alloc > && __list,
       const_iterator __i) [noexcept]
       Insert element from another forward_list.

       Parameters
           __pos Iterator referencing the element to insert after.
           __list Source list.
           __i Iterator referencing the element before the element to move.

       Removes the element in list list referenced by i and inserts it into
       the current list after pos.

       Definition at line 238 of file forward_list.tcc.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::splice_after (const_iterator __pos,
       forward_list< _Tp, _Alloc > &, const_iterator __before, const_iterator
       __last) [inline],  [noexcept]
       Insert range from another forward_list.

       Parameters
           __pos Iterator referencing the element to insert after.
           __list Source list.
           __before Iterator referencing before the start of range in list.
           __last Iterator referencing the end of range in list.

       Removes elements in the range (__before,__last) and inserts them after
       __pos in constant time.

       Undefined if __pos is in (__before,__last).

       Definition at line 1175 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::splice_after (const_iterator __pos,
       forward_list< _Tp, _Alloc > & __list) [inline],  [noexcept]
       Definition at line 1133 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::splice_after (const_iterator __pos,
       forward_list< _Tp, _Alloc > & __list, const_iterator __i) [inline],
       [noexcept]
       Definition at line 1151 of file forward_list.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>> void
       std::forward_list< _Tp, _Alloc >::swap (forward_list< _Tp, _Alloc > &
       __list) [inline],  [noexcept]
       Swaps data with another forward_list.

       Parameters
           __list A forward_list of the same element and allocator types.

       This exchanges the elements between two lists in constant time. Note
       that the global std::swap() function is specialized such that
       std::swap(l1,l2) will feed to this function.

       Whether the allocators are swapped depends on the allocator traits.

       Definition at line 1063 of file forward_list.

       References std::swap().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       __remove_return_type std::forward_list< _Tp, _Alloc >::unique ()
       [inline]
       Remove consecutive duplicate elements. For each consecutive set of
       elements with the same value, remove all but the first one. Remaining
       elements stay in list order. Note that this function only erases the
       elements, and that if the elements themselves are pointers, the
       pointed-to memory is not touched in any way. Managing the pointer is
       the user's responsibility.

       Definition at line 1234 of file forward_list.

       References std::forward_list< _Tp, _Alloc >::unique().

       Referenced by std::forward_list< _Tp, _Alloc >::unique().

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       template<typename _BinPred > __remove_return_type std::forward_list<
       _Tp, _Alloc >::unique (_BinPred __binary_pred)
       Remove consecutive elements satisfying a predicate.

       Parameters
           __binary_pred Binary predicate function or object.

       For each consecutive set of elements [first,last) that satisfy
       predicate(first,i) where i is an iterator in [first,last), remove all
       but the first one. Remaining elements stay in list order. Note that
       this function only erases the elements, and that if the elements
       themselves are pointers, the pointed-to memory is not touched in any
       way. Managing the pointer is the user's responsibility.

   template<typename _Tp , typename _Alloc  = allocator<_Tp>>
       template<typename _BinPred > auto std::forward_list< _Tp, _Alloc
       >::unique (_BinPred __binary_pred) -> __remove_return_type
             "

       Definition at line 335 of file forward_list.tcc.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Feb 1 2std::forward_list< _Tp, _Alloc >(3)
