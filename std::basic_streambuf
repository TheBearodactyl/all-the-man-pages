std::basic_streambuf< _CharLibraryiFstd::basic_streambuf< _CharT, _Traits >(3)

NAME
       std::basic_streambuf< _CharT, _Traits > - The actual work of input and
       output (interface).

SYNOPSIS
       Inherited by std::basic_filebuf< _CharT, encoding_char_traits< _CharT >
       >, std::basic_filebuf< _CharT, std::char_traits< _CharT > >,
       std::basic_filebuf< char_type, traits_type >,
       __gnu_cxx::stdio_sync_filebuf< _CharT, _Traits >, std::basic_filebuf<
       _CharT, _Traits >, std::basic_stringbuf< _CharT, _Traits, _Alloc >, and
       std::wbuffer_convert< _Codecvt, _Elem, _Tr >.

   Public Types

           typedef _CharT char_type
           typedef _Traits traits_type
           typedef traits_type::int_type int_type
           typedef traits_type::pos_type pos_type
           typedef traits_type::off_type off_type

           typedef basic_streambuf< char_type, traits_type > __streambuf_type
               This is a non-standard type.

   Public Member Functions
       virtual ~basic_streambuf ()
           Destructor deallocates no buffer space.
       locale getloc () const
           Locale access.
       streamsize in_avail ()
           Looking ahead into the stream.
       locale pubimbue (const locale &__loc)
           Entry point for imbue().
       int_type sbumpc ()
           Getting the next character.
       int_type sgetc ()
           Getting the next character.
       streamsize sgetn (char_type *__s, streamsize __n)
           Entry point for xsgetn.
       int_type snextc ()
           Getting the next character.
       int_type sputbackc (char_type __c)
           Pushing characters back into the input stream.
       int_type sputc (char_type __c)
           Entry point for all single-character output functions.
       streamsize sputn (const char_type *__s, streamsize __n)
           Entry point for all single-character output functions.
       int_type sungetc ()
           Moving backwards in the input stream.

           basic_streambuf * pubsetbuf (char_type *__s, streamsize __n)
               Entry points for derived buffer functions.
           pos_type pubseekoff (off_type __off, ios_base::seekdir __way,
               ios_base::openmode __mode=ios_base::in|ios_base::out)
               Alters the stream position.
           pos_type pubseekpos (pos_type __sp, ios_base::openmode
               __mode=ios_base::in|ios_base::out)
               Alters the stream position.
           int pubsync ()
               Calls virtual sync function.

   Protected Member Functions
       basic_streambuf ()
           Base constructor.
       basic_streambuf (const basic_streambuf &)
       void __safe_gbump (streamsize __n)
       void __safe_pbump (streamsize __n)
       void gbump (int __n)
           Moving the read position.
       virtual void imbue (const locale &__loc)
           Changes translations.
       basic_streambuf & operator= (const basic_streambuf &)
       virtual int_type overflow (int_type __c=traits_type::eof())
           Consumes data from the buffer; writes to the controlled sequence.
       virtual int_type pbackfail (int_type __c=traits_type::eof())
           Tries to back up the input sequence.
       void pbump (int __n)
           Moving the write position.
       virtual pos_type seekoff (off_type, ios_base::seekdir,
           ios_base::openmode=ios_base::in|ios_base::out)
           Alters the stream positions.
       virtual pos_type seekpos (pos_type,
           ios_base::openmode=ios_base::in|ios_base::out)
           Alters the stream positions.
       virtual basic_streambuf< char_type, _Traits > * setbuf (char_type *,
           streamsize)
           Manipulates the buffer.
       void setg (char_type *__gbeg, char_type *__gnext, char_type *__gend)
           Setting the three read area pointers.
       void setp (char_type *__pbeg, char_type *__pend)
           Setting the three write area pointers.
       virtual streamsize showmanyc ()
           Investigating the data available.
       void swap (basic_streambuf &__sb)
       virtual int sync ()
           Synchronizes the buffer arrays with the controlled sequences.
       virtual int_type uflow ()
           Fetches more data from the controlled sequence.
       virtual int_type underflow ()
           Fetches more data from the controlled sequence.
       virtual streamsize xsgetn (char_type *__s, streamsize __n)
           Multiple character extraction.
       virtual streamsize xsputn (const char_type *__s, streamsize __n)
           Multiple character insertion.

           char_type * eback () const
               Access to the get area.
           char_type * gptr () const
               Access to the get area.
           char_type * egptr () const
               Access to the get area.

           char_type * pbase () const
               Access to the put area.
           char_type * pptr () const
               Access to the put area.
           char_type * epptr () const
               Access to the put area.

   Protected Attributes
       locale _M_buf_locale
           Current locale setting.
       char_type * _M_in_beg
           Start of get area.
       char_type * _M_in_cur
           Current read area.
       char_type * _M_in_end
           End of get area.
       char_type * _M_out_beg
           Start of put area.
       char_type * _M_out_cur
           Current put area.
       char_type * _M_out_end
           End of put area.

   Friends
       template<bool _IsMove, typename _CharT2 > __gnu_cxx::__enable_if<
           __is_char< _CharT2 >::__value, _CharT2 * >::__type __copy_move_a2
           (istreambuf_iterator< _CharT2 >, istreambuf_iterator< _CharT2 >,
           _CharT2 *)
       streamsize __copy_streambufs_eof (basic_streambuf *, basic_streambuf *,
           bool &)
       void __istream_extract (istream &, char *, streamsize)
       template<typename _CharT2 , typename _Distance >
           __gnu_cxx::__enable_if< __is_char< _CharT2 >::__value, void
           >::__type advance (istreambuf_iterator< _CharT2 > &, _Distance)
       class basic_ios< char_type, traits_type >
       class basic_istream< char_type, traits_type >
       class basic_ostream< char_type, traits_type >
       template<typename _CharT2 > __gnu_cxx::__enable_if< __is_char< _CharT2
           >::__value, istreambuf_iterator< _CharT2 > >::__type find
           (istreambuf_iterator< _CharT2 >, istreambuf_iterator< _CharT2 >,
           const _CharT2 &)
       template<typename _CharT2 , typename _Traits2 , typename _Alloc >
           basic_istream< _CharT2, _Traits2 > & getline (basic_istream<
           _CharT2, _Traits2 > &, basic_string< _CharT2, _Traits2, _Alloc > &,
           _CharT2)
       class istreambuf_iterator< char_type, traits_type >
       template<typename _CharT2 , typename _Traits2 , typename _Alloc >
           basic_istream< _CharT2, _Traits2 > & operator>> (basic_istream<
           _CharT2, _Traits2 > &, basic_string< _CharT2, _Traits2, _Alloc > &)
       class ostreambuf_iterator< char_type, traits_type >

Detailed Description
   template<typename _CharT, typename _Traits>
       class std::basic_streambuf< _CharT, _Traits >"The actual work of input
       and output (interface).

       Template Parameters
           _CharT Type of character stream.
           _Traits Traits for character type, defaults to char_traits<_CharT>.

       This is a base class. Derived stream buffers each control a pair of
       character sequences: one for input, and one for output.

       Section [27.5.1] of the standard describes the requirements and
       behavior of stream buffer classes. That section (three paragraphs) is
       reproduced here, for simplicity and accuracy.

       1.  Stream buffers can impose various constraints on the sequences they
           control. Some constraints are:

         • The controlled input sequence can be not readable.

         • The controlled output sequence can be not writable.

         • The controlled sequences can be associated with the contents of
           other representations for character sequences, such as external
           files.

         • The controlled sequences can support operations directly to or from
           associated sequences.

         • The controlled sequences can impose limitations on how the program
           can read characters from a sequence, write characters to a
           sequence, put characters back into an input sequence, or alter the
           stream position.

       2.  Each sequence is characterized by three pointers which, if non-
           null, all point into the same charT array object. The array object
           represents, at any moment, a (sub)sequence of characters from the
           sequence. Operations performed on a sequence alter the values
           stored in these pointers, perform reads and writes directly to or
           from associated sequences, and alter the stream position and
           conversion state as needed to maintain this subsequence
           relationship. The three pointers are:

         • the beginning pointer, or lowest element address in the array
           (called xbeg here);

         • the next pointer, or next element address that is a current
           candidate for reading or writing (called xnext here);

         • the end pointer, or first element address beyond the end of the
           array (called xend here).

       3.  The following semantic constraints shall always apply for any set
           of three pointers for a sequence, using the pointer names given
           immediately above:

         • If xnext is not a null pointer, then xbeg and xend shall also be
           non-null pointers into the same charT array, as described above;
           otherwise, xbeg and xend shall also be null.

         • If xnext is not a null pointer and xnext < xend for an output
           sequence, then a write position is available. In this case, *xnext
           shall be assignable as the next element to write (to put, or to
           store a character value, into the sequence).

         • If xnext is not a null pointer and xbeg < xnext for an input
           sequence, then a putback position is available. In this case,
           xnext[-1] shall have a defined value and is the next (preceding)
           element to store a character that is put back into the input
           sequence.

         • If xnext is not a null pointer and xnext< xend for an input
           sequence, then a read position is available. In this case, *xnext
           shall have a defined value and is the next element to read (to get,
           or to obtain a character value, from the sequence).

       Definition at line 122 of file streambuf.

Member Typedef Documentation
   template<typename _CharT , typename _Traits > typedef
       basic_streambuf<char_type, traits_type> std::basic_streambuf< _CharT,
       _Traits >::__streambuf_type
       This is a non-standard type.

       Definition at line 140 of file streambuf.

   template<typename _CharT , typename _Traits > typedef _CharT
       std::basic_streambuf< _CharT, _Traits >::char_type
       These are standard types. They permit a standardized way of referring
       to names of (or names dependent on) the template parameters, which are
       specific to the implementation.

       Definition at line 131 of file streambuf.

   template<typename _CharT , typename _Traits > typedef traits_type::int_type
       std::basic_streambuf< _CharT, _Traits >::int_type
       These are standard types. They permit a standardized way of referring
       to names of (or names dependent on) the template parameters, which are
       specific to the implementation.

       Definition at line 133 of file streambuf.

   template<typename _CharT , typename _Traits > typedef traits_type::off_type
       std::basic_streambuf< _CharT, _Traits >::off_type
       These are standard types. They permit a standardized way of referring
       to names of (or names dependent on) the template parameters, which are
       specific to the implementation.

       Definition at line 135 of file streambuf.

   template<typename _CharT , typename _Traits > typedef traits_type::pos_type
       std::basic_streambuf< _CharT, _Traits >::pos_type
       These are standard types. They permit a standardized way of referring
       to names of (or names dependent on) the template parameters, which are
       specific to the implementation.

       Definition at line 134 of file streambuf.

   template<typename _CharT , typename _Traits > typedef _Traits
       std::basic_streambuf< _CharT, _Traits >::traits_type
       These are standard types. They permit a standardized way of referring
       to names of (or names dependent on) the template parameters, which are
       specific to the implementation.

       Definition at line 132 of file streambuf.

Constructor & Destructor Documentation
   template<typename _CharT , typename _Traits > virtual std::basic_streambuf<
       _CharT, _Traits >::~basic_streambuf () [inline],  [virtual]
       Destructor deallocates no buffer space.

       Definition at line 202 of file streambuf.

   template<typename _CharT , typename _Traits > std::basic_streambuf< _CharT,
       _Traits >::basic_streambuf () [inline],  [protected]
       Base constructor. Only called from derived constructors, and sets up
       all the buffer data to zero, including the pointers described in the
       basic_streambuf class description. Note that, as a result,

       • the class starts with no read nor write positions available,

       • this is not an error

       Definition at line 468 of file streambuf.

Member Function Documentation
   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::__safe_gbump (streamsize __n) [inline],  [protected]
       Definition at line 800 of file streambuf.

   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::__safe_pbump (streamsize __n) [inline],  [protected]
       Definition at line 803 of file streambuf.

   template<typename _CharT , typename _Traits > char_type *
       std::basic_streambuf< _CharT, _Traits >::eback () const [inline],
       [protected]
       Access to the get area. These functions are only available to other
       protected functions, including derived classes.

       • eback() returns the beginning pointer for the input sequence

       • gptr() returns the next pointer for the input sequence

       • egptr() returns the end pointer for the input sequence

       Definition at line 487 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_beg.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputbackc(), and
       std::basic_streambuf< _CharT, _Traits >::sungetc().

   template<typename _CharT , typename _Traits > char_type *
       std::basic_streambuf< _CharT, _Traits >::egptr () const [inline],
       [protected]
       Access to the get area. These functions are only available to other
       protected functions, including derived classes.

       • eback() returns the beginning pointer for the input sequence

       • gptr() returns the next pointer for the input sequence

       • egptr() returns the end pointer for the input sequence

       Definition at line 493 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_end.

       Referenced by std::basic_streambuf< _CharT, _Traits >::in_avail(),
       std::basic_streambuf< _CharT, _Traits >::sbumpc(),
       std::basic_streambuf< _CharT, _Traits >::sgetc(), std::basic_stringbuf<
       _CharT, _Traits, _Alloc >::showmanyc(), and std::wbuffer_convert<
       _Codecvt, _Elem, _Tr >::underflow().

   template<typename _CharT , typename _Traits > char_type *
       std::basic_streambuf< _CharT, _Traits >::epptr () const [inline],
       [protected]
       Access to the put area. These functions are only available to other
       protected functions, including derived classes.

       • pbase() returns the beginning pointer for the output sequence

       • pptr() returns the next pointer for the output sequence

       • epptr() returns the end pointer for the output sequence

       Definition at line 540 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_end.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputc().

   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::gbump (int __n) [inline],  [protected]
       Moving the read position.

       Parameters
           __n The delta by which to move.

       This just advances the read position without returning any data.

       Definition at line 503 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_cur.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sbumpc(),
       std::basic_streambuf< _CharT, _Traits >::sputbackc(),
       std::basic_streambuf< _CharT, _Traits >::sungetc(), and
       std::basic_streambuf< _CharT, _Traits >::uflow().

   template<typename _CharT , typename _Traits > locale std::basic_streambuf<
       _CharT, _Traits >::getloc () const [inline]
       Locale access.

       Returns
           The current locale in effect.

       If pubimbue(loc) has been called, then the most recent loc is returned.
       Otherwise the global locale in effect at the time of construction is
       returned.

       Definition at line 231 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_buf_locale.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pubimbue().

   template<typename _CharT , typename _Traits > char_type *
       std::basic_streambuf< _CharT, _Traits >::gptr () const [inline],
       [protected]
       Access to the get area. These functions are only available to other
       protected functions, including derived classes.

       • eback() returns the beginning pointer for the input sequence

       • gptr() returns the next pointer for the input sequence

       • egptr() returns the end pointer for the input sequence

       Definition at line 490 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_cur.

       Referenced by std::basic_streambuf< _CharT, _Traits >::in_avail(),
       std::basic_streambuf< _CharT, _Traits >::sbumpc(),
       std::basic_streambuf< _CharT, _Traits >::sgetc(), std::basic_stringbuf<
       _CharT, _Traits, _Alloc >::showmanyc(), std::basic_streambuf< _CharT,
       _Traits >::sputbackc(), std::basic_streambuf< _CharT, _Traits
       >::sungetc(), std::basic_streambuf< _CharT, _Traits >::uflow(), and
       std::wbuffer_convert< _Codecvt, _Elem, _Tr >::underflow().

   template<typename _CharT , typename _Traits > virtual void
       std::basic_streambuf< _CharT, _Traits >::imbue (const locale & __loc)
       [inline],  [protected],  [virtual]
       Changes translations.

       Parameters
           __loc A new locale.

       Translations done during I/O which depend on the current locale are
       changed by this call. The standard adds, Between invocations of this
       function a class derived from streambuf can safely cache results of
       calls to locale functions and to members of facets so obtained.

       Note
           Base class version does nothing.

       Reimplemented in std::basic_filebuf< _CharT, _Traits >,
       std::basic_filebuf< _CharT, encoding_char_traits< _CharT > >,
       std::basic_filebuf< _CharT, std::char_traits< _CharT > >, and
       std::basic_filebuf< char_type, traits_type >.

       Definition at line 581 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pubimbue().

   template<typename _CharT , typename _Traits > streamsize
       std::basic_streambuf< _CharT, _Traits >::in_avail () [inline]
       Looking ahead into the stream.

       Returns
           The number of characters available.

       If a read position is available, returns the number of characters
       available for reading before the buffer must be refilled. Otherwise
       returns the derived showmanyc().

       Definition at line 289 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::egptr(),
       std::basic_streambuf< _CharT, _Traits >::gptr(), and
       std::basic_streambuf< _CharT, _Traits >::showmanyc().

   template<typename _CharT , typename _Traits > virtual int_type
       std::basic_streambuf< _CharT, _Traits >::overflow (int_type __c =
       traits_type::eof()) [inline],  [protected],  [virtual]
       Consumes data from the buffer; writes to the controlled sequence.

       Parameters
           __c An additional character to consume.

       Returns
           eof() to indicate failure, something else (usually __c, or
           not_eof())

       Informally, this function is called when the output buffer is full (or
       does not exist, as buffering need not actually be done). If a buffer
       exists, it is consumed, with some effect on the controlled sequence.
       (Typically, the buffer is written out to the sequence verbatim.) In
       either case, the character c is also written out, if __c is not eof().

       For a formal definition of this function, see a good text such as
       Langer & Kreft, or [27.5.2.4.5]/3-7.

       A functioning output streambuf can be created by overriding only this
       function (no buffer area will be used).

       Note
           Base class version does nothing, returns eof().

       Reimplemented in std::basic_filebuf< _CharT, _Traits >,
       std::basic_filebuf< _CharT, encoding_char_traits< _CharT > >,
       std::basic_filebuf< _CharT, std::char_traits< _CharT > >,
       std::basic_filebuf< char_type, traits_type >,
       __gnu_cxx::stdio_sync_filebuf< _CharT, _Traits >, std::basic_stringbuf<
       _CharT, _Traits, _Alloc >, and std::wbuffer_convert< _Codecvt, _Elem,
       _Tr >.

       Definition at line 773 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputc().

   template<typename _CharT , typename _Traits > virtual int_type
       std::basic_streambuf< _CharT, _Traits >::pbackfail (int_type __c =
       traits_type::eof()) [inline],  [protected],  [virtual]
       Tries to back up the input sequence.

       Parameters
           __c The character to be inserted back into the sequence.

       Returns
           eof() on failure, some other value on success

       Postcondition
           The constraints of gptr(), eback(), and pptr() are the same as for
           underflow().

       Note
           Base class version does nothing, returns eof().

       Reimplemented in std::basic_filebuf< _CharT, _Traits >,
       std::basic_filebuf< _CharT, encoding_char_traits< _CharT > >,
       std::basic_filebuf< _CharT, std::char_traits< _CharT > >,
       std::basic_filebuf< char_type, traits_type >,
       __gnu_cxx::stdio_sync_filebuf< _CharT, _Traits >, and
       std::basic_stringbuf< _CharT, _Traits, _Alloc >.

       Definition at line 729 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputbackc(), and
       std::basic_streambuf< _CharT, _Traits >::sungetc().

   template<typename _CharT , typename _Traits > char_type *
       std::basic_streambuf< _CharT, _Traits >::pbase () const [inline],
       [protected]
       Access to the put area. These functions are only available to other
       protected functions, including derived classes.

       • pbase() returns the beginning pointer for the output sequence

       • pptr() returns the next pointer for the output sequence

       • epptr() returns the end pointer for the output sequence

       Definition at line 534 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_beg.

       Referenced by std::basic_stringbuf< _CharT, _Traits, _Alloc >::str().

   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::pbump (int __n) [inline],  [protected]
       Moving the write position.

       Parameters
           __n The delta by which to move.

       This just advances the write position without returning any data.

       Definition at line 550 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_cur.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputc().

   template<typename _CharT , typename _Traits > char_type *
       std::basic_streambuf< _CharT, _Traits >::pptr () const [inline],
       [protected]
       Access to the put area. These functions are only available to other
       protected functions, including derived classes.

       • pbase() returns the beginning pointer for the output sequence

       • pptr() returns the next pointer for the output sequence

       • epptr() returns the end pointer for the output sequence

       Definition at line 537 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_cur.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputc().

   template<typename _CharT , typename _Traits > locale std::basic_streambuf<
       _CharT, _Traits >::pubimbue (const locale & __loc) [inline]
       Entry point for imbue().

       Parameters
           __loc The new locale.

       Returns
           The previous locale.

       Calls the derived imbue(__loc).

       Definition at line 214 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_buf_locale,
       std::basic_streambuf< _CharT, _Traits >::getloc(), and
       std::basic_streambuf< _CharT, _Traits >::imbue().

   template<typename _CharT , typename _Traits > pos_type
       std::basic_streambuf< _CharT, _Traits >::pubseekoff (off_type __off,
       ios_base::seekdir __way, ios_base::openmode __mode = ios_base::in |
       ios_base::out) [inline]
       Alters the stream position.

       Parameters
           __off Offset.
           __way Value for ios_base::seekdir.
           __mode Value for ios_base::openmode.

       Calls virtual seekoff function.

       Definition at line 256 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::seekoff().

   template<typename _CharT , typename _Traits > pos_type
       std::basic_streambuf< _CharT, _Traits >::pubseekpos (pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out) [inline]
       Alters the stream position.

       Parameters
           __sp Position
           __mode Value for ios_base::openmode.

       Calls virtual seekpos function.

       Definition at line 268 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::seekpos().

   template<typename _CharT , typename _Traits > basic_streambuf *
       std::basic_streambuf< _CharT, _Traits >::pubsetbuf (char_type * __s,
       streamsize __n) [inline]
       Entry points for derived buffer functions. The public versions of
       pubfoo dispatch to the protected derived foo member functions, passing
       the arguments (if any) and returning the result unchanged.

       Definition at line 244 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::setbuf().

   template<typename _CharT , typename _Traits > int std::basic_streambuf<
       _CharT, _Traits >::pubsync () [inline]
       Calls virtual sync function.

       Definition at line 276 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::sync().

       Referenced by std::wbuffer_convert< _Codecvt, _Elem, _Tr >::sync(), and
       std::basic_istream< _CharT, _Traits >::sync().

   template<typename _CharT , typename _Traits > int_type
       std::basic_streambuf< _CharT, _Traits >::sbumpc () [inline]
       Getting the next character.

       Returns
           The next character, or eof.

       If the input read position is available, returns that character and
       increments the read pointer, otherwise calls and returns uflow().

       Definition at line 321 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::egptr(),
       std::basic_streambuf< _CharT, _Traits >::gbump(), std::basic_streambuf<
       _CharT, _Traits >::gptr(), and std::basic_streambuf< _CharT, _Traits
       >::uflow().

       Referenced by std::basic_istream< _CharT, _Traits >::getline(),
       std::istreambuf_iterator< _CharT, _Traits >::operator++(), and
       std::basic_streambuf< _CharT, _Traits >::snextc().

   template<typename _CharT , typename _Traits > virtual pos_type
       std::basic_streambuf< _CharT, _Traits >::seekoff (off_type,
       ios_base::seekdir, ios_base::openmode = ios_base::in | ios_base::out)
       [inline],  [protected],  [virtual]
       Alters the stream positions. Each derived class provides its own
       appropriate behavior.

       Note
           Base class version does nothing, returns a pos_type that represents
           an invalid stream position.

       Reimplemented in std::basic_filebuf< _CharT, _Traits >,
       std::basic_filebuf< _CharT, encoding_char_traits< _CharT > >,
       std::basic_filebuf< _CharT, std::char_traits< _CharT > >,
       std::basic_filebuf< char_type, traits_type >, and std::basic_stringbuf<
       _CharT, _Traits, _Alloc >.

       Definition at line 607 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pubseekoff().

   template<typename _CharT , typename _Traits > virtual pos_type
       std::basic_streambuf< _CharT, _Traits >::seekpos (pos_type,
       ios_base::openmode = ios_base::in | ios_base::out) [inline],
       [protected],  [virtual]
       Alters the stream positions. Each derived class provides its own
       appropriate behavior.

       Note
           Base class version does nothing, returns a pos_type that represents
           an invalid stream position.

       Reimplemented in std::basic_filebuf< _CharT, _Traits >,
       std::basic_filebuf< _CharT, encoding_char_traits< _CharT > >,
       std::basic_filebuf< _CharT, std::char_traits< _CharT > >,
       std::basic_filebuf< char_type, traits_type >, and std::basic_stringbuf<
       _CharT, _Traits, _Alloc >.

       Definition at line 619 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pubseekpos().

   template<typename _CharT , typename _Traits > virtual basic_streambuf<
       char_type, _Traits > * std::basic_streambuf< _CharT, _Traits >::setbuf
       (char_type *, streamsize) [inline],  [protected],  [virtual]
       Manipulates the buffer. Each derived class provides its own appropriate
       behavior. See the next-to-last paragraph of
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering
       for more on this function.

       Note
           Base class version does nothing, returns this.

       Reimplemented in std::basic_filebuf< _CharT, _Traits >,
       std::basic_filebuf< _CharT, encoding_char_traits< _CharT > >,
       std::basic_filebuf< _CharT, std::char_traits< _CharT > >,
       std::basic_filebuf< char_type, traits_type >, and std::basic_stringbuf<
       _CharT, _Traits, _Alloc >.

       Definition at line 596 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pubsetbuf().

   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::setg (char_type * __gbeg, char_type * __gnext,
       char_type * __gend) [inline],  [protected]
       Setting the three read area pointers.

       Parameters
           __gbeg A pointer.
           __gnext A pointer.
           __gend A pointer.

       Postcondition
           __gbeg == eback(), __gnext == gptr(), and __gend == egptr()

       Definition at line 514 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_beg,
       std::basic_streambuf< _CharT, _Traits >::_M_in_cur, and
       std::basic_streambuf< _CharT, _Traits >::_M_in_end.

       Referenced by std::wbuffer_convert< _Codecvt, _Elem, _Tr
       >::wbuffer_convert().

   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::setp (char_type * __pbeg, char_type * __pend)
       [inline],  [protected]
       Setting the three write area pointers.

       Parameters
           __pbeg A pointer.
           __pend A pointer.

       Postcondition
           __pbeg == pbase(), __pbeg == pptr(), and __pend == epptr()

       Definition at line 560 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_beg,
       std::basic_streambuf< _CharT, _Traits >::_M_out_cur, and
       std::basic_streambuf< _CharT, _Traits >::_M_out_end.

       Referenced by std::wbuffer_convert< _Codecvt, _Elem, _Tr
       >::wbuffer_convert().

   template<typename _CharT , typename _Traits > int_type
       std::basic_streambuf< _CharT, _Traits >::sgetc () [inline]
       Getting the next character.

       Returns
           The next character, or eof.

       If the input read position is available, returns that character,
       otherwise calls and returns underflow(). Does not move the read
       position after fetching the character.

       Definition at line 343 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::egptr(),
       std::basic_streambuf< _CharT, _Traits >::gptr(), and
       std::basic_streambuf< _CharT, _Traits >::underflow().

       Referenced by std::basic_istream< _CharT, _Traits >::sentry::sentry(),
       std::basic_istream< _CharT, _Traits >::get(), std::basic_istream<
       _CharT, _Traits >::getline(), std::basic_istream< _CharT, _Traits
       >::ignore(), std::istreambuf_iterator< _CharT, _Traits >::operator++(),
       std::basic_istream< char >::seekg(), and std::basic_streambuf< _CharT,
       _Traits >::snextc().

   template<typename _CharT , typename _Traits > streamsize
       std::basic_streambuf< _CharT, _Traits >::sgetn (char_type * __s,
       streamsize __n) [inline]
       Entry point for xsgetn.

       Parameters
           __s A buffer area.
           __n A count.

       Returns xsgetn(__s,__n). The effect is to fill __s[0] through
       __s[__n-1] with characters from the input sequence, if possible.

       Definition at line 362 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::xsgetn().

   template<typename _CharT , typename _Traits > virtual streamsize
       std::basic_streambuf< _CharT, _Traits >::showmanyc () [inline],
       [protected],  [virtual]
       Investigating the data available.

       Returns
           An estimate of the number of characters available in the input
           sequence, or -1.

       If it returns a positive value, then successive calls to underflow()
       will not return traits::eof() until at least that number of characters
       have been supplied. If showmanyc() returns -1, then calls to
       underflow() or uflow() will fail. [27.5.2.4.3]/1

       Note
           Base class version does nothing, returns zero.

           The standard adds that the intention is not only that the calls [to
           underflow or uflow] will not return eof() but that they will return
           immediately.

           The standard adds that the morphemes of showmanyc are es-how-many-
           see, not show-manic.

       Reimplemented in std::basic_filebuf< _CharT, _Traits >,
       std::basic_filebuf< _CharT, encoding_char_traits< _CharT > >,
       std::basic_filebuf< _CharT, std::char_traits< _CharT > >,
       std::basic_filebuf< char_type, traits_type >, and std::basic_stringbuf<
       _CharT, _Traits, _Alloc >.

       Definition at line 654 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::in_avail().

   template<typename _CharT , typename _Traits > int_type
       std::basic_streambuf< _CharT, _Traits >::snextc () [inline]
       Getting the next character.

       Returns
           The next character, or eof.

       Calls sbumpc(), and if that function returns traits::eof(), so does
       this function. Otherwise, sgetc().

       Definition at line 303 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::sbumpc(), and
       std::basic_streambuf< _CharT, _Traits >::sgetc().

       Referenced by std::basic_istream< _CharT, _Traits >::sentry::sentry(),
       std::basic_istream< _CharT, _Traits >::get(), std::basic_istream<
       _CharT, _Traits >::getline(), and std::basic_istream< char
       >::putback().

   template<typename _CharT , typename _Traits > int_type
       std::basic_streambuf< _CharT, _Traits >::sputbackc (char_type __c)
       [inline]
       Pushing characters back into the input stream.

       Parameters
           __c The character to push back.

       Returns
           The previous character, if possible.

       Similar to sungetc(), but __c is pushed onto the stream instead of the
       previous character. If successful, the next character fetched from the
       input stream will be __c.

       Definition at line 377 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::eback(),
       std::basic_streambuf< _CharT, _Traits >::gbump(), std::basic_streambuf<
       _CharT, _Traits >::gptr(), and std::basic_streambuf< _CharT, _Traits
       >::pbackfail().

       Referenced by std::basic_istream< _CharT, _Traits >::putback().

   template<typename _CharT , typename _Traits > int_type
       std::basic_streambuf< _CharT, _Traits >::sputc (char_type __c) [inline]
       Entry point for all single-character output functions.

       Parameters
           __c A character to output.

       Returns
           __c, if possible.

       One of two public output functions.

       If a write position is available for the output sequence (i.e., the
       buffer is not full), stores __c in that position, increments the
       position, and returns traits::to_int_type(__c). If a write position is
       not available, returns overflow(__c).

       Definition at line 429 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::epptr(),
       std::basic_streambuf< _CharT, _Traits >::overflow(),
       std::basic_streambuf< _CharT, _Traits >::pbump(), and
       std::basic_streambuf< _CharT, _Traits >::pptr().

       Referenced by std::ostreambuf_iterator< _CharT, _Traits >::operator=(),
       and std::wbuffer_convert< _Codecvt, _Elem, _Tr >::overflow().

   template<typename _CharT , typename _Traits > streamsize
       std::basic_streambuf< _CharT, _Traits >::sputn (const char_type * __s,
       streamsize __n) [inline]
       Entry point for all single-character output functions.

       Parameters
           __s A buffer read area.
           __n A count.

       One of two public output functions.

       Returns xsputn(__s,__n). The effect is to write __s[0] through
       __s[__n-1] to the output sequence, if possible.

       Definition at line 455 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::xsputn().

   template<typename _CharT , typename _Traits > int_type
       std::basic_streambuf< _CharT, _Traits >::sungetc () [inline]
       Moving backwards in the input stream.

       Returns
           The previous character, if possible.

       If a putback position is available, this function decrements the input
       pointer and returns that character. Otherwise, calls and returns
       pbackfail(). The effect is to unget the last character gotten.

       Definition at line 402 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::eback(),
       std::basic_streambuf< _CharT, _Traits >::gbump(), std::basic_streambuf<
       _CharT, _Traits >::gptr(), and std::basic_streambuf< _CharT, _Traits
       >::pbackfail().

       Referenced by std::basic_istream< _CharT, _Traits >::unget().

   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::swap (basic_streambuf< _CharT, _Traits > & __sb)
       [inline],  [protected]
       Definition at line 817 of file streambuf.

   template<typename _CharT , typename _Traits > virtual int
       std::basic_streambuf< _CharT, _Traits >::sync () [inline],
       [protected],  [virtual]
       Synchronizes the buffer arrays with the controlled sequences.

       Returns
           -1 on failure.

       Each derived class provides its own appropriate behavior, including the
       definition of failure.

       Note
           Base class version does nothing, returns zero.

       Reimplemented in std::wbuffer_convert< _Codecvt, _Elem, _Tr >,
       __gnu_cxx::stdio_sync_filebuf< _CharT, _Traits >, std::basic_filebuf<
       _CharT, _Traits >, std::basic_filebuf< _CharT, encoding_char_traits<
       _CharT > >, std::basic_filebuf< _CharT, std::char_traits< _CharT > >,
       and std::basic_filebuf< char_type, traits_type >.

       Definition at line 632 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pubsync().

   template<typename _CharT , typename _Traits > virtual int_type
       std::basic_streambuf< _CharT, _Traits >::uflow () [inline],
       [protected],  [virtual]
       Fetches more data from the controlled sequence.

       Returns
           The first character from the pending sequence.

       Informally, this function does the same thing as underflow(), and in
       fact is required to call that function. It also returns the new
       character, like underflow() does. However, this function also moves the
       read position forward by one.

       Reimplemented in __gnu_cxx::stdio_sync_filebuf< _CharT, _Traits >.

       Definition at line 705 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::gbump(),
       std::basic_streambuf< _CharT, _Traits >::gptr(), and
       std::basic_streambuf< _CharT, _Traits >::underflow().

       Referenced by std::basic_streambuf< _CharT, _Traits >::sbumpc().

   template<typename _CharT , typename _Traits > virtual int_type
       std::basic_streambuf< _CharT, _Traits >::underflow () [inline],
       [protected],  [virtual]
       Fetches more data from the controlled sequence.

       Returns
           The first character from the pending sequence.

       Informally, this function is called when the input buffer is exhausted
       (or does not exist, as buffering need not actually be done). If a
       buffer exists, it is refilled. In either case, the next available
       character is returned, or traits::eof() to indicate a null pending
       sequence.

       For a formal definition of the pending sequence, see a good text such
       as Langer & Kreft, or [27.5.2.4.3]/7-14.

       A functioning input streambuf can be created by overriding only this
       function (no buffer area will be used). For an example, see
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html

       Note
           Base class version does nothing, returns eof().

       Reimplemented in std::wbuffer_convert< _Codecvt, _Elem, _Tr >,
       __gnu_cxx::stdio_sync_filebuf< _CharT, _Traits >, std::basic_filebuf<
       _CharT, _Traits >, std::basic_filebuf< _CharT, encoding_char_traits<
       _CharT > >, std::basic_filebuf< _CharT, std::char_traits< _CharT > >,
       std::basic_filebuf< char_type, traits_type >, and std::basic_stringbuf<
       _CharT, _Traits, _Alloc >.

       Definition at line 692 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sgetc(), and
       std::basic_streambuf< _CharT, _Traits >::uflow().

   template<typename _CharT , typename _Traits > streamsize
       std::basic_streambuf< _CharT, _Traits >::xsgetn (char_type * __s,
       streamsize __n) [protected],  [virtual]
       Multiple character extraction.

       Parameters
           __s A buffer area.
           __n Maximum number of characters to assign.

       Returns
           The number of characters assigned.

       Fills __s[0] through __s[__n-1] with characters from the input
       sequence, as if by sbumpc(). Stops when either __n characters have been
       copied, or when traits::eof() would be copied.

       It is expected that derived classes provide a more efficient
       implementation by overriding this definition.

       Reimplemented in std::basic_filebuf< _CharT, _Traits >,
       std::basic_filebuf< _CharT, encoding_char_traits< _CharT > >,
       std::basic_filebuf< _CharT, std::char_traits< _CharT > >, and
       std::basic_filebuf< char_type, traits_type >.

       Definition at line 45 of file streambuf.tcc.

       References std::min().

       Referenced by std::basic_streambuf< _CharT, _Traits >::sgetn().

   template<typename _CharT , typename _Traits > streamsize
       std::basic_streambuf< _CharT, _Traits >::xsputn (const char_type * __s,
       streamsize __n) [protected],  [virtual]
       Multiple character insertion.

       Parameters
           __s A buffer area.
           __n Maximum number of characters to write.

       Returns
           The number of characters written.

       Writes __s[0] through __s[__n-1] to the output sequence, as if by
       sputc(). Stops when either n characters have been copied, or when
       sputc() would return traits::eof().

       It is expected that derived classes provide a more efficient
       implementation by overriding this definition.

       Reimplemented in std::basic_filebuf< _CharT, _Traits >,
       std::basic_filebuf< _CharT, encoding_char_traits< _CharT > >,
       std::basic_filebuf< _CharT, std::char_traits< _CharT > >, and
       std::basic_filebuf< char_type, traits_type >.

       Definition at line 79 of file streambuf.tcc.

       References std::min().

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputn().

Friends And Related Function Documentation
   template<typename _CharT , typename _Traits > streamsize
       __copy_streambufs_eof (basic_streambuf< _CharT, _Traits > * __sbin,
       basic_streambuf< _CharT, _Traits > * __sbout, bool & __ineof) [friend]
       Definition at line 116 of file streambuf.tcc.

   template<typename _CharT , typename _Traits > friend class basic_ios<
       char_type, traits_type > [friend]
       Definition at line 140 of file streambuf.

   template<typename _CharT , typename _Traits > friend class basic_istream<
       char_type, traits_type > [friend]
       Definition at line 140 of file streambuf.

   template<typename _CharT , typename _Traits > friend class basic_ostream<
       char_type, traits_type > [friend]
       Definition at line 140 of file streambuf.

   template<typename _CharT , typename _Traits > friend class
       istreambuf_iterator< char_type, traits_type > [friend]
       Definition at line 140 of file streambuf.

   template<typename _CharT , typename _Traits > friend class
       ostreambuf_iterator< char_type, traits_type > [friend]
       Definition at line 140 of file streambuf.

Member Data Documentation
   template<typename _CharT , typename _Traits > locale std::basic_streambuf<
       _CharT, _Traits >::_M_buf_locale [protected]
       Current locale setting.

       Definition at line 197 of file streambuf.

       Referenced by std::basic_filebuf< _CharT, _Traits >::basic_filebuf(),
       std::basic_streambuf< _CharT, _Traits >::getloc(), and
       std::basic_streambuf< _CharT, _Traits >::pubimbue().

   template<typename _CharT , typename _Traits > char_type*
       std::basic_streambuf< _CharT, _Traits >::_M_in_beg [protected]
       Start of get area.

       Definition at line 189 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::eback(), and
       std::basic_streambuf< _CharT, _Traits >::setg().

   template<typename _CharT , typename _Traits > char_type*
       std::basic_streambuf< _CharT, _Traits >::_M_in_cur [protected]
       Current read area.

       Definition at line 190 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::gbump(),
       std::basic_streambuf< _CharT, _Traits >::gptr(), and
       std::basic_streambuf< _CharT, _Traits >::setg().

   template<typename _CharT , typename _Traits > char_type*
       std::basic_streambuf< _CharT, _Traits >::_M_in_end [protected]
       End of get area.

       Definition at line 191 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::egptr(), and
       std::basic_streambuf< _CharT, _Traits >::setg().

   template<typename _CharT , typename _Traits > char_type*
       std::basic_streambuf< _CharT, _Traits >::_M_out_beg [protected]
       Start of put area.

       Definition at line 192 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pbase(), and
       std::basic_streambuf< _CharT, _Traits >::setp().

   template<typename _CharT , typename _Traits > char_type*
       std::basic_streambuf< _CharT, _Traits >::_M_out_cur [protected]
       Current put area.

       Definition at line 193 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pbump(),
       std::basic_streambuf< _CharT, _Traits >::pptr(), and
       std::basic_streambuf< _CharT, _Traits >::setp().

   template<typename _CharT , typename _Traits > char_type*
       std::basic_streambuf< _CharT, _Traits >::_M_out_end [protected]
       End of put area.

       Definition at line 194 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::epptr(), and
       std::basic_streambuf< _CharT, _Traits >::setp().

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed std::basic_streambuf< _CharT, _Traits >(3)
