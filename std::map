std::map< _Key, _Tp, _CompaLibrarylFstd::map<M_Key, _Tp, _Compare, _Alloc >(3)

NAME
       std::map< _Key, _Tp, _Compare, _Alloc > - A standard container made up
       of (key,value) pairs, which can be retrieved based on a key, in
       logarithmic time.

SYNOPSIS
       #include <map>

   Public Types
       typedef _Alloc allocator_type
       typedef _Rep_type::const_iterator const_iterator
       typedef _Alloc_traits::const_pointer const_pointer
       typedef _Alloc_traits::const_reference const_reference
       typedef _Rep_type::const_reverse_iterator const_reverse_iterator
       typedef _Rep_type::difference_type difference_type
       using insert_return_type = typename _Rep_type::insert_return_type
       typedef _Rep_type::iterator iterator
       typedef _Compare key_compare
       typedef _Key key_type
       typedef _Tp mapped_type
       using node_type = typename _Rep_type::node_type
       typedef _Alloc_traits::pointer pointer
       typedef _Alloc_traits::reference reference
       typedef _Rep_type::reverse_iterator reverse_iterator
       typedef _Rep_type::size_type size_type
       typedef std::pair< const _Key, _Tp > value_type

   Public Member Functions
       map ()=default
           Default constructor creates no elements.
       template<typename _InputIterator > map (_InputIterator __first,
           _InputIterator __last)
           Builds a map from a range.
       template<typename _InputIterator > map (_InputIterator __first,
           _InputIterator __last, const _Compare &__comp, const allocator_type
           &__a=allocator_type())
           Builds a map from a range.
       template<typename _InputIterator > map (_InputIterator __first,
           _InputIterator __last, const allocator_type &__a)
           Allocator-extended range constructor.
       map (const _Compare &__comp, const allocator_type
           &__a=allocator_type())
           Creates a map with no elements.
       map (const allocator_type &__a)
           Allocator-extended default constructor.
       map (const map &)=default
           Map copy constructor.
       map (const map &__m, const __type_identity_t< allocator_type > &__a)
           Allocator-extended copy constructor.
       map (initializer_list< value_type > __l, const _Compare
           &__comp=_Compare(), const allocator_type &__a=allocator_type())
           Builds a map from an initializer_list.
       map (initializer_list< value_type > __l, const allocator_type &__a)
           Allocator-extended initialier-list constructor.
       map (map &&)=default
           Map move constructor.
       map (map &&__m, const __type_identity_t< allocator_type > &__a)
           noexcept(is_nothrow_copy_constructible< _Compare >::value
           &&_Alloc_traits::_S_always_equal())
           Allocator-extended move constructor.
       ~map ()=default
       mapped_type & at (const key_type &__k)
           Access to map data.
       const mapped_type & at (const key_type &__k) const
       const_iterator begin () const noexcept
       iterator begin () noexcept
       const_iterator cbegin () const noexcept
       const_iterator cend () const noexcept
       void clear () noexcept
       const_reverse_iterator crbegin () const noexcept
       const_reverse_iterator crend () const noexcept
       template<typename... _Args> std::pair< iterator, bool > emplace (_Args
           &&... __args)
           Attempts to build and insert a std::pair into the map.
       template<typename... _Args> iterator emplace_hint (const_iterator
           __pos, _Args &&... __args)
           Attempts to build and insert a std::pair into the map.
       bool empty () const noexcept
       const_iterator end () const noexcept
       iterator end () noexcept
       size_type erase (const key_type &__x)
           Erases elements according to the provided key.
       iterator erase (const_iterator __first, const_iterator __last)
           Erases a [first,last) range of elements from a map.
       node_type extract (const key_type &__x)
           Extract a node.
       node_type extract (const_iterator __pos)
           Extract a node.
       allocator_type get_allocator () const noexcept
           Get a copy of the memory allocation object.
       template<typename _InputIterator > void insert (_InputIterator __first,
           _InputIterator __last)
           Template function that attempts to insert a range of elements.
       iterator insert (const_iterator __hint, node_type &&__nh)
           Re-insert an extracted node.
       insert_return_type insert (node_type &&__nh)
           Re-insert an extracted node.
       void insert (std::initializer_list< value_type > __list)
           Attempts to insert a list of std::pairs into the map.
       template<typename _Obj > pair< iterator, bool > insert_or_assign (const
           key_type &__k, _Obj &&__obj)
           Attempts to insert or assign a std::pair into the map.
       template<typename _Obj > iterator insert_or_assign (const_iterator
           __hint, const key_type &__k, _Obj &&__obj)
           Attempts to insert or assign a std::pair into the map.
       template<typename _Obj > iterator insert_or_assign (const_iterator
           __hint, key_type &&__k, _Obj &&__obj)
       template<typename _Obj > pair< iterator, bool > insert_or_assign
           (key_type &&__k, _Obj &&__obj)
       key_compare key_comp () const
       size_type max_size () const noexcept
       template<typename _Cmp2 > void merge (map< _Key, _Tp, _Cmp2, _Alloc >
           &&__source)
       template<typename _Cmp2 > void merge (map< _Key, _Tp, _Cmp2, _Alloc >
           &__source)
       template<typename _Cmp2 > void merge (multimap< _Key, _Tp, _Cmp2,
           _Alloc > &&__source)
       template<typename _Cmp2 > void merge (multimap< _Key, _Tp, _Cmp2,
           _Alloc > &__source)
       map & operator= (const map &)=default
           Map assignment operator.
       map & operator= (initializer_list< value_type > __l)
           Map list assignment operator.
       map & operator= (map &&)=default
           Move assignment operator.
       mapped_type & operator[] (const key_type &__k)
           Subscript ( [] ) access to map data.
       mapped_type & operator[] (key_type &&__k)
       const_reverse_iterator rbegin () const noexcept
       reverse_iterator rbegin () noexcept
       const_reverse_iterator rend () const noexcept
       reverse_iterator rend () noexcept
       size_type size () const noexcept
       void swap (map &__x) noexcept(/*conditional */)
           Swaps data with another map.
       template<typename... _Args> pair< iterator, bool > try_emplace (const
           key_type &__k, _Args &&... __args)
           Attempts to build and insert a std::pair into the map.
       template<typename... _Args> iterator try_emplace (const_iterator
           __hint, const key_type &__k, _Args &&... __args)
           Attempts to build and insert a std::pair into the map.
       template<typename... _Args> iterator try_emplace (const_iterator
           __hint, key_type &&__k, _Args &&... __args)
       template<typename... _Args> pair< iterator, bool > try_emplace
           (key_type &&__k, _Args &&... __args)
       value_compare value_comp () const

           std::pair< iterator, bool > insert (const value_type &__x)
               Attempts to insert a std::pair into the map.
           std::pair< iterator, bool > insert (value_type &&__x)
               Attempts to insert a std::pair into the map.
           template<typename _Pair > __enable_if_t< is_constructible<
               value_type, _Pair >::value, pair< iterator, bool > > insert
               (_Pair &&__x)
               Attempts to insert a std::pair into the map.

           iterator insert (const_iterator __position, const value_type &__x)
               Attempts to insert a std::pair into the map.
           iterator insert (const_iterator __position, value_type &&__x)
               Attempts to insert a std::pair into the map.
           template<typename _Pair > __enable_if_t< is_constructible<
               value_type, _Pair >::value, iterator > insert (const_iterator
               __position, _Pair &&__x)
               Attempts to insert a std::pair into the map.

           iterator erase (const_iterator __position)
               Erases an element from a map.
           _GLIBCXX_ABI_TAG_CXX11 iterator erase (iterator __position)
               Erases an element from a map.

           iterator find (const key_type &__x)
               Tries to locate an element in a map.
           template<typename _Kt > auto find (const _Kt &__x) ->
               decltype(_M_t._M_find_tr(__x))
               Tries to locate an element in a map.

           const_iterator find (const key_type &__x) const
               Tries to locate an element in a map.
           template<typename _Kt > auto find (const _Kt &__x) const ->
               decltype(_M_t._M_find_tr(__x))
               Tries to locate an element in a map.

           size_type count (const key_type &__x) const
               Finds the number of elements with given key.
           template<typename _Kt > auto count (const _Kt &__x) const ->
               decltype(_M_t._M_count_tr(__x))
               Finds the number of elements with given key.

           bool contains (const key_type &__x) const
               Finds whether an element with the given key exists.
           template<typename _Kt > auto contains (const _Kt &__x) const ->
               decltype(_M_t._M_find_tr(__x), void(), true)
               Finds whether an element with the given key exists.

           iterator lower_bound (const key_type &__x)
               Finds the beginning of a subsequence matching given key.
           template<typename _Kt > auto lower_bound (const _Kt &__x) ->
               decltype(iterator(_M_t._M_lower_bound_tr(__x)))
               Finds the beginning of a subsequence matching given key.

           const_iterator lower_bound (const key_type &__x) const
               Finds the beginning of a subsequence matching given key.
           template<typename _Kt > auto lower_bound (const _Kt &__x) const ->
               decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
               Finds the beginning of a subsequence matching given key.

           iterator upper_bound (const key_type &__x)
               Finds the end of a subsequence matching given key.
           template<typename _Kt > auto upper_bound (const _Kt &__x) ->
               decltype(iterator(_M_t._M_upper_bound_tr(__x)))
               Finds the end of a subsequence matching given key.

           const_iterator upper_bound (const key_type &__x) const
               Finds the end of a subsequence matching given key.
           template<typename _Kt > auto upper_bound (const _Kt &__x) const ->
               decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))
               Finds the end of a subsequence matching given key.

           std::pair< iterator, iterator > equal_range (const key_type &__x)
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) ->
               decltype(pair< iterator, iterator
               >(_M_t._M_equal_range_tr(__x)))
               Finds a subsequence matching given key.

           std::pair< const_iterator, const_iterator > equal_range (const
               key_type &__x) const
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) const ->
               decltype(pair< const_iterator, const_iterator
               >(_M_t._M_equal_range_tr(__x)))
               Finds a subsequence matching given key.

   Friends
       template<typename _K1 , typename _T1 , typename _C1 , typename _A1 >
           bool operator< (const map< _K1, _T1, _C1, _A1 > &, const map< _K1,
           _T1, _C1, _A1 > &)
       template<typename _K1 , typename _T1 , typename _C1 , typename _A1 >
           bool operator== (const map< _K1, _T1, _C1, _A1 > &, const map< _K1,
           _T1, _C1, _A1 > &)
       template<typename , typename > struct std::_Rb_tree_merge_helper

Detailed Description
   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
       typename _Alloc = std::allocator<std::pair<const _Key, _Tp> >>
       class std::map< _Key, _Tp, _Compare, _Alloc >"A standard container made
       up of (key,value) pairs, which can be retrieved based on a key, in
       logarithmic time.

       Template Parameters
           _Key Type of key objects.
           _Tp Type of mapped objects.
           _Compare Comparison function object type, defaults to less<_Key>.
           _Alloc Allocator type, defaults to allocator<pair<const _Key, _Tp>.

       Meets the requirements of a container, a reversible container, and an
       associative container (using unique keys). For a map<Key,T> the
       key_type is Key, the mapped_type is T, and the value_type is
       std::pair<const Key,T>.

       Maps support bidirectional iterators.

       The private tree data is declared exactly the same way for map and
       multimap; the distinction is made entirely in how the tree functions
       are called (*_unique versus *_equal, same as the standard).

       Definition at line 100 of file map.

Member Typedef Documentation
   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Alloc std::map< _Key, _Tp, _Compare, _Alloc
       >::allocator_type
       Definition at line 107 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Rep_type::const_iterator std::map< _Key, _Tp,
       _Compare, _Alloc >::const_iterator
       Definition at line 175 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Alloc_traits::const_pointer std::map< _Key, _Tp,
       _Compare, _Alloc >::const_pointer
       Definition at line 171 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Alloc_traits::const_reference std::map< _Key,
       _Tp, _Compare, _Alloc >::const_reference
       Definition at line 173 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Rep_type::const_reverse_iterator std::map< _Key,
       _Tp, _Compare, _Alloc >::const_reverse_iterator
       Definition at line 179 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Rep_type::difference_type std::map< _Key, _Tp,
       _Compare, _Alloc >::difference_type
       Definition at line 177 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> using std::map< _Key, _Tp, _Compare, _Alloc
       >::insert_return_type =  typename _Rep_type::insert_return_type
       Definition at line 183 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Rep_type::iterator std::map< _Key, _Tp,
       _Compare, _Alloc >::iterator
       Definition at line 174 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Compare std::map< _Key, _Tp, _Compare, _Alloc
       >::key_compare
       Definition at line 106 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Key std::map< _Key, _Tp, _Compare, _Alloc
       >::key_type
       Definition at line 103 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Tp std::map< _Key, _Tp, _Compare, _Alloc
       >::mapped_type
       Definition at line 104 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> using std::map< _Key, _Tp, _Compare, _Alloc >::node_type
       =  typename _Rep_type::node_type
       Definition at line 182 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Alloc_traits::pointer std::map< _Key, _Tp,
       _Compare, _Alloc >::pointer
       Definition at line 170 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Alloc_traits::reference std::map< _Key, _Tp,
       _Compare, _Alloc >::reference
       Definition at line 172 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Rep_type::reverse_iterator std::map< _Key, _Tp,
       _Compare, _Alloc >::reverse_iterator
       Definition at line 178 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Rep_type::size_type std::map< _Key, _Tp,
       _Compare, _Alloc >::size_type
       Definition at line 176 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef std::pair<const _Key, _Tp> std::map< _Key, _Tp,
       _Compare, _Alloc >::value_type
       Definition at line 105 of file map.

Constructor & Destructor Documentation
   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::map< _Key, _Tp, _Compare, _Alloc >::map () [default]
       Default constructor creates no elements.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::map< _Key, _Tp, _Compare, _Alloc >::map (const
       _Compare & __comp, const allocator_type & __a = allocator_type())
       [inline],  [explicit]
       Creates a map with no elements.

       Parameters
           __comp A comparison object.
           __a An allocator object.

       Definition at line 204 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::map< _Key, _Tp, _Compare, _Alloc >::map (const map<
       _Key, _Tp, _Compare, _Alloc > &) [default]
       Map copy constructor. Whether the allocator is copied depends on the
       allocator traits.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::map< _Key, _Tp, _Compare, _Alloc >::map (map< _Key,
       _Tp, _Compare, _Alloc > &&) [default]
       Map move constructor. The newly-created map contains the exact contents
       of the moved instance. The moved instance is a valid, but unspecified,
       map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::map< _Key, _Tp, _Compare, _Alloc >::map
       (initializer_list< value_type > __l, const _Compare & __comp =
       _Compare(), const allocator_type & __a = allocator_type()) [inline]
       Builds a map from an initializer_list.

       Parameters
           __l An initializer_list.
           __comp A comparison object.
           __a An allocator object.

       Create a map consisting of copies of the elements in the
       initializer_list __l. This is linear in N if the range is already
       sorted, and NlogN otherwise (where N is __l.size()).

       Definition at line 238 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::map< _Key, _Tp, _Compare, _Alloc >::map (const
       allocator_type & __a) [inline],  [explicit]
       Allocator-extended default constructor.

       Definition at line 246 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::map< _Key, _Tp, _Compare, _Alloc >::map (const map<
       _Key, _Tp, _Compare, _Alloc > & __m, const __type_identity_t<
       allocator_type > & __a) [inline]
       Allocator-extended copy constructor.

       Definition at line 250 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::map< _Key, _Tp, _Compare, _Alloc >::map (map< _Key,
       _Tp, _Compare, _Alloc > && __m, const __type_identity_t< allocator_type
       > & __a) [inline],  [noexcept]
       Allocator-extended move constructor.

       Definition at line 254 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::map< _Key, _Tp, _Compare, _Alloc >::map
       (initializer_list< value_type > __l, const allocator_type & __a)
       [inline]
       Allocator-extended initialier-list constructor.

       Definition at line 260 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _InputIterator > std::map< _Key, _Tp,
       _Compare, _Alloc >::map (_InputIterator __first, _InputIterator __last,
       const allocator_type & __a) [inline]
       Allocator-extended range constructor.

       Definition at line 266 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _InputIterator > std::map< _Key, _Tp,
       _Compare, _Alloc >::map (_InputIterator __first, _InputIterator __last)
       [inline]
       Builds a map from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.

       Create a map consisting of copies of the elements from
       [__first,__last). This is linear in N if the range is already sorted,
       and NlogN otherwise (where N is distance(__first,__last)).

       Definition at line 283 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _InputIterator > std::map< _Key, _Tp,
       _Compare, _Alloc >::map (_InputIterator __first, _InputIterator __last,
       const _Compare & __comp, const allocator_type & __a = allocator_type())
       [inline]
       Builds a map from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.
           __comp A comparison functor.
           __a An allocator object.

       Create a map consisting of copies of the elements from
       [__first,__last). This is linear in N if the range is already sorted,
       and NlogN otherwise (where N is distance(__first,__last)).

       Definition at line 300 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::map< _Key, _Tp, _Compare, _Alloc >::~map ()
       [default]
       The dtor only erases the elements, and note that if the elements
       themselves are pointers, the pointed-to memory is not touched in any
       way. Managing the pointer is the user's responsibility.

Member Function Documentation
   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> mapped_type & std::map< _Key, _Tp, _Compare, _Alloc >::at
       (const key_type & __k) [inline]
       Access to map data.

       Parameters
           __k The key for which data should be retrieved.

       Returns
           A reference to the data whose key is equivalent to __k, if such a
           data is present in the map.

       Exceptions
           std::out_of_range If no such data is present.

       Definition at line 547 of file map.

       References std::map< _Key, _Tp, _Compare, _Alloc >::end(), std::map<
       _Key, _Tp, _Compare, _Alloc >::key_comp(), and std::map< _Key, _Tp,
       _Compare, _Alloc >::lower_bound().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const mapped_type & std::map< _Key, _Tp, _Compare, _Alloc
       >::at (const key_type & __k) const [inline]
       Definition at line 556 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::map< _Key, _Tp, _Compare, _Alloc
       >::begin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first pair
       in the map. Iteration is done in ascending order according to the keys.

       Definition at line 375 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::map< _Key, _Tp, _Compare, _Alloc >::begin
       () [inline],  [noexcept]
       Returns a read/write iterator that points to the first pair in the map.
       Iteration is done in ascending order according to the keys.

       Definition at line 366 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::map< _Key, _Tp, _Compare, _Alloc
       >::cbegin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first pair
       in the map. Iteration is done in ascending order according to the keys.

       Definition at line 439 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::map< _Key, _Tp, _Compare, _Alloc
       >::cend () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       pair in the map. Iteration is done in ascending order according to the
       keys.

       Definition at line 448 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> void std::map< _Key, _Tp, _Compare, _Alloc >::clear ()
       [inline],  [noexcept]
       Erases all elements in a map. Note that this function only erases the
       elements, and that if the elements themselves are pointers, the
       pointed-to memory is not touched in any way. Managing the pointer is
       the user's responsibility.

       Definition at line 1181 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::map< _Key, _Tp,
       _Compare, _Alloc >::contains (const _Kt & __x) const ->
       decltype(_M_t._M_find_tr(__x), void(), true)
             [inline]"

       Finds whether an element with the given key exists.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           True if there is an element with the specified key.

       Definition at line 1287 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> bool std::map< _Key, _Tp, _Compare, _Alloc >::contains
       (const key_type & __x) const [inline]
       Finds whether an element with the given key exists.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           True if there is an element with the specified key.

       Definition at line 1282 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::map< _Key, _Tp,
       _Compare, _Alloc >::count (const _Kt & __x) const ->
       decltype(_M_t._M_count_tr(__x))
             [inline]"

       Finds the number of elements with given key.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           Number of elements with specified key.

       This function only makes sense for multimaps; for map the result will
       either be 0 (not present) or 1 (present).

       Definition at line 1269 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> size_type std::map< _Key, _Tp, _Compare, _Alloc >::count
       (const key_type & __x) const [inline]
       Finds the number of elements with given key.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           Number of elements with specified key.

       This function only makes sense for multimaps; for map the result will
       either be 0 (not present) or 1 (present).

       Definition at line 1263 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_reverse_iterator std::map< _Key, _Tp, _Compare,
       _Alloc >::crbegin () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       pair in the map. Iteration is done in descending order according to the
       keys.

       Definition at line 457 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_reverse_iterator std::map< _Key, _Tp, _Compare,
       _Alloc >::crend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first pair in the map. Iteration is done in descending order
       according to the keys.

       Definition at line 466 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename... _Args> std::pair< iterator, bool >
       std::map< _Key, _Tp, _Compare, _Alloc >::emplace (_Args &&... __args)
       [inline]
       Attempts to build and insert a std::pair into the map.

       Parameters
           __args Arguments used to generate a new pair instance (see
           std::piecewise_contruct for passing arguments to each part of the
           pair constructor).

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted pair, and the second is a bool that is true
           if the pair was actually inserted.

       This function attempts to build and insert a (key, value) pair into the
       map. A map relies on unique keys and thus a pair is only inserted if
       its first element (the key) is not already present in the map.

       Insertion requires logarithmic time.

       Definition at line 586 of file map.

       References std::map< _Key, _Tp, _Compare, _Alloc >::emplace_hint(),
       std::map< _Key, _Tp, _Compare, _Alloc >::end(), std::map< _Key, _Tp,
       _Compare, _Alloc >::key_comp(), and std::map< _Key, _Tp, _Compare,
       _Alloc >::lower_bound().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename... _Args> iterator std::map< _Key, _Tp,
       _Compare, _Alloc >::emplace_hint (const_iterator __pos, _Args &&...
       __args) [inline]
       Attempts to build and insert a std::pair into the map.

       Parameters
           __pos An iterator that serves as a hint as to where the pair should
           be inserted.
           __args Arguments used to generate a new pair instance (see
           std::piecewise_contruct for passing arguments to each part of the
           pair constructor).

       Returns
           An iterator that points to the element with key of the std::pair
           built from __args (may or may not be that std::pair).

       This function is not concerned about whether the insertion took place,
       and thus does not return a boolean like the single-argument emplace()
       does. Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires logarithmic time (if the hint is not taken).

       Definition at line 636 of file map.

       Referenced by std::map< _Key, _Tp, _Compare, _Alloc >::emplace(),
       std::map< _Key, _Tp, _Compare, _Alloc >::insert(), std::map< _Key, _Tp,
       _Compare, _Alloc >::insert_or_assign(), and std::map< _Key, _Tp,
       _Compare, _Alloc >::try_emplace().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> bool std::map< _Key, _Tp, _Compare, _Alloc >::empty ()
       const [inline],  [noexcept]
       Returns true if the map is empty. (Thus begin() would equal end().)

       Definition at line 475 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::map< _Key, _Tp, _Compare, _Alloc
       >::end () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       pair in the map. Iteration is done in ascending order according to the
       keys.

       Definition at line 393 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::map< _Key, _Tp, _Compare, _Alloc >::end ()
       [inline],  [noexcept]
       Returns a read/write iterator that points one past the last pair in the
       map. Iteration is done in ascending order according to the keys.

       Definition at line 384 of file map.

       Referenced by std::map< _Key, _Tp, _Compare, _Alloc >::at(), std::map<
       _Key, _Tp, _Compare, _Alloc >::emplace(), std::map< _Key, _Tp,
       _Compare, _Alloc >::extract(), std::map< _Key, _Tp, _Compare, _Alloc
       >::insert(), std::map< _Key, _Tp, _Compare, _Alloc
       >::insert_or_assign(), std::map< _Key, _Tp, _Compare, _Alloc
       >::operator[](), and std::map< _Key, _Tp, _Compare, _Alloc
       >::try_emplace().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::map< _Key, _Tp,
       _Compare, _Alloc >::equal_range (const _Kt & __x) ->
       decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
             [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       This function probably only makes sense for multimaps.

       Definition at line 1406 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::map< _Key, _Tp,
       _Compare, _Alloc >::equal_range (const _Kt & __x) const ->
       decltype(pair<const_iterator, const_iterator>(
                  _M_t._M_equal_range_tr(__x)))       [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           Pair of read-only (constant) iterators that possibly points to the
           subsequence matching given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       This function probably only makes sense for multimaps.

       Definition at line 1435 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::pair< iterator, iterator > std::map< _Key, _Tp,
       _Compare, _Alloc >::equal_range (const key_type & __x) [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       This function probably only makes sense for multimaps.

       Definition at line 1400 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::pair< const_iterator, const_iterator > std::map<
       _Key, _Tp, _Compare, _Alloc >::equal_range (const key_type & __x) const
       [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           Pair of read-only (constant) iterators that possibly points to the
           subsequence matching given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       This function probably only makes sense for multimaps.

       Definition at line 1429 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> size_type std::map< _Key, _Tp, _Compare, _Alloc >::erase
       (const key_type & __x) [inline]
       Erases elements according to the provided key.

       Parameters
           __x Key of element to be erased.

       Returns
           The number of elements erased.

       This function erases all the elements located by the given key from a
       map. Note that this function only erases the element, and that if the
       element is itself a pointer, the pointed-to memory is not touched in
       any way. Managing the pointer is the user's responsibility.

       Definition at line 1116 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::map< _Key, _Tp, _Compare, _Alloc >::erase
       (const_iterator __first, const_iterator __last) [inline]
       Erases a [first,last) range of elements from a map.

       Parameters
           __first Iterator pointing to the start of the range to be erased.
           __last Iterator pointing to the end of the range to be erased.

       Returns
           The iterator __last.

       This function erases a sequence of elements from a map. Note that this
       function only erases the element, and that if the element is itself a
       pointer, the pointed-to memory is not touched in any way. Managing the
       pointer is the user's responsibility.

       Definition at line 1136 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::map< _Key, _Tp, _Compare, _Alloc >::erase
       (const_iterator __position) [inline]
       Erases an element from a map.

       Parameters
           __position An iterator pointing to the element to be erased.

       Returns
           An iterator pointing to the element immediately following position
           prior to the element being erased. If no such element exists, end()
           is returned.

       This function erases an element, pointed to by the given iterator, from
       a map. Note that this function only erases the element, and that if the
       element is itself a pointer, the pointed-to memory is not touched in
       any way. Managing the pointer is the user's responsibility.

       Definition at line 1079 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> _GLIBCXX_ABI_TAG_CXX11 iterator std::map< _Key, _Tp,
       _Compare, _Alloc >::erase (iterator __position) [inline]
       Erases an element from a map.

       Parameters
           __position An iterator pointing to the element to be erased.

       Returns
           An iterator pointing to the element immediately following position
           prior to the element being erased. If no such element exists, end()
           is returned.

       This function erases an element, pointed to by the given iterator, from
       a map. Note that this function only erases the element, and that if the
       element is itself a pointer, the pointed-to memory is not touched in
       any way. Managing the pointer is the user's responsibility.

       Definition at line 1085 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> node_type std::map< _Key, _Tp, _Compare, _Alloc
       >::extract (const key_type & __x) [inline]
       Extract a node.

       Definition at line 654 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> node_type std::map< _Key, _Tp, _Compare, _Alloc
       >::extract (const_iterator __pos) [inline]
       Extract a node.

       Definition at line 646 of file map.

       References std::map< _Key, _Tp, _Compare, _Alloc >::end().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::map< _Key, _Tp,
       _Compare, _Alloc >::find (const _Kt & __x) ->
       decltype(_M_t._M_find_tr(__x))
             [inline]"

       Tries to locate an element in a map.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after pair. If unsuccessful it returns the past-
       the-end ( end() ) iterator.

       Definition at line 1223 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::map< _Key, _Tp,
       _Compare, _Alloc >::find (const _Kt & __x) const ->
       decltype(_M_t._M_find_tr(__x))
             [inline]"

       Tries to locate an element in a map.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Read-only (constant) iterator pointing to sought-after element, or
           end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns a constant iterator
       pointing to the sought after pair. If unsuccessful it returns the past-
       the-end ( end() ) iterator.

       Definition at line 1248 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::map< _Key, _Tp, _Compare, _Alloc >::find
       (const key_type & __x) [inline]
       Tries to locate an element in a map.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after pair. If unsuccessful it returns the past-
       the-end ( end() ) iterator.

       Definition at line 1217 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::map< _Key, _Tp, _Compare, _Alloc
       >::find (const key_type & __x) const [inline]
       Tries to locate an element in a map.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Read-only (constant) iterator pointing to sought-after element, or
           end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns a constant iterator
       pointing to the sought after pair. If unsuccessful it returns the past-
       the-end ( end() ) iterator.

       Definition at line 1242 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> allocator_type std::map< _Key, _Tp, _Compare, _Alloc
       >::get_allocator () const [inline],  [noexcept]
       Get a copy of the memory allocation object.

       Definition at line 356 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _InputIterator > void std::map< _Key,
       _Tp, _Compare, _Alloc >::insert (_InputIterator __first, _InputIterator
       __last) [inline]
       Template function that attempts to insert a range of elements.

       Parameters
           __first Iterator pointing to the start of the range to be inserted.
           __last Iterator pointing to the end of the range.

       Complexity similar to that of the range constructor.

       Definition at line 941 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Pair > __enable_if_t<
       is_constructible< value_type, _Pair >::value, pair< iterator, bool > >
       std::map< _Key, _Tp, _Compare, _Alloc >::insert (_Pair && __x) [inline]
       Attempts to insert a std::pair into the map.

       Parameters
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted pair, and the second is a bool that is true
           if the pair was actually inserted.

       This function attempts to insert a (key, value) pair into the map. A
       map relies on unique keys and thus a pair is only inserted if its first
       element (the key) is not already present in the map.

       Insertion requires logarithmic time.

       Definition at line 846 of file map.

       References std::map< _Key, _Tp, _Compare, _Alloc >::emplace_hint(),
       std::map< _Key, _Tp, _Compare, _Alloc >::end(), std::map< _Key, _Tp,
       _Compare, _Alloc >::key_comp(), and std::map< _Key, _Tp, _Compare,
       _Alloc >::lower_bound().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::pair< iterator, bool > std::map< _Key, _Tp,
       _Compare, _Alloc >::insert (const value_type & __x) [inline]
       Attempts to insert a std::pair into the map.

       Parameters
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted pair, and the second is a bool that is true
           if the pair was actually inserted.

       This function attempts to insert a (key, value) pair into the map. A
       map relies on unique keys and thus a pair is only inserted if its first
       element (the key) is not already present in the map.

       Insertion requires logarithmic time.

       Definition at line 833 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::map< _Key, _Tp, _Compare, _Alloc >::insert
       (const_iterator __hint, node_type && __nh) [inline]
       Re-insert an extracted node.

       Definition at line 664 of file map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Pair > __enable_if_t<
       is_constructible< value_type, _Pair >::value, iterator > std::map<
       _Key, _Tp, _Compare, _Alloc >::insert (const_iterator __position, _Pair
       && __x) [inline]
       Attempts to insert a std::pair into the map.

       Parameters
           __position An iterator that serves as a hint as to where the pair
           should be inserted.
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the element with key of __x (may or may
           not be the pair passed in).

       This function is not concerned about whether the insertion took place,
       and thus does not return a boolean like the single-argument insert()
       does. Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires logarithmic time (if the hint is not taken).

       Definition at line 923 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::map< _Key, _Tp, _Compare, _Alloc >::insert
       (const_iterator __position, const value_type & __x) [inline]
       Attempts to insert a std::pair into the map.

       Parameters
           __position An iterator that serves as a hint as to where the pair
           should be inserted.
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the element with key of __x (may or may
           not be the pair passed in).

       This function is not concerned about whether the insertion took place,
       and thus does not return a boolean like the single-argument insert()
       does. Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires logarithmic time (if the hint is not taken).

       Definition at line 908 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::map< _Key, _Tp, _Compare, _Alloc >::insert
       (const_iterator __position, value_type && __x) [inline]
       Attempts to insert a std::pair into the map.

       Parameters
           __position An iterator that serves as a hint as to where the pair
           should be inserted.
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the element with key of __x (may or may
           not be the pair passed in).

       This function is not concerned about whether the insertion took place,
       and thus does not return a boolean like the single-argument insert()
       does. Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires logarithmic time (if the hint is not taken).

       Definition at line 918 of file map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> insert_return_type std::map< _Key, _Tp, _Compare, _Alloc
       >::insert (node_type && __nh) [inline]
       Re-insert an extracted node.

       Definition at line 659 of file map.

       References std::move().

       Referenced by std::map< _Key, _Tp, _Compare, _Alloc >::insert(), and
       std::map< _Key, _Tp, _Compare, _Alloc >::operator[]().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> void std::map< _Key, _Tp, _Compare, _Alloc >::insert
       (std::initializer_list< value_type > __list) [inline]
       Attempts to insert a list of std::pairs into the map.

       Parameters
           __list A std::initializer_list<value_type> of pairs to be inserted.

       Complexity similar to that of the range constructor.

       Definition at line 878 of file map.

       References std::map< _Key, _Tp, _Compare, _Alloc >::insert().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::pair< iterator, bool > std::map< _Key, _Tp,
       _Compare, _Alloc >::insert (value_type && __x) [inline]
       Attempts to insert a std::pair into the map.

       Parameters
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted pair, and the second is a bool that is true
           if the pair was actually inserted.

       This function attempts to insert a (key, value) pair into the map. A
       map relies on unique keys and thus a pair is only inserted if its first
       element (the key) is not already present in the map.

       Insertion requires logarithmic time.

       Definition at line 840 of file map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Obj > pair< iterator, bool > std::map<
       _Key, _Tp, _Compare, _Alloc >::insert_or_assign (const key_type & __k,
       _Obj && __obj) [inline]
       Attempts to insert or assign a std::pair into the map.

       Parameters
           __k Key to use for finding a possibly existing pair in the map.
           __obj Argument used to generate the .second for a pair instance.

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted pair, and the second is a bool that is true
           if the pair was actually inserted.

       This function attempts to insert a (key, value) pair into the map. A
       map relies on unique keys and thus a pair is only inserted if its first
       element (the key) is not already present in the map. If the pair was
       already in the map, the .second of the pair is assigned from __obj.

       Insertion requires logarithmic time.

       Definition at line 966 of file map.

       References std::map< _Key, _Tp, _Compare, _Alloc >::emplace_hint(),
       std::map< _Key, _Tp, _Compare, _Alloc >::end(),
       std::forward_as_tuple(), std::map< _Key, _Tp, _Compare, _Alloc
       >::key_comp(), std::map< _Key, _Tp, _Compare, _Alloc >::lower_bound(),
       and std::piecewise_construct.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Obj > iterator std::map< _Key, _Tp,
       _Compare, _Alloc >::insert_or_assign (const_iterator __hint, const
       key_type & __k, _Obj && __obj) [inline]
       Attempts to insert or assign a std::pair into the map.

       Parameters
           __hint An iterator that serves as a hint as to where the pair
           should be inserted.
           __k Key to use for finding a possibly existing pair in the map.
           __obj Argument used to generate the .second for a pair instance.

       Returns
           An iterator that points to the element with key of __x (may or may
           not be the pair passed in).

       This function attempts to insert a (key, value) pair into the map. A
       map relies on unique keys and thus a pair is only inserted if its first
       element (the key) is not already present in the map. If the pair was
       already in the map, the .second of the pair is assigned from __obj.

       Insertion requires logarithmic time.

       Definition at line 1021 of file map.

       References std::map< _Key, _Tp, _Compare, _Alloc >::emplace_hint(),
       std::forward_as_tuple(), and std::piecewise_construct.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Obj > iterator std::map< _Key, _Tp,
       _Compare, _Alloc >::insert_or_assign (const_iterator __hint, key_type
       && __k, _Obj && __obj) [inline]
       Definition at line 1042 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Obj > pair< iterator, bool > std::map<
       _Key, _Tp, _Compare, _Alloc >::insert_or_assign (key_type && __k, _Obj
       && __obj) [inline]
       Definition at line 984 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> key_compare std::map< _Key, _Tp, _Compare, _Alloc
       >::key_comp () const [inline]
       Returns the key comparison object out of which the map was constructed.

       Definition at line 1190 of file map.

       Referenced by std::map< _Key, _Tp, _Compare, _Alloc >::at(), std::map<
       _Key, _Tp, _Compare, _Alloc >::emplace(), std::map< _Key, _Tp,
       _Compare, _Alloc >::insert(), std::map< _Key, _Tp, _Compare, _Alloc
       >::insert_or_assign(), std::map< _Key, _Tp, _Compare, _Alloc
       >::operator[](), and std::map< _Key, _Tp, _Compare, _Alloc
       >::try_emplace().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::map< _Key, _Tp,
       _Compare, _Alloc >::lower_bound (const _Kt & __x) ->
       decltype(iterator(_M_t._M_lower_bound_tr(__x)))
             [inline]"

       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Iterator pointing to first element equal to or greater than key, or
           end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 1312 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::map< _Key, _Tp,
       _Compare, _Alloc >::lower_bound (const _Kt & __x) const ->
       decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
             [inline]"

       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Read-only (constant) iterator pointing to first element equal to or
           greater than key, or end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 1337 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::map< _Key, _Tp, _Compare, _Alloc
       >::lower_bound (const key_type & __x) [inline]
       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Iterator pointing to first element equal to or greater than key, or
           end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 1306 of file map.

       Referenced by std::map< _Key, _Tp, _Compare, _Alloc >::at(), std::map<
       _Key, _Tp, _Compare, _Alloc >::emplace(), std::map< _Key, _Tp,
       _Compare, _Alloc >::insert(), std::map< _Key, _Tp, _Compare, _Alloc
       >::insert_or_assign(), std::map< _Key, _Tp, _Compare, _Alloc
       >::operator[](), and std::map< _Key, _Tp, _Compare, _Alloc
       >::try_emplace().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::map< _Key, _Tp, _Compare, _Alloc
       >::lower_bound (const key_type & __x) const [inline]
       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Read-only (constant) iterator pointing to first element equal to or
           greater than key, or end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 1331 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> size_type std::map< _Key, _Tp, _Compare, _Alloc
       >::max_size () const [inline],  [noexcept]
       Returns the maximum size of the map.

       Definition at line 485 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Cmp2 > void std::map< _Key, _Tp,
       _Compare, _Alloc >::merge (map< _Key, _Tp, _Cmp2, _Alloc > && __source)
       [inline]
       Definition at line 680 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Cmp2 > void std::map< _Key, _Tp,
       _Compare, _Alloc >::merge (map< _Key, _Tp, _Cmp2, _Alloc > & __source)
       [inline]
       Definition at line 672 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Cmp2 > void std::map< _Key, _Tp,
       _Compare, _Alloc >::merge (multimap< _Key, _Tp, _Cmp2, _Alloc > &&
       __source) [inline]
       Definition at line 693 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Cmp2 > void std::map< _Key, _Tp,
       _Compare, _Alloc >::merge (multimap< _Key, _Tp, _Cmp2, _Alloc > &
       __source) [inline]
       Definition at line 685 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> map & std::map< _Key, _Tp, _Compare, _Alloc >::operator=
       (const map< _Key, _Tp, _Compare, _Alloc > &) [default]
       Map assignment operator. Whether the allocator is copied depends on the
       allocator traits.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> map & std::map< _Key, _Tp, _Compare, _Alloc >::operator=
       (initializer_list< value_type > __l) [inline]
       Map list assignment operator.

       Parameters
           __l An initializer_list.

       This function fills a map with copies of the elements in the
       initializer list __l.

       Note that the assignment completely changes the map and that the
       resulting map's size is the same as the number of elements assigned.

       Definition at line 347 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> map & std::map< _Key, _Tp, _Compare, _Alloc >::operator=
       (map< _Key, _Tp, _Compare, _Alloc > &&) [default]
       Move assignment operator.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> mapped_type & std::map< _Key, _Tp, _Compare, _Alloc
       >::operator[] (const key_type & __k) [inline]
       Subscript ( [] ) access to map data.

       Parameters
           __k The key for which data should be retrieved.

       Returns
           A reference to the data of the (key,data) pair.

       Allows for easy lookup with the subscript ( [] ) operator. Returns data
       associated with the key specified in subscript. If the key does not
       exist, a pair with that key is created using default values, which is
       then returned.

       Lookup requires logarithmic time.

       Definition at line 502 of file map.

       References std::map< _Key, _Tp, _Compare, _Alloc >::end(), std::map<
       _Key, _Tp, _Compare, _Alloc >::insert(), std::map< _Key, _Tp, _Compare,
       _Alloc >::key_comp(), std::map< _Key, _Tp, _Compare, _Alloc
       >::lower_bound(), and std::piecewise_construct.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> mapped_type & std::map< _Key, _Tp, _Compare, _Alloc
       >::operator[] (key_type && __k) [inline]
       Definition at line 522 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_reverse_iterator std::map< _Key, _Tp, _Compare,
       _Alloc >::rbegin () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       pair in the map. Iteration is done in descending order according to the
       keys.

       Definition at line 411 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> reverse_iterator std::map< _Key, _Tp, _Compare, _Alloc
       >::rbegin () [inline],  [noexcept]
       Returns a read/write reverse iterator that points to the last pair in
       the map. Iteration is done in descending order according to the keys.

       Definition at line 402 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_reverse_iterator std::map< _Key, _Tp, _Compare,
       _Alloc >::rend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first pair in the map. Iteration is done in descending order
       according to the keys.

       Definition at line 429 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> reverse_iterator std::map< _Key, _Tp, _Compare, _Alloc
       >::rend () [inline],  [noexcept]
       Returns a read/write reverse iterator that points to one before the
       first pair in the map. Iteration is done in descending order according
       to the keys.

       Definition at line 420 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> size_type std::map< _Key, _Tp, _Compare, _Alloc >::size
       () const [inline],  [noexcept]
       Returns the size of the map.

       Definition at line 480 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> void std::map< _Key, _Tp, _Compare, _Alloc >::swap (map<
       _Key, _Tp, _Compare, _Alloc > & __x) [inline],  [noexcept]
       Swaps data with another map.

       Parameters
           __x A map of the same element and allocator types.

       This exchanges the elements between two maps in constant time. (It is
       only swapping a pointer, an integer, and an instance of the Compare
       type (which itself is often stateless and empty), so it should be quite
       fast.) Note that the global std::swap() function is specialized such
       that std::swap(m1,m2) will feed to this function.

       Whether the allocators are swapped depends on the allocator traits.

       Definition at line 1170 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename... _Args> pair< iterator, bool >
       std::map< _Key, _Tp, _Compare, _Alloc >::try_emplace (const key_type &
       __k, _Args &&... __args) [inline]
       Attempts to build and insert a std::pair into the map.

       Parameters
           __k Key to use for finding a possibly existing pair in the map.
           __args Arguments used to generate the .second for a new pair
           instance.

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted pair, and the second is a bool that is true
           if the pair was actually inserted.

       This function attempts to build and insert a (key, value) pair into the
       map. A map relies on unique keys and thus a pair is only inserted if
       its first element (the key) is not already present in the map. If a
       pair is not inserted, this function has no effect.

       Insertion requires logarithmic time.

       Definition at line 721 of file map.

       References std::map< _Key, _Tp, _Compare, _Alloc >::emplace_hint(),
       std::map< _Key, _Tp, _Compare, _Alloc >::end(),
       std::forward_as_tuple(), std::map< _Key, _Tp, _Compare, _Alloc
       >::key_comp(), std::map< _Key, _Tp, _Compare, _Alloc >::lower_bound(),
       and std::piecewise_construct.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename... _Args> iterator std::map< _Key, _Tp,
       _Compare, _Alloc >::try_emplace (const_iterator __hint, const key_type
       & __k, _Args &&... __args) [inline]
       Attempts to build and insert a std::pair into the map.

       Parameters
           __hint An iterator that serves as a hint as to where the pair
           should be inserted.
           __k Key to use for finding a possibly existing pair in the map.
           __args Arguments used to generate the .second for a new pair
           instance.

       Returns
           An iterator that points to the element with key of the std::pair
           built from __args (may or may not be that std::pair).

       This function is not concerned about whether the insertion took place,
       and thus does not return a boolean like the single-argument
       try_emplace() does. However, if insertion did not take place, this
       function has no effect. Note that the first parameter is only a hint
       and can potentially improve the performance of the insertion process. A
       bad hint would cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires logarithmic time (if the hint is not taken).

       Definition at line 781 of file map.

       References std::map< _Key, _Tp, _Compare, _Alloc >::emplace_hint(),
       std::forward_as_tuple(), and std::piecewise_construct.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename... _Args> iterator std::map< _Key, _Tp,
       _Compare, _Alloc >::try_emplace (const_iterator __hint, key_type &&
       __k, _Args &&... __args) [inline]
       Definition at line 800 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename... _Args> pair< iterator, bool >
       std::map< _Key, _Tp, _Compare, _Alloc >::try_emplace (key_type && __k,
       _Args &&... __args) [inline]
       Definition at line 738 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::map< _Key, _Tp,
       _Compare, _Alloc >::upper_bound (const _Kt & __x) ->
       decltype(iterator(_M_t._M_upper_bound_tr(__x)))
             [inline]"

       Finds the end of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Iterator pointing to the first element greater than key, or end().

       Definition at line 1357 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::map< _Key, _Tp,
       _Compare, _Alloc >::upper_bound (const _Kt & __x) const ->
       decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))
             [inline]"

       Finds the end of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Read-only (constant) iterator pointing to first iterator greater
           than key, or end().

       Definition at line 1377 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::map< _Key, _Tp, _Compare, _Alloc
       >::upper_bound (const key_type & __x) [inline]
       Finds the end of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Iterator pointing to the first element greater than key, or end().

       Definition at line 1351 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::map< _Key, _Tp, _Compare, _Alloc
       >::upper_bound (const key_type & __x) const [inline]
       Finds the end of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Read-only (constant) iterator pointing to first iterator greater
           than key, or end().

       Definition at line 1371 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> value_compare std::map< _Key, _Tp, _Compare, _Alloc
       >::value_comp () const [inline]
       Returns a value comparison object, built from the key comparison object
       out of which the map was constructed.

       Definition at line 1198 of file map.

Friends And Related Function Documentation
   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename , typename > friend struct
       std::_Rb_tree_merge_helper [friend]
       Definition at line 668 of file map.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed std::map<3_Key, _Tp, _Compare, _Alloc >(3)
