ULIMIT(1P)                                                                               POSIX Programmer's Manual                                                                              ULIMIT(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       ulimit — set or report file size limit

SYNOPSIS
       ulimit [-f] [blocks]

DESCRIPTION
       The ulimit utility shall set or report the file-size writing limit imposed on files written by the shell and its child processes (files of any size may be read). Only a process  with  appropriate
       privileges can increase the limit.

OPTIONS
       The ulimit utility shall conform to the Base Definitions volume of POSIX.1‐2017, Section 12.2, Utility Syntax Guidelines.

       The following option shall be supported:

       -f        Set (or report, if no blocks operand is present), the file size limit in blocks. The -f option shall also be the default case.

OPERANDS
       The following operand shall be supported:

       blocks    The number of 512-byte blocks to use as the new file size limit.

STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of ulimit:

       LANG      Provide  a default value for the internationalization variables that are unset or null. (See the Base Definitions volume of POSIX.1‐2017, Section 8.2, Internationalization Variables for
                 the precedence of internationalization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The standard output shall be used when no blocks operand is present. If the current number of blocks is limited, the number of blocks in the current limit shall be written in the  following  for‐
       mat:

           "%d\n", <number of 512-byte blocks>

       If there is no current limit on the number of blocks, in the POSIX locale the following format shall be used:

           "unlimited\n"

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       >0    A request for a higher limit was rejected or an error occurred.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Since  ulimit  affects  the current shell execution environment, it is always provided as a shell regular built-in. If it is called in a separate utility execution environment, such as one of the
       following:

           nohup ulimit -f 10000
           env ulimit 10000

       it does not affect the file size limit of the caller's environment.

       Once a limit has been decreased by a process, it cannot be increased (unless appropriate privileges are involved), even back to the original system limit.

EXAMPLES
       Set the file size limit to 51200 bytes:

           ulimit -f 100

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       The Base Definitions volume of POSIX.1‐2017, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

       The System Interfaces volume of POSIX.1‐2017, ulimit()

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                         ULIMIT(1P)
ulimit(3)                                                                                Library Functions Manual                                                                                ulimit(3)

NAME
       ulimit - get and set user limits

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <ulimit.h>

       [[deprecated]] long ulimit(int cmd, long newlimit);

DESCRIPTION
       Warning: this routine is obsolete.  Use getrlimit(2), setrlimit(2), and sysconf(3) instead.  For the shell command ulimit, see bash(1).

       The ulimit() call will get or set some limit for the calling process.  The cmd argument can have one of the following values.

       UL_GETFSIZE
              Return the limit on the size of a file, in units of 512 bytes.

       UL_SETFSIZE
              Set the limit on the size of a file.

       3      (Not implemented for Linux.)  Return the maximum possible address of the data segment.

       4      (Implemented but no symbolic constant provided.)  Return the maximum number of files that the calling process can open.

RETURN VALUE
       On success, ulimit() returns a nonnegative value.  On error, -1 is returned, and errno is set to indicate the error.

ERRORS
       EPERM  An unprivileged process tried to increase a limit.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │ulimit()                                                                                                                                                                │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       SVr4, POSIX.1-2001.  POSIX.1-2008 marks it as obsolete.

SEE ALSO
       bash(1), getrlimit(2), setrlimit(2), sysconf(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                       ulimit(3)
ULIMIT(3P)                                                                               POSIX Programmer's Manual                                                                              ULIMIT(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       ulimit — get and set process limits

SYNOPSIS
       #include <ulimit.h>

       long ulimit(int cmd, ...);

DESCRIPTION
       The ulimit() function shall control process limits. The process limits that can be controlled by this function include the maximum size of a single file that can be written (this is equivalent to
       using setrlimit() with RLIMIT_FSIZE). The cmd values, defined in <ulimit.h>, include:

       UL_GETFSIZE Return  the file size limit (RLIMIT_FSIZE) of the process. The limit shall be in units of 512-byte blocks and shall be inherited by child processes. Files of any size can be read. The
                   return value shall be the integer part of the soft file size limit divided by 512. If the result cannot be represented as a long, the result is unspecified.

       UL_SETFSIZE Set the file size limit for output operations of the process to the value of the second argument, taken as a long, multiplied by 512. If the result would overflow an rlim_t,  the  ac‐
                   tual  value  set  is  unspecified. Any process may decrease its own limit, but only a process with appropriate privileges may increase the limit. The return value shall be the integer
                   part of the new file size limit divided by 512.

       The ulimit() function shall not change the setting of errno if successful.

       As all return values are permissible in a successful situation, an application wishing to check for error situations should set errno to 0, then call ulimit(), and, if it returns -1, check to see
       if errno is non-zero.

RETURN VALUE
       Upon successful completion, ulimit() shall return the value of the requested limit. Otherwise, -1 shall be returned and errno set to indicate the error.

ERRORS
       The ulimit() function shall fail and the limit shall be unchanged if:

       EINVAL The cmd argument is not valid.

       EPERM  A process not having appropriate privileges attempts to increase its file size limit.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       Since  the  ulimit()  function  uses  type long rather than rlim_t, this function is not sufficient for file sizes on many current systems.  Applications should use the getrlimit() or setrlimit()
       functions instead of the obsolescent ulimit() function.

RATIONALE
       None.

FUTURE DIRECTIONS
       The ulimit() function may be removed in a future version.

SEE ALSO
       exec, getrlimit(), write()

       The Base Definitions volume of POSIX.1‐2017, <ulimit.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                         ULIMIT(3P)
UNIMPLEMENTED(2)                                                                            System Calls Manual                                                                           UNIMPLEMENTED(2)

NAME
       afs_syscall,  break, fattach, fdetach, ftime, getmsg, getpmsg, gtty, isastream, lock, madvise1, mpx, prof, profil, putmsg, putpmsg, security, stty, tuxcall, ulimit, vserver - unimplemented system
       calls

SYNOPSIS
       Unimplemented system calls.

DESCRIPTION
       These system calls are not implemented in the Linux kernel.

RETURN VALUE
       These system calls always return -1 and set errno to ENOSYS.

NOTES
       Note that ftime(3), profil(3), and ulimit(3) are implemented as library functions.

       Some system calls, like alloc_hugepages(2), free_hugepages(2), ioperm(2), iopl(2), and vm86(2) exist only on certain architectures.

       Some system calls, like ipc(2), create_module(2), init_module(2), and delete_module(2) exist only when the Linux kernel was built with support for them.

SEE ALSO
       syscalls(2)

Linux man-pages 6.04                                                                            2022-10-09                                                                                UNIMPLEMENTED(2)
