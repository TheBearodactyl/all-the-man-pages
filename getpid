GETPID(3P)                                                                               POSIX Programmer's Manual                                                                              GETPID(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       getpid — get the process ID

SYNOPSIS
       #include <unistd.h>

       pid_t getpid(void);

DESCRIPTION
       The getpid() function shall return the process ID of the calling process.

RETURN VALUE
       The getpid() function shall always be successful and no return value is reserved to indicate an error.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       exec, fork(), getpgrp(), getppid(), kill(), mkdtemp(), setpgid(), setsid()

       The Base Definitions volume of POSIX.1‐2017, <sys_types.h>, <unistd.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                         GETPID(3P)
getpid(2)                                                                                   System Calls Manual                                                                                  getpid(2)

NAME
       getpid, getppid - get process identification

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       pid_t getpid(void);
       pid_t getppid(void);

DESCRIPTION
       getpid() returns the process ID (PID) of the calling process.  (This is often used by routines that generate unique temporary filenames.)

       getppid()  returns  the  process ID of the parent of the calling process.  This will be either the ID of the process that created this process using fork(), or, if that process has already termi‐
       nated, the ID of the process to which this process has been reparented (either init(1) or a "subreaper" process defined via the prctl(2) PR_SET_CHILD_SUBREAPER operation).

ERRORS
       These functions are always successful.

VERSIONS
       On Alpha, instead of a pair of getpid() and getppid() system calls, a single getxpid() system call is provided, which returns a pair of PID and parent PID.  The glibc getpid() and getppid() wrap‐
       per functions transparently deal with this.  See syscall(2) for details regarding register mapping.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, 4.3BSD, SVr4.

   C library/kernel differences
       From  glibc  2.3.4 up to and including glibc 2.24, the glibc wrapper function for getpid() cached PIDs, with the goal of avoiding additional system calls when a process calls getpid() repeatedly.
       Normally this caching was invisible, but its correct operation relied on support in the wrapper functions for fork(2), vfork(2), and clone(2): if an application bypassed the  glibc  wrappers  for
       these  system calls by using syscall(2), then a call to getpid() in the child would return the wrong value (to be precise: it would return the PID of the parent process).  In addition, there were
       cases where getpid() could return the wrong value even when invoking clone(2) via the glibc wrapper function.  (For a discussion of one such case, see BUGS in clone(2).)   Furthermore,  the  com‐
       plexity of the caching code had been the source of a few bugs within glibc over the years.

       Because of the aforementioned problems, since glibc 2.25, the PID cache is removed: calls to getpid() always invoke the actual system call, rather than returning a cached value.

NOTES
       If the caller's parent is in a different PID namespace (see pid_namespaces(7)), getppid() returns 0.

       From a kernel perspective, the PID (which is shared by all of the threads in a multithreaded process) is sometimes also known as the thread group ID (TGID).  This contrasts with the kernel thread
       ID (TID), which is unique for each thread.  For further details, see gettid(2) and the discussion of the CLONE_THREAD flag in clone(2).

SEE ALSO
       clone(2), fork(2), gettid(2), kill(2), exec(3), mkstemp(3), tempnam(3), tmpfile(3), tmpnam(3), credentials(7), pid_namespaces(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                       getpid(2)
