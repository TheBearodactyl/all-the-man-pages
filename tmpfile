tmpfile(3)                                                                               Library Functions Manual                                                                               tmpfile(3)

NAME
       tmpfile - create a temporary file

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdio.h>

       FILE *tmpfile(void);

DESCRIPTION
       The tmpfile() function opens a unique temporary file in binary read/write (w+b) mode.  The file will be automatically deleted when it is closed or the program terminates.

RETURN VALUE
       The tmpfile() function returns a stream descriptor, or NULL if a unique filename cannot be generated or the unique file cannot be opened.  In the latter case, errno is set to indicate the error.

ERRORS
       EACCES Search permission denied for directory in file's path prefix.

       EEXIST Unable to generate a unique filename.

       EINTR  The call was interrupted by a signal; see signal(7).

       EMFILE The per-process limit on the number of open file descriptors has been reached.

       ENFILE The system-wide limit on the total number of open files has been reached.

       ENOSPC There was no room in the directory to add the new filename.

       EROFS  Read-only filesystem.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │tmpfile()                                                                                                                                                               │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
       The standard does not specify the directory that tmpfile() will use.  glibc will try the path prefix P_tmpdir defined in <stdio.h>, and if that fails, then the directory /tmp.

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       POSIX.1-2001, C89, SVr4, 4.3BSD, SUSv2.

NOTES
       POSIX.1-2001 specifies: an error message may be written to stdout if the stream cannot be opened.

SEE ALSO
       exit(3), mkstemp(3), mktemp(3), tempnam(3), tmpnam(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                      tmpfile(3)
TMPFILE(3P)                                                                              POSIX Programmer's Manual                                                                             TMPFILE(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       tmpfile — create a temporary file

SYNOPSIS
       #include <stdio.h>

       FILE *tmpfile(void);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       The  tmpfile() function shall create a temporary file and open a corresponding stream. The file shall be automatically deleted when all references to the file are closed. The file shall be opened
       as in fopen() for update (wb+), except that implementations may restrict the permissions, either by clearing the file mode bits or setting them to the value S_IRUSR | S_IWUSR.

       In some implementations, a permanent file may be left behind if the process calling tmpfile() is killed while it is processing a call to tmpfile().

       An error message may be written to standard error if the stream cannot be opened.

RETURN VALUE
       Upon successful completion, tmpfile() shall return a pointer to the stream of the file that is created.  Otherwise, it shall return a null pointer and set errno to indicate the error.

ERRORS
       The tmpfile() function shall fail if:

       EINTR  A signal was caught during tmpfile().

       EMFILE All file descriptors available to the process are currently open.

       EMFILE {STREAM_MAX} streams are currently open in the calling process.

       ENFILE The maximum allowable number of files is currently open in the system.

       ENOSPC The directory or file system which would contain the new file cannot be expanded.

       EOVERFLOW
              The file is a regular file and the size of the file cannot be represented correctly in an object of type off_t.

       The tmpfile() function may fail if:

       EMFILE {FOPEN_MAX} streams are currently open in the calling process.

       ENOMEM Insufficient storage space is available.

       The following sections are informative.

EXAMPLES
   Creating a Temporary File
       The following example creates a temporary file for update, and returns a pointer to a stream for the created file in the fp variable.

           #include <stdio.h>
           ...
           FILE *fp;

           fp = tmpfile ();

APPLICATION USAGE
       It should be possible to open at least {TMP_MAX} temporary files during the lifetime of the program (this limit may be shared with tmpnam()) and there should be no limit on the number  simultane‐
       ously open other than this limit and any limit on the number of open file descriptors or streams ({OPEN_MAX}, {FOPEN_MAX}, {STREAM_MAX}).

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.5, Standard I/O Streams, fopen(), mkdtemp(), tmpnam(), unlink()

       The Base Definitions volume of POSIX.1‐2017, <stdio.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                        TMPFILE(3P)
