experimental(3perl)                                                                  Perl Programmers Reference Guide                                                                  experimental(3perl)

NAME
       experimental - Experimental features made easy

VERSION
       version 0.027

SYNOPSIS
        use experimental 'lexical_subs', 'signatures';
        my sub plus_one($value) { $value + 1 }

DESCRIPTION
       This pragma provides an easy and convenient way to enable or disable experimental features.

       Every version of perl has some number of features present but considered "experimental."  For much of the life of Perl 5, this was only a designation found in the documentation.  Starting in Perl
       v5.10.0, and more aggressively in v5.18.0, experimental features were placed behind pragmata used to enable the feature and disable associated warnings.

       The "experimental" pragma exists to combine the required incantations into a single interface stable across releases of perl.  For every experimental feature, this should enable the feature and
       silence warnings for the enclosing lexical scope:

         use experimental 'feature-name';

       To disable the feature and, if applicable, re-enable any warnings, use:

         no experimental 'feature-name';

       The supported features, documented further below, are:

       •   "args_array_with_signatures" - allow @_ to be used in signatured subs.

           This is supported on perl 5.20.0 and above, but is likely to be removed in the future.

       •   "array_base" - allow the use of $[ to change the starting index of @array.

           This was removed in perl 5.30.0.

       •   "autoderef" - allow push, each, keys, and other built-ins on references.

           This was added in perl 5.14.0 and removed in perl 5.24.0.

       •   "bitwise" - allow the new stringwise bit operators

           This was added in perl 5.22.0.

       •   "builtin" - allow the use of the functions in the builtin:: namespace

           This was added in perl 5.36.0

       •   "const_attr" - allow the :const attribute on subs

           This was added in perl 5.22.0.

       •   "declared_refs" - enables aliasing via assignment to references

           This was added in perl 5.26.0.

       •   "defer" - enables the use of defer blocks

           This was added in perl 5.36.0

       •   "for_list" - allows iterating over multiple values at a time with "for"

           This was added in perl 5.36.0

       •   "isa" - allow the use of the "isa" infix operator

           This was added in perl 5.32.0.

       •   "lexical_topic" - allow the use of lexical $_ via "my $_".

           This was added in perl 5.10.0 and removed in perl 5.24.0.

       •   "lexical_subs" - allow the use of lexical subroutines.

           This was added in 5.18.0.

       •   "postderef" - allow the use of postfix dereferencing expressions

           This was added in perl 5.20.0, and became non-experimental (and always enabled) in 5.24.0.

       •   "postderef_qq" - allow the use of postfix dereferencing expressions inside interpolating strings

           This was added in perl 5.20.0, and became non-experimental (and always enabled) in 5.24.0.

       •   "re_strict" - enables strict mode in regular expressions

           This was added in perl 5.22.0.

       •   "refaliasing" - allow aliasing via "\$x = \$y"

           This was added in perl 5.22.0.

       •   "regex_sets" - allow extended bracketed character classes in regexps

           This was added in perl 5.18.0.

       •   "signatures" - allow subroutine signatures (for named arguments)

           This was added in perl 5.20.0.

       •   "smartmatch" - allow the use of "~~"

           This was added in perl 5.10.0, but it should be noted there are significant incompatibilities between 5.10.0 and 5.10.1.

       •   "switch" - allow the use of "~~", given, and when

           This was added in perl 5.10.0.

       •   "try" - allow the use of "try" and "catch"

           This was added in perl 5.34.0

       •   "win32_perlio" - allows the use of the :win32 IO layer.

           This was added on perl 5.22.0.

   Ordering matters
       Using this pragma to 'enable an experimental feature' is another way of saying that this pragma will disable the warnings which would result from using that feature.  Therefore, the order in
       which pragmas are applied is important.  In particular, you probably want to enable experimental features after you enable warnings:

         use warnings;
         use experimental 'smartmatch';

       You also need to take care with modules that enable warnings for you.  A common example being Moose.  In this example, warnings for the 'smartmatch' feature are first turned on by the warnings
       pragma, off by the experimental pragma and back on again by the Moose module (fix is to switch the last two lines):

         use warnings;
         use experimental 'smartmatch';
         use Moose;

   Disclaimer
       Because of the nature of the features it enables, forward compatibility can not be guaranteed in any way.

SEE ALSO
       perlexperiment contains more information about experimental features.

AUTHOR
       Leon Timmermans <leont@cpan.org>

COPYRIGHT AND LICENSE
       This software is copyright (c) 2013 by Leon Timmermans.

       This is free software; you can redistribute it and/or modify it under the same terms as the Perl 5 programming language system itself.

perl v5.36.0                                                                                    2022-12-12                                                                             experimental(3perl)
