BYTEORDER(3)                                                                             Library Functions Manual                                                                             BYTEORDER(3)

NAME
       htonl, htons, ntohl, ntohs - convert values between host and network byte order

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <arpa/inet.h>

       uint32_t htonl(uint32_t hostlong);
       uint16_t htons(uint16_t hostshort);

       uint32_t ntohl(uint32_t netlong);
       uint16_t ntohs(uint16_t netshort);

DESCRIPTION
       The htonl() function converts the unsigned integer hostlong from host byte order to network byte order.

       The htons() function converts the unsigned short integer hostshort from host byte order to network byte order.

       The ntohl() function converts the unsigned integer netlong from network byte order to host byte order.

       The ntohs() function converts the unsigned short integer netshort from network byte order to host byte order.

       On the i386 the host byte order is Least Significant Byte first, whereas the network byte order, as used on the Internet, is Most Significant Byte first.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │htonl(), htons(), ntohl(), ntohs()                                                                                                                                      │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

SEE ALSO
       bswap(3), endian(3), gethostbyname(3), getservent(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                    BYTEORDER(3)
byteorder(3bsd)                                                                                    LOCAL                                                                                   byteorder(3bsd)

NAME
     be16enc, be16dec, be32enc, be32dec, be64enc, be64dec, le16enc, le16dec, le32enc, le32dec, le64enc, le64dec — byte order operations

LIBRARY
     Utility functions from BSD systems (libbsd, -lbsd)

SYNOPSIS
     #include <sys/endian.h>
     (See libbsd(7) for include usage.)

     uint16_t
     be16dec(const void *);

     uint32_t
     be32dec(const void *);

     uint64_t
     be64dec(const void *);

     uint16_t
     le16dec(const void *);

     uint32_t
     le32dec(const void *);

     uint64_t
     le64dec(const void *);

     void
     be16enc(void *, uint16_t);

     void
     be32enc(void *, uint32_t);

     void
     be64enc(void *, uint64_t);

     void
     le16enc(void *, uint16_t);

     void
     le32enc(void *, uint32_t);

     void
     le64enc(void *, uint64_t);

DESCRIPTION
     The be16enc(), be16dec(), be32enc(), be32dec(), be64enc(), be64dec(), le16enc(), le16dec(), le32enc(), le32dec(), le64enc(), and le64dec() functions encode and decode integers to/from byte strings
     on any alignment in big/little endian format.

SEE ALSO
     byteorder(3)

HISTORY
     The encode/decode functions first appeared in FreeBSD 5.1.

BSD                                                                                           April 29, 2002                                                                                           BSD
