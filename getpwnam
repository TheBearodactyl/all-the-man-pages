getpwnam(3)                                                                              Library Functions Manual                                                                              getpwnam(3)

NAME
       getpwnam, getpwnam_r, getpwuid, getpwuid_r - get password file entry

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <sys/types.h>
       #include <pwd.h>

       struct passwd *getpwnam(const char *name);
       struct passwd *getpwuid(uid_t uid);

       int getpwnam_r(const char *restrict name, struct passwd *restrict pwd,
                      char buf[restrict .buflen], size_t buflen,
                      struct passwd **restrict result);
       int getpwuid_r(uid_t uid, struct passwd *restrict pwd,
                      char buf[restrict .buflen], size_t buflen,
                      struct passwd **restrict result);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       getpwnam_r(), getpwuid_r():
           _POSIX_C_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       The  getpwnam()  function  returns a pointer to a structure containing the broken-out fields of the record in the password database (e.g., the local password file /etc/passwd, NIS, and LDAP) that
       matches the username name.

       The getpwuid() function returns a pointer to a structure containing the broken-out fields of the record in the password database that matches the user ID uid.

       The passwd structure is defined in <pwd.h> as follows:

           struct passwd {
               char   *pw_name;       /* username */
               char   *pw_passwd;     /* user password */
               uid_t   pw_uid;        /* user ID */
               gid_t   pw_gid;        /* group ID */
               char   *pw_gecos;      /* user information */
               char   *pw_dir;        /* home directory */
               char   *pw_shell;      /* shell program */
           };

       See passwd(5) for more information about these fields.

       The getpwnam_r() and getpwuid_r() functions obtain the same information as getpwnam() and getpwuid(), but store the retrieved passwd structure in the space pointed to by pwd.  The  string  fields
       pointed  to  by  the members of the passwd structure are stored in the buffer buf of size buflen.  A pointer to the result (in case of success) or NULL (in case no entry was found or an error oc‐
       curred) is stored in *result.

       The call

           sysconf(_SC_GETPW_R_SIZE_MAX)

       returns either -1, without changing errno, or an initial suggested size for buf.  (If this size is too small, the call fails with ERANGE, in which case the caller can retry with a larger buffer.)

RETURN VALUE
       The getpwnam() and getpwuid() functions return a pointer to a passwd structure, or NULL if the matching entry is not found or an error occurs.  If an error occurs, errno is set  to  indicate  the
       error.  If one wants to check errno after the call, it should be set to zero before the call.

       The return value may point to a static area, and may be overwritten by subsequent calls to getpwent(3), getpwnam(), or getpwuid().  (Do not pass the returned pointer to free(3).)

       On success, getpwnam_r() and getpwuid_r() return zero, and set *result to pwd.  If no matching password record was found, these functions return 0 and store NULL in *result.  In case of error, an
       error number is returned, and NULL is stored in *result.

ERRORS
       0 or ENOENT or ESRCH or EBADF or EPERM or ...
              The given name or uid was not found.

       EINTR  A signal was caught; see signal(7).

       EIO    I/O error.

       EMFILE The per-process limit on the number of open file descriptors has been reached.

       ENFILE The system-wide limit on the total number of open files has been reached.

       ENOMEM Insufficient memory to allocate passwd structure.

       ERANGE Insufficient buffer space supplied.

FILES
       /etc/passwd
              local password database file

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌───────────────────────────┬───────────────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
       │Interface                  │ Attribute     │ Value                                                                                                                                                │
       ├───────────────────────────┼───────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
       │getpwnam()                 │ Thread safety │ MT-Unsafe race:pwnam locale                                                                                                                          │
       ├───────────────────────────┼───────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
       │getpwuid()                 │ Thread safety │ MT-Unsafe race:pwuid locale                                                                                                                          │
       ├───────────────────────────┼───────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
       │getpwnam_r(), getpwuid_r() │ Thread safety │ MT-Safe locale                                                                                                                                       │
       └───────────────────────────┴───────────────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

VERSIONS
       The pw_gecos field is not specified in POSIX, but is present on most implementations.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, SVr4, 4.3BSD.

NOTES
       The formulation given above under "RETURN VALUE" is from POSIX.1-2001.  It does not call "not found" an error, and hence does not specify what value errno might have in this situation.  But  that
       makes it impossible to recognize errors.  One might argue that according to POSIX errno should be left unchanged if an entry is not found.  Experiments on various UNIX-like systems show that lots
       of different values occur in this situation: 0, ENOENT, EBADF, ESRCH, EWOULDBLOCK, EPERM, and probably others.

       The pw_dir field contains the name of the initial working directory of the user.  Login programs use the value of this field to initialize the HOME environment variable for the login  shell.   An
       application that wants to determine its user's home directory should inspect the value of HOME (rather than the value getpwuid(getuid())->pw_dir) since this allows the user to modify their notion
       of "the home directory" during a login session.  To determine the (initial) home directory of another user, it is necessary to use getpwnam("username")->pw_dir or similar.

EXAMPLES
       The program below demonstrates the use of getpwnam_r() to find the full username and user ID for the username supplied as a command-line argument.

       #include <errno.h>
       #include <pwd.h>
       #include <stdint.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>

       int
       main(int argc, char *argv[])
       {
           struct passwd pwd;
           struct passwd *result;
           char *buf;
           long bufsize;
           int s;

           if (argc != 2) {
               fprintf(stderr, "Usage: %s username\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           bufsize = sysconf(_SC_GETPW_R_SIZE_MAX);
           if (bufsize == -1)          /* Value was indeterminate */
               bufsize = 16384;        /* Should be more than enough */

           buf = malloc(bufsize);
           if (buf == NULL) {
               perror("malloc");
               exit(EXIT_FAILURE);
           }

           s = getpwnam_r(argv[1], &pwd, buf, bufsize, &result);
           if (result == NULL) {
               if (s == 0)
                   printf("Not found\n");
               else {
                   errno = s;
                   perror("getpwnam_r");
               }
               exit(EXIT_FAILURE);
           }

           printf("Name: %s; UID: %jd\n", pwd.pw_gecos,
                  (intmax_t) pwd.pw_uid);
           exit(EXIT_SUCCESS);
       }

SEE ALSO
       endpwent(3), fgetpwent(3), getgrnam(3), getpw(3), getpwent(3), getspnam(3), putpwent(3), setpwent(3), passwd(5)

Linux man-pages 6.04                                                                            2023-03-30                                                                                     getpwnam(3)
GETPWNAM(3P)                                                                             POSIX Programmer's Manual                                                                            GETPWNAM(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       getpwnam, getpwnam_r — search user database for a name

SYNOPSIS
       #include <pwd.h>

       struct passwd *getpwnam(const char *name);
       int getpwnam_r(const char *name, struct passwd *pwd, char *buffer,
           size_t bufsize, struct passwd **result);

DESCRIPTION
       The getpwnam() function shall search the user database for an entry with a matching name.

       The getpwnam() function need not be thread-safe.

       Applications wishing to check for error situations should set errno to 0 before calling getpwnam().  If getpwnam() returns a null pointer and errno is non-zero, an error occurred.

       The getpwnam_r() function shall update the passwd structure pointed to by pwd and store a pointer to that structure at the location pointed to by result.  The structure  shall  contain  an  entry
       from  the  user  database  with  a  matching  name.  Storage referenced by the structure is allocated from the memory provided with the buffer parameter, which is bufsize bytes in size. A call to
       sysconf(_SC_GETPW_R_SIZE_MAX) returns either -1 without changing errno or an initial value suggested for the size of this buffer.  A null pointer shall be returned at the location pointed  to  by
       result on error or if the requested entry is not found.

RETURN VALUE
       The  getpwnam() function shall return a pointer to a struct passwd with the structure as defined in <pwd.h> with a matching entry if found. A null pointer shall be returned if the requested entry
       is not found, or an error occurs. If the requested entry was not found, errno shall not be changed. On error, errno shall be set to indicate the error.

       The application shall not modify the structure to which the return value points, nor any storage areas pointed to by pointers within the structure. The returned pointer, and pointers  within  the
       structure,  might  be  invalidated  or  the  structure or the storage areas might be overwritten by a subsequent call to getpwent(), getpwnam(), or getpwuid().  The returned pointer, and pointers
       within the structure, might also be invalidated if the calling thread is terminated.

       The getpwnam_r() function shall return zero on success or if the requested entry was not found and no error has occurred. If an error has occurred, an error number shall be returned  to  indicate
       the error.

ERRORS
       These functions may fail if:

       EIO    An I/O error has occurred.

       EINTR  A signal was caught during getpwnam().

       EMFILE All file descriptors available to the process are currently open.

       ENFILE The maximum allowable number of files is currently open in the system.

       The getpwnam_r() function may fail if:

       ERANGE Insufficient storage was supplied via buffer and bufsize to contain the data to be referenced by the resulting passwd structure.

       The following sections are informative.

EXAMPLES
       Note  that sysconf(_SC_GETPW_R_SIZE_MAX) may return -1 if there is no hard limit on the size of the buffer needed to store all the groups returned. This example shows how an application can allo‐
       cate a buffer of sufficient size to work with getpwnam_r().

           long int initlen = sysconf(_SC_GETPW_R_SIZE_MAX);
           size_t len;
           if (initlen == -1)
               /* Default initial length. */
               len = 1024;
           else
               len = (size_t) initlen;
           struct passwd result;
           struct passwd *resultp;
           char *buffer = malloc(len);
           if (buffer == NULL)
               ...handle error...
           int e;
           while ((e = getpwnam_r("someuser", &result, buffer, len, &resultp))
                   == ERANGE)
               {
               size_t newlen = 2 * len;
               if (newlen < len)
                   ...handle error...
               len = newlen;
               char *newbuffer = realloc(buffer, len);
               if (newbuffer == NULL)
                   ...handle error...
               buffer = newbuffer;
               }
           if (e != 0)
               ...handle error...
           free (buffer);

   Getting an Entry for the Login Name
       The following example uses the getlogin() function to return the name of the user who logged in; this information is passed to the getpwnam() function to get the  user  database  entry  for  that
       user.

           #include <sys/types.h>
           #include <pwd.h>
           #include <unistd.h>
           #include <stdio.h>
           #include <stdlib.h>
           ...
           char *lgn;
           struct passwd *pw;
           ...
           if ((lgn = getlogin()) == NULL || (pw = getpwnam(lgn)) == NULL) {
               fprintf(stderr, "Get of user information failed.\n"); exit(1);
           }
           ...

APPLICATION USAGE
       Three  names  associated with the current process can be determined: getpwuid(geteuid()) returns the name associated with the effective user ID of the process; getlogin() returns the name associ‐
       ated with the current login activity; and getpwuid(getuid()) returns the name associated with the real user ID of the process.

       The getpwnam_r() function is thread-safe and returns values in a user-supplied buffer instead of possibly using a static data area that may be overwritten by each call.

       Portable applications should take into account that it is usual for an implementation to return -1 from sysconf() indicating that there is no maximum for _SC_GETPW_R_SIZE_MAX.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       getpwuid(), sysconf()

       The Base Definitions volume of POSIX.1‐2017, <pwd.h>, <sys_types.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                       GETPWNAM(3P)
