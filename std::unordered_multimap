std::unordered_mustd::unordered_multimap<o_Key,n_Tp,l_Hash,3_Pred, _Alloc >(3)

NAME
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc > - A standard
       container composed of equivalent keys (possibly containing multiple of
       each key value) that associates values of another type with the keys.

SYNOPSIS
       #include <unordered_map>

   Public Types
       using node_type = typename _Hashtable::node_type

           typedef _Hashtable::key_type key_type
               Public typedefs.
           typedef _Hashtable::value_type value_type
               Public typedefs.
           typedef _Hashtable::mapped_type mapped_type
               Public typedefs.
           typedef _Hashtable::hasher hasher
               Public typedefs.
           typedef _Hashtable::key_equal key_equal
               Public typedefs.
           typedef _Hashtable::allocator_type allocator_type
               Public typedefs.

           typedef _Hashtable::pointer pointer
               Iterator-related typedefs.
           typedef _Hashtable::const_pointer const_pointer
               Iterator-related typedefs.
           typedef _Hashtable::reference reference
               Iterator-related typedefs.
           typedef _Hashtable::const_reference const_reference
               Iterator-related typedefs.
           typedef _Hashtable::iterator iterator
               Iterator-related typedefs.
           typedef _Hashtable::const_iterator const_iterator
               Iterator-related typedefs.
           typedef _Hashtable::local_iterator local_iterator
               Iterator-related typedefs.
           typedef _Hashtable::const_local_iterator const_local_iterator
               Iterator-related typedefs.
           typedef _Hashtable::size_type size_type
               Iterator-related typedefs.
           typedef _Hashtable::difference_type difference_type
               Iterator-related typedefs.

   Public Member Functions
       unordered_multimap ()=default
           Default constructor.
       template<typename _InputIterator > unordered_multimap (_InputIterator
           __first, _InputIterator __last, size_type __n, const allocator_type
           &__a)
       template<typename _InputIterator > unordered_multimap (_InputIterator
           __first, _InputIterator __last, size_type __n, const hasher &__hf,
           const allocator_type &__a)
       template<typename _InputIterator > unordered_multimap (_InputIterator
           __first, _InputIterator __last, size_type __n=0, const hasher
           &__hf=hasher(), const key_equal &__eql=key_equal(), const
           allocator_type &__a=allocator_type())
           Builds an unordered_multimap from a range.
       unordered_multimap (const allocator_type &__a)
           Creates an unordered_multimap with no elements.
       unordered_multimap (const unordered_multimap &)=default
           Copy constructor.
       unordered_multimap (const unordered_multimap &__ummap, const
           allocator_type &__a)
       unordered_multimap (initializer_list< value_type > __l, size_type __n,
           const allocator_type &__a)
       unordered_multimap (initializer_list< value_type > __l, size_type __n,
           const hasher &__hf, const allocator_type &__a)
       unordered_multimap (initializer_list< value_type > __l, size_type
           __n=0, const hasher &__hf=hasher(), const key_equal
           &__eql=key_equal(), const allocator_type &__a=allocator_type())
           Builds an unordered_multimap from an initializer_list.
       unordered_multimap (size_type __n, const allocator_type &__a)
       unordered_multimap (size_type __n, const hasher &__hf, const
           allocator_type &__a)
       unordered_multimap (size_type __n, const hasher &__hf=hasher(), const
           key_equal &__eql=key_equal(), const allocator_type
           &__a=allocator_type())
           Default constructor creates no elements.
       unordered_multimap (unordered_multimap &&)=default
           Move constructor.
       unordered_multimap (unordered_multimap &&__ummap, const allocator_type
           &__a) noexcept(noexcept(_Hashtable(std::move(__ummap._M_h), __a)))
       iterator begin () noexcept
       local_iterator begin (size_type __n)
           Returns a read/write iterator pointing to the first bucket element.
       size_type bucket (const key_type &__key) const
       size_type bucket_count () const noexcept
           Returns the number of buckets of the unordered_multimap.
       size_type bucket_size (size_type __n) const
       void clear () noexcept
       template<typename... _Args> iterator emplace (_Args &&... __args)
           Attempts to build and insert a std::pair into the
           unordered_multimap.
       template<typename... _Args> iterator emplace_hint (const_iterator
           __pos, _Args &&... __args)
           Attempts to build and insert a std::pair into the
           unordered_multimap.
       bool empty () const noexcept
           Returns true if the unordered_multimap is empty.
       iterator end () noexcept
       local_iterator end (size_type __n)
           Returns a read/write iterator pointing to one past the last bucket
           elements.
       size_type erase (const key_type &__x)
           Erases elements according to the provided key.
       iterator erase (const_iterator __first, const_iterator __last)
           Erases a [__first,__last) range of elements from an
           unordered_multimap.
       node_type extract (const key_type &__key)
           Extract a node.
       node_type extract (const_iterator __pos)
           Extract a node.
       allocator_type get_allocator () const noexcept
           Returns the allocator object used by the unordered_multimap.
       hasher hash_function () const
           Returns the hash functor object with which the unordered_multimap
           was constructed.
       template<typename _InputIterator > void insert (_InputIterator __first,
           _InputIterator __last)
           A template function that attempts to insert a range of elements.
       iterator insert (const_iterator __hint, node_type &&__nh)
           Re-insert an extracted node.
       void insert (initializer_list< value_type > __l)
           Attempts to insert a list of elements into the unordered_multimap.
       iterator insert (node_type &&__nh)
           Re-insert an extracted node.
       key_equal key_eq () const
           Returns the key comparison object with which the unordered_multimap
           was constructed.
       float load_factor () const noexcept
           Returns the average number of elements per bucket.
       size_type max_bucket_count () const noexcept
           Returns the maximum number of buckets of the unordered_multimap.
       float max_load_factor () const noexcept
           Returns a positive number that the unordered_multimap tries to keep
           the load factor less than or equal to.
       void max_load_factor (float __z)
           Change the unordered_multimap maximum load factor.
       size_type max_size () const noexcept
           Returns the maximum size of the unordered_multimap.
       template<typename _H2 , typename _P2 > void merge (unordered_map< _Key,
           _Tp, _H2, _P2, _Alloc > &&__source)
       template<typename _H2 , typename _P2 > void merge (unordered_map< _Key,
           _Tp, _H2, _P2, _Alloc > &__source)
       template<typename _H2 , typename _P2 > void merge (unordered_multimap<
           _Key, _Tp, _H2, _P2, _Alloc > &&__source)
       template<typename _H2 , typename _P2 > void merge (unordered_multimap<
           _Key, _Tp, _H2, _P2, _Alloc > &__source)
       unordered_multimap & operator= (const unordered_multimap &)=default
           Copy assignment operator.
       unordered_multimap & operator= (initializer_list< value_type > __l)
           Unordered_multimap list assignment operator.
       unordered_multimap & operator= (unordered_multimap &&)=default
           Move assignment operator.
       void rehash (size_type __n)
           May rehash the unordered_multimap.
       void reserve (size_type __n)
           Prepare the unordered_multimap for a specified number of elements.
       size_type size () const noexcept
           Returns the size of the unordered_multimap.
       void swap (unordered_multimap &__x)
           noexcept(noexcept(_M_h.swap(__x._M_h)))
           Swaps data with another unordered_multimap.

           const_iterator begin () const noexcept
           const_iterator cbegin () const noexcept

           const_iterator end () const noexcept
           const_iterator cend () const noexcept

           iterator insert (const value_type &__x)
               Inserts a std::pair into the unordered_multimap.
           iterator insert (value_type &&__x)
               Inserts a std::pair into the unordered_multimap.
           template<typename _Pair > __enable_if_t< is_constructible<
               value_type, _Pair && >::value, iterator > insert (_Pair &&__x)
               Inserts a std::pair into the unordered_multimap.

           iterator insert (const_iterator __hint, const value_type &__x)
               Inserts a std::pair into the unordered_multimap.
           iterator insert (const_iterator __hint, value_type &&__x)
               Inserts a std::pair into the unordered_multimap.
           template<typename _Pair > __enable_if_t< is_constructible<
               value_type, _Pair && >::value, iterator > insert
               (const_iterator __hint, _Pair &&__x)
               Inserts a std::pair into the unordered_multimap.

           iterator erase (const_iterator __position)
               Erases an element from an unordered_multimap.
           iterator erase (iterator __position)
               Erases an element from an unordered_multimap.

           iterator find (const key_type &__x)
               Tries to locate an element in an unordered_multimap.
           template<typename _Kt > auto find (const _Kt &__x) ->
               decltype(_M_h._M_find_tr(__x))
               Tries to locate an element in an unordered_multimap.
           const_iterator find (const key_type &__x) const
               Tries to locate an element in an unordered_multimap.
           template<typename _Kt > auto find (const _Kt &__x) const ->
               decltype(_M_h._M_find_tr(__x))
               Tries to locate an element in an unordered_multimap.

           size_type count (const key_type &__x) const
               Finds the number of elements.
           template<typename _Kt > auto count (const _Kt &__x) const ->
               decltype(_M_h._M_count_tr(__x))
               Finds the number of elements.

           bool contains (const key_type &__x) const
               Finds whether an element with the given key exists.
           template<typename _Kt > auto contains (const _Kt &__x) const ->
               decltype(_M_h._M_find_tr(__x), void(), true)
               Finds whether an element with the given key exists.

           std::pair< iterator, iterator > equal_range (const key_type &__x)
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) ->
               decltype(_M_h._M_equal_range_tr(__x))
               Finds a subsequence matching given key.
           std::pair< const_iterator, const_iterator > equal_range (const
               key_type &__x) const
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) const ->
               decltype(_M_h._M_equal_range_tr(__x))
               Finds a subsequence matching given key.

           const_local_iterator begin (size_type __n) const
               Returns a read-only (constant) iterator pointing to the first
               bucket element.
           const_local_iterator cbegin (size_type __n) const
               Returns a read-only (constant) iterator pointing to the first
               bucket element.

           const_local_iterator end (size_type __n) const
               Returns a read-only (constant) iterator pointing to one past
               the last bucket elements.
           const_local_iterator cend (size_type __n) const
               Returns a read-only (constant) iterator pointing to one past
               the last bucket elements.

   Friends
       template<typename _Key1 , typename _Tp1 , typename _Hash1 , typename
           _Pred1 , typename _Alloc1 > bool operator== (const
           unordered_multimap< _Key1, _Tp1, _Hash1, _Pred1, _Alloc1 > &, const
           unordered_multimap< _Key1, _Tp1, _Hash1, _Pred1, _Alloc1 > &)
       template<typename , typename , typename > class std::_Hash_merge_helper

Detailed Description
   template<typename _Key, typename _Tp, typename _Hash = hash<_Key>, typename
       _Pred = equal_to<_Key>, typename _Alloc = allocator<std::pair<const
       _Key, _Tp>>>
       class std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >"A
       standard container composed of equivalent keys (possibly containing
       multiple of each key value) that associates values of another type with
       the keys.

       Template Parameters
           _Key Type of key objects.
           _Tp Type of mapped objects.
           _Hash Hashing function object type, defaults to hash<_Value>.
           _Pred Predicate function object type, defaults to equal_to<_Value>.
           _Alloc Allocator type, defaults to std::allocator<std::pair<const
           _Key, _Tp>>.

       Meets the requirements of a container, and unordered associative
       container

       The resulting value type of the container is std::pair<const _Key,
       _Tp>.

       Base is _Hashtable, dispatched at compile time via template alias
       __ummap_hashtable.

       Definition at line 1245 of file unordered_map.

Member Typedef Documentation
   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::allocator_type std::unordered_multimap< _Key, _Tp, _Hash,
       _Pred, _Alloc >::allocator_type
       Public typedefs.

       Definition at line 1259 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::const_iterator std::unordered_multimap< _Key, _Tp, _Hash,
       _Pred, _Alloc >::const_iterator
       Iterator-related typedefs.

       Definition at line 1269 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::const_local_iterator std::unordered_multimap< _Key, _Tp,
       _Hash, _Pred, _Alloc >::const_local_iterator
       Iterator-related typedefs.

       Definition at line 1271 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::const_pointer std::unordered_multimap< _Key, _Tp, _Hash,
       _Pred, _Alloc >::const_pointer
       Iterator-related typedefs.

       Definition at line 1265 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::const_reference std::unordered_multimap< _Key, _Tp, _Hash,
       _Pred, _Alloc >::const_reference
       Iterator-related typedefs.

       Definition at line 1267 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::difference_type std::unordered_multimap< _Key, _Tp, _Hash,
       _Pred, _Alloc >::difference_type
       Iterator-related typedefs.

       Definition at line 1273 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::hasher
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::hasher
       Public typedefs.

       Definition at line 1257 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::iterator
       Iterator-related typedefs.

       Definition at line 1268 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::key_equal
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::key_equal
       Public typedefs.

       Definition at line 1258 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::key_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::key_type
       Public typedefs.

       Definition at line 1254 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::local_iterator std::unordered_multimap< _Key, _Tp, _Hash,
       _Pred, _Alloc >::local_iterator
       Iterator-related typedefs.

       Definition at line 1270 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::mapped_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::mapped_type
       Public typedefs.

       Definition at line 1256 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> using std::unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc >::node_type =  typename
       _Hashtable::node_type
       Definition at line 1277 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::pointer
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::pointer
       Iterator-related typedefs.

       Definition at line 1264 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::reference
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::reference
       Iterator-related typedefs.

       Definition at line 1266 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::size_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::size_type
       Iterator-related typedefs.

       Definition at line 1272 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::value_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::value_type
       Public typedefs.

       Definition at line 1255 of file unordered_map.

Constructor & Destructor Documentation
   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_multimap< _Key,
       _Tp, _Hash, _Pred, _Alloc >::unordered_multimap () [default]
       Default constructor.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_multimap< _Key,
       _Tp, _Hash, _Pred, _Alloc >::unordered_multimap (size_type __n, const
       hasher & __hf = hasher(), const key_equal & __eql = key_equal(), const
       allocator_type & __a = allocator_type()) [inline],  [explicit]
       Default constructor creates no elements.

       Parameters
           __n Mnimal initial number of buckets.
           __hf A hash functor.
           __eql A key equality functor.
           __a An allocator object.

       Definition at line 1293 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _InputIterator
       > std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::unordered_multimap (_InputIterator __first, _InputIterator __last,
       size_type __n = 0, const hasher & __hf = hasher(), const key_equal &
       __eql = key_equal(), const allocator_type & __a = allocator_type())
       [inline]
       Builds an unordered_multimap from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.
           __n Minimal initial number of buckets.
           __hf A hash functor.
           __eql A key equality functor.
           __a An allocator object.

       Create an unordered_multimap consisting of copies of the elements from
       [__first,__last). This is linear in N (where N is
       distance(__first,__last)).

       Definition at line 1314 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_multimap< _Key,
       _Tp, _Hash, _Pred, _Alloc >::unordered_multimap (const
       unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc > &) [default]
       Copy constructor.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_multimap< _Key,
       _Tp, _Hash, _Pred, _Alloc >::unordered_multimap (unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc > &&) [default]
       Move constructor.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_multimap< _Key,
       _Tp, _Hash, _Pred, _Alloc >::unordered_multimap (const allocator_type &
       __a) [inline],  [explicit]
       Creates an unordered_multimap with no elements.

       Parameters
           __a An allocator object.

       Definition at line 1333 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_multimap< _Key,
       _Tp, _Hash, _Pred, _Alloc >::unordered_multimap (const
       unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc > & __ummap, const
       allocator_type & __a) [inline]
       Definition at line 1342 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_multimap< _Key,
       _Tp, _Hash, _Pred, _Alloc >::unordered_multimap (unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc > && __ummap, const allocator_type &
       __a) [inline],  [noexcept]
       Definition at line 1352 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_multimap< _Key,
       _Tp, _Hash, _Pred, _Alloc >::unordered_multimap (initializer_list<
       value_type > __l, size_type __n = 0, const hasher & __hf = hasher(),
       const key_equal & __eql = key_equal(), const allocator_type & __a =
       allocator_type()) [inline]
       Builds an unordered_multimap from an initializer_list.

       Parameters
           __l An initializer_list.
           __n Minimal initial number of buckets.
           __hf A hash functor.
           __eql A key equality functor.
           __a An allocator object.

       Create an unordered_multimap consisting of copies of the elements in
       the list. This is linear in N (where N is __l.size()).

       Definition at line 1369 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_multimap< _Key,
       _Tp, _Hash, _Pred, _Alloc >::unordered_multimap (size_type __n, const
       allocator_type & __a) [inline]
       Definition at line 1377 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_multimap< _Key,
       _Tp, _Hash, _Pred, _Alloc >::unordered_multimap (size_type __n, const
       hasher & __hf, const allocator_type & __a) [inline]
       Definition at line 1381 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _InputIterator
       > std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::unordered_multimap (_InputIterator __first, _InputIterator __last,
       size_type __n, const allocator_type & __a) [inline]
       Definition at line 1387 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _InputIterator
       > std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::unordered_multimap (_InputIterator __first, _InputIterator __last,
       size_type __n, const hasher & __hf, const allocator_type & __a)
       [inline]
       Definition at line 1394 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_multimap< _Key,
       _Tp, _Hash, _Pred, _Alloc >::unordered_multimap (initializer_list<
       value_type > __l, size_type __n, const allocator_type & __a) [inline]
       Definition at line 1400 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_multimap< _Key,
       _Tp, _Hash, _Pred, _Alloc >::unordered_multimap (initializer_list<
       value_type > __l, size_type __n, const hasher & __hf, const
       allocator_type & __a) [inline]
       Definition at line 1406 of file unordered_map.

Member Function Documentation
   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::begin ()
       const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the unordered_multimap.

       Definition at line 1476 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::begin ()
       [inline],  [noexcept]
       Returns a read/write iterator that points to the first element in the
       unordered_multimap.

       Definition at line 1467 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> local_iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::begin
       (size_type __n) [inline]
       Returns a read/write iterator pointing to the first bucket element.

       Parameters
           __n The bucket index.

       Returns
           A read/write local iterator.

       Definition at line 1939 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_local_iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::begin
       (size_type __n) const [inline]
       Returns a read-only (constant) iterator pointing to the first bucket
       element.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1950 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::bucket
       (const key_type & __key) const [inline]
       Definition at line 1929 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::bucket_count () const [inline],  [noexcept]
       Returns the number of buckets of the unordered_multimap.

       Definition at line 1906 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::bucket_size
       (size_type __n) const [inline]
       Definition at line 1920 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::cbegin ()
       const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the unordered_multimap.

       Definition at line 1480 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_local_iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::cbegin
       (size_type __n) const [inline]
       Returns a read-only (constant) iterator pointing to the first bucket
       element.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1954 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::cend ()
       const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the unordered_multimap.

       Definition at line 1502 of file unordered_map.

       Referenced by std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::insert().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_local_iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::cend
       (size_type __n) const [inline]
       Returns a read-only (constant) iterator pointing to one past the last
       bucket elements.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1980 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> void std::unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc >::clear () [inline],  [noexcept]
       Erases all elements in an unordered_multimap. Note that this function
       only erases the elements, and that if the elements themselves are
       pointers, the pointed-to memory is not touched in any way. Managing the
       pointer is the user's responsibility.

       Definition at line 1731 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Kt > auto
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::contains
       (const _Kt & __x) const -> decltype(_M_h._M_find_tr(__x), void(), true)
             [inline]"

       Finds whether an element with the given key exists.

       Parameters
           __x Key of elements to be located.

       Returns
           True if there is any element with the specified key.

       Definition at line 1864 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> bool std::unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc >::contains (const key_type & __x)
       const [inline]
       Finds whether an element with the given key exists.

       Parameters
           __x Key of elements to be located.

       Returns
           True if there is any element with the specified key.

       Definition at line 1859 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Kt > auto
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::count
       (const _Kt & __x) const -> decltype(_M_h._M_count_tr(__x))
             [inline]"

       Finds the number of elements.

       Parameters
           __x Key to count.

       Returns
           Number of elements with specified key.

       Definition at line 1846 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::count
       (const key_type & __x) const [inline]
       Finds the number of elements.

       Parameters
           __x Key to count.

       Returns
           Number of elements with specified key.

       Definition at line 1840 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename... _Args>
       iterator std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::emplace (_Args &&... __args) [inline]
       Attempts to build and insert a std::pair into the unordered_multimap.

       Parameters
           __args Arguments used to generate a new pair instance (see
           std::piecewise_contruct for passing arguments to each part of the
           pair constructor).

       Returns
           An iterator that points to the inserted pair.

       This function attempts to build and insert a (key, value) pair into the
       unordered_multimap.

       Insertion requires amortized constant time.

       Definition at line 1525 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename... _Args>
       iterator std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::emplace_hint (const_iterator __pos, _Args &&... __args) [inline]
       Attempts to build and insert a std::pair into the unordered_multimap.

       Parameters
           __pos An iterator that serves as a hint as to where the pair should
           be inserted.
           __args Arguments used to generate a new pair instance (see
           std::piecewise_contruct for passing arguments to each part of the
           pair constructor).

       Returns
           An iterator that points to the element with key of the std::pair
           built from __args.

       Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires amortized constant time.

       Definition at line 1552 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> bool std::unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc >::empty () const [inline],  [noexcept]
       Returns true if the unordered_multimap is empty.

       Definition at line 1447 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::end ()
       const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the unordered_multimap.

       Definition at line 1498 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::end ()
       [inline],  [noexcept]
       Returns a read/write iterator that points one past the last element in
       the unordered_multimap.

       Definition at line 1489 of file unordered_map.

       Referenced by std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::extract().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> local_iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::end
       (size_type __n) [inline]
       Returns a read/write iterator pointing to one past the last bucket
       elements.

       Parameters
           __n The bucket index.

       Returns
           A read/write local iterator.

       Definition at line 1965 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_local_iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::end
       (size_type __n) const [inline]
       Returns a read-only (constant) iterator pointing to one past the last
       bucket elements.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1976 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Kt > auto
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::equal_range
       (const _Kt & __x) -> decltype(_M_h._M_equal_range_tr(__x))
             [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       Definition at line 1884 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Kt > auto
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::equal_range
       (const _Kt & __x) const -> decltype(_M_h._M_equal_range_tr(__x))
             [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       Definition at line 1896 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::pair< iterator, iterator >
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::equal_range
       (const key_type & __x) [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       Definition at line 1878 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::pair< const_iterator,
       const_iterator > std::unordered_multimap< _Key, _Tp, _Hash, _Pred,
       _Alloc >::equal_range (const key_type & __x) const [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       Definition at line 1890 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::erase
       (const key_type & __x) [inline]
       Erases elements according to the provided key.

       Parameters
           __x Key of elements to be erased.

       Returns
           The number of elements erased.

       This function erases all the elements located by the given key from an
       unordered_multimap. Note that this function only erases the element,
       and that if the element is itself a pointer, the pointed-to memory is
       not touched in any way. Managing the pointer is the user's
       responsibility.

       Definition at line 1702 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::erase
       (const_iterator __first, const_iterator __last) [inline]
       Erases a [__first,__last) range of elements from an unordered_multimap.

       Parameters
           __first Iterator pointing to the start of the range to be erased.
           __last Iterator pointing to the end of the range to be erased.

       Returns
           The iterator __last.

       This function erases a sequence of elements from an unordered_multimap.
       Note that this function only erases the elements, and that if the
       element is itself a pointer, the pointed-to memory is not touched in
       any way. Managing the pointer is the user's responsibility.

       Definition at line 1721 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::erase
       (const_iterator __position) [inline]
       Erases an element from an unordered_multimap.

       Parameters
           __position An iterator pointing to the element to be erased.

       Returns
           An iterator pointing to the element immediately following
           __position prior to the element being erased. If no such element
           exists, end() is returned.

       This function erases an element, pointed to by the given iterator, from
       an unordered_multimap. Note that this function only erases the element,
       and that if the element is itself a pointer, the pointed-to memory is
       not touched in any way. Managing the pointer is the user's
       responsibility.

       Definition at line 1681 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::erase
       (iterator __position) [inline]
       Erases an element from an unordered_multimap.

       Parameters
           __position An iterator pointing to the element to be erased.

       Returns
           An iterator pointing to the element immediately following
           __position prior to the element being erased. If no such element
           exists, end() is returned.

       This function erases an element, pointed to by the given iterator, from
       an unordered_multimap. Note that this function only erases the element,
       and that if the element is itself a pointer, the pointed-to memory is
       not touched in any way. Managing the pointer is the user's
       responsibility.

       Definition at line 1686 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> node_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::extract
       (const key_type & __key) [inline]
       Extract a node.

       Definition at line 1652 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> node_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::extract
       (const_iterator __pos) [inline]
       Extract a node.

       Definition at line 1644 of file unordered_map.

       References std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::end().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Kt > auto
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::find (const
       _Kt & __x) -> decltype(_M_h._M_find_tr(__x))
             [inline]"

       Tries to locate an element in an unordered_multimap.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 1817 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Kt > auto
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::find (const
       _Kt & __x) const -> decltype(_M_h._M_find_tr(__x))
             [inline]"

       Tries to locate an element in an unordered_multimap.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 1828 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::find (const
       key_type & __x) [inline]
       Tries to locate an element in an unordered_multimap.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 1811 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::find (const
       key_type & __x) const [inline]
       Tries to locate an element in an unordered_multimap.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 1822 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> allocator_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::get_allocator () const [inline],  [noexcept]
       Returns the allocator object used by the unordered_multimap.

       Definition at line 1440 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> hasher std::unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc >::hash_function () const [inline]
       Returns the hash functor object with which the unordered_multimap was
       constructed.

       Definition at line 1787 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _InputIterator
       > void std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::insert (_InputIterator __first, _InputIterator __last) [inline]
       A template function that attempts to insert a range of elements.

       Parameters
           __first Iterator pointing to the start of the range to be inserted.
           __last Iterator pointing to the end of the range.

       Complexity similar to that of the range constructor.

       Definition at line 1626 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Pair >
       __enable_if_t< is_constructible< value_type, _Pair && >::value,
       iterator > std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::insert (_Pair && __x) [inline]
       Inserts a std::pair into the unordered_multimap.

       Parameters
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the inserted pair.

       Insertion requires amortized constant time.

       Definition at line 1575 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::insert
       (const value_type & __x) [inline]
       Inserts a std::pair into the unordered_multimap.

       Parameters
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the inserted pair.

       Insertion requires amortized constant time.

       Definition at line 1566 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Pair >
       __enable_if_t< is_constructible< value_type, _Pair && >::value,
       iterator > std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::insert (const_iterator __hint, _Pair && __x) [inline]
       Inserts a std::pair into the unordered_multimap.

       Parameters
           __hint An iterator that serves as a hint as to where the pair
           should be inserted.
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the element with key of __x (may or may
           not be the pair passed in).

       Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires amortized constant time.

       Definition at line 1611 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::insert
       (const_iterator __hint, const value_type & __x) [inline]
       Inserts a std::pair into the unordered_multimap.

       Parameters
           __hint An iterator that serves as a hint as to where the pair
           should be inserted.
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the element with key of __x (may or may
           not be the pair passed in).

       Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires amortized constant time.

       Definition at line 1600 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::insert
       (const_iterator __hint, node_type && __nh) [inline]
       Re-insert an extracted node.

       Definition at line 1662 of file unordered_map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::insert
       (const_iterator __hint, value_type && __x) [inline]
       Inserts a std::pair into the unordered_multimap.

       Parameters
           __hint An iterator that serves as a hint as to where the pair
           should be inserted.
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the element with key of __x (may or may
           not be the pair passed in).

       Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires amortized constant time.

       Definition at line 1606 of file unordered_map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> void std::unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc >::insert (initializer_list< value_type
       > __l) [inline]
       Attempts to insert a list of elements into the unordered_multimap.

       Parameters
           __l A std::initializer_list<value_type> of elements to be inserted.

       Complexity similar to that of the range constructor.

       Definition at line 1638 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::insert
       (node_type && __nh) [inline]
       Re-insert an extracted node.

       Definition at line 1657 of file unordered_map.

       References std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::cend(), and std::move().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::insert
       (value_type && __x) [inline]
       Inserts a std::pair into the unordered_multimap.

       Parameters
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the inserted pair.

       Insertion requires amortized constant time.

       Definition at line 1570 of file unordered_map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> key_equal
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::key_eq ()
       const [inline]
       Returns the key comparison object with which the unordered_multimap was
       constructed.

       Definition at line 1793 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> float std::unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc >::load_factor () const [inline],
       [noexcept]
       Returns the average number of elements per bucket.

       Definition at line 1988 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::max_bucket_count () const [inline],  [noexcept]
       Returns the maximum number of buckets of the unordered_multimap.

       Definition at line 1911 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> float std::unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc >::max_load_factor () const [inline],
       [noexcept]
       Returns a positive number that the unordered_multimap tries to keep the
       load factor less than or equal to.

       Definition at line 1994 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> void std::unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc >::max_load_factor (float __z) [inline]
       Change the unordered_multimap maximum load factor.

       Parameters
           __z The new maximum load factor.

       Definition at line 2002 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::max_size ()
       const [inline],  [noexcept]
       Returns the maximum size of the unordered_multimap.

       Definition at line 1457 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _H2 , typename
       _P2 > void std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::merge (unordered_map< _Key, _Tp, _H2, _P2, _Alloc > && __source)
       [inline]
       Definition at line 1778 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _H2 , typename
       _P2 > void std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::merge (unordered_map< _Key, _Tp, _H2, _P2, _Alloc > & __source)
       [inline]
       Definition at line 1769 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _H2 , typename
       _P2 > void std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::merge (unordered_multimap< _Key, _Tp, _H2, _P2, _Alloc > &&
       __source) [inline]
       Definition at line 1764 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _H2 , typename
       _P2 > void std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc
       >::merge (unordered_multimap< _Key, _Tp, _H2, _P2, _Alloc > & __source)
       [inline]
       Definition at line 1755 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> unordered_multimap &
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::operator=
       (const unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc > &)
       [default]
       Copy assignment operator.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> unordered_multimap &
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::operator=
       (initializer_list< value_type > __l) [inline]
       Unordered_multimap list assignment operator.

       Parameters
           __l An initializer_list.

       This function fills an unordered_multimap with copies of the elements
       in the initializer list __l.

       Note that the assignment completely changes the unordered_multimap and
       that the resulting unordered_multimap's size is the same as the number
       of elements assigned.

       Definition at line 1432 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> unordered_multimap &
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::operator=
       (unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc > &&) [default]
       Move assignment operator.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> void std::unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc >::rehash (size_type __n) [inline]
       May rehash the unordered_multimap.

       Parameters
           __n The new number of buckets.

       Rehash will occur only if the new number of buckets respect the
       unordered_multimap maximum load factor.

       Definition at line 2013 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> void std::unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc >::reserve (size_type __n) [inline]
       Prepare the unordered_multimap for a specified number of elements.

       Parameters
           __n Number of elements required.

       Same as rehash(ceil(n / max_load_factor())).

       Definition at line 2024 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type
       std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >::size ()
       const [inline],  [noexcept]
       Returns the size of the unordered_multimap.

       Definition at line 1452 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> void std::unordered_multimap<
       _Key, _Tp, _Hash, _Pred, _Alloc >::swap (unordered_multimap< _Key, _Tp,
       _Hash, _Pred, _Alloc > & __x) [inline],  [noexcept]
       Swaps data with another unordered_multimap.

       Parameters
           __x An unordered_multimap of the same element and allocator types.

       This exchanges the elements between two unordered_multimap in constant
       time. Note that the global std::swap() function is specialized such
       that std::swap(m1,m2) will feed to this function.

       Definition at line 1745 of file unordered_map.

Friends And Related Function Documentation
   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename , typename ,
       typename > friend class std::_Hash_merge_helper [friend]
       Definition at line 1751 of file unordered_map.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++        std::unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc >(3)
