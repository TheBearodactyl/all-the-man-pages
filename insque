insque(3)                                                                                Library Functions Manual                                                                                insque(3)

NAME
       insque, remque - insert/remove an item from a queue

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <search.h>

       void insque(void *elem, void *prev);
       void remque(void *elem);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       insque(), remque():
           _XOPEN_SOURCE >= 500
               || /* glibc >= 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _SVID_SOURCE

DESCRIPTION
       The insque() and remque() functions manipulate doubly linked lists.  Each element in the list is a structure of which the first two elements are a forward and a backward pointer.  The linked list
       may be linear (i.e., NULL forward pointer at the end of the list and NULL backward pointer at the start of the list) or circular.

       The insque() function inserts the element pointed to by elem immediately after the element pointed to by prev.

       If the list is linear, then the call insque(elem, NULL) can be used to insert the initial list element, and the call sets the forward and backward pointers of elem to NULL.

       If the list is circular, the caller should ensure that the forward and backward pointers of the first element are initialized to point to that element, and the prev argument of the insque()  call
       should also point to the element.

       The remque() function removes the element pointed to by elem from the doubly linked list.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │insque(), remque()                                                                                                                                                      │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
       On ancient systems, the arguments of these functions were of type struct qelem *, defined as:

           struct qelem {
               struct qelem *q_forw;
               struct qelem *q_back;
               char          q_data[1];
           };

       This is still what you will get if _GNU_SOURCE is defined before including <search.h>.

       The location of the prototypes for these functions differs among several versions of UNIX.  The above is the POSIX version.  Some systems place them in <string.h>.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

BUGS
       In glibc 2.4 and earlier, it was not possible to specify prev as NULL.  Consequently, to build a linear list, the caller had to build a list using an initial call that contained the first two el‐
       ements of the list, with the forward and backward pointers in each element suitably initialized.

EXAMPLES
       The program below demonstrates the use of insque().  Here is an example run of the program:

           $ ./a.out -c a b c
           Traversing completed list:
               a
               b
               c
           That was a circular list

   Program source

       #include <search.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>

       struct element {
           struct element *forward;
           struct element *backward;
           char *name;
       };

       static struct element *
       new_element(void)
       {
           struct element *e;

           e = malloc(sizeof(*e));
           if (e == NULL) {
               fprintf(stderr, "malloc() failed\n");
               exit(EXIT_FAILURE);
           }

           return e;
       }

       int
       main(int argc, char *argv[])
       {
           struct element *first, *elem, *prev;
           int circular, opt, errfnd;

           /* The "-c" command-line option can be used to specify that the
              list is circular. */

           errfnd = 0;
           circular = 0;
           while ((opt = getopt(argc, argv, "c")) != -1) {
               switch (opt) {
               case 'c':
                   circular = 1;
                   break;
               default:
                   errfnd = 1;
                   break;
               }
           }

           if (errfnd || optind >= argc) {
               fprintf(stderr,  "Usage: %s [-c] string...\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           /* Create first element and place it in the linked list. */

           elem = new_element();
           first = elem;

           elem->name = argv[optind];

           if (circular) {
               elem->forward = elem;
               elem->backward = elem;
               insque(elem, elem);
           } else {
               insque(elem, NULL);
           }

           /* Add remaining command-line arguments as list elements. */

           while (++optind < argc) {
               prev = elem;

               elem = new_element();
               elem->name = argv[optind];
               insque(elem, prev);
           }

           /* Traverse the list from the start, printing element names. */

           printf("Traversing completed list:\n");
           elem = first;
           do {
               printf("    %s\n", elem->name);
               elem = elem->forward;
           } while (elem != NULL && elem != first);

           if (elem == first)
               printf("That was a circular list\n");

           exit(EXIT_SUCCESS);
       }

SEE ALSO
       queue(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                       insque(3)
INSQUE(3P)                                                                               POSIX Programmer's Manual                                                                              INSQUE(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       insque, remque — insert or remove an element in a queue

SYNOPSIS
       #include <search.h>

       void insque(void *element, void *pred);
       void remque(void *element);

DESCRIPTION
       The insque() and remque() functions shall manipulate queues built from doubly-linked lists.  The queue can be either circular or linear. An application using insque() or remque() shall ensure  it
       defines a structure in which the first two members of the structure are pointers to the same type of structure, and any further members are application-specific. The first member of the structure
       is a forward pointer to the next entry in the queue. The second member is a backward pointer to the previous entry in the queue.  If the queue is linear, the queue is terminated with null  point‐
       ers. The names of the structure and of the pointer members are not subject to any special restriction.

       The insque() function shall insert the element pointed to by element into a queue immediately after the element pointed to by pred.

       The remque() function shall remove the element pointed to by element from a queue.

       If  the  queue is to be used as a linear list, invoking insque(&element, NULL), where element is the initial element of the queue, shall initialize the forward and backward pointers of element to
       null pointers.

       If the queue is to be used as a circular list, the application shall ensure it initializes the forward pointer and the backward pointer of the initial element of the queue to  the  element's  own
       address.

RETURN VALUE
       The insque() and remque() functions do not return a value.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
   Creating a Linear Linked List
       The following example creates a linear linked list.

           #include <search.h>
           ...
           struct myque element1;
           struct myque element2;

           char *data1 = "DATA1";
           char *data2 = "DATA2";
           ...
           element1.data = data1;
           element2.data = data2;

           insque (&element1, NULL);
           insque (&element2, &element1);

   Creating a Circular Linked List
       The following example creates a circular linked list.

           #include <search.h>
           ...
           struct myque element1;
           struct myque element2;

           char *data1 = "DATA1";
           char *data2 = "DATA2";
           ...
           element1.data = data1;
           element2.data = data2;

           element1.fwd = &element1;
           element1.bck = &element1;

           insque (&element2, &element1);

   Removing an Element
       The following example removes the element pointed to by element1.

           #include <search.h>
           ...
           struct myque element1;
           ...
           remque (&element1);

APPLICATION USAGE
       The  historical  implementations  of  these functions described the arguments as being of type struct qelem * rather than as being of type void * as defined here. In those implementations, struct
       qelem was commonly defined in <search.h> as:

           struct qelem {
               struct qelem  *q_forw;
               struct qelem  *q_back;
           };

       Applications using these functions, however, were never able to use this structure directly since it provided no room for the actual data contained in  the  elements.  Most  applications  defined
       structures  that  contained the two pointers as the initial elements and also provided space for, or pointers to, the object's data. Applications that used these functions to update more than one
       type of table also had the problem of specifying two or more different structures with the same name, if they literally used struct qelem as specified.

       As described here, the implementations were actually expecting a structure type where the first two members were forward and backward pointers to structures. With C compilers that didn't  provide
       function prototypes, applications used structures as specified in the DESCRIPTION above and the compiler did what the application expected.

       If this method had been carried forward with an ISO C standard compiler and the historical function prototype, most applications would have to be modified to cast pointers to the structures actu‐
       ally used to be pointers to struct qelem to avoid compilation warnings. By specifying void * as the argument type, applications do not need to change (unless they specifically  referenced  struct
       qelem and depended on it being defined in <search.h>).

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       The Base Definitions volume of POSIX.1‐2017, <search.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                         INSQUE(3P)
