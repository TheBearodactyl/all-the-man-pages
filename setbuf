setbuf(3)                  Library Functions Manual                  setbuf(3)

NAME
       setbuf, setbuffer, setlinebuf, setvbuf - stream buffering operations

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdio.h>

       int setvbuf(FILE *restrict stream, char buf[restrict .size],
                   int mode, size_t size);

       void setbuf(FILE *restrict stream, char *restrict buf);
       void setbuffer(FILE *restrict stream, char buf[restrict .size],
                   size_t size);
       void setlinebuf(FILE *stream);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       setbuffer(), setlinebuf():
           Since glibc 2.19:
               _DEFAULT_SOURCE
           glibc 2.19 and earlier:
               _BSD_SOURCE

DESCRIPTION
       The  three types of buffering available are unbuffered, block buffered,
       and line buffered.  When an output stream  is  unbuffered,  information
       appears on the destination file or terminal as soon as written; when it
       is block buffered, many characters are saved up and written as a block;
       when  it  is  line buffered, characters are saved up until a newline is
       output or input is read from any stream attached to a  terminal  device
       (typically  stdin).   The  function  fflush(3) may be used to force the
       block out early.  (See fclose(3).)

       Normally all files are block buffered.  If a stream refers to a  termi‐
       nal (as stdout normally does), it is line buffered.  The standard error
       stream stderr is always unbuffered by default.

       The setvbuf() function may be used on any open  stream  to  change  its
       buffer.  The mode argument must be one of the following three macros:

              _IONBF unbuffered

              _IOLBF line buffered

              _IOFBF fully buffered

       Except  for unbuffered files, the buf argument should point to a buffer
       at least size bytes long; this buffer will be used instead of the  cur‐
       rent buffer.  If the argument buf is NULL, only the mode is affected; a
       new buffer will be allocated on the next read or write operation.   The
       setvbuf()  function  may be used only after opening a stream and before
       any other operations have been performed on it.

       The other three calls are, in  effect,  simply  aliases  for  calls  to
       setvbuf().  The setbuf() function is exactly equivalent to the call

           setvbuf(stream, buf, buf ? _IOFBF : _IONBF, BUFSIZ);

       The  setbuffer() function is the same, except that the size of the buf‐
       fer is up to the caller, rather than being determined  by  the  default
       BUFSIZ.  The setlinebuf() function is exactly equivalent to the call:

           setvbuf(stream, NULL, _IOLBF, 0);

RETURN VALUE
       The  function  setvbuf()  returns  0 on success.  It returns nonzero on
       failure (mode is invalid or the request cannot be honored).  It may set
       errno on failure.

       The other functions do not return a value.

ATTRIBUTES
       For  an  explanation  of  the  terms  used  in  this  section,  see at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │setbuf(), setbuffer(), setlinebuf(),        │ Thread safety │ MT-Safe │
       │setvbuf()                                   │               │         │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       setbuf()
       setvbuf()
              C11, POSIX.1-2008.

HISTORY
       setbuf()
       setvbuf()
              C89, POSIX.1-2001.

CAVEATS
       POSIX notes that the value of errno is unspecified after a call to set‐
       buf() and further notes that, since the value of errno is not  required
       to  be  unchanged  after  a  successful  call to setbuf(), applications
       should instead use setvbuf() in order to detect errors.

BUGS
       You must make sure that the space that buf points to  still  exists  by
       the  time  stream is closed, which also happens at program termination.
       For example, the following is invalid:

       #include <stdio.h>

       int
       main(void)
       {
           char buf[BUFSIZ];

           setbuf(stdout, buf);
           printf("Hello, world!\n");
           return 0;
       }

SEE ALSO
       stdbuf(1),  fclose(3),  fflush(3),   fopen(3),   fread(3),   malloc(3),
       printf(3), puts(3)

Linux man-pages 6.04              2023-03-30                         setbuf(3)
SETBUF(3P)                 POSIX Programmer's Manual                SETBUF(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       setbuf — assign buffering to a stream

SYNOPSIS
       #include <stdio.h>

       void setbuf(FILE *restrict stream, char *restrict buf);

DESCRIPTION
       The functionality described on this reference page is aligned with  the
       ISO C  standard.  Any  conflict between the requirements described here
       and the ISO C standard is unintentional. This  volume  of  POSIX.1‐2017
       defers to the ISO C standard.

       Except that it returns no value, the function call:

           setbuf(stream, buf)

       shall be equivalent to:

           setvbuf(stream, buf, _IOFBF, BUFSIZ)

       if buf is not a null pointer, or to:

           setvbuf(stream, buf, _IONBF, BUFSIZ)

       if buf is a null pointer.

RETURN VALUE
       The setbuf() function shall not return a value.

ERRORS
       Although  the  setvbuf()  interface  may set errno in defined ways, the
       value of errno after a call to setbuf() is unspecified.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       A common source of error is allocating buffer space as an ``automatic''
       variable  in  a code block, and then failing to close the stream in the
       same block.

       With setbuf(), allocating a buffer of BUFSIZ bytes does not necessarily
       imply that all of BUFSIZ bytes are used for the buffer area.

       Since  errno  is  not  required to be unchanged on success, in order to
       correctly detect and possibly recover from errors, applications  should
       use setvbuf() instead of setbuf().

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.5, Standard I/O Streams, fopen(), setvbuf()

       The Base Definitions volume of POSIX.1‐2017, <stdio.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                           SETBUF(3P)
