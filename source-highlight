SOURCE-HIGHLIGHT(1)              User Commands             SOURCE-HIGHLIGHT(1)

NAME
       Source-highlight - convert source code to syntax highlighted document

SYNOPSIS
       source-highlight [OPTIONS]... < INPUT_FILE > OUTPUT_FILE

DESCRIPTION
       GNU GNU source-highlight 3.1.9

       Highlight  the syntax of a source file (e.g. Java) into a specific for‐
       mat (e.g.  HTML)

              source-highlight  [OPTIONS]...  -i  INPUT_FILE  -o   OUTPUT_FILE
              source-highlight [OPTIONS]... [FILES]...

       -h, --help
              Print help and exit

       --detailed-help
              Print help, including all details and hidden options, and exit

       -V, --version
              Print version and exit

       -i, --input=FILENAME
              Input file (default=stdin)

       -o, --output=FILENAME
              Output  file  (default=stdout, when the third invocation form is
              used). If 'STDOUT' is specified, the output is directed to stan‐
              dard output

       You can simply specify some files at the command line and also use reg‐
       ular expressions (for instance *.java).  In this case the name for  the
       output  files  will  be formed using the name of the source file with a
       .EXT appended, where EXT is the extension chosen according to the  out‐
       put format specified (for instance .html).

       -s, --src-lang=STRING
              source  language (use --lang-list to get the complete list).  If
              not specified, the source language will be guessed from the file
              extension.

       --lang-list
              list  all the supported language and associated language defini‐
              tion file

       --outlang-list
              list all the supported output language and  associated  language
              definition file

       -f, --out-format=STRING
              output  format  (use  --outlang-list  to  get the complete list)
              (default=`html')

       -d, --doc
              create an output file that can be used as a stand alone document
              (e.g., not to be included in another one)

       --no-doc
              cancel the --doc option even if it is implied (e.g., when css is
              given)

       -c, --css=FILENAME
              the external style sheet filename.  Implies --doc

       -T, --title=STRING
              give a title to the output document.  Implies --doc

       -t, --tab=INT
              specify tab length.  (default=`8')

       -H, --header=FILENAME
              file to insert as header

       -F, --footer=FILENAME
              file to insert as footer

       --style-file=FILENAME
              specify  the  file  containing  format   options   (default=`de‐
              fault.style')

       --style-css-file=FILENAME  specify  the  file containing format options
       (in
              css syntax)

       --style-defaults=FILENAME specify the file containing defaults for for‐
       mat
              options  (default=`style.defaults')

       --outlang-def=FILENAME
              output language definition file

       --outlang-map=FILENAME
              output language map file (default=`outlang.map')

       --data-dir=PATH
              directory  where language definition files and language maps are
              searched for.  If not specified these files are searched for  in
              the current directory and in the data dir installation directory

       --output-dir=PATH
              output directory

       --lang-def=FILENAME
              language definition file

       --lang-map=FILENAME
              language map file  (default=`lang.map')

       --show-lang-elements=FILENAME
              prints the language elements that are defined

              in the language definition file

       --infer-lang
              force to infer source script language (overriding given language
              specification)

   Lines:
       -n, --line-number[=PADDING]
              number all output lines, using the specified  padding  character
              (default=`0')

       --line-number-ref[=PREFIX]
              number all output lines and generate an anchor,

       made of the specified prefix + the line
              number  (default=`line')

       Filtering output:

              Mode: linerange

              specifying line ranges

       --line-range=STRING
              generate only the lines in the specified range(s)

       --range-separator=STRING
              the optional separator to be printed among ranges (e.g., "...")

       --range-context=INT
              number of (context) lines generated even if not in range

              Mode: regexrange

              specifying regular expression delimited ranges

       --regex-range=STRING
              generate only the lines within the specified regular expressions

   reference generation:
       --gen-references=STRING
              generate   references   (possible  values="inline",  "postline",
              "postdoc" default=`inline')

       --ctags-file=FILENAME
              specify the file generated by ctags that will be used to  gener‐
              ate references (default=`tags')

       --ctags=CMD
              how  to run the ctags command.  If this option is not specified,
              ctags will be executed with the default value.  If it is  speci‐
              fied  with  an  empty  string, ctags will not be executed at all
              (default=`ctags --excmd=n --tag-relative=yes')

   testing:
       -v, --verbose
              verbose mode on

       -q, --quiet
              print no progress information

       --binary-output
              write output files in binary mode

       --statistics
              print some statistics (i.e., elapsed time)

       --gen-version
              put source-highlight version in the generated file  (default=on)

       --check-lang=FILENAME
              only check the correctness of a language definition file

       --check-outlang=FILENAME
              only check the correctness of an output language definition file

       --failsafe
              if no language definition is found for the input, it  is  simply
              copied to the output

       -g, --debug-langdef[=TYPE]
              debug  a  language  definition.  In dump mode just dumps all the
              steps; in interactive, at each step, waits for some input (press
              ENTER  to  step)   (possible  values="interactive",  "dump"  de‐
              fault=`dump')

       --show-regex=FILENAME
              show the regular expression automaton corresponding  to  a  lan‐
              guage definition file

       Maintained by Lorenzo Bettini <http://www.lorenzobettini.it>

REPORTING BUGS
       Report bugs to <bug-source-highlight at gnu.org>

COPYRIGHT
       Copyright  ©  1999-2008  Lorenzo Bettini <http://www.lorenzobettini.it>
       This program comes with ABSOLUTELY NO WARRANTY.
       This is free software; you may redistribute copies of the program under
       the  terms  of  the  GNU  General Public License.  For more information
       about these matters, see the file named COPYING.

SEE ALSO
       The full documentation for Source-highlight is maintained as a  Texinfo
       manual.   If  the  info  and Source-highlight programs are properly in‐
       stalled at your site, the command

              info Source-highlight

       should give you access to the complete manual.

Source-highlight 3.1.9 (library: 4:June 2019               SOURCE-HIGHLIGHT(1)
