strtod(3)                  Library Functions Manual                  strtod(3)

NAME
       strtod, strtof, strtold - convert ASCII string to floating-point number

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdlib.h>

       double strtod(const char *restrict nptr, char **restrict endptr);
       float strtof(const char *restrict nptr, char **restrict endptr);
       long double strtold(const char *restrict nptr, char **restrict endptr);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       strtof(), strtold():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L

DESCRIPTION
       The  strtod(),  strtof(),  and  strtold() functions convert the initial
       portion of the string pointed to by nptr to  double,  float,  and  long
       double representation, respectively.

       The  expected  form  of the (initial portion of the) string is optional
       leading white space as recognized by isspace(3), an optional plus ('+')
       or  minus  sign  ('-')  and then either (i) a decimal number, or (ii) a
       hexadecimal number, or (iii) an infinity, or (iv) a NAN (not-a-number).

       A decimal number consists of a nonempty sequence of decimal digits pos‐
       sibly  containing  a  radix character (decimal point, locale-dependent,
       usually '.'), optionally followed by a decimal exponent.  A decimal ex‐
       ponent consists of an 'E' or 'e', followed by an optional plus or minus
       sign, followed by a nonempty sequence of decimal digits, and  indicates
       multiplication by a power of 10.

       A  hexadecimal number consists of a "0x" or "0X" followed by a nonempty
       sequence of hexadecimal digits possibly containing a  radix  character,
       optionally  followed  by a binary exponent.  A binary exponent consists
       of a 'P' or 'p', followed by an optional plus or minus  sign,  followed
       by  a nonempty sequence of decimal digits, and indicates multiplication
       by a power of 2.  At least one of radix character and  binary  exponent
       must be present.

       An infinity is either "INF" or "INFINITY", disregarding case.

       A NAN is "NAN" (disregarding case) optionally followed by a string, (n-
       char-sequence), where n-char-sequence specifies in  an  implementation-
       dependent way the type of NAN (see NOTES).

RETURN VALUE
       These functions return the converted value, if any.

       If  endptr is not NULL, a pointer to the character after the last char‐
       acter used in the conversion is stored in the  location  referenced  by
       endptr.

       If  no  conversion is performed, zero is returned and (unless endptr is
       null) the value of nptr is stored in the location referenced by endptr.

       If the correct value would cause  overflow,  plus  or  minus  HUGE_VAL,
       HUGE_VALF,  or  HUGE_VALL is returned (according to the return type and
       sign of the value), and ERANGE is stored in errno.

       If the correct value would cause underflow, a value with  magnitude  no
       larger  than  DBL_MIN,  FLT_MIN,  or LDBL_MIN is returned and ERANGE is
       stored in errno.

ERRORS
       ERANGE Overflow or underflow occurred.

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌─────────────────────────────────────┬───────────────┬────────────────┐
       │Interface                            │ Attribute     │ Value          │
       ├─────────────────────────────────────┼───────────────┼────────────────┤
       │strtod(), strtof(), strtold()        │ Thread safety │ MT-Safe locale │
       └─────────────────────────────────────┴───────────────┴────────────────┘

VERSIONS
       In  the  glibc implementation, the n-char-sequence that optionally fol‐
       lows "NAN" is interpreted as an integer number (with an optional '0' or
       '0x' prefix to select base 8 or 16) that is to be placed in the mantis‐
       sa component of the returned value.

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       strtod()
              C89, POSIX.1-2001.

       strtof()
       strtold()
              C99, POSIX.1-2001.

NOTES
       Since 0 can legitimately be returned on both success and  failure,  the
       calling  program should set errno to 0 before the call, and then deter‐
       mine if an error occurred by checking whether errno has a nonzero value
       after the call.

EXAMPLES
       See  the example on the strtol(3) manual page; the use of the functions
       described in this manual page is similar.

SEE ALSO
       atof(3), atoi(3), atol(3), nan(3), nanf(3), nanl(3), strfromd(3),  str‐
       tol(3), strtoul(3)

Linux man-pages 6.04              2023-03-30                         strtod(3)
STRTOLD(3P)                POSIX Programmer's Manual               STRTOLD(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       strtold — convert a string to a double-precision number

SYNOPSIS
       #include <stdlib.h>

       long double strtold(const char *restrict nptr, char **restrict endptr);

DESCRIPTION
       Refer to strtod().

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                          STRTOLD(3P)
