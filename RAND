RAND(7ssl)                          OpenSSL                         RAND(7ssl)

NAME
       RAND - the OpenSSL random generator

DESCRIPTION
       Random numbers are a vital part of cryptography, they are needed to
       provide unpredictability for tasks like key generation, creating salts,
       and many more.  Software-based generators must be seeded with external
       randomness before they can be used as a cryptographically-secure
       pseudo-random number generator (CSPRNG).  The availability of common
       hardware with special instructions and modern operating systems, which
       may use items such as interrupt jitter and network packet timings, can
       be reasonable sources of seeding material.

       OpenSSL comes with a default implementation of the RAND API which is
       based on the deterministic random bit generator (DRBG) model as
       described in [NIST SP 800-90A Rev. 1]. The default random generator
       will initialize automatically on first use and will be fully functional
       without having to be initialized ('seeded') explicitly.  It seeds and
       reseeds itself automatically using trusted random sources provided by
       the operating system.

       As a normal application developer, you do not have to worry about any
       details, just use RAND_bytes(3) to obtain random data.  Having said
       that, there is one important rule to obey: Always check the error
       return value of RAND_bytes(3) and do not take randomness for granted.
       Although (re-)seeding is automatic, it can fail because no trusted
       random source is available or the trusted source(s) temporarily fail to
       provide sufficient random seed material.  In this case the CSPRNG
       enters an error state and ceases to provide output, until it is able to
       recover from the error by reseeding itself.  For more details on
       reseeding and error recovery, see EVP_RAND(7).

       For values that should remain secret, you can use RAND_priv_bytes(3)
       instead.  This method does not provide 'better' randomness, it uses the
       same type of CSPRNG.  The intention behind using a dedicated CSPRNG
       exclusively for private values is that none of its output should be
       visible to an attacker (e.g., used as salt value), in order to reveal
       as little information as possible about its internal state, and that a
       compromise of the "public" CSPRNG instance will not affect the secrecy
       of these private values.

       In the rare case where the default implementation does not satisfy your
       special requirements, the default RAND internals can be replaced by
       your own EVP_RAND(3) objects.

       Changing the default random generator should be necessary only in
       exceptional cases and is not recommended, unless you have a profound
       knowledge of cryptographic principles and understand the implications
       of your changes.

DEFAULT SETUP
       The default OpenSSL RAND method is based on the EVP_RAND deterministic
       random bit generator (DRBG) classes.  A DRBG is a certain type of
       cryptographically-secure pseudo-random number generator (CSPRNG), which
       is described in [NIST SP 800-90A Rev. 1].

SEE ALSO
       RAND_bytes(3), RAND_priv_bytes(3), EVP_RAND(3), RAND_get0_primary(3),
       EVP_RAND(7)

COPYRIGHT
       Copyright 2018-2021 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the Apache License 2.0 (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.

3.0.8                             2023-02-07                        RAND(7ssl)
OPENSSL-CMDS(1ssl)                  OpenSSL                 OPENSSL-CMDS(1ssl)

NAME
       asn1parse, ca, ciphers, cmp, cms, crl, crl2pkcs7, dgst, dhparam, dsa,
       dsaparam, ec, ecparam, enc, engine, errstr, gendsa, genpkey, genrsa,
       info, kdf, mac, nseq, ocsp, passwd, pkcs12, pkcs7, pkcs8, pkey,
       pkeyparam, pkeyutl, prime, rand, rehash, req, rsa, rsautl, s_client,
       s_server, s_time, sess_id, smime, speed, spkac, srp, storeutl, ts,
       verify, version, x509 - OpenSSL application commands

SYNOPSIS
       openssl cmd -help | [-option | -option arg] ... [arg] ...

DESCRIPTION
       Every cmd listed above is a (sub-)command of the openssl(1)
       application.  It has its own detailed manual page at openssl-cmd(1).
       For example, to view the manual page for the openssl dgst command, type
       "man openssl-dgst".

OPTIONS
       Among others, every subcommand has a help option.

       -help
           Print out a usage message for the subcommand.

SEE ALSO
       openssl(1), openssl-asn1parse(1), openssl-ca(1), openssl-ciphers(1),
       openssl-cmp(1), openssl-cms(1), openssl-crl(1), openssl-crl2pkcs7(1),
       openssl-dgst(1), openssl-dhparam(1), openssl-dsa(1),
       openssl-dsaparam(1), openssl-ec(1), openssl-ecparam(1), openssl-enc(1),
       openssl-engine(1), openssl-errstr(1), openssl-gendsa(1),
       openssl-genpkey(1), openssl-genrsa(1), openssl-info(1), openssl-kdf(1),
       openssl-mac(1), openssl-nseq(1), openssl-ocsp(1), openssl-passwd(1),
       openssl-pkcs12(1), openssl-pkcs7(1), openssl-pkcs8(1), openssl-pkey(1),
       openssl-pkeyparam(1), openssl-pkeyutl(1), openssl-prime(1),
       openssl-rand(1), openssl-rehash(1), openssl-req(1), openssl-rsa(1),
       openssl-rsautl(1), openssl-s_client(1), openssl-s_server(1),
       openssl-s_time(1), openssl-sess_id(1), openssl-smime(1),
       openssl-speed(1), openssl-spkac(1), openssl-srp(1),
       openssl-storeutl(1), openssl-ts(1), openssl-verify(1),
       openssl-version(1), openssl-x509(1),

HISTORY
       Initially, the manual page entry for the "openssl cmd" command used to
       be available at cmd(1). Later, the alias openssl-cmd(1) was introduced,
       which made it easier to group the openssl commands using the apropos(1)
       command or the shell's tab completion.

       In order to reduce cluttering of the global manual page namespace, the
       manual page entries without the 'openssl-' prefix have been deprecated
       in OpenSSL 3.0 and will be removed in OpenSSL 4.0.

COPYRIGHT
       Copyright 2019-2022 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the Apache License 2.0 (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.

3.0.8                             2023-02-07                OPENSSL-CMDS(1ssl)
rand(3)                    Library Functions Manual                    rand(3)

NAME
       rand, rand_r, srand - pseudo-random number generator

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdlib.h>

       int rand(void);
       void srand(unsigned int seed);

       [[deprecated]] int rand_r(unsigned int *seedp);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       rand_r():
           Since glibc 2.24:
               _POSIX_C_SOURCE >= 199506L
           glibc 2.23 and earlier
               _POSIX_C_SOURCE

DESCRIPTION
       The  rand()  function returns a pseudo-random integer in the range 0 to
       RAND_MAX inclusive (i.e., the mathematical range [0, RAND_MAX]).

       The srand() function sets its argument as the seed for a  new  sequence
       of  pseudo-random  integers  to be returned by rand().  These sequences
       are repeatable by calling srand() with the same seed value.

       If no seed value is provided,  the  rand()  function  is  automatically
       seeded with a value of 1.

       The  function  rand() is not reentrant, since it uses hidden state that
       is modified on each call.  This might just be the seed value to be used
       by the next call, or it might be something more elaborate.  In order to
       get reproducible behavior in a threaded application, this state must be
       made explicit; this can be done using the reentrant function rand_r().

       Like  rand(),  rand_r()  returns  a  pseudo-random integer in the range
       [0, RAND_MAX].  The seedp argument is a pointer to an unsigned int that
       is  used  to store state between calls.  If rand_r() is called with the
       same initial value for the integer pointed to by seedp, and that  value
       is  not  modified  between  calls, then the same pseudo-random sequence
       will result.

       The value pointed to by the seedp argument of rand_r() provides only  a
       very small amount of state, so this function will be a weak pseudo-ran‐
       dom generator.  Try drand48_r(3) instead.

RETURN VALUE
       The rand() and rand_r() functions return a value between 0 and RAND_MAX
       (inclusive).  The srand() function returns no value.

ATTRIBUTES
       For  an  explanation  of  the  terms  used  in  this  section,  see at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │rand(), rand_r(), srand()                   │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
       The versions of rand() and srand() in the Linux C Library use the  same
       random number generator as random(3) and srandom(3), so the lower-order
       bits should be as random as the higher-order bits.  However,  on  older
       rand()  implementations,  and  on  current implementations on different
       systems, the lower-order bits are much less random than the  higher-or‐
       der bits.  Do not use this function in applications intended to be por‐
       table when good randomness is needed.  (Use random(3) instead.)

STANDARDS
       rand()
       srand()
              C11, POSIX.1-2008.

       rand_r()
              POSIX.1-2008.

HISTORY
       rand()
       srand()
              SVr4, 4.3BSD, C89, POSIX.1-2001.

       rand_r()
              POSIX.1-2001.  Obsolete in POSIX.1-2008.

EXAMPLES
       POSIX.1-2001 gives the following example of an implementation of rand()
       and  srand(),  possibly  useful when one needs the same sequence on two
       different machines.

           static unsigned long next = 1;

           /* RAND_MAX assumed to be 32767 */
           int myrand(void) {
               next = next * 1103515245 + 12345;
               return((unsigned)(next/65536) % 32768);
           }

           void mysrand(unsigned int seed) {
               next = seed;
           }

       The following program can be used to display the pseudo-random sequence
       produced  by rand() when given a particular seed.  When the seed is -1,
       the program uses a random seed.

           #include <stdio.h>
           #include <stdlib.h>

           int
           main(int argc, char *argv[])
           {
               int           r;
               unsigned int  seed, nloops;

               if (argc != 3) {
                   fprintf(stderr, "Usage: %s <seed> <nloops>\n", argv[0]);
                   exit(EXIT_FAILURE);
               }

               seed = atoi(argv[1]);
               nloops = atoi(argv[2]);

               if (seed == -1) {
                   seed = arc4random();
                   printf("seed: %u\n", seed);
               }

               srand(seed);
               for (unsigned int j = 0; j < nloops; j++) {
                   r =  rand();
                   printf("%d\n", r);
               }

               exit(EXIT_SUCCESS);
           }

SEE ALSO
       drand48(3), random(3)

Linux man-pages 6.04              2023-03-30                           rand(3)
RAND(3P)                   POSIX Programmer's Manual                  RAND(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       rand, rand_r, srand — pseudo-random number generator

SYNOPSIS
       #include <stdlib.h>

       int rand(void);
       int rand_r(unsigned *seed);
       void srand(unsigned seed);

DESCRIPTION
       For rand() and srand(): The functionality described on  this  reference
       page  is  aligned with the ISO C standard. Any conflict between the re‐
       quirements described here and the ISO C standard is unintentional. This
       volume of POSIX.1‐2017 defers to the ISO C standard.

       The  rand() function shall compute a sequence of pseudo-random integers
       in the range [0,{RAND_MAX}] with a period of at least 232.

       The rand() function need not be thread-safe.

       The rand_r() function shall compute a sequence of  pseudo-random  inte‐
       gers  in  the range [0,{RAND_MAX}].  (The value of the {RAND_MAX} macro
       shall be at least 32767.)

       If rand_r() is called with  the  same  initial  value  for  the  object
       pointed  to  by seed and that object is not modified between successive
       returns and calls to rand_r(), the same sequence shall be generated.

       The srand() function uses the argument as a seed for a new sequence  of
       pseudo-random numbers to be returned by subsequent calls to rand().  If
       srand() is then called with  the  same  seed  value,  the  sequence  of
       pseudo-random numbers shall be repeated. If rand() is called before any
       calls to srand() are made, the same sequence shall be generated as when
       srand() is first called with a seed value of 1.

       The  implementation shall behave as if no function defined in this vol‐
       ume of POSIX.1‐2017 calls rand() or srand().

RETURN VALUE
       The rand() function shall return the next pseudo-random number  in  the
       sequence.

       The rand_r() function shall return a pseudo-random integer.

       The srand() function shall not return a value.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
   Generating a Pseudo-Random Number Sequence
       The  following  example  demonstrates  how  to  generate  a sequence of
       pseudo-random numbers.

           #include <stdio.h>
           #include <stdlib.h>
           ...
               long count, i;
               char *keystr;
               int elementlen, len;
               char c;
           ...
           /* Initial random number generator. */
               srand(1);

               /* Create keys using only lowercase characters */
               len = 0;
               for (i=0; i<count; i++) {
                   while (len < elementlen) {
                       c = (char) (rand() % 128);
                       if (islower(c))
                           keystr[len++] = c;
                   }

                   keystr[len] = '\0';
                   printf("%s Element%0*ld\n", keystr, elementlen, i);
                   len = 0;
               }

   Generating the Same Sequence on Different Machines
       The following code defines a pair of functions that could  be  incorpo‐
       rated  into  applications  wishing  to ensure that the same sequence of
       numbers is generated across different machines.

           static unsigned long next = 1;
           int myrand(void)  /* RAND_MAX assumed to be 32767. */
           {
               next = next * 1103515245 + 12345;
               return((unsigned)(next/65536) % 32768);
           }

           void mysrand(unsigned seed)
           {
               next = seed;
           }

APPLICATION USAGE
       The drand48()  and  random()  functions  provide  much  more  elaborate
       pseudo-random number generators.

       The  limitations on the amount of state that can be carried between one
       function call and another mean the rand_r() function can never  be  im‐
       plemented in a way which satisfies all of the requirements on a pseudo-
       random number generator.

       These functions should be  avoided  whenever  non-trivial  requirements
       (including safety) have to be fulfilled.

RATIONALE
       The  ISO C  standard  rand()  and  srand()  functions allow per-process
       pseudo-random streams shared by all threads. Those two  functions  need
       not  change,  but there has to be mutual-exclusion that prevents inter‐
       ference between two threads concurrently accessing  the  random  number
       generator.

       With  regard  to  rand(), there are two different behaviors that may be
       wanted in a multi-threaded program:

        1. A single per-process sequence  of  pseudo-random  numbers  that  is
           shared by all threads that call rand()

        2. A  different sequence of pseudo-random numbers for each thread that
           calls rand()

       This is provided by the modified thread-safe function based on  whether
       the seed value is global to the entire process or local to each thread.

       This does not address the known deficiencies of the rand() function im‐
       plementations, which have been approached by maintaining more state. In
       effect, this specifies new thread-safe forms of a deficient function.

FUTURE DIRECTIONS
       The rand_r() function may be removed in a future version.

SEE ALSO
       drand48(), initstate()

       The Base Definitions volume of POSIX.1‐2017, <stdlib.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                             RAND(3P)
