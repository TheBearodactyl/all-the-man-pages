y0(3)                                                                                    Library Functions Manual                                                                                    y0(3)

NAME
       y0, y0f, y0l, y1, y1f, y1l, yn, ynf, ynl - Bessel functions of the second kind

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       double y0(double x);
       double y1(double x);
       double yn(int n, double x);

       float y0f(float x);
       float y1f(float x);
       float ynf(int n, float x);

       long double y0l(long double x);
       long double y1l(long double x);
       long double ynl(int n, long double x);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       y0(), y1(), yn():
           _XOPEN_SOURCE
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE

       y0f(), y0l(), y1f(), y1l(), ynf(), ynl():
           _XOPEN_SOURCE >= 600
               || (_ISOC99_SOURCE && _XOPEN_SOURCE)
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE

DESCRIPTION
       The y0() and y1() functions return Bessel functions of x of the second kind of orders 0 and 1, respectively.  The yn() function returns the Bessel function of x of the second kind of order n.

       The value of x must be positive.

       The y0f(), y1f(), and ynf() functions are versions that take and return float values.  The y0l(), y1l(), and ynl() functions are versions that take and return long double values.

RETURN VALUE
       On success, these functions return the appropriate Bessel value of the second kind for x.

       If x is a NaN, a NaN is returned.

       If x is negative, a domain error occurs, and the functions return -HUGE_VAL, -HUGE_VALF, or -HUGE_VALL, respectively.  (POSIX.1-2001 also allows a NaN return for this case.)

       If x is 0.0, a pole error occurs, and the functions return -HUGE_VAL, -HUGE_VALF, or -HUGE_VALL, respectively.

       If the result underflows, a range error occurs, and the functions return 0.0

       If the result overflows, a range error occurs, and the functions return -HUGE_VAL, -HUGE_VALF, or -HUGE_VALL, respectively.  (POSIX.1-2001 also allows a 0.0 return for this case.)

ERRORS
       See math_error(7) for information on how to determine whether an error has occurred when calling these functions.

       The following errors can occur:

       Domain error: x is negative
              errno is set to EDOM.  An invalid floating-point exception (FE_INVALID) is raised.

       Pole error: x is 0.0
              errno is set to ERANGE and an FE_DIVBYZERO exception is raised (but see BUGS).

       Range error: result underflow
              errno is set to ERANGE.  No FE_UNDERFLOW exception is returned by fetestexcept(3) for this case.

       Range error: result overflow
              errno is set to ERANGE (but see BUGS).  An overflow floating-point exception (FE_OVERFLOW) is raised.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │y0(), y0f(), y0l()                                                                                                                                                      │ Thread safety │ MT-Safe │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │y1(), y1f(), y1l()                                                                                                                                                      │ Thread safety │ MT-Safe │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │yn(), ynf(), ynl()                                                                                                                                                      │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       y0()
       y1()
       yn()   POSIX.1-2008.

       Others:
              BSD.

HISTORY
       y0()
       y1()
       yn()   SVr4, 4.3BSD, POSIX.1-2001.

       Others:
              BSD.

BUGS
       Before glibc 2.19, these functions misdiagnosed pole errors: errno was set to EDOM, instead of ERANGE and no FE_DIVBYZERO exception was raised.

       Before glibc 2.17, did not set errno for "range error: result underflow".

       In glibc 2.3.2 and earlier, these functions do not raise an invalid floating-point exception (FE_INVALID) when a domain error occurs.

SEE ALSO
       j0(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                           y0(3)
Y0(3P)                                                                                   POSIX Programmer's Manual                                                                                  Y0(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       y0, y1, yn — Bessel functions of the second kind

SYNOPSIS
       #include <math.h>

       double y0(double x);
       double y1(double x);
       double yn(int n, double x);

DESCRIPTION
       The y0(), y1(), and yn() functions shall compute Bessel functions of x of the second kind of orders 0, 1, and n, respectively.

       An application wishing to check for error situations should set errno to zero and call feclearexcept(FE_ALL_EXCEPT) before calling these functions. On return, if errno is  non-zero  or  fetestex‐
       cept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.

RETURN VALUE
       Upon successful completion, these functions shall return the relevant Bessel value of x of the second kind.

       If x is NaN, NaN shall be returned.

       If the x argument to these functions is negative, -HUGE_VAL or NaN shall be returned, and a domain error may occur.

       If x is 0.0, -HUGE_VAL shall be returned and a pole error may occur.

       If the correct result would cause underflow, 0.0 shall be returned and a range error may occur.

       If the correct result would cause overflow, -HUGE_VAL or 0.0 shall be returned and a range error may occur.

ERRORS
       These functions may fail if:

       Domain Error
                   The value of x is negative.

                   If  the  integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [EDOM].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the invalid floating-point exception shall be raised.

       Pole Error  The value of x is zero.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the divide-by-zero floating-point exception shall be raised.

       Range Error The correct result would cause overflow.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the overflow floating-point exception shall be raised.

       Range Error The value of x is too large in magnitude, or the correct result would cause underflow.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the underflow floating-point exception shall be raised.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling & MATH_ERREXCEPT) are independent of each other, but at least one of them must be non-zero.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       feclearexcept(), fetestexcept(), isnan(), j0()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                             Y0(3P)
