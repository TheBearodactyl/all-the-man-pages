erf(3)                                                                                   Library Functions Manual                                                                                   erf(3)

NAME
       erf, erff, erfl - error function

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       double erf(double x);
       float erff(float x);
       long double erfl(long double x);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       erf():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L || _XOPEN_SOURCE
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

       erff(), erfl():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       These functions return the error function of x, defined as

           erf(x) = 2/sqrt(pi) * integral from 0 to x of exp(-t*t) dt

RETURN VALUE
       On success, these functions return the value of the error function of x, a value in the range [-1, 1].

       If x is a NaN, a NaN is returned.

       If x is +0 (-0), +0 (-0) is returned.

       If x is positive infinity (negative infinity), +1 (-1) is returned.

       If x is subnormal, a range error occurs, and the return value is 2*x/sqrt(pi).

ERRORS
       See math_error(7) for information on how to determine whether an error has occurred when calling these functions.

       The following errors can occur:

       Range error: result underflow (x is subnormal)
              An underflow floating-point exception (FE_UNDERFLOW) is raised.

       These functions do not set errno.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │erf(), erff(), erfl()                                                                                                                                                   │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       C99, POSIX.1-2001.

       The variant returning double also conforms to SVr4, 4.3BSD.

SEE ALSO
       cerf(3), erfc(3), exp(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                          erf(3)
ERF(3P)                                                                                  POSIX Programmer's Manual                                                                                 ERF(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       erf, erff, erfl — error functions

SYNOPSIS
       #include <math.h>

       double erf(double x);
       float erff(float x);
       long double erfl(long double x);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       These functions shall compute the error function of their argument x, defined as:

              __∫e^ −t^2 dt

       An  application  wishing  to check for error situations should set errno to zero and call feclearexcept(FE_ALL_EXCEPT) before calling these functions. On return, if errno is non-zero or fetestex‐
       cept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.

RETURN VALUE
       Upon successful completion, these functions shall return the value of the error function.

       If x is NaN, a NaN shall be returned.

       If x is ±0, ±0 shall be returned.

       If x is ±Inf, ±1 shall be returned.

       If the correct value would cause underflow, a range error may occur, and erf(), erff(), and erfl() shall return an implementation-defined value no greater in magnitude than DBL_MIN, FLT_MIN,  and
       LDBL_MIN, respectively.

       If the IEC 60559 Floating-Point option is supported, 2 * x/sqrt(π) should be returned.

ERRORS
       These functions may fail if:

       Range Error The result underflows.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the underflow floating-point exception shall be raised.

       The following sections are informative.

EXAMPLES
   Computing the Probability for a Normal Variate
       This example shows how to use erf() to compute the probability that a normal variate assumes a value in the range [x1,x2] with x1≤x2.

       This example uses the constant M_SQRT1_2 which is part of the XSI option.

           #include <math.h>

           double
           Phi(const double x1, const double x2)
           {
               return ( erf(x2*M_SQRT1_2) - erf(x1*M_SQRT1_2) ) / 2;
           }

APPLICATION USAGE
       Underflow occurs when |x| < DBL_MIN * (sqrt(π)/2).

       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling & MATH_ERREXCEPT) are independent of each other, but at least one of them must be non-zero.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       erfc(), feclearexcept(), fetestexcept(), isnan()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                            ERF(3P)
