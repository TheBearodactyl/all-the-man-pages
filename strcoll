strcoll(3)                 Library Functions Manual                 strcoll(3)

NAME
       strcoll - compare two strings using the current locale

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <string.h>

       int strcoll(const char *s1, const char *s2);

DESCRIPTION
       The  strcoll() function compares the two strings s1 and s2.  It returns
       an integer less than, equal to, or greater than zero if  s1  is  found,
       respectively,  to  be  less than, to match, or be greater than s2.  The
       comparison is based on strings interpreted as appropriate for the  pro‐
       gram's current locale for category LC_COLLATE.  (See setlocale(3).)

RETURN VALUE
       The  strcoll()  function  returns  an  integer  less than, equal to, or
       greater than zero if s1 is found, respectively, to  be  less  than,  to
       match,  or be greater than s2, when both are interpreted as appropriate
       for the current locale.

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌─────────────────────────────────────┬───────────────┬────────────────┐
       │Interface                            │ Attribute     │ Value          │
       ├─────────────────────────────────────┼───────────────┼────────────────┤
       │strcoll()                            │ Thread safety │ MT-Safe locale │
       └─────────────────────────────────────┴───────────────┴────────────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       POSIX.1-2001, C89, SVr4, 4.3BSD.

NOTES
       In the POSIX or C locales strcoll() is equivalent to strcmp(3).

SEE ALSO
       memcmp(3),    setlocale(3),    strcasecmp(3),   strcmp(3),   string(3),
       strxfrm(3)

Linux man-pages 6.04              2023-03-30                        strcoll(3)
STRCOLL(3P)                POSIX Programmer's Manual               STRCOLL(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       strcoll, strcoll_l — string comparison using collating information

SYNOPSIS
       #include <string.h>

       int strcoll(const char *s1, const char *s2);
       int strcoll_l(const char *s1, const char *s2,
           locale_t locale);

DESCRIPTION
       For strcoll(): The functionality described on this  reference  page  is
       aligned  with the ISO C standard. Any conflict between the requirements
       described here and the ISO C standard is unintentional. This volume  of
       POSIX.1‐2017 defers to the ISO C standard.

       The  strcoll()  and  strcoll_l()  functions  shall  compare  the string
       pointed to by s1 to the string pointed to by s2,  both  interpreted  as
       appropriate to the LC_COLLATE category of the current locale, or of the
       locale represented by locale, respectively.

       The strcoll() and strcoll_l() functions shall not change the setting of
       errno if successful.

       Since  no return value is reserved to indicate an error, an application
       wishing to check for error situations should set errno to 0, then  call
       strcoll(), or strcoll_l() then check errno.

       The  behavior is undefined if the locale argument to strcoll_l() is the
       special locale object LC_GLOBAL_LOCALE or is not a valid locale  object
       handle.

RETURN VALUE
       Upon  successful  completion, strcoll() shall return an integer greater
       than, equal to, or less than 0, according to whether the string pointed
       to  by s1 is greater than, equal to, or less than the string pointed to
       by s2 when both are interpreted as appropriate to the  current  locale.
       On  error,  strcoll() may set errno, but no return value is reserved to
       indicate an error.

       Upon successful completion, strcoll_l() shall return an integer greater
       than, equal to, or less than 0, according to whether the string pointed
       to by s1 is greater than, equal to, or less than the string pointed  to
       by  s2  when  both  are interpreted as appropriate to the locale repre‐
       sented by locale.  On error, strcoll_l() may set errno, but  no  return
       value is reserved to indicate an error.

ERRORS
       These functions may fail if:

       EINVAL The  s1 or s2 arguments contain characters outside the domain of
              the collating sequence.

       The following sections are informative.

EXAMPLES
   Comparing Nodes
       The following example uses an application-defined  function,  node_com‐
       pare(),  to  compare two nodes based on an alphabetical ordering of the
       string field.

           #include <string.h>
           ...
           struct node { /* These are stored in the table. */
               char *string;
               int length;
           };
           ...
           int node_compare(const void *node1, const void *node2)
           {
               return strcoll(((const struct node *)node1)->string,
                   ((const struct node *)node2)->string);
           }
           ...

APPLICATION USAGE
       The strxfrm() and strcmp() functions should be used for  sorting  large
       lists.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       alphasort(), strcmp(), strxfrm()

       The Base Definitions volume of POSIX.1‐2017, <string.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                          STRCOLL(3P)
