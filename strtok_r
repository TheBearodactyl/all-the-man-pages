strtok(3)                  Library Functions Manual                  strtok(3)

NAME
       strtok, strtok_r - extract tokens from strings

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <string.h>

       char *strtok(char *restrict str, const char *restrict delim);
       char *strtok_r(char *restrict str, const char *restrict delim,
                      char **restrict saveptr);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       strtok_r():
           _POSIX_C_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       The  strtok()  function breaks a string into a sequence of zero or more
       nonempty tokens.  On the first call  to  strtok(),  the  string  to  be
       parsed should be specified in str.  In each subsequent call that should
       parse the same string, str must be NULL.

       The delim argument specifies a set of bytes that delimit the tokens  in
       the  parsed  string.  The caller may specify different strings in delim
       in successive calls that parse the same string.

       Each call to strtok() returns a pointer  to  a  null-terminated  string
       containing the next token.  This string does not include the delimiting
       byte.  If no more tokens are found, strtok() returns NULL.

       A sequence of calls to strtok() that operate on the same  string  main‐
       tains a pointer that determines the point from which to start searching
       for the next token.  The first call to strtok() sets  this  pointer  to
       point  to the first byte of the string.  The start of the next token is
       determined by scanning forward for the next nondelimiter byte  in  str.
       If  such  a  byte is found, it is taken as the start of the next token.
       If no such byte is found, then there are no more tokens,  and  strtok()
       returns NULL.  (A string that is empty or that contains only delimiters
       will thus cause strtok() to return NULL on the first call.)

       The end of each token is found by scanning  forward  until  either  the
       next  delimiter byte is found or until the terminating null byte ('\0')
       is encountered.  If a delimiter byte is found, it is overwritten with a
       null  byte to terminate the current token, and strtok() saves a pointer
       to the following byte; that pointer will be used as the starting  point
       when  searching  for  the next token.  In this case, strtok() returns a
       pointer to the start of the found token.

       From the above description, it follows that a sequence of two  or  more
       contiguous  delimiter  bytes in the parsed string is considered to be a
       single delimiter, and that delimiter bytes at the start or end  of  the
       string  are  ignored.  Put another way: the tokens returned by strtok()
       are always nonempty strings.   Thus,  for  example,  given  the  string
       "aaa;;bbb,",  successive  calls  to strtok() that specify the delimiter
       string ";," would return the strings "aaa" and "bbb", and then  a  null
       pointer.

       The  strtok_r()  function  is  a  reentrant  version  of strtok().  The
       saveptr argument is a pointer to a char * variable that is used  inter‐
       nally  by  strtok_r()  in  order to maintain context between successive
       calls that parse the same string.

       On the first call to strtok_r(), str should point to the string  to  be
       parsed,  and the value of *saveptr is ignored (but see NOTES).  In sub‐
       sequent calls, str should be NULL, and saveptr (and the buffer that  it
       points to) should be unchanged since the previous call.

       Different  strings  may be parsed concurrently using sequences of calls
       to strtok_r() that specify different saveptr arguments.

RETURN VALUE
       The strtok() and strtok_r() functions return a pointer to the next  to‐
       ken, or NULL if there are no more tokens.

ATTRIBUTES
       For  an  explanation  of  the  terms  used  in  this  section,  see at‐
       tributes(7).

       ┌──────────────────────────────┬───────────────┬───────────────────────┐
       │Interface                     │ Attribute     │ Value                 │
       ├──────────────────────────────┼───────────────┼───────────────────────┤
       │strtok()                      │ Thread safety │ MT-Unsafe race:strtok │
       ├──────────────────────────────┼───────────────┼───────────────────────┤
       │strtok_r()                    │ Thread safety │ MT-Safe               │
       └──────────────────────────────┴───────────────┴───────────────────────┘

VERSIONS
       On some implementations, *saveptr is required to be NULL on  the  first
       call to strtok_r() that is being used to parse str.

STANDARDS
       strtok()
              C11, POSIX.1-2008.

       strtok_r()
              POSIX.1-2008.

HISTORY
       strtok()
              POSIX.1-2001, C89, SVr4, 4.3BSD.

       strtok_r()
              POSIX.1-2001.

BUGS
       Be cautious when using these functions.  If you do use them, note that:

       •  These functions modify their first argument.

       •  These functions cannot be used on constant strings.

       •  The identity of the delimiting byte is lost.

       •  The  strtok()  function  uses a static buffer while parsing, so it's
          not thread safe.  Use strtok_r() if this matters to you.

EXAMPLES
       The program below uses nested loops that employ strtok_r() to  break  a
       string  into  a  two-level hierarchy of tokens.  The first command-line
       argument specifies the string to be parsed.  The second argument speci‐
       fies the delimiter byte(s) to be used to separate that string into "ma‐
       jor" tokens.  The third argument specifies the delimiter byte(s) to  be
       used to separate the "major" tokens into subtokens.

       An example of the output produced by this program is the following:

           $ ./a.out 'a/bbb///cc;xxx:yyy:' ':;' '/'
           1: a/bbb///cc
                    --> a
                    --> bbb
                    --> cc
           2: xxx
                    --> xxx
           3: yyy
                    --> yyy

   Program source

       #include <stdio.h>
       #include <stdlib.h>
       #include <string.h>

       int
       main(int argc, char *argv[])
       {
           char *str1, *str2, *token, *subtoken;
           char *saveptr1, *saveptr2;
           int j;

           if (argc != 4) {
               fprintf(stderr, "Usage: %s string delim subdelim\n",
                       argv[0]);
               exit(EXIT_FAILURE);
           }

           for (j = 1, str1 = argv[1]; ; j++, str1 = NULL) {
               token = strtok_r(str1, argv[2], &saveptr1);
               if (token == NULL)
                   break;
               printf("%d: %s\n", j, token);

               for (str2 = token; ; str2 = NULL) {
                   subtoken = strtok_r(str2, argv[3], &saveptr2);
                   if (subtoken == NULL)
                       break;
                   printf("\t --> %s\n", subtoken);
               }
           }

           exit(EXIT_SUCCESS);
       }

       Another   example  program  using  strtok()  can  be  found  in  getad‐
       drinfo_a(3).

SEE ALSO
       memchr(3),  strchr(3),  string(3),  strpbrk(3),  strsep(3),  strspn(3),
       strstr(3), wcstok(3)

Linux man-pages 6.04              2023-03-30                         strtok(3)
STRTOK(3P)                 POSIX Programmer's Manual                STRTOK(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       strtok, strtok_r — split string into tokens

SYNOPSIS
       #include <string.h>

       char *strtok(char *restrict s, const char *restrict sep);
       char *strtok_r(char *restrict s, const char *restrict sep,
           char **restrict state);

DESCRIPTION
       For strtok(): The functionality described on  this  reference  page  is
       aligned  with the ISO C standard. Any conflict between the requirements
       described here and the ISO C standard is unintentional. This volume  of
       POSIX.1‐2017 defers to the ISO C standard.

       A  sequence of calls to strtok() breaks the string pointed to by s into
       a sequence of tokens, each of which is delimited by  a  byte  from  the
       string  pointed to by sep.  The first call in the sequence has s as its
       first argument, and is followed by calls with a null pointer  as  their
       first argument. The separator string pointed to by sep may be different
       from call to call.

       The first call in the sequence searches the string pointed to by s  for
       the  first  byte  that is not contained in the current separator string
       pointed to by sep.  If no such byte is found, then there are no  tokens
       in the string pointed to by s and strtok() shall return a null pointer.
       If such a byte is found, it is the start of the first token.

       The strtok() function then searches from there for a byte that is  con‐
       tained  in  the current separator string. If no such byte is found, the
       current token extends to the end of the string pointed  to  by  s,  and
       subsequent  searches for a token shall return a null pointer. If such a
       byte is found, it is overwritten by a NUL character,  which  terminates
       the current token. The strtok() function saves a pointer to the follow‐
       ing byte, from which the next search for a token shall start.

       Each subsequent call, with a null pointer as the value of the first ar‐
       gument,  starts  searching  from  the  saved pointer and behaves as de‐
       scribed above.

       The implementation shall behave as if no function defined in this  vol‐
       ume of POSIX.1‐2017 calls strtok().

       The strtok() function need not be thread-safe.

       The  strtok_r()  function  shall be equivalent to strtok(), except that
       strtok_r() shall be thread-safe and the  argument  state  points  to  a
       user-provided  pointer that allows strtok_r() to maintain state between
       calls which scan the same string. The application shall ensure that the
       pointer  pointed  to  by state is unique for each string (s) being pro‐
       cessed concurrently by strtok_r() calls. The application need not  ini‐
       tialize  the  pointer  pointed to by state to any particular value. The
       implementation shall not update the pointer  pointed  to  by  state  to
       point  (directly  or  indirectly)  to  resources, other than within the
       string s, that need to be freed or released by the caller.

RETURN VALUE
       Upon successful completion, strtok() shall  return  a  pointer  to  the
       first  byte of a token. Otherwise, if there is no token, strtok() shall
       return a null pointer.

       The strtok_r() function shall return a pointer to the token found, or a
       null pointer when no token is found.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
   Searching for Word Separators
       The  following example searches for tokens separated by <space> charac‐
       ters.

           #include <string.h>
           ...
           char *token;
           char line[] = "LINE TO BE SEPARATED";
           char *search = " ";

           /* Token will point to "LINE". */
           token = strtok(line, search);

           /* Token will point to "TO". */
           token = strtok(NULL, search);

   Find First two Fields in a Buffer
       The following example uses strtok() to find two  character  strings  (a
       key  and data associated with that key) separated by any combination of
       <space>, <tab>, or <newline> characters at the start of  the  array  of
       characters pointed to by buffer.

           #include <string.h>
           ...
           char    *buffer;
           ...
           struct element {
               char *key;
               char *data;
           } e;
           ...
           // Load the buffer...
           ...
           // Get the key and its data...
           e.key = strtok(buffer, " \t\n");
           e.data = strtok(NULL, " \t\n");
           // Process the rest of the contents of the buffer...
           ...

APPLICATION USAGE
       Note  that if sep is the empty string, strtok() and strtok_r() return a
       pointer to the remainder of the string being tokenized.

       The strtok_r() function is thread-safe and stores its state in a  user-
       supplied  buffer  instead of possibly using a static data area that may
       be overwritten by an unrelated call from another thread.

RATIONALE
       The strtok() function searches for a separator string within  a  larger
       string.  It  returns  a pointer to the last substring between separator
       strings.  This function uses static storage to keep track of  the  cur‐
       rent string position between calls. The new function, strtok_r(), takes
       an additional argument, state, to keep track of the current position in
       the string.

FUTURE DIRECTIONS
       None.

SEE ALSO
       The Base Definitions volume of POSIX.1‐2017, <string.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                           STRTOK(3P)
