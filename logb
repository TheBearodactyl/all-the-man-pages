logb(3)                                                                                  Library Functions Manual                                                                                  logb(3)

NAME
       logb, logbf, logbl - get exponent of a floating-point value

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       double logb(double x);
       float logbf(float x);
       long double logbl(long double x);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       logb():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || _XOPEN_SOURCE >= 500
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

       logbf(), logbl():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       These functions extract the exponent from the internal floating-point representation of x and return it as a floating-point value.  The integer constant FLT_RADIX, defined in <float.h>, indicates
       the radix used for the system's floating-point representation.  If FLT_RADIX is 2, logb(x) is equal to floor(log2(x)), except that it is probably faster.

       If x is subnormal, logb() returns the exponent x would have if it were normalized.

RETURN VALUE
       On success, these functions return the exponent of x.

       If x is a NaN, a NaN is returned.

       If x is zero, then a pole error occurs, and the functions return -HUGE_VAL, -HUGE_VALF, or -HUGE_VALL, respectively.

       If x is negative infinity or positive infinity, then positive infinity is returned.

ERRORS
       See math_error(7) for information on how to determine whether an error has occurred when calling these functions.

       The following errors can occur:

       Pole error: x is 0
              A divide-by-zero floating-point exception (FE_DIVBYZERO) is raised.

       These functions do not set errno.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │logb(), logbf(), logbl()                                                                                                                                                │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       C99, POSIX.1-2001.

       logb() 4.3BSD (see IEEE.3 in the 4.3BSD manual).

SEE ALSO
       ilogb(3), log(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                         logb(3)
LOGB(3P)                                                                                 POSIX Programmer's Manual                                                                                LOGB(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       logb, logbf, logbl — radix-independent exponent

SYNOPSIS
       #include <math.h>

       double logb(double x);
       float logbf(float x);
       long double logbl(long double x);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       These  functions  shall  compute  the exponent of x, which is the integral part of logr |x|, as a signed floating-point value, for non-zero x, where r is the radix of the machine's floating-point
       arithmetic, which is the value of FLT_RADIX defined in the <float.h> header.

       If x is subnormal it is treated as though it were normalized; thus for finite positive x:

           1 <= x * FLT_RADIX-logb(x) < FLT_RADIX

       An application wishing to check for error situations should set errno to zero and call feclearexcept(FE_ALL_EXCEPT) before calling these functions. On return, if errno is  non-zero  or  fetestex‐
       cept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.

RETURN VALUE
       Upon successful completion, these functions shall return the exponent of x.

       If x is ±0, logb(), logbf(), and logbl() shall return -HUGE_VAL, -HUGE_VALF, and -HUGE_VALL, respectively.

       On systems that support the IEC 60559 Floating-Point option, a pole error shall occur;
       otherwise, a pole error may occur.

       If x is NaN, a NaN shall be returned.

       If x is ±Inf, +Inf shall be returned.

ERRORS
       These functions shall fail if:

       Pole Error  The value of x is ±0.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the divide-by-zero floating-point exception shall be raised.

       These functions may fail if:

       Pole Error  The value of x is 0.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the divide-by-zero floating-point exception shall be raised.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling & MATH_ERREXCEPT) are independent of each other, but at least one of them must be non-zero.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       feclearexcept(), fetestexcept(), ilogb(), scalbln()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of Error Conditions for Mathematical Functions, <float.h>, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                           LOGB(3P)
