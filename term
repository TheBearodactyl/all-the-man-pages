term(5)                                                                                     File Formats Manual                                                                                    term(5)

NAME
       term - format of compiled term file.

SYNOPSIS
       term

DESCRIPTION
   STORAGE LOCATION
       Compiled terminfo descriptions are placed under the directory /usr/share/terminfo.  Two configurations are supported (when building the ncurses libraries):

       directory tree
            A  two-level scheme is used to avoid a linear search of a huge UNIX system directory: /usr/share/terminfo/c/name where name is the name of the terminal, and c is the first character of name.
            Thus, act4 can be found in the file /usr/share/terminfo/a/act4.  Synonyms for the same terminal are implemented by multiple links to the same compiled file.

       hashed database
            Using Berkeley database, two types of records are stored: the terminfo data in the same format as stored in a directory tree with the terminfo's primary name as a key, and records containing
            only aliases pointing to the primary name.

            If  built to write hashed databases, ncurses can still read terminfo databases organized as a directory tree, but cannot write entries into the directory tree.  It can write (or rewrite) en‐
            tries in the hashed database.

            ncurses distinguishes the two cases in the TERMINFO and TERMINFO_DIRS environment variable by assuming a directory tree for entries that correspond to an existing directory, and hashed data‐
            base otherwise.

   LEGACY STORAGE FORMAT
       The format has been chosen so that it will be the same on all hardware.  An 8 or more bit byte is assumed, but no assumptions about byte ordering or sign extension are made.

       The compiled file is created with the tic program, and read by the routine setupterm(3X).  The file is divided into six parts:

            a) header,

            b) terminal names,

            c) boolean flags,

            d) numbers,

            e) strings, and

            f) string table.

       The header section begins the file.  This section contains six short integers in the format described below.  These integers are

            (1) the magic number (octal 0432);

            (2) the size, in bytes, of the terminal names section;

            (3) the number of bytes in the boolean flags section;

            (4) the number of short integers in the numbers section;

            (5) the number of offsets (short integers) in the strings section;

            (6) the size, in bytes, of the string table.

       The capabilities in the boolean flags, numbers, and strings sections are in the same order as the file <term.h>.

       Short  integers are signed, in the range -32768 to 32767.  They are stored as two 8-bit bytes.  The first byte contains the least significant 8 bits of the value, and the second byte contains the
       most significant 8 bits.  (Thus, the value represented is 256*second+first.)  This format corresponds to the hardware of the VAX and PDP-11 (that is, little-endian machines).  Machines where this
       does not correspond to the hardware must read the integers as two bytes and compute the little-endian value.

       Numbers  in a terminal description, whether they are entries in the numbers or strings table, are positive integers.  Boolean flags are treated as positive one-byte integers.  In each case, those
       positive integers represent a terminal capability.  The terminal compiler tic uses negative integers to handle the cases where a capability is not available:

       •   If a capability is absent from this terminal, tic stores a -1 in the corresponding table.

           The integer value -1 is represented by two bytes 0377, 0377.
           Absent boolean values are represented by the byte 0 (false).

       •   If a capability has been canceled from this terminal, tic stores a -2 in the corresponding table.

           The integer value -2 is represented by two bytes 0377, 0376.
           The boolean value -2 is represented by the byte 0376.

       •   Other negative values are illegal.

       The terminal names section comes after the header.  It contains the first line of the terminfo description, listing the various names for the terminal, separated by the “|” character.  The termi‐
       nal names section is terminated with an ASCII NUL character.

       The boolean flags section has one byte for each flag.  Boolean capabilities are either 1 or 0 (true or false) according to whether the terminal supports the given capability or not.

       Between  the  boolean  flags  section  and the number section, a null byte will be inserted, if necessary, to ensure that the number section begins on an even byte This is a relic of the PDP-11's
       word-addressed architecture, originally designed to avoid traps induced by addressing a word on an odd byte boundary.  All short integers are aligned on a short word boundary.

       The numbers section is similar to the boolean flags section.  Each capability takes up two bytes, and is stored as a little-endian short integer.

       The strings section is also similar.  Each capability is stored as a short integer.  The capability value is an index into the string table.

       The string table is the last section.  It contains all of the values of string capabilities referenced in the strings section.  Each string is null-terminated.  Special characters in ^X or \c no‐
       tation are stored in their interpreted form, not the printing representation.  Padding information $<nn> and parameter information %x are stored intact in uninterpreted form.

   EXTENDED STORAGE FORMAT
       The  previous  section  describes the conventional terminfo binary format.  With some minor variations of the offsets (see PORTABILITY), the same binary format is used in all modern UNIX systems.
       Each system uses a predefined set of boolean, number or string capabilities.

       The ncurses libraries and applications support extended terminfo binary format, allowing users to define capabilities which are loaded at runtime.  This extension is made possible  by  using  the
       fact that the other implementations stop reading the terminfo data when they have reached the end of the size given in the header.  ncurses checks the size, and if it exceeds that due to the pre‐
       defined data, continues to parse according to its own scheme.

       First, it reads the extended header (5 short integers):

            (1)  count of extended boolean capabilities

            (2)  count of extended numeric capabilities

            (3)  count of extended string capabilities

            (4)  count of the items in extended string table

            (5)  size of the extended string table in bytes

       The count- and size-values for the extended string table include the extended capability names as well as extended capability values.

       Using the counts and sizes, ncurses allocates arrays and reads data for the extended capabilities in the same order as the header information.

       The extended string table contains values for string capabilities.  After the end of these values, it contains the names for each of the extended capabilities in order, e.g., booleans, then  num‐
       bers and finally strings.

       Applications which manipulate terminal data can use the definitions described in term_variables(3X) which associate the long capability names with members of a TERMTYPE structure.

   EXTENDED NUMBER FORMAT
       On occasion, 16-bit signed integers are not large enough.  With ncurses 6.1, a new format was introduced by making a few changes to the legacy format:

       •   a different magic number (octal 01036)

       •   changing the type for the number array from signed 16-bit integers to signed 32-bit integers.

       To  maintain compatibility, the library presents the same data structures to direct users of the TERMTYPE structure as in previous formats.  However, that cannot provide callers with the extended
       numbers.  The library uses a similar but hidden data structure TERMTYPE2 to provide data for the terminfo functions.

PORTABILITY
   setupterm
       Note that it is possible for setupterm to expect a different set of capabilities than are actually present in the file.  Either the database may have been updated since setupterm  was  recompiled
       (resulting  in  extra  unrecognized entries in the file) or the program may have been recompiled more recently than the database was updated (resulting in missing entries).  The routine setupterm
       must be prepared for both possibilities - this is why the numbers and sizes are included.  Also, new capabilities must always be added at the end of the lists of boolean, number, and string capa‐
       bilities.

   Binary format
       X/Open Curses does not specify a format for the terminfo database.  UNIX System V curses used a directory-tree of binary files, one per terminal description.

       Despite  the  consistent  use of little-endian for numbers and the otherwise self-describing format, it is not wise to count on portability of binary terminfo entries between commercial UNIX ver‐
       sions.  The problem is that there are at least three versions of terminfo (under HP-UX, AIX, and OSF/1) which diverged from System V terminfo after SVr1, and have added extension capabilities  to
       the string table that (in the binary format) collide with System V and XSI Curses extensions.  See terminfo(5) for detailed discussion of terminfo source compatibility issues.

       This  implementation  is  by  default  compatible with the binary terminfo format used by Solaris curses, except in a few less-used details where it was found that the latter did not match X/Open
       Curses.  The format used by the other Unix versions can be matched by building ncurses with different configuration options.

   Magic codes
       The magic number in a binary terminfo file is the first 16-bits (two bytes).  Besides making it more reliable for the library to check that a file is terminfo, utilities such as file(1) also  use
       that  to  tell  what the file-format is.  System V defined more than one magic number, with 0433, 0435 as screen-dumps (see scr_dump(5)).  This implementation uses 01036 as a continuation of that
       sequence, but with a different high-order byte to avoid confusion.

   The TERMTYPE structure
       Direct access to the TERMTYPE structure is provided for legacy applications.  Portable applications should use the tigetflag and related functions described in curs_terminfo(3X) for reading  ter‐
       minal capabilities.

   Mixed-case terminal names
       A  small  number  of  terminal  descriptions  use uppercase characters in their names.  If the underlying filesystem ignores the difference between uppercase and lowercase, ncurses represents the
       “first character” of the terminal name used as the intermediate level of a directory tree in (two-character) hexadecimal form.

EXAMPLE
       As an example, here is a description for the Lear-Siegler ADM-3, a popular though rather stupid early terminal:

           adm3a|lsi adm3a,
                   am,
                   cols#80, lines#24,
                   bel=^G, clear= 32$<1>, cr=^M, cub1=^H, cud1=^J,
                   cuf1=^L, cup=\E=%p1%{32}%+%c%p2%{32}%+%c, cuu1=^K,
                   home=^^, ind=^J,

       and a hexadecimal dump of the compiled terminal description:

           0000  1a 01 10 00 02 00 03 00  82 00 31 00 61 64 6d 33  ........ ..1.adm3
           0010  61 7c 6c 73 69 20 61 64  6d 33 61 00 00 01 50 00  a|lsi ad m3a...P.
           0020  ff ff 18 00 ff ff 00 00  02 00 ff ff ff ff 04 00  ........ ........
           0030  ff ff ff ff ff ff ff ff  0a 00 25 00 27 00 ff ff  ........ ..%.'...
           0040  29 00 ff ff ff ff 2b 00  ff ff 2d 00 ff ff ff ff  ).....+. ..-.....
           0050  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0060  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0070  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0080  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0090  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           00a0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           00b0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           00c0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           00d0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           00e0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           00f0  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0100  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0110  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ........ ........
           0120  ff ff ff ff ff ff 2f 00  07 00 0d 00 1a 24 3c 31  ....../. .....$<1
           0130  3e 00 1b 3d 25 70 31 25  7b 33 32 7d 25 2b 25 63  >..=%p1% {32}%+%c
           0140  25 70 32 25 7b 33 32 7d  25 2b 25 63 00 0a 00 1e  %p2%{32} %+%c....
           0150  00 08 00 0c 00 0b 00 0a  00                       ........ .

LIMITS
       Some limitations:

       •   total compiled entries cannot exceed 4096 bytes in the legacy format.

       •   total compiled entries cannot exceed 32768 bytes in the extended format.

       •   the name field cannot exceed 128 bytes.

       Compiled entries are limited to 32768 bytes because offsets into the strings table use two-byte integers.  The legacy format could have supported 32768-byte entries, but  was  limited  a  virtual
       memory page's 4096 bytes.

FILES
       /usr/share/terminfo/*/*  compiled terminal capability database

SEE ALSO
       curses(3X), terminfo(5).

AUTHORS
       Thomas E. Dickey
       extended terminfo format for ncurses 5.0
       hashed database support for ncurses 5.6
       extended number support for ncurses 6.1

       Eric S. Raymond
       documented legacy terminfo format, e.g., from pcurses.

                                                                                                                                                                                                   term(5)
term(7)                                                                              Miscellaneous Information Manual                                                                              term(7)

NAME
       term - conventions for naming terminal types

DESCRIPTION
       The  environment variable TERM should normally contain the type name of the terminal, console or display-device type you are using.  This information is critical for all screen-oriented programs,
       including your editor and mailer.

       A default TERM value will be set on a per-line basis by either /etc/inittab (e.g., System-V-like UNIXes) or /etc/ttys (BSD UNIXes).  This will nearly always suffice for workstation and  microcom‐
       puter consoles.

       If  you  use  a  dialup  line,  the  type of device attached to it may vary.  Older UNIX systems pre-set a very dumb terminal type like “dumb” or “dialup” on dialup lines.  Newer ones may pre-set
       “vt100”, reflecting the prevalence of DEC VT100-compatible terminals and personal-computer emulators.

       Modern telnets pass your TERM environment variable from the local side to the remote one.  There can be problems if the remote terminfo or termcap entry for  your  type  is  not  compatible  with
       yours, but this situation is rare and can almost always be avoided by explicitly exporting “vt100” (assuming you are in fact using a VT100-superset console, terminal, or terminal emulator).

       In  any  case,  you are free to override the system TERM setting to your taste in your shell profile.  The tset(1) utility may be of assistance; you can give it a set of rules for deducing or re‐
       questing a terminal type based on the tty device and baud rate.

       Setting your own TERM value may also be useful if you have created a custom entry incorporating options (such as visual bell or reverse-video) which you wish to override the system  default  type
       for your line.

       Terminal type descriptions are stored as files of capability data underneath /usr/share/terminfo.  To browse a list of all terminal names recognized by the system, do

            toe | more

       from  your  shell.   These capability files are in a binary format optimized for retrieval speed (unlike the old text-based termcap format they replace); to examine an entry, you must use the in‐
       focmp(1M) command.  Invoke it as follows:

            infocmp entry_name

       where entry_name is the name of the type you wish to examine (and the name of its capability file the subdirectory of /usr/share/terminfo named for its first letter).  This command dumps a  capa‐
       bility file in the text format described by terminfo(5).

       The  first  line of a terminfo(5) description gives the names by which terminfo knows a terminal, separated by “|” (pipe-bar) characters with the last name field terminated by a comma.  The first
       name field is the type's primary name, and is the one to use when setting TERM.  The last name field (if distinct from the first) is actually a description of the terminal type  (it  may  contain
       blanks; the others must be single words).  Name fields between the first and last (if present) are aliases for the terminal, usually historical names retained for compatibility.

       There  are  some conventions for how to choose terminal primary names that help keep them informative and unique.  Here is a step-by-step guide to naming terminals that also explains how to parse
       them:

       First, choose a root name.  The root will consist of a lower-case letter followed by up to seven lower-case letters or digits.  You need to avoid using punctuation characters in root  names,  be‐
       cause they are used and interpreted as filenames and shell meta-characters (such as !, $, *, ?, etc.) embedded in them may cause odd and unhelpful behavior.  The slash (/), or any other character
       that may be interpreted by anyone's file system (\, $, [, ]), is especially dangerous (terminfo is platform-independent, and choosing names with special characters could someday make life  diffi‐
       cult for users of a future port).  The dot (.) character is relatively safe as long as there is at most one per root name; some historical terminfo names use it.

       The root name for a terminal or workstation console type should almost always begin with a vendor prefix (such as hp for Hewlett-Packard, wy for Wyse, or att for AT&T terminals), or a common name
       of the terminal line (vt for the VT series of terminals from DEC, or sun for Sun Microsystems workstation consoles, or regent for the ADDS Regent series.  You can list the terminfo  tree  to  see
       what prefixes are already in common use.  The root name prefix should be followed when appropriate by a model number; thus vt100, hp2621, wy50.

       The  root name for a PC-Unix console type should be the OS name, i.e., linux, bsdos, freebsd, netbsd.  It should not be console or any other generic that might cause confusion in a multi-platform
       environment!  If a model number follows, it should indicate either the OS release level or the console driver release level.

       The root name for a terminal emulator (assuming it does not fit one of the standard ANSI or vt100 types) should be the program name or a readily recognizable abbreviation of it (i.e.,  versaterm,
       ctrm).

       Following the root name, you may add any reasonable number of hyphen-separated feature suffixes.

       2p   Has two pages of memory.  Likewise 4p, 8p, etc.

       mc   Magic-cookie.   Some  terminals  (notably  older Wyses) can only support one attribute without magic-cookie lossage.  Their base entry is usually paired with another that has this suffix and
            uses magic cookies to support multiple attributes.

       -am  Enable auto-margin (right-margin wraparound).

       -m   Mono mode - suppress color support.

       -na  No arrow keys - termcap ignores arrow keys which are actually there on the terminal, so the user can use the arrow keys locally.

       -nam No auto-margin - suppress am capability.

       -nl  No labels - suppress soft labels.

       -nsl No status line - suppress status line.

       -pp  Has a printer port which is used.

       -rv  Terminal in reverse video mode (black on white).

       -s   Enable status line.

       -vb  Use visible bell (flash) rather than beep.

       -w   Wide; terminal is in 132-column mode.

       Conventionally, if your terminal type is a variant intended to specify a line height, that suffix should go first.  So, for a hypothetical FuBarCo model 2317 terminal in 30-line mode with reverse
       video, best form would be fubar-30-rv (rather than, say, “fubar-rv-30”).

       Terminal  types  that  are written not as standalone entries, but rather as components to be plugged into other entries via use capabilities, are distinguished by using embedded plus signs rather
       than dashes.

       Commands which use a terminal type to control display often accept a -T option that accepts a terminal name argument.  Such programs should fall back on the TERM environment variable when  no  -T
       option is specified.

PORTABILITY
       For maximum compatibility with older System V UNIXes, names and aliases should be unique within the first 14 characters.

FILES
       /usr/share/terminfo/?/*
            compiled terminal capability database

       /etc/inittab
            tty line initialization (AT&T-like UNIXes)

       /etc/ttys
            tty line initialization (BSD-like UNIXes)

SEE ALSO
       curses(3X), terminfo(5), term(5).

                                                                                                                                                                                                   term(7)
