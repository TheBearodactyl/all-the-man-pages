CONTINUE(1P)                                                                             POSIX Programmer's Manual                                                                            CONTINUE(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       continue — continue for, while, or until loop

SYNOPSIS
       continue [n]

DESCRIPTION
       If n is specified, the continue utility shall return to the top of the nth enclosing for, while, or until loop. If n is not specified, continue shall behave as if n was specified as 1.  Returning
       to the top of the loop involves repeating the condition list of a while or until loop or performing the next assignment of a for loop, and re-executing the loop if appropriate.

       The  value  of  n is a positive decimal integer. If n is greater than the number of enclosing loops, the outermost enclosing loop shall be used. If there is no enclosing loop, the behavior is un‐
       specified.

       The meaning of ``enclosing'' shall be as specified in the description of the break utility.

OPTIONS
       None.

OPERANDS
       See the DESCRIPTION.

STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       None.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
        0    Successful completion.

       >0    The n value was not an unsigned decimal integer greater than or equal to 1.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       None.

EXAMPLES
       for i in *
       do
           if test -d "$i"
           then continue
           fi
           printf '"%s" is not a directory.\n' "$i"
       done

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.14, Special Built-In Utilities

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                       CONTINUE(1P)
continue(n)                                                                                Tcl Built-In Commands                                                                               continue(n)

__________________________________________________________________________________________________________________________________________________________________________________________________________

NAME
       continue - Skip to the next iteration of a loop

SYNOPSIS
       continue
__________________________________________________________________________________________________________________________________________________________________________________________________________

DESCRIPTION
       This  command  is  typically  invoked inside the body of a looping command such as for or foreach or while.  It returns a 4 (TCL_CONTINUE) result code, which causes a continue exception to occur.
       The exception causes the current script to be aborted out to the innermost containing loop command, which then continues with the next iteration of the loop.  Catch exceptions are also handled in
       a few other situations, such as the catch command and the outermost scripts of procedure bodies.

EXAMPLE
       Print a line for each of the integers from 0 to 10 except 5:

              for {set x 0} {$x<10} {incr x} {
                  if {$x == 5} {
                      continue
                  }
                  puts "x is $x"
              }

SEE ALSO
       break(n), for(n), foreach(n), return(n), while(n)

KEYWORDS
       continue, iteration, loop

Tcl                                                                                                                                                                                            continue(n)
