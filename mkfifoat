mkfifo(3)                                                                                Library Functions Manual                                                                                mkfifo(3)

NAME
       mkfifo, mkfifoat - make a FIFO special file (a named pipe)

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <sys/types.h>
       #include <sys/stat.h>

       int mkfifo(const char *pathname, mode_t mode);

       #include <fcntl.h>           /* Definition of AT_* constants */
       #include <sys/stat.h>

       int mkfifoat(int dirfd, const char *pathname, mode_t mode);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       mkfifoat():
           Since glibc 2.10:
               _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _ATFILE_SOURCE

DESCRIPTION
       mkfifo()  makes  a  FIFO  special file with name pathname.  mode specifies the FIFO's permissions.  It is modified by the process's umask in the usual way: the permissions of the created file are
       (mode & ~umask).

       A FIFO special file is similar to a pipe, except that it is created in a different way.  Instead of being an anonymous communications channel, a FIFO special file is entered into  the  filesystem
       by calling mkfifo().

       Once you have created a FIFO special file in this way, any process can open it for reading or writing, in the same way as an ordinary file.  However, it has to be open at both ends simultaneously
       before you can proceed to do any input or output operations on it.  Opening a FIFO for reading normally blocks until some other process opens the same FIFO  for  writing,  and  vice  versa.   See
       fifo(7) for nonblocking handling of FIFO special files.

   mkfifoat()
       The mkfifoat() function operates in exactly the same way as mkfifo(), except for the differences described here.

       If  the pathname given in pathname is relative, then it is interpreted relative to the directory referred to by the file descriptor dirfd (rather than relative to the current working directory of
       the calling process, as is done by mkfifo() for a relative pathname).

       If pathname is relative and dirfd is the special value AT_FDCWD, then pathname is interpreted relative to the current working directory of the calling process (like mkfifo()).

       If pathname is absolute, then dirfd is ignored.

       See openat(2) for an explanation of the need for mkfifoat().

RETURN VALUE
       On success mkfifo() and mkfifoat() return 0.  On error, -1 is returned and errno is set to indicate the error.

ERRORS
       EACCES One of the directories in pathname did not allow search (execute) permission.

       EBADF  (mkfifoat()) pathname is relative but dirfd is neither AT_FDCWD nor a valid file descriptor.

       EDQUOT The user's quota of disk blocks or inodes on the filesystem has been exhausted.

       EEXIST pathname already exists.  This includes the case where pathname is a symbolic link, dangling or not.

       ENAMETOOLONG
              Either the total length of pathname is greater than PATH_MAX, or an individual filename component has a length greater than NAME_MAX.  In the GNU system, there is no imposed limit on over‐
              all filename length, but some filesystems may place limits on the length of a component.

       ENOENT A directory component in pathname does not exist or is a dangling symbolic link.

       ENOSPC The directory or filesystem has no room for the new file.

       ENOTDIR
              A component used as a directory in pathname is not, in fact, a directory.

       ENOTDIR
              (mkfifoat()) pathname is a relative pathname and dirfd is a file descriptor referring to a file other than a directory.

       EROFS  pathname refers to a read-only filesystem.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │mkfifo(), mkfifoat()                                                                                                                                                    │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
       It is implemented using mknodat(2).

STANDARDS
       POSIX.1-2008.

HISTORY
       mkfifo()
              POSIX.1-2001.

       mkfifoat()
              glibc 2.4.  POSIX.1-2008.

SEE ALSO
       mkfifo(1), close(2), open(2), read(2), stat(2), umask(2), write(2), fifo(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                       mkfifo(3)
MKFIFO(3P)                                                                               POSIX Programmer's Manual                                                                              MKFIFO(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       mkfifo, mkfifoat — make a FIFO special file

SYNOPSIS
       #include <sys/stat.h>

       int mkfifo(const char *path, mode_t mode);

       #include <fcntl.h>

       int mkfifoat(int fd, const char *path, mode_t mode);

DESCRIPTION
       The mkfifo() function shall create a new FIFO special file named by the pathname pointed to by path.  The file permission bits of the new FIFO shall be initialized from mode.  The file permission
       bits of the mode argument shall be modified by the process' file creation mask.

       When bits in mode other than the file permission bits are set, the effect is implementation-defined.

       If path names a symbolic link, mkfifo() shall fail and set errno to [EEXIST].

       The  FIFO's user ID shall be set to the process' effective user ID. The FIFO's group ID shall be set to the group ID of the parent directory or to the effective group ID of the process. Implemen‐
       tations shall provide a way to initialize the FIFO's group ID to the group ID of the parent directory. Implementations may, but need not, provide an implementation-defined way to  initialize  the
       FIFO's group ID to the effective group ID of the calling process.

       Upon  successful  completion, mkfifo() shall mark for update the last data access, last data modification, and last file status change timestamps of the file. Also, the last data modification and
       last file status change timestamps of the directory that contains the new entry shall be marked for update.

       The mkfifoat() function shall be equivalent to the mkfifo() function except in the case where path specifies a relative path. In this case the newly created FIFO is created relative to the direc‐
       tory  associated  with  the  file  descriptor fd instead of the current working directory. If the access mode of the open file description associated with the file descriptor is not O_SEARCH, the
       function shall check whether directory searches are permitted using the current permissions of the directory underlying the file descriptor. If the access mode is O_SEARCH, the function shall not
       perform the check.

       If mkfifoat() is passed the special value AT_FDCWD in the fd parameter, the current working directory shall be used and the behavior shall be identical to a call to mkfifo().

RETURN VALUE
       Upon successful completion, these functions shall return 0.  Otherwise, these functions shall return -1 and set errno to indicate the error. If -1 is returned, no FIFO shall be created.

ERRORS
       These functions shall fail if:

       EACCES A component of the path prefix denies search permission, or write permission is denied on the parent directory of the FIFO to be created.

       EEXIST The named file already exists.

       ELOOP  A loop exists in symbolic links encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of a component of a pathname is longer than {NAME_MAX}.

       ENOENT A component of the path prefix of path does not name an existing file or path is an empty string.

       ENOENT or ENOTDIR
              The  path argument contains at least one non-<slash> character and ends with one or more trailing <slash> characters. If path without the trailing <slash> characters would name an existing
              file, an [ENOENT] error shall not occur.

       ENOSPC The directory that would contain the new file cannot be extended or the file system is out of file-allocation resources.

       ENOTDIR
              A component of the path prefix names an existing file that is neither a directory nor a symbolic link to a directory.

       EROFS  The named file resides on a read-only file system.

       The mkfifoat() function shall fail if:

       EACCES The access mode of the open file description associated with fd is not O_SEARCH and the permissions of the directory underlying fd do not permit directory searches.

       EBADF  The path argument does not specify an absolute path and the fd argument is neither AT_FDCWD nor a valid file descriptor open for reading or searching.

       ENOTDIR
              The path argument is not an absolute path and fd is a file descriptor associated with a non-directory file.

       These functions may fail if:

       ELOOP  More than {SYMLOOP_MAX} symbolic links were encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of a pathname exceeds {PATH_MAX}, or pathname resolution of a symbolic link produced an intermediate result with a length that exceeds {PATH_MAX}.

       The following sections are informative.

EXAMPLES
   Creating a FIFO File
       The following example shows how to create a FIFO file named /home/cnd/mod_done, with read/write permissions for owner, and with read permissions for group and others.

           #include <sys/types.h>
           #include <sys/stat.h>

           int status;
           ...
           status = mkfifo("/home/cnd/mod_done", S_IWUSR | S_IRUSR |
               S_IRGRP | S_IROTH);

APPLICATION USAGE
       None.

RATIONALE
       The syntax of this function is intended to maintain compatibility with historical implementations of mknod().  The latter function was included in the 1984 /usr/group standard but only for use in
       creating  FIFO  special files. The mknod() function was originally excluded from the POSIX.1‐1988 standard as implementation-defined and replaced by mkdir() and mkfifo().  The mknod() function is
       now included for alignment with the Single UNIX Specification.

       The POSIX.1‐1990 standard required that the group ID of a newly created FIFO be set to the group ID of its parent directory or to the effective group ID of the creating process.  FIPS  151‐2  re‐
       quired  that  implementations provide a way to have the group ID be set to the group ID of the containing directory, but did not prohibit implementations also supporting a way to set the group ID
       to the effective group ID of the creating process.  Conforming applications should not assume which group ID will be used. If it matters, an application can use chown() to set the group ID  after
       the FIFO is created, or determine under what conditions the implementation will set the desired group ID.

       The purpose of the mkfifoat() function is to create a FIFO special file in directories other than the current working directory without exposure to race conditions. Any part of the path of a file
       could be changed in parallel to a call to mkfifo(), resulting in unspecified behavior. By opening a file descriptor for the target directory and using the mkfifoat() function it can be guaranteed
       that the newly created FIFO is located relative to the desired directory.

FUTURE DIRECTIONS
       None.

SEE ALSO
       chmod(), mknod(), umask()

       The Base Definitions volume of POSIX.1‐2017, <fcntl.h>, <sys_stat.h>, <sys_types.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                         MKFIFO(3P)
