expm1(3)                                                                                 Library Functions Manual                                                                                 expm1(3)

NAME
       expm1, expm1f, expm1l - exponential minus 1

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       double expm1(double x);
       float expm1f(float x);
       long double expm1l(long double x);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       expm1():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || _XOPEN_SOURCE >= 500
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

       expm1f(), expm1l():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       These functions return a value equivalent to

           exp(x) - 1

       The result is computed in a way that is accurate even if the value of x is near zero—a case where exp(x) - 1 would be inaccurate due to subtraction of two numbers that are nearly equal.

RETURN VALUE
       On success, these functions return exp(x) - 1.

       If x is a NaN, a NaN is returned.

       If x is +0 (-0), +0 (-0) is returned.

       If x is positive infinity, positive infinity is returned.

       If x is negative infinity, -1 is returned.

       If the result overflows, a range error occurs, and the functions return -HUGE_VAL, -HUGE_VALF, or -HUGE_VALL, respectively.

ERRORS
       See math_error(7) for information on how to determine whether an error has occurred when calling these functions.

       The following errors can occur:

       Range error, overflow
              errno is set to ERANGE (but see BUGS).  An overflow floating-point exception (FE_OVERFLOW) is raised.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │expm1(), expm1f(), expm1l()                                                                                                                                             │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       C99, POSIX.1-2001.  BSD.

BUGS
       Before  glibc  2.17, on certain architectures (e.g., x86, but not x86_64) expm1() raised a bogus underflow floating-point exception for some large negative x values (where the function result ap‐
       proaches -1).

       Before approximately glibc 2.11, expm1() raised a bogus invalid floating-point exception in addition to the expected overflow exception, and returned a NaN instead of positive infinity, for  some
       large positive x values.

       Before glibc 2.11, the glibc implementation did not set errno to ERANGE when a range error occurred.

SEE ALSO
       exp(3), log(3), log1p(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        expm1(3)
EXPM1(3P)                                                                                POSIX Programmer's Manual                                                                               EXPM1(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       expm1, expm1f, expm1l — compute exponential functions

SYNOPSIS
       #include <math.h>

       double expm1(double x);
       float expm1f(float x);
       long double expm1l(long double x);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       These functions shall compute ex-1.0.

       An  application  wishing  to check for error situations should set errno to zero and call feclearexcept(FE_ALL_EXCEPT) before calling these functions. On return, if errno is non-zero or fetestex‐
       cept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.

RETURN VALUE
       Upon successful completion, these functions return ex-1.0.

       If the correct value would cause overflow, a range error shall occur and expm1(), expm1f(), and expm1l() shall return the value of the macro HUGE_VAL, HUGE_VALF, and HUGE_VALL, respectively.

       If x is NaN, a NaN shall be returned.

       If x is ±0, ±0 shall be returned.

       If x is -Inf, -1 shall be returned.

       If x is +Inf, x shall be returned.

       If x is subnormal, a range error may occur
       and x should be returned.

       If x is not returned, expm1(), expm1f(), and expm1l() shall return an implementation-defined value no greater in magnitude than DBL_MIN, FLT_MIN, and LDBL_MIN, respectively.

ERRORS
       These functions shall fail if:

       Range Error The result overflows.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the overflow floating-point exception shall be raised.

       These functions may fail if:

       Range Error The value of x is subnormal.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the underflow floating-point exception shall be raised.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       The value of expm1(x) may be more accurate than exp(x)-1.0 for small values of x.

       The expm1() and log1p() functions are useful for financial calculations of ((1+x)n-1)/x, namely:

           expm1(n * log1p(x))/x

       when x is very small (for example, when calculating small daily interest rates). These functions also simplify writing accurate inverse hyperbolic functions.

       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling & MATH_ERREXCEPT) are independent of each other, but at least one of them must be non-zero.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       exp(), feclearexcept(), fetestexcept(), ilogb(), log1p()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          EXPM1(3P)
