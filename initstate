random(3)                                                                                Library Functions Manual                                                                                random(3)

NAME
       random, srandom, initstate, setstate - random number generator

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdlib.h>

       long random(void);
       void srandom(unsigned int seed);

       char *initstate(unsigned int seed, char state[.n], size_t n);
       char *setstate(char *state);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       random(), srandom(), initstate(), setstate():
           _XOPEN_SOURCE >= 500
               || /* glibc >= 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE

DESCRIPTION
       The  random() function uses a nonlinear additive feedback random number generator employing a default table of size 31 long integers to return successive pseudo-random numbers in the range from 0
       to 2^31 - 1.  The period of this random number generator is very large, approximately 16 * ((2^31) - 1).

       The srandom() function sets its argument as the seed for a new sequence of pseudo-random integers to be returned by random().  These sequences are repeatable by calling srandom()  with  the  same
       seed value.  If no seed value is provided, the random() function is automatically seeded with a value of 1.

       The initstate() function allows a state array state to be initialized for use by random().  The size of the state array n is used by initstate() to decide how sophisticated a random number gener‐
       ator it should use—the larger the state array, the better the random numbers will be.  Current "optimal" values for the size of the state array n are 8, 32, 64, 128, and 256 bytes; other  amounts
       will  be  rounded  down to the nearest known amount.  Using less than 8 bytes results in an error.  seed is the seed for the initialization, which specifies a starting point for the random number
       sequence, and provides for restarting at the same point.

       The setstate() function changes the state array used by the random() function.  The state array state is used for random number generation until the next call to initstate() or setstate().  state
       must first have been initialized using initstate() or be the result of a previous call of setstate().

RETURN VALUE
       The random() function returns a value between 0 and (2^31) - 1.  The srandom() function returns no value.

       The initstate() function returns a pointer to the previous state array.  On failure, it returns NULL, and errno is set to indicate the error.

       On success, setstate() returns a pointer to the previous state array.  On failure, it returns NULL, and errno is set to indicate the error.

ERRORS
       EINVAL The state argument given to setstate() was NULL.

       EINVAL A state array of less than 8 bytes was specified to initstate().

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │random(), srandom(), initstate(), setstate()                                                                                                                            │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, 4.3BSD.

NOTES
       Random-number  generation  is  a  complex topic.  Numerical Recipes in C: The Art of Scientific Computing (William H. Press, Brian P. Flannery, Saul A. Teukolsky, William T. Vetterling; New York:
       Cambridge University Press, 2007, 3rd ed.)  provides an excellent discussion of practical random-number generation issues in Chapter 7 (Random Numbers).

       For a more theoretical discussion which also covers many practical issues in depth, see Chapter 3 (Random Numbers) in Donald E. Knuth's The Art of Computer Programming,  volume  2  (Seminumerical
       Algorithms), 2nd ed.; Reading, Massachusetts: Addison-Wesley Publishing Company, 1981.

CAVEATS
       The random() function should not be used in multithreaded programs where reproducible behavior is required.  Use random_r(3) for that purpose.

BUGS
       According to POSIX, initstate() should return NULL on error.  In the glibc implementation, errno is (as specified) set on error, but the function does not return NULL.

SEE ALSO
       getrandom(2), drand48(3), rand(3), random_r(3), srand(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                       random(3)
INITSTATE(3P)                                                                            POSIX Programmer's Manual                                                                           INITSTATE(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       initstate, random, setstate, srandom — pseudo-random number functions

SYNOPSIS
       #include <stdlib.h>

       char *initstate(unsigned seed, char *state, size_t size);
       long random(void);
       char *setstate(char *state);
       void srandom(unsigned seed);

DESCRIPTION
       The random() function shall use a non-linear additive feedback random-number generator employing a default state array size of 31 long integers to return successive pseudo-random numbers  in  the
       range  from  0 to 231-1. The period of this random-number generator is approximately 16 x (231-1). The size of the state array determines the period of the random-number generator. Increasing the
       state array size shall increase the period.

       With 256 bytes of state information, the period of the random-number generator shall be greater than 269.

       Like rand(), random() shall produce by default a sequence of numbers that can be duplicated by calling srandom() with 1 as the seed.

       The srandom() function shall initialize the current state array using the value of seed.

       The initstate() and setstate() functions handle restarting and changing random-number generators. The initstate() function allows a state array, pointed to by the state argument, to  be  initial‐
       ized  for  future  use. The size argument, which specifies the size in bytes of the state array, shall be used by initstate() to decide what type of random-number generator to use; the larger the
       state array, the more random the numbers. Values for the amount of state information are 8, 32, 64, 128, and 256 bytes. Other values greater than 8 bytes are rounded down to the  nearest  one  of
       these  values.  If initstate() is called with 8≤size<32, then random() shall use a simple linear congruential random number generator. The seed argument specifies a starting point for the random-
       number sequence and provides for restarting at the same point. The initstate() function shall return a pointer to the previous state information array.

       If initstate() has not been called, then random() shall behave as though initstate() had been called with seed=1 and size=128.

       Once a state has been initialized, setstate() allows switching between state arrays. The array defined by the state argument shall be used for further random-number generation  until  initstate()
       is called or setstate() is called again. The setstate() function shall return a pointer to the previous state array.

RETURN VALUE
       If initstate() is called with size less than 8, it shall return NULL.

       The random() function shall return the generated pseudo-random number.

       The srandom() function shall not return a value.

       Upon successful completion, initstate() and setstate() shall return a pointer to the previous state array; otherwise, a null pointer shall be returned.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       After initialization, a state array can be restarted at a different point in one of two ways:

        1. The initstate() function can be used, with the desired seed, state array, and size of the array.

        2. The  setstate()  function, with the desired state, can be used, followed by srandom() with the desired seed. The advantage of using both of these functions is that the size of the state array
           does not have to be saved once it is initialized.

       Although some implementations of random() have written messages to standard error, such implementations do not conform to POSIX.1‐2008.

       Issue 5 restored the historical behavior of this function.

       Threaded applications should use erand48(), nrand48(), or jrand48() instead of random() when an independent random number sequence in multiple threads is required.

       These functions should be avoided whenever non-trivial requirements (including safety) have to be fulfilled.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       drand48(), rand()

       The Base Definitions volume of POSIX.1‐2017, <stdlib.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                      INITSTATE(3P)
