PIP-DOWNLOAD(1)                       pip                      PIP-DOWNLOAD(1)

NAME
       pip-download - description of pip download command

DESCRIPTION
       Download packages from:

       • PyPI (and other indexes) using requirement specifiers.

       • VCS project urls.

       • Local project directories.

       • Local or remote source archives.

       pip  also supports downloading from "requirements files", which provide
       an easy way to specify a whole environment to be downloaded.

USAGE
          python -m pip download [options] <requirement specifier> [package-index-options] ...
          python -m pip download [options] -r <requirements file> [package-index-options] ...
          python -m pip download [options] <vcs project url> ...
          python -m pip download [options] <local project path> ...
          python -m pip download [options] <archive url/path> ...

OPTIONS
       -c, --constraint <file>
              Constrain versions using the given constraints file. This option
              can be used multiple times.

       -r, --requirement <file>
              Install  from  the  given  requirements file. This option can be
              used multiple times.

       --no-deps
              Don't install package dependencies.

       --global-option <options>
              Extra global options to be supplied to the setup.py call  before
              the install or bdist_wheel command.

       --no-binary <format_control>
              Do  not use binary packages. Can be supplied multiple times, and
              each time adds to the existing value. Accepts either ":all:"  to
              disable  all  binary packages, ":none:" to empty the set (notice
              the colons), or one or more package names  with  commas  between
              them  (no colons). Note that some packages are tricky to compile
              and may fail to install when this option is used on them.

       --only-binary <format_control>
              Do not use source packages. Can be supplied multiple times,  and
              each  time adds to the existing value. Accepts either ":all:" to
              disable all source packages, ":none:" to empty the set,  or  one
              or more package names with commas between them. Packages without
              binary distributions will fail to install when  this  option  is
              used on them.

       --prefer-binary
              Prefer older binary packages over newer source packages.

       --src <dir>
              Directory  to check out editable projects into. The default in a
              virtualenv is "<venv path>/src". The default for global installs
              is "<current dir>/src".

       --pre  Include  pre-release  and  development versions. By default, pip
              only finds stable versions.

       --require-hashes
              Require a hash to check each requirement against, for repeatable
              installs.  This option is implied when any package in a require‐
              ments file has a --hash option.

       --progress-bar <progress_bar>
              Specify whether the progress bar should be used [on,  off]  (de‐
              fault: on)

       --no-build-isolation
              Disable  isolation  when  building a modern source distribution.
              Build dependencies specified by PEP  518  must  be  already  in‐
              stalled if this option is used.

       --use-pep517
              Use   PEP   517   for   building   source   distributions   (use
              --no-use-pep517 to force legacy behaviour).

       --check-build-dependencies
              Check the build dependencies when PEP517 is used.

       --ignore-requires-python
              Ignore the Requires-Python information.

       -d, --dest <dir>
              Download packages into <dir>.

       --platform <platform>
              Only use wheels compatible  with  <platform>.  Defaults  to  the
              platform  of  the running system. Use this option multiple times
              to specify multiple platforms supported  by  the  target  inter‐
              preter.

       --python-version <python_version>
              The  Python  interpreter  version  to  use  for  wheel  and "Re‐
              quires-Python" compatibility checks. Defaults to a  version  de‐
              rived from the running interpreter. The version can be specified
              using up to three dot-separated integers (e.g.  "3"  for  3.0.0,
              "3.7"  for 3.7.0, or "3.7.3"). A major-minor version can also be
              given as a string without dots (e.g. "37" for 3.7.0).

       --implementation <implementation>
              Only use wheels compatible with Python implementation <implemen‐
              tation>, e.g. 'pp', 'jy', 'cp',  or 'ip'. If not specified, then
              the current interpreter implementation is  used.   Use  'py'  to
              force implementation-agnostic wheels.

       --abi <abi>
              Only   use   wheels  compatible  with  Python  abi  <abi>,  e.g.
              'pypy_41'. If not specified, then the  current  interpreter  abi
              tag  is used. Use this option multiple times to specify multiple
              abis supported by the target  interpreter.  Generally  you  will
              need  to specify --implementation, --platform, and --python-ver‐
              sion when using this option.

       --no-clean
              Don't clean up build directories.

AUTHOR
       pip developers

COPYRIGHT
       The pip developers

23.0                             Feb 19, 2023                  PIP-DOWNLOAD(1)
