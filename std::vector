std::vector< _Tp, _Alloc >(Library Functions Manustd::vector< _Tp, _Alloc >(3)

NAME
       std::vector< _Tp, _Alloc > - A standard container which offers fixed
       time access to individual elements in any order.

SYNOPSIS
       #include <vector>

       Inherits std::_Vector_base< _Tp, _Alloc >.

       Inherited by std::match_results< _Bi_iter, _Alloc > [private].

   Public Types
       typedef _Alloc allocator_type
       typedef __gnu_cxx::__normal_iterator< const_pointer, vector >
           const_iterator
       typedef _Alloc_traits::const_pointer const_pointer
       typedef _Alloc_traits::const_reference const_reference
       typedef std::reverse_iterator< const_iterator > const_reverse_iterator
       typedef ptrdiff_t difference_type
       typedef __gnu_cxx::__normal_iterator< pointer, vector > iterator
       typedef _Base::pointer pointer
       typedef _Alloc_traits::reference reference
       typedef std::reverse_iterator< iterator > reverse_iterator
       typedef size_t size_type
       typedef _Tp value_type

   Public Member Functions
       vector ()=default
           Creates a vector with no elements.
       template<typename _InputIterator , typename  =
           std::_RequireInputIter<_InputIterator>> constexpr vector
           (_InputIterator __first, _InputIterator __last, const
           allocator_type &__a=allocator_type())
           Builds a vector from a range.
       constexpr vector (const allocator_type &__a) noexcept
           Creates a vector with no elements.
       constexpr vector (const vector &__x)
           Vector copy constructor.
       constexpr vector (const vector &__x, const __type_identity_t<
           allocator_type > &__a)
           Copy constructor with alternative allocator.
       constexpr vector (initializer_list< value_type > __l, const
           allocator_type &__a=allocator_type())
           Builds a vector from an initializer list.
       constexpr vector (size_type __n, const allocator_type
           &__a=allocator_type())
           Creates a vector with default constructed elements.
       constexpr vector (size_type __n, const value_type &__value, const
           allocator_type &__a=allocator_type())
           Creates a vector with copies of an exemplar element.
       vector (vector &&) noexcept=default
           Vector move constructor.
       constexpr vector (vector &&__rv, const __type_identity_t<
           allocator_type > &__m) noexcept(noexcept(vector(std::declval<
           vector && >(), std::declval< const allocator_type & >(),
           std::declval< typename _Alloc_traits::is_always_equal >())))
           Move constructor with alternative allocator.
       constexpr ~vector () noexcept
       template<typename... _Args> constexpr auto _M_emplace_aux
           (const_iterator __position, _Args &&... __args) -> iterator
       template<typename _InputIterator , typename  =
           std::_RequireInputIter<_InputIterator>> constexpr void assign
           (_InputIterator __first, _InputIterator __last)
           Assigns a range to a vector.
       constexpr void assign (initializer_list< value_type > __l)
           Assigns an initializer list to a vector.
       constexpr void assign (size_type __n, const value_type &__val)
           Assigns a given value to a vector.
       constexpr reference at (size_type __n)
           Provides access to the data contained in the vector.
       constexpr const_reference at (size_type __n) const
           Provides access to the data contained in the vector.
       constexpr const_reference back () const noexcept
       constexpr reference back () noexcept
       constexpr const_iterator begin () const noexcept
       constexpr iterator begin () noexcept
       constexpr size_type capacity () const noexcept
       constexpr const_iterator cbegin () const noexcept
       constexpr const_iterator cend () const noexcept
       constexpr void clear () noexcept
       constexpr const_reverse_iterator crbegin () const noexcept
       constexpr const_reverse_iterator crend () const noexcept
       constexpr const _Tp * data () const noexcept
       constexpr _Tp * data () noexcept
       template<typename... _Args> constexpr iterator emplace (const_iterator
           __position, _Args &&... __args)
           Inserts an object in vector before specified iterator.
       template<typename... _Args> constexpr reference emplace_back (_Args
           &&... __args)
       constexpr bool empty () const noexcept
       constexpr const_iterator end () const noexcept
       constexpr iterator end () noexcept
       constexpr iterator erase (const_iterator __first, const_iterator
           __last)
           Remove a range of elements.
       constexpr iterator erase (const_iterator __position)
           Remove element at given position.
       constexpr const_reference front () const noexcept
       constexpr reference front () noexcept
       constexpr allocator_type get_allocator () const noexcept
           Get a copy of the memory allocation object.
       template<typename _InputIterator , typename  =
           std::_RequireInputIter<_InputIterator>> constexpr iterator insert
           (const_iterator __position, _InputIterator __first, _InputIterator
           __last)
           Inserts a range into the vector.
       constexpr iterator insert (const_iterator __position, const value_type
           &__x)
           Inserts given value into vector before specified iterator.
       constexpr iterator insert (const_iterator __position, initializer_list<
           value_type > __l)
           Inserts an initializer_list into the vector.
       constexpr iterator insert (const_iterator __position, size_type __n,
           const value_type &__x)
           Inserts a number of copies of given data into the vector.
       constexpr iterator insert (const_iterator __position, value_type &&__x)
           Inserts given rvalue into vector before specified iterator.
       constexpr size_type max_size () const noexcept
       constexpr vector & operator= (const vector &__x)
           Vector assignment operator.
       constexpr vector & operator= (initializer_list< value_type > __l)
           Vector list assignment operator.
       constexpr vector & operator= (vector &&__x)
           noexcept(_Alloc_traits::_S_nothrow_move())
           Vector move assignment operator.
       constexpr const_reference operator[] (size_type __n) const noexcept
           Subscript access to the data contained in the vector.
       constexpr reference operator[] (size_type __n) noexcept
           Subscript access to the data contained in the vector.
       constexpr void pop_back () noexcept
           Removes last element.
       constexpr void push_back (const value_type &__x)
           Add data to the end of the vector.
       constexpr void push_back (value_type &&__x)
       constexpr const_reverse_iterator rbegin () const noexcept
       constexpr reverse_iterator rbegin () noexcept
       constexpr const_reverse_iterator rend () const noexcept
       constexpr reverse_iterator rend () noexcept
       constexpr void reserve (size_type __n)
           Attempt to preallocate enough memory for specified number of
           elements.
       constexpr void resize (size_type __new_size)
           Resizes the vector to the specified number of elements.
       constexpr void resize (size_type __new_size, const value_type &__x)
           Resizes the vector to the specified number of elements.
       constexpr void shrink_to_fit ()
       constexpr size_type size () const noexcept
       constexpr void swap (vector &__x) noexcept
           Swaps data with another vector.

   Protected Member Functions
       constexpr pointer _M_allocate (size_t __n)
       template<typename _ForwardIterator > constexpr pointer
           _M_allocate_and_copy (size_type __n, _ForwardIterator __first,
           _ForwardIterator __last)
       template<typename _ForwardIterator > constexpr void _M_assign_aux
           (_ForwardIterator __first, _ForwardIterator __last,
           std::forward_iterator_tag)
       template<typename _InputIterator > constexpr void _M_assign_aux
           (_InputIterator __first, _InputIterator __last,
           std::input_iterator_tag)
       template<typename _InputIterator > constexpr void _M_assign_dispatch
           (_InputIterator __first, _InputIterator __last, __false_type)
       template<typename _Integer > constexpr void _M_assign_dispatch
           (_Integer __n, _Integer __val, __true_type)
       constexpr size_type _M_check_len (size_type __n, const char *__s) const
       constexpr void _M_create_storage (size_t __n)
       constexpr void _M_deallocate (pointer __p, size_t __n)
       constexpr void _M_default_append (size_type __n)
       constexpr void _M_default_initialize (size_type __n)
       template<typename... _Args> constexpr iterator _M_emplace_aux
           (const_iterator __position, _Args &&... __args)
       constexpr iterator _M_emplace_aux (const_iterator __position,
           value_type &&__v)
       constexpr iterator _M_erase (iterator __first, iterator __last)
       constexpr iterator _M_erase (iterator __position)
       constexpr void _M_erase_at_end (pointer __pos) noexcept
       constexpr void _M_fill_assign (size_type __n, const value_type &__val)
       constexpr void _M_fill_initialize (size_type __n, const value_type
           &__value)
       constexpr void _M_fill_insert (iterator __pos, size_type __n, const
           value_type &__x)
       constexpr const _Tp_alloc_type & _M_get_Tp_allocator () const noexcept
       constexpr _Tp_alloc_type & _M_get_Tp_allocator () noexcept
       template<typename _Arg > constexpr void _M_insert_aux (iterator
           __position, _Arg &&__arg)
       template<typename _InputIterator > constexpr void _M_insert_dispatch
           (iterator __pos, _InputIterator __first, _InputIterator __last,
           __false_type)
       template<typename _Integer > constexpr void _M_insert_dispatch
           (iterator __pos, _Integer __n, _Integer __val, __true_type)
       constexpr iterator _M_insert_rval (const_iterator __position,
           value_type &&__v)
       constexpr void _M_range_check (size_type __n) const
           Safety check used only from at().
       template<typename _ForwardIterator > constexpr void _M_range_initialize
           (_ForwardIterator __first, _ForwardIterator __last,
           std::forward_iterator_tag)
       template<typename _InputIterator > constexpr void _M_range_initialize
           (_InputIterator __first, _InputIterator __last,
           std::input_iterator_tag)
       template<typename _ForwardIterator > constexpr void _M_range_insert
           (iterator __pos, _ForwardIterator __first, _ForwardIterator __last,
           std::forward_iterator_tag)
       template<typename _InputIterator > constexpr void _M_range_insert
           (iterator __pos, _InputIterator __first, _InputIterator __last,
           std::input_iterator_tag)
       template<typename... _Args> constexpr void _M_realloc_insert (iterator
           __position, _Args &&... __args)
       constexpr bool _M_shrink_to_fit ()

   Static Protected Member Functions
       static constexpr size_type _S_check_init_len (size_type __n, const
           allocator_type &__a)
       static constexpr size_type _S_max_size (const _Tp_alloc_type &__a)
           noexcept

   Protected Attributes
       _Vector_impl _M_impl

Detailed Description
   template<typename _Tp, typename _Alloc = std::allocator<_Tp>>
       class std::vector< _Tp, _Alloc >"A standard container which offers
       fixed time access to individual elements in any order.

       Template Parameters
           _Tp Type of element.
           _Alloc Allocator type, defaults to allocator<_Tp>.

       Meets the requirements of a container, a reversible container, and a
       sequence, including the optional sequence requirements with the
       exception of push_front and pop_front.

       In some terminology a vector can be described as a dynamic C-style
       array, it offers fast and efficient access to individual elements in
       any order and saves the user from worrying about memory and size
       allocation. Subscripting ( [] ) access is also provided as with C-style
       arrays.

       Definition at line 423 of file vector.

Member Typedef Documentation
   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Alloc std::vector< _Tp, _Alloc >::allocator_type
       Definition at line 460 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       __gnu_cxx::__normal_iterator<const_pointer, vector> std::vector< _Tp,
       _Alloc >::const_iterator
       Definition at line 455 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Alloc_traits::const_pointer std::vector< _Tp, _Alloc >::const_pointer
       Definition at line 450 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Alloc_traits::const_reference std::vector< _Tp, _Alloc
       >::const_reference
       Definition at line 452 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       std::reverse_iterator<const_iterator> std::vector< _Tp, _Alloc
       >::const_reverse_iterator
       Definition at line 456 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       ptrdiff_t std::vector< _Tp, _Alloc >::difference_type
       Definition at line 459 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       __gnu_cxx::__normal_iterator<pointer, vector> std::vector< _Tp, _Alloc
       >::iterator
       Definition at line 453 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Base::pointer std::vector< _Tp, _Alloc >::pointer
       Definition at line 449 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Alloc_traits::reference std::vector< _Tp, _Alloc >::reference
       Definition at line 451 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       std::reverse_iterator<iterator> std::vector< _Tp, _Alloc
       >::reverse_iterator
       Definition at line 457 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       size_t std::vector< _Tp, _Alloc >::size_type
       Definition at line 458 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef _Tp
       std::vector< _Tp, _Alloc >::value_type
       Definition at line 448 of file vector.

Constructor & Destructor Documentation
   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       std::vector< _Tp, _Alloc >::vector () [default]
       Creates a vector with no elements.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       std::vector< _Tp, _Alloc >::vector (const allocator_type & __a)
       [inline],  [explicit],  [constexpr],  [noexcept]
       Creates a vector with no elements.

       Parameters
           __a An allocator object.

       Definition at line 537 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       std::vector< _Tp, _Alloc >::vector (size_type __n, const allocator_type
       & __a = allocator_type()) [inline],  [explicit],  [constexpr]
       Creates a vector with default constructed elements.

       Parameters
           __n The number of elements to initially create.
           __a An allocator.

       This constructor fills the vector with __n default constructed
       elements.

       Definition at line 551 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       std::vector< _Tp, _Alloc >::vector (size_type __n, const value_type &
       __value, const allocator_type & __a = allocator_type()) [inline],
       [constexpr]
       Creates a vector with copies of an exemplar element.

       Parameters
           __n The number of elements to initially create.
           __value An element to copy.
           __a An allocator.

       This constructor fills the vector with __n copies of __value.

       Definition at line 564 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       std::vector< _Tp, _Alloc >::vector (const vector< _Tp, _Alloc > & __x)
       [inline],  [constexpr]
       Vector copy constructor.

       Parameters
           __x A vector of identical element and allocator types.

       All the elements of __x are copied, but any unused capacity in __x will
       not be copied (i.e. capacity() == size() in the new vector).

       The newly-created vector uses a copy of the allocator object used by
       __x (unless the allocator traits dictate a different object).

       Definition at line 596 of file vector.

       References std::vector< _Tp, _Alloc >::begin(), and std::vector< _Tp,
       _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       std::vector< _Tp, _Alloc >::vector (vector< _Tp, _Alloc > &&)
       [default],  [noexcept]
       Vector move constructor. The newly-created vector contains the exact
       contents of the moved instance. The contents of the moved instance are
       a valid, but unspecified vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       std::vector< _Tp, _Alloc >::vector (const vector< _Tp, _Alloc > & __x,
       const __type_identity_t< allocator_type > & __a) [inline],  [constexpr]
       Copy constructor with alternative allocator.

       Definition at line 619 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       std::vector< _Tp, _Alloc >::vector (vector< _Tp, _Alloc > && __rv,
       const __type_identity_t< allocator_type > & __m) [inline],
       [constexpr],  [noexcept]
       Move constructor with alternative allocator.

       Definition at line 654 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       std::vector< _Tp, _Alloc >::vector (initializer_list< value_type > __l,
       const allocator_type & __a = allocator_type()) [inline],  [constexpr]
       Builds a vector from an initializer list.

       Parameters
           __l An initializer_list.
           __a An allocator.

       Create a vector consisting of copies of the elements in the
       initializer_list __l.

       This will call the element type's copy constructor N times (where N is
       __l.size()) and do no memory reallocation.

       Definition at line 673 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> constexpr std::vector< _Tp,
       _Alloc >::vector (_InputIterator __first, _InputIterator __last, const
       allocator_type & __a = allocator_type()) [inline],  [constexpr]
       Builds a vector from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.
           __a An allocator.

       Create a vector consisting of copies of the elements from [first,last).

       If the iterators are forward, bidirectional, or random-access, then
       this will call the elements' copy constructor N times (where N is
       distance(first,last)) and do no memory reallocation. But if only input
       iterators are used, then this will do at most 2N calls to the copy
       constructor, and logN memory reallocations.

       Definition at line 702 of file vector.

       References std::__iterator_category().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       std::vector< _Tp, _Alloc >::~vector () [inline],  [constexpr],
       [noexcept]
       The dtor only erases the elements, and note that if the elements
       themselves are pointers, the pointed-to memory is not touched in any
       way. Managing the pointer is the user's responsibility.

       Definition at line 728 of file vector.

       References std::_Destroy().

Member Function Documentation
   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       pointer std::_Vector_base< _Tp, _Alloc >::_M_allocate (size_t __n)
       [inline],  [constexpr],  [protected]
       Definition at line 375 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _ForwardIterator > constexpr pointer std::vector<
       _Tp, _Alloc >::_M_allocate_and_copy (size_type __n, _ForwardIterator
       __first, _ForwardIterator __last) [inline],  [constexpr],  [protected]
       Memory expansion handler. Uses the member allocation function to obtain
       n bytes of memory, and then copies [first,last) into it.

       Definition at line 1611 of file vector.

   template<typename _Tp , typename _Alloc > template<typename
       _ForwardIterator > constexpr void vector::_M_assign_aux
       (_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag) [constexpr],  [protected]
       Definition at line 309 of file vector.tcc.

   template<typename _Tp , typename _Alloc > template<typename _InputIterator
       > constexpr void vector::_M_assign_aux (_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag) [constexpr],
       [protected]
       Definition at line 290 of file vector.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _InputIterator > constexpr void std::vector< _Tp,
       _Alloc >::_M_assign_dispatch (_InputIterator __first, _InputIterator
       __last, __false_type) [inline],  [constexpr],  [protected]
       Definition at line 1735 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _Integer > constexpr void std::vector< _Tp, _Alloc
       >::_M_assign_dispatch (_Integer __n, _Integer __val, __true_type)
       [inline],  [constexpr],  [protected]
       Definition at line 1728 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       size_type std::vector< _Tp, _Alloc >::_M_check_len (size_type __n,
       const char * __s) const [inline],  [constexpr],  [protected]
       Definition at line 1891 of file vector.

   template<typename _Tp , typename _Alloc > constexpr void std::_Vector_base<
       _Tp, _Alloc >::_M_create_storage (size_t __n) [inline],  [constexpr],
       [protected],  [inherited]
       Definition at line 393 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::_Vector_base< _Tp, _Alloc >::_M_deallocate (pointer __p,
       size_t __n) [inline],  [constexpr],  [protected]
       Definition at line 383 of file vector.

   template<typename _Tp , typename _Alloc > constexpr void
       vector::_M_default_append (size_type __n) [constexpr],  [protected]
       Definition at line 626 of file vector.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::_M_default_initialize (size_type __n)
       [inline],  [constexpr],  [protected]
       Definition at line 1710 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename... _Args> constexpr auto std::vector< _Tp, _Alloc
       >::_M_emplace_aux (const_iterator __position, _Args &&... __args) ->
       iterator
              [constexpr]"

       Definition at line 375 of file vector.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       iterator std::vector< _Tp, _Alloc >::_M_emplace_aux (const_iterator
       __position, value_type && __v) [inline],  [constexpr],  [protected]
       Definition at line 1884 of file vector.

   template<typename _Tp , typename _Alloc > constexpr vector< _Tp, _Alloc
       >::iterator vector::_M_erase (iterator __first, iterator __last)
       [constexpr],  [protected]
       Definition at line 189 of file vector.tcc.

   template<typename _Tp , typename _Alloc > constexpr vector< _Tp, _Alloc
       >::iterator vector::_M_erase (iterator __position) [constexpr],
       [protected]
       Definition at line 175 of file vector.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::_M_erase_at_end (pointer __pos)
       [inline],  [constexpr],  [protected],  [noexcept]
       Definition at line 1928 of file vector.

   template<typename _Tp , typename _Alloc > constexpr void
       vector::_M_fill_assign (size_type __n, const value_type & __val)
       [constexpr],  [protected]
       Definition at line 264 of file vector.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::_M_fill_initialize (size_type __n,
       const value_type & __value) [inline],  [constexpr],  [protected]
       Definition at line 1699 of file vector.

   template<typename _Tp , typename _Alloc > constexpr void
       vector::_M_fill_insert (iterator __pos, size_type __n, const value_type
       & __x) [constexpr],  [protected]
       Definition at line 523 of file vector.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const _Tp_alloc_type & std::_Vector_base< _Tp, _Alloc
       >::_M_get_Tp_allocator () const [inline],  [constexpr],  [protected],
       [noexcept]
       Definition at line 303 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       _Tp_alloc_type & std::_Vector_base< _Tp, _Alloc >::_M_get_Tp_allocator
       () [inline],  [constexpr],  [protected],  [noexcept]
       Definition at line 298 of file vector.

   template<typename _Tp , typename _Alloc > template<typename _Arg >
       constexpr void vector::_M_insert_aux (iterator __position, _Arg &&
       __arg) [constexpr],  [protected]
       Definition at line 407 of file vector.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _InputIterator > constexpr void std::vector< _Tp,
       _Alloc >::_M_insert_dispatch (iterator __pos, _InputIterator __first,
       _InputIterator __last, __false_type) [inline],  [constexpr],
       [protected]
       Definition at line 1776 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _Integer > constexpr void std::vector< _Tp, _Alloc
       >::_M_insert_dispatch (iterator __pos, _Integer __n, _Integer __val,
       __true_type) [inline],  [constexpr],  [protected]
       Definition at line 1768 of file vector.

   template<typename _Tp , typename _Alloc > constexpr auto
       vector::_M_insert_rval (const_iterator __position, value_type && __v)
       [constexpr],  [protected]
       Definition at line 350 of file vector.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::_M_range_check (size_type __n) const
       [inline],  [constexpr],  [protected]
       Safety check used only from at().

       Definition at line 1150 of file vector.

       References std::vector< _Tp, _Alloc >::size().

       Referenced by std::vector< _Tp, _Alloc >::at().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _ForwardIterator > constexpr void std::vector< _Tp,
       _Alloc >::_M_range_initialize (_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag) [inline],
       [constexpr],  [protected]
       Definition at line 1682 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _InputIterator > constexpr void std::vector< _Tp,
       _Alloc >::_M_range_initialize (_InputIterator __first, _InputIterator
       __last, std::input_iterator_tag) [inline],  [constexpr],  [protected]
       Definition at line 1662 of file vector.

   template<typename _Tp , typename _Alloc > template<typename
       _ForwardIterator > constexpr void vector::_M_range_insert (iterator
       __pos, _ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag) [constexpr],  [protected]
       Definition at line 739 of file vector.tcc.

   template<typename _Tp , typename _Alloc > template<typename _InputIterator
       > constexpr void vector::_M_range_insert (iterator __pos,
       _InputIterator __first, _InputIterator __last, std::input_iterator_tag)
       [constexpr],  [protected]
       Definition at line 717 of file vector.tcc.

   template<typename _Tp , typename _Alloc > template<typename... _Args>
       constexpr void vector::_M_realloc_insert (iterator __position, _Args
       &&... __args) [constexpr],  [protected]
       Definition at line 439 of file vector.tcc.

   template<typename _Tp , typename _Alloc > constexpr bool
       vector::_M_shrink_to_fit [constexpr],  [protected]
       Definition at line 703 of file vector.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> static
       constexpr size_type std::vector< _Tp, _Alloc >::_S_check_init_len
       (size_type __n, const allocator_type & __a) [inline],  [static],
       [constexpr],  [protected]
       Definition at line 1902 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> static
       constexpr size_type std::vector< _Tp, _Alloc >::_S_max_size (const
       _Tp_alloc_type & __a) [inline],  [static],  [constexpr],  [protected],
       [noexcept]
       Definition at line 1911 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> constexpr void std::vector<
       _Tp, _Alloc >::assign (_InputIterator __first, _InputIterator __last)
       [inline],  [constexpr]
       Assigns a range to a vector.

       Parameters
           __first An input iterator.
           __last An input iterator.

       This function fills a vector with copies of the elements in the range
       [__first,__last).

       Note that the assignment completely changes the vector and that the
       resulting vector's size is the same as the number of elements assigned.

       Definition at line 823 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::assign (initializer_list< value_type >
       __l) [inline],  [constexpr]
       Assigns an initializer list to a vector.

       Parameters
           __l An initializer_list.

       This function fills a vector with copies of the elements in the
       initializer list __l.

       Note that the assignment completely changes the vector and that the
       resulting vector's size is the same as the number of elements assigned.

       Definition at line 850 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::assign (size_type __n, const
       value_type & __val) [inline],  [constexpr]
       Assigns a given value to a vector.

       Parameters
           __n Number of elements to be assigned.
           __val Value to be assigned.

       This function fills a vector with __n copies of the given value. Note
       that the assignment completely changes the vector and that the
       resulting vector's size is the same as the number of elements assigned.

       Definition at line 803 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       reference std::vector< _Tp, _Alloc >::at (size_type __n) [inline],
       [constexpr]
       Provides access to the data contained in the vector.

       Parameters
           __n The index of the element for which data should be accessed.

       Returns
           Read/write reference to data.

       Exceptions
           std::out_of_range If __n is an invalid index.

       This function provides for safer data access. The parameter is first
       checked that it is in the range of the vector. The function throws
       out_of_range if the check fails.

       Definition at line 1173 of file vector.

       References std::vector< _Tp, _Alloc >::_M_range_check().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const_reference std::vector< _Tp, _Alloc >::at (size_type __n) const
       [inline],  [constexpr]
       Provides access to the data contained in the vector.

       Parameters
           __n The index of the element for which data should be accessed.

       Returns
           Read-only (constant) reference to data.

       Exceptions
           std::out_of_range If __n is an invalid index.

       This function provides for safer data access. The parameter is first
       checked that it is in the range of the vector. The function throws
       out_of_range if the check fails.

       Definition at line 1192 of file vector.

       References std::vector< _Tp, _Alloc >::_M_range_check().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const_reference std::vector< _Tp, _Alloc >::back () const [inline],
       [constexpr],  [noexcept]
       Returns a read-only (constant) reference to the data at the last
       element of the vector.

       Definition at line 1240 of file vector.

       References std::vector< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       reference std::vector< _Tp, _Alloc >::back () [inline],  [constexpr],
       [noexcept]
       Returns a read/write reference to the data at the last element of the
       vector.

       Definition at line 1228 of file vector.

       References std::vector< _Tp, _Alloc >::end().

       Referenced by std::piecewise_constant_distribution< _RealType >::max(),
       and std::piecewise_linear_distribution< _RealType >::max().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const_iterator std::vector< _Tp, _Alloc >::begin () const [inline],
       [constexpr],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the vector. Iteration is done in ordinary element order.

       Definition at line 878 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       iterator std::vector< _Tp, _Alloc >::begin () [inline],  [constexpr],
       [noexcept]
       Returns a read/write iterator that points to the first element in the
       vector. Iteration is done in ordinary element order.

       Definition at line 868 of file vector.

       Referenced by std::vector< _Tp, _Alloc >::vector(), std::match_results<
       _Bi_iter, _Alloc >::begin(), std::vector< _Tp, _Alloc >::crend(),
       std::vector< _Tp, _Alloc >::empty(), std::vector< _Tp, _Alloc
       >::erase(), std::vector< _Tp, _Alloc >::front(), std::vector< _Tp,
       _Alloc >::insert(), __gnu_parallel::multiway_merge_exact_splitting(),
       std::operator<(), std::vector< _Tp, _Alloc >::operator=(),
       std::operator==(), and std::vector< _Tp, _Alloc >::rend().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       size_type std::vector< _Tp, _Alloc >::capacity () const [inline],
       [constexpr],  [noexcept]
       Returns the total number of elements that the vector can hold before
       needing to allocate more memory.

       Definition at line 1073 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const_iterator std::vector< _Tp, _Alloc >::cbegin () const [inline],
       [constexpr],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the vector. Iteration is done in ordinary element order.

       Definition at line 949 of file vector.

       Referenced by std::vector< _Tp, _Alloc >::erase(), and std::vector<
       _Tp, _Alloc >::insert().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const_iterator std::vector< _Tp, _Alloc >::cend () const [inline],
       [constexpr],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the vector. Iteration is done in ordinary element order.

       Definition at line 959 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::clear () [inline],  [constexpr],
       [noexcept]
       Erases all the elements. Note that this function only erases the
       elements, and that if the elements themselves are pointers, the
       pointed-to memory is not touched in any way. Managing the pointer is
       the user's responsibility.

       Definition at line 1600 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const_reverse_iterator std::vector< _Tp, _Alloc >::crbegin () const
       [inline],  [constexpr],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       element in the vector. Iteration is done in reverse element order.

       Definition at line 969 of file vector.

       References std::vector< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const_reverse_iterator std::vector< _Tp, _Alloc >::crend () const
       [inline],  [constexpr],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first element in the vector. Iteration is done in reverse
       element order.

       Definition at line 979 of file vector.

       References std::vector< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const _Tp * std::vector< _Tp, _Alloc >::data () const [inline],
       [constexpr],  [noexcept]
       Definition at line 1260 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       _Tp * std::vector< _Tp, _Alloc >::data () [inline],  [constexpr],
       [noexcept]
       Returns a pointer such that [data(), data() + size()) is a valid range.
       For a non-empty vector, data() == &front().

       Definition at line 1255 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename... _Args> constexpr iterator std::vector< _Tp, _Alloc
       >::emplace (const_iterator __position, _Args &&... __args) [inline],
       [constexpr]
       Inserts an object in vector before specified iterator.

       Parameters
           __position A const_iterator into the vector.
           __args Arguments.

       Returns
           An iterator that points to the inserted data.

       This function will insert an object of type T constructed with
       T(std::forward<Args>(args)...) before the specified location. Note that
       this kind of operation could be expensive for a vector and if it is
       frequently used the user should consider using std::list.

       Definition at line 1341 of file vector.

   template<typename _Tp , typename _Alloc > template<typename... _Args>
       constexpr vector< _Tp, _Alloc >::reference vector::emplace_back (_Args
       &&... __args) [constexpr]
       Definition at line 111 of file vector.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       bool std::vector< _Tp, _Alloc >::empty () const [inline],  [constexpr],
       [noexcept]
       Returns true if the vector is empty. (Thus begin() would equal end().)

       Definition at line 1083 of file vector.

       References std::vector< _Tp, _Alloc >::begin(), and std::vector< _Tp,
       _Alloc >::end().

       Referenced by std::piecewise_constant_distribution< _RealType
       >::densities(), std::piecewise_linear_distribution< _RealType
       >::densities(), std::match_results< _Bi_iter, _Alloc >::end(),
       std::piecewise_constant_distribution< _RealType >::intervals(),
       std::piecewise_linear_distribution< _RealType >::intervals(),
       std::discrete_distribution< _IntType >::max(),
       std::piecewise_constant_distribution< _RealType >::max(),
       std::piecewise_linear_distribution< _RealType >::max(),
       std::piecewise_constant_distribution< _RealType >::min(),
       std::piecewise_linear_distribution< _RealType >::min(),
       std::discrete_distribution< _IntType >::probabilities(),
       std::match_results< _Bi_iter, _Alloc >::ready(), and
       std::match_results< _Bi_iter, _Alloc >::size().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const_iterator std::vector< _Tp, _Alloc >::end () const [inline],
       [constexpr],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the vector. Iteration is done in ordinary element order.

       Definition at line 898 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       iterator std::vector< _Tp, _Alloc >::end () [inline],  [constexpr],
       [noexcept]
       Returns a read/write iterator that points one past the last element in
       the vector. Iteration is done in ordinary element order.

       Definition at line 888 of file vector.

       Referenced by std::vector< _Tp, _Alloc >::vector(), std::vector< _Tp,
       _Alloc >::back(), std::vector< _Tp, _Alloc >::crbegin(), std::vector<
       _Tp, _Alloc >::empty(), std::match_results< _Bi_iter, _Alloc >::end(),
       __gnu_parallel::multiway_merge_exact_splitting(), std::operator<(),
       std::vector< _Tp, _Alloc >::operator=(), std::operator==(),
       std::vector< _Tp, _Alloc >::push_back(), std::vector< _Tp, _Alloc
       >::rbegin(), and std::vector< _Tp, _Alloc >::resize().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       iterator std::vector< _Tp, _Alloc >::erase (const_iterator __first,
       const_iterator __last) [inline],  [constexpr]
       Remove a range of elements.

       Parameters
           __first Iterator pointing to the first element to be erased.
           __last Iterator pointing to one past the last element to be erased.

       Returns
           An iterator pointing to the element pointed to by __last prior to
           erasing (or end()).

       This function will erase the elements in the range [__first,__last) and
       shorten the vector accordingly.

       Note This operation could be expensive and if it is frequently used the
       user should consider using std::list. The user is also cautioned that
       this function only erases the elements, and that if the elements
       themselves are pointers, the pointed-to memory is not touched in any
       way. Managing the pointer is the user's responsibility.

       Definition at line 1557 of file vector.

       References std::vector< _Tp, _Alloc >::begin(), and std::vector< _Tp,
       _Alloc >::cbegin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       iterator std::vector< _Tp, _Alloc >::erase (const_iterator __position)
       [inline],  [constexpr]
       Remove element at given position.

       Parameters
           __position Iterator pointing to element to be erased.

       Returns
           An iterator pointing to the next element (or end()).

       This function will erase the element at the given position and thus
       shorten the vector by one.

       Note This operation could be expensive and if it is frequently used the
       user should consider using std::list. The user is also cautioned that
       this function only erases the element, and that if the element is
       itself a pointer, the pointed-to memory is not touched in any way.
       Managing the pointer is the user's responsibility.

       Definition at line 1529 of file vector.

       References std::vector< _Tp, _Alloc >::begin(), and std::vector< _Tp,
       _Alloc >::cbegin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const_reference std::vector< _Tp, _Alloc >::front () const [inline],
       [constexpr],  [noexcept]
       Returns a read-only (constant) reference to the data at the first
       element of the vector.

       Definition at line 1216 of file vector.

       References std::vector< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       reference std::vector< _Tp, _Alloc >::front () [inline],  [constexpr],
       [noexcept]
       Returns a read/write reference to the data at the first element of the
       vector.

       Definition at line 1204 of file vector.

       References std::vector< _Tp, _Alloc >::begin().

       Referenced by std::piecewise_constant_distribution< _RealType >::min(),
       and std::piecewise_linear_distribution< _RealType >::min().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       allocator_type std::_Vector_base< _Tp, _Alloc >::get_allocator () const
       [inline],  [constexpr],  [noexcept]
       Get a copy of the memory allocation object.

       Definition at line 308 of file vector.

       Referenced by std::match_results< _Bi_iter, _Alloc >::get_allocator().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> constexpr iterator std::vector<
       _Tp, _Alloc >::insert (const_iterator __position, _InputIterator
       __first, _InputIterator __last) [inline],  [constexpr]
       Inserts a range into the vector.

       Parameters
           __position A const_iterator into the vector.
           __first An input iterator.
           __last An input iterator.

       Returns
           An iterator that points to the inserted data.

       This function will insert copies of the data in the range
       [__first,__last) into the vector before the location specified by pos.

       Note that this kind of operation could be expensive for a vector and if
       it is frequently used the user should consider using std::list.

       Definition at line 1477 of file vector.

       References std::vector< _Tp, _Alloc >::begin(), and std::vector< _Tp,
       _Alloc >::cbegin().

   template<typename _Tp , typename _Alloc > constexpr vector< _Tp, _Alloc
       >::iterator vector::insert (const_iterator __position, const value_type
       & __x) [constexpr]
       Inserts given value into vector before specified iterator.

       Parameters
           __position A const_iterator into the vector.
           __x Data to be inserted.

       Returns
           An iterator that points to the inserted data.

       This function will insert a copy of the given value before the
       specified location. Note that this kind of operation could be expensive
       for a vector and if it is frequently used the user should consider
       using std::list.

       Definition at line 133 of file vector.tcc.

       References std::begin(), std::cbegin(), std::end(), and std::move().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       iterator std::vector< _Tp, _Alloc >::insert (const_iterator __position,
       initializer_list< value_type > __l) [inline],  [constexpr]
       Inserts an initializer_list into the vector.

       Parameters
           __position An iterator into the vector.
           __l An initializer_list.

       This function will insert copies of the data in the initializer_list l
       into the vector before the location specified by position.

       Note that this kind of operation could be expensive for a vector and if
       it is frequently used the user should consider using std::list.

       Definition at line 1406 of file vector.

       References std::vector< _Tp, _Alloc >::begin(), and std::vector< _Tp,
       _Alloc >::cbegin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       iterator std::vector< _Tp, _Alloc >::insert (const_iterator __position,
       size_type __n, const value_type & __x) [inline],  [constexpr]
       Inserts a number of copies of given data into the vector.

       Parameters
           __position A const_iterator into the vector.
           __n Number of elements to be inserted.
           __x Data to be inserted.

       Returns
           An iterator that points to the inserted data.

       This function will insert a specified number of copies of the given
       data before the location specified by position.

       Note that this kind of operation could be expensive for a vector and if
       it is frequently used the user should consider using std::list.

       Definition at line 1432 of file vector.

       References std::vector< _Tp, _Alloc >::begin(), and std::vector< _Tp,
       _Alloc >::cbegin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       iterator std::vector< _Tp, _Alloc >::insert (const_iterator __position,
       value_type && __x) [inline],  [constexpr]
       Inserts given rvalue into vector before specified iterator.

       Parameters
           __position A const_iterator into the vector.
           __x Data to be inserted.

       Returns
           An iterator that points to the inserted data.

       This function will insert a copy of the given rvalue before the
       specified location. Note that this kind of operation could be expensive
       for a vector and if it is frequently used the user should consider
       using std::list.

       Definition at line 1388 of file vector.

       References std::move().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       size_type std::vector< _Tp, _Alloc >::max_size () const [inline],
       [constexpr],  [noexcept]
       Returns the size() of the largest possible vector.

       Definition at line 993 of file vector.

       Referenced by std::match_results< _Bi_iter, _Alloc >::max_size().

   template<typename _Tp , typename _Alloc > constexpr vector< _Tp, _Alloc > &
       vector::operator= (const vector< _Tp, _Alloc > & __x) [constexpr]
       Vector assignment operator.

       Parameters
           __x A vector of identical element and allocator types.

       All the elements of __x are copied, but any unused capacity in __x will
       not be copied.

       Whether the allocator is copied depends on the allocator traits.

       Definition at line 204 of file vector.tcc.

       References std::__addressof(), std::_Destroy(), std::vector< _Tp,
       _Alloc >::begin(), std::begin(), std::vector< _Tp, _Alloc >::end(),
       std::end(), std::vector< _Tp, _Alloc >::size(), and std::size().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       vector & std::vector< _Tp, _Alloc >::operator= (initializer_list<
       value_type > __l) [inline],  [constexpr]
       Vector list assignment operator.

       Parameters
           __l An initializer_list.

       This function fills a vector with copies of the elements in the
       initializer list __l.

       Note that the assignment completely changes the vector and that the
       resulting vector's size is the same as the number of elements assigned.

       Definition at line 783 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       vector & std::vector< _Tp, _Alloc >::operator= (vector< _Tp, _Alloc >
       && __x) [inline],  [constexpr],  [noexcept]
       Vector move assignment operator.

       Parameters
           __x A vector of identical element and allocator types.

       The contents of __x are moved into this vector (without copying, if the
       allocators permit it). Afterwards __x is a valid, but unspecified
       vector.

       Whether the allocator is moved depends on the allocator traits.

       Definition at line 761 of file vector.

       References std::move().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const_reference std::vector< _Tp, _Alloc >::operator[] (size_type __n)
       const [inline],  [constexpr],  [noexcept]
       Subscript access to the data contained in the vector.

       Parameters
           __n The index of the element for which data should be accessed.

       Returns
           Read-only (constant) reference to data.

       This operator allows for easy, array-style, data access. Note that data
       access with this operator is unchecked and out_of_range lookups are not
       defined. (For checked lookups see at().)

       Definition at line 1140 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       reference std::vector< _Tp, _Alloc >::operator[] (size_type __n)
       [inline],  [constexpr],  [noexcept]
       Subscript access to the data contained in the vector.

       Parameters
           __n The index of the element for which data should be accessed.

       Returns
           Read/write reference to data.

       This operator allows for easy, array-style, data access. Note that data
       access with this operator is unchecked and out_of_range lookups are not
       defined. (For checked lookups see at().)

       Definition at line 1121 of file vector.

       Referenced by std::match_results< _Bi_iter, _Alloc >::operator[]().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::pop_back () [inline],  [constexpr],
       [noexcept]
       Removes last element. This is a typical stack operation. It shrinks the
       vector by one.

       Note that no data is returned, and if the last element's data is
       needed, it should be retrieved before pop_back() is called.

       Definition at line 1317 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::push_back (const value_type & __x)
       [inline],  [constexpr]
       Add data to the end of the vector.

       Parameters
           __x Data to be added.

       This is a typical stack operation. The function creates an element at
       the end of the vector and assigns the given data to it. Due to the
       nature of a vector this operation can be done in constant time if the
       vector has preallocated space available.

       Definition at line 1276 of file vector.

       References std::vector< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::push_back (value_type && __x)
       [inline],  [constexpr]
       Definition at line 1293 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const_reverse_iterator std::vector< _Tp, _Alloc >::rbegin () const
       [inline],  [constexpr],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       element in the vector. Iteration is done in reverse element order.

       Definition at line 918 of file vector.

       References std::vector< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       reverse_iterator std::vector< _Tp, _Alloc >::rbegin () [inline],
       [constexpr],  [noexcept]
       Returns a read/write reverse iterator that points to the last element
       in the vector. Iteration is done in reverse element order.

       Definition at line 908 of file vector.

       References std::vector< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       const_reverse_iterator std::vector< _Tp, _Alloc >::rend () const
       [inline],  [constexpr],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first element in the vector. Iteration is done in reverse
       element order.

       Definition at line 938 of file vector.

       References std::vector< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       reverse_iterator std::vector< _Tp, _Alloc >::rend () [inline],
       [constexpr],  [noexcept]
       Returns a read/write reverse iterator that points to one before the
       first element in the vector. Iteration is done in reverse element
       order.

       Definition at line 928 of file vector.

       References std::vector< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc > constexpr void vector::reserve
       (size_type __n) [constexpr]
       Attempt to preallocate enough memory for specified number of elements.

       Parameters
           __n Number of elements required.

       Exceptions
           std::length_error If n exceeds max_size().

       This function attempts to reserve enough memory for the vector to hold
       the specified number of elements. If the number requested is more than
       max_size(), length_error is thrown.

       The advantage of this function is that if optimal code is a necessity
       and the user can determine the number of elements that will be
       required, the user can reserve the memory in advance, and thus prevent
       a possible reallocation of memory and copying of vector data.

       Definition at line 67 of file vector.tcc.

       References std::_Destroy(), and std::size().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::resize (size_type __new_size)
       [inline],  [constexpr]
       Resizes the vector to the specified number of elements.

       Parameters
           __new_size Number of elements the vector should contain.

       This function will resize the vector to the specified number of
       elements. If the number is smaller than the vector's current size the
       vector is truncated, otherwise default constructed elements are
       appended.

       Definition at line 1008 of file vector.

       References std::vector< _Tp, _Alloc >::size().

       Referenced by __gnu_parallel::__shrink_and_double(), and
       __gnu_parallel::multiway_merge_exact_splitting().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::resize (size_type __new_size, const
       value_type & __x) [inline],  [constexpr]
       Resizes the vector to the specified number of elements.

       Parameters
           __new_size Number of elements the vector should contain.
           __x Data with which new elements should be populated.

       This function will resize the vector to the specified number of
       elements. If the number is smaller than the vector's current size the
       vector is truncated, otherwise the vector is extended and new elements
       are populated with given data.

       Definition at line 1029 of file vector.

       References std::vector< _Tp, _Alloc >::end(), and std::vector< _Tp,
       _Alloc >::size().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::shrink_to_fit () [inline],
       [constexpr]
       A non-binding request to reduce capacity() to size().

       Definition at line 1063 of file vector.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       size_type std::vector< _Tp, _Alloc >::size () const [inline],
       [constexpr],  [noexcept]
       Returns the number of elements in the vector.

       Definition at line 987 of file vector.

       Referenced by __gnu_parallel::__shrink(),
       __gnu_parallel::__shrink_and_double(), std::vector< _Tp, _Alloc
       >::_M_range_check(), std::match_results< _Bi_iter, _Alloc >::empty(),
       __gnu_parallel::list_partition(), std::discrete_distribution< _IntType
       >::max(), std::vector< _Tp, _Alloc >::operator=(), std::operator==(),
       std::vector< _Tp, _Alloc >::resize(), and std::match_results< _Bi_iter,
       _Alloc >::size().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> constexpr
       void std::vector< _Tp, _Alloc >::swap (vector< _Tp, _Alloc > & __x)
       [inline],  [constexpr],  [noexcept]
       Swaps data with another vector.

       Parameters
           __x A vector of the same element and allocator types.

       This exchanges the elements between two vectors in constant time.
       (Three pointers, so it should be quite fast.) Note that the global
       std::swap() function is specialized such that std::swap(v1,v2) will
       feed to this function.

       Whether the allocators are swapped depends on the allocator traits.

       Definition at line 1581 of file vector.

       Referenced by std::match_results< _Bi_iter, _Alloc >::swap().

Member Data Documentation
   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       _Vector_impl std::_Vector_base< _Tp, _Alloc >::_M_impl [protected]
       Definition at line 371 of file vector.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Feb 1 2023   std::vector< _Tp, _Alloc >(3)
