std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >(3)                        Library Functions Manual                        std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >(3)

NAME
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc > - Class std::unordered_map with safety/checking/debug instrumentation.

SYNOPSIS
       Inherits __gnu_debug::_Safe_container< _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware >, and unordered_map< _Key, _Tp, std::hash< _Key >, std::equal_to< _Key >, std::allocator<
       std::pair< const _Key, _Tp > > >.

   Public Types
       typedef _Base::allocator_type allocator_type
       typedef __gnu_debug::_Safe_iterator< _Base_const_iterator, unordered_map > const_iterator
       typedef __gnu_debug::_Safe_local_iterator< _Base_const_local_iterator, unordered_map > const_local_iterator
       typedef _Base::const_pointer const_pointer
       typedef _Base::const_reference const_reference
       typedef _Base::difference_type difference_type
       typedef _Base::hasher hasher
       using insert_return_type = _Node_insert_return< iterator, node_type >
       typedef __gnu_debug::_Safe_iterator< _Base_iterator, unordered_map > iterator
       typedef _Base::key_equal key_equal
       typedef _Base::key_type key_type
       typedef __gnu_debug::_Safe_local_iterator< _Base_local_iterator, unordered_map > local_iterator
       typedef _Base::mapped_type mapped_type
       using node_type = typename _Base::node_type
       typedef _Base::pointer pointer
       typedef _Base::reference reference
       typedef _Base::size_type size_type
       typedef _Base::value_type value_type

   Public Member Functions
       unordered_map (_Base_ref __x)
       template<typename _InputIterator > unordered_map (_InputIterator __first, _InputIterator __last, size_type __n, const allocator_type &__a)
       template<typename _InputIterator > unordered_map (_InputIterator __first, _InputIterator __last, size_type __n, const hasher &__hf, const allocator_type &__a)
       template<typename _InputIterator > unordered_map (_InputIterator __first, _InputIterator __last, size_type __n=0, const hasher &__hf=hasher(), const key_equal &__eql=key_equal(), const
           allocator_type &__a=allocator_type())
       unordered_map (const allocator_type &__a)
       unordered_map (const unordered_map &)=default
       unordered_map (const unordered_map &__umap, const allocator_type &__a)
       unordered_map (initializer_list< value_type > __l, size_type __n, const allocator_type &__a)
       unordered_map (initializer_list< value_type > __l, size_type __n, const hasher &__hf, const allocator_type &__a)
       unordered_map (initializer_list< value_type > __l, size_type __n=0, const hasher &__hf=hasher(), const key_equal &__eql=key_equal(), const allocator_type &__a=allocator_type())
       unordered_map (size_type __n, const allocator_type &__a)
       unordered_map (size_type __n, const hasher &__hf, const allocator_type &__a)
       unordered_map (size_type __n, const hasher &__hf=hasher(), const key_equal &__eql=key_equal(), const allocator_type &__a=allocator_type())
       unordered_map (unordered_map &&)=default
       unordered_map (unordered_map &&__umap, const allocator_type &__a) noexcept(noexcept(_Base(std::move(__umap), __a)))
       const _Base & _M_base () const noexcept
       _Base & _M_base () noexcept
       const_iterator begin () const noexcept
       iterator begin () noexcept
       local_iterator begin (size_type __b)
       const_local_iterator begin (size_type __b) const
       size_type bucket_size (size_type __b) const
       const_iterator cbegin () const noexcept
       const_local_iterator cbegin (size_type __b) const
       const_iterator cend () const noexcept
       const_local_iterator cend (size_type __b) const
       void clear () noexcept
       template<typename... _Args> std::pair< iterator, bool > emplace (_Args &&... __args)
       template<typename... _Args> iterator emplace_hint (const_iterator __hint, _Args &&... __args)
       const_iterator end () const noexcept
       iterator end () noexcept
       local_iterator end (size_type __b)
       const_local_iterator end (size_type __b) const
       template<typename _Kt , typename  = std::__has_is_transparent_t<_Hash, _Kt>, typename  = std::__has_is_transparent_t<_Pred, _Kt>> std::pair< iterator, iterator > equal_range (const _Kt &__k)
       template<typename _Kt , typename  = std::__has_is_transparent_t<_Hash, _Kt>, typename  = std::__has_is_transparent_t<_Pred, _Kt>> std::pair< const_iterator, const_iterator > equal_range (const
           _Kt &__k) const
       std::pair< iterator, iterator > equal_range (const key_type &__key)
       std::pair< const_iterator, const_iterator > equal_range (const key_type &__key) const
       _Base_iterator erase (_Base_const_iterator __it)
       size_type erase (const key_type &__key)
       iterator erase (const_iterator __first, const_iterator __last)
       iterator erase (const_iterator __it)
       iterator erase (iterator __it)
       node_type extract (const key_type &__key)
       node_type extract (const_iterator __position)
       template<typename _Kt , typename  = std::__has_is_transparent_t<_Hash, _Kt>, typename  = std::__has_is_transparent_t<_Pred, _Kt>> iterator find (const _Kt &__k)
       template<typename _Kt , typename  = std::__has_is_transparent_t<_Hash, _Kt>, typename  = std::__has_is_transparent_t<_Pred, _Kt>> const_iterator find (const _Kt &__k) const
       iterator find (const key_type &__key)
       const_iterator find (const key_type &__key) const
       template<typename _InputIterator > void insert (_InputIterator __first, _InputIterator __last)
       template<typename _Pair , typename  = typename std::enable_if<std::is_constructible<value_type,                                  _Pair&&>::value>::type> std::pair< iterator, bool > insert (_Pair
           &&__obj)
       std::pair< iterator, bool > insert (const value_type &__obj)
       template<typename _Pair , typename  = typename std::enable_if<std::is_constructible<value_type,                                  _Pair&&>::value>::type> iterator insert (const_iterator __hint,
           _Pair &&__obj)
       iterator insert (const_iterator __hint, const value_type &__obj)
       iterator insert (const_iterator __hint, node_type &&__nh)
       iterator insert (const_iterator __hint, value_type &&__x)
       insert_return_type insert (node_type &&__nh)
       void insert (std::initializer_list< value_type > __l)
       std::pair< iterator, bool > insert (value_type &&__x)
       template<typename _Obj > pair< iterator, bool > insert_or_assign (const key_type &__k, _Obj &&__obj)
       template<typename _Obj > iterator insert_or_assign (const_iterator __hint, const key_type &__k, _Obj &&__obj)
       template<typename _Obj > iterator insert_or_assign (const_iterator __hint, key_type &&__k, _Obj &&__obj)
       template<typename _Obj > pair< iterator, bool > insert_or_assign (key_type &&__k, _Obj &&__obj)
       float max_load_factor () const noexcept
       void max_load_factor (float __f)
       template<typename _H2 , typename _P2 > void merge (unordered_map< _Key, _Tp, _H2, _P2, _Alloc > &&__source)
       template<typename _H2 , typename _P2 > void merge (unordered_map< _Key, _Tp, _H2, _P2, _Alloc > &__source)
       template<typename _H2 , typename _P2 > void merge (unordered_multimap< _Key, _Tp, _H2, _P2, _Alloc > &&__source)
       template<typename _H2 , typename _P2 > void merge (unordered_multimap< _Key, _Tp, _H2, _P2, _Alloc > &__source)
       unordered_map & operator= (const unordered_map &)=default
       unordered_map & operator= (initializer_list< value_type > __l)
       unordered_map & operator= (unordered_map &&)=default
       void swap (unordered_map &__x) noexcept(noexcept(declval< _Base & >().swap(__x)))
       template<typename... _Args> pair< iterator, bool > try_emplace (const key_type &__k, _Args &&... __args)
       template<typename... _Args> iterator try_emplace (const_iterator __hint, const key_type &__k, _Args &&... __args)
       template<typename... _Args> iterator try_emplace (const_iterator __hint, key_type &&__k, _Args &&... __args)
       template<typename... _Args> pair< iterator, bool > try_emplace (key_type &&__k, _Args &&... __args)

   Protected Member Functions
       void _M_swap (_Safe_container &__x) noexcept

   Friends
       template<typename _ItT , typename _SeqT , typename _CatT > class ::__gnu_debug::_Safe_iterator
       template<typename _ItT , typename _SeqT > class ::__gnu_debug::_Safe_local_iterator

Detailed Description
   template<typename _Key, typename _Tp, typename _Hash = std::hash<_Key>, typename _Pred = std::equal_to<_Key>, typename _Alloc = std::allocator<std::pair<const _Key, _Tp> >>
       class std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >"Class std::unordered_map with safety/checking/debug instrumentation.

       Definition at line 63 of file debug/unordered_map.

Member Typedef Documentation
   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       _Base::allocator_type std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::allocator_type
       Definition at line 96 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       __gnu_debug::_Safe_iterator< _Base_const_iterator, unordered_map> std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::const_iterator
       Definition at line 109 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       __gnu_debug::_Safe_local_iterator< _Base_const_local_iterator, unordered_map> std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::const_local_iterator
       Definition at line 113 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       _Base::const_pointer std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::const_pointer
       Definition at line 103 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       _Base::const_reference std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::const_reference
       Definition at line 105 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       _Base::difference_type std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::difference_type
       Definition at line 114 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef _Base::hasher
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::hasher
       Definition at line 94 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> using
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert_return_type =  _Node_insert_return<iterator, node_type>
       Definition at line 525 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       __gnu_debug::_Safe_iterator< _Base_iterator, unordered_map> std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::iterator
       Definition at line 107 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       _Base::key_equal std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::key_equal
       Definition at line 95 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       _Base::key_type std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::key_type
       Definition at line 98 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       __gnu_debug::_Safe_local_iterator< _Base_local_iterator, unordered_map> std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::local_iterator
       Definition at line 111 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       _Base::mapped_type std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::mapped_type
       Definition at line 100 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> using
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::node_type =  typename _Base::node_type
       Definition at line 524 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       _Base::pointer std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::pointer
       Definition at line 102 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       _Base::reference std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::reference
       Definition at line 104 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       _Base::size_type std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::size_type
       Definition at line 93 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> typedef
       _Base::value_type std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::value_type
       Definition at line 99 of file debug/unordered_map.

Constructor & Destructor Documentation
   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >>
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map (size_type __n, const hasher & __hf = hasher(), const key_equal & __eql = key_equal(), const allocator_type & __a =
       allocator_type()) [inline],  [explicit]
       Definition at line 119 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename
       _InputIterator > std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map (_InputIterator __first, _InputIterator __last, size_type __n = 0, const hasher & __hf = hasher(),
       const key_equal & __eql = key_equal(), const allocator_type & __a = allocator_type()) [inline]
       Definition at line 126 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >>
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map (_Base_ref __x) [inline]
       Definition at line 138 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >>
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map (const allocator_type & __a) [inline],  [explicit]
       Definition at line 144 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >>
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map (const unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc > & __umap, const allocator_type & __a) [inline]
       Definition at line 147 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >>
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map (unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc > && __umap, const allocator_type & __a) [inline],  [noexcept]
       Definition at line 151 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >>
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map (initializer_list< value_type > __l, size_type __n = 0, const hasher & __hf = hasher(), const key_equal & __eql =
       key_equal(), const allocator_type & __a = allocator_type()) [inline]
       Definition at line 157 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >>
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map (size_type __n, const allocator_type & __a) [inline]
       Definition at line 164 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >>
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map (size_type __n, const hasher & __hf, const allocator_type & __a) [inline]
       Definition at line 168 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename
       _InputIterator > std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map (_InputIterator __first, _InputIterator __last, size_type __n, const allocator_type & __a) [inline]
       Definition at line 175 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename
       _InputIterator > std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map (_InputIterator __first, _InputIterator __last, size_type __n, const hasher & __hf, const
       allocator_type & __a) [inline]
       Definition at line 182 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >>
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map (initializer_list< value_type > __l, size_type __n, const allocator_type & __a) [inline]
       Definition at line 189 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >>
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map (initializer_list< value_type > __l, size_type __n, const hasher & __hf, const allocator_type & __a) [inline]
       Definition at line 195 of file debug/unordered_map.

Member Function Documentation
   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> const _Base &
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::_M_base () const [inline],  [noexcept]
       Definition at line 722 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> _Base &
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::_M_base () [inline],  [noexcept]
       Definition at line 719 of file debug/unordered_map.

   template<typename _SafeContainer , typename _Alloc , template< typename > class _SafeBase, bool _IsCxx11AllocatorAware = true> void __gnu_debug::_Safe_container< _SafeContainer, _Alloc, _SafeBase,
       _IsCxx11AllocatorAware >::_M_swap (_Safe_container< _SafeContainer, _Alloc, _SafeBase, _IsCxx11AllocatorAware > & __x) [inline],  [protected],  [noexcept],  [inherited]
       Definition at line 117 of file safe_container.h.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> const_iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::begin () const [inline],  [noexcept]
       Definition at line 243 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::begin () [inline],  [noexcept]
       Definition at line 239 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> local_iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::begin (size_type __b) [inline]
       Definition at line 264 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> const_local_iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::begin (size_type __b) const [inline]
       Definition at line 278 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> size_type
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::bucket_size (size_type __b) const [inline]
       Definition at line 310 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> const_iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::cbegin () const [inline],  [noexcept]
       Definition at line 255 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> const_local_iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::cbegin (size_type __b) const [inline]
       Definition at line 292 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> const_iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::cend () const [inline],  [noexcept]
       Definition at line 259 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> const_local_iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::cend (size_type __b) const [inline]
       Definition at line 299 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> void
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::clear () [inline],  [noexcept]
       Definition at line 232 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename...
       _Args> std::pair< iterator, bool > std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::emplace (_Args &&... __args) [inline]
       Definition at line 331 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename...
       _Args> iterator std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::emplace_hint (const_iterator __hint, _Args &&... __args) [inline]
       Definition at line 341 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> const_iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::end () const [inline],  [noexcept]
       Definition at line 251 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::end () [inline],  [noexcept]
       Definition at line 247 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> local_iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::end (size_type __b) [inline]
       Definition at line 271 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> const_local_iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::end (size_type __b) const [inline]
       Definition at line 285 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename _Kt
       , typename  = std::__has_is_transparent_t<_Hash, _Kt>, typename  = std::__has_is_transparent_t<_Pred, _Kt>> std::pair< iterator, iterator > std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred,
       _Alloc >::equal_range (const _Kt & __k) [inline]
       Definition at line 633 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename _Kt
       , typename  = std::__has_is_transparent_t<_Hash, _Kt>, typename  = std::__has_is_transparent_t<_Pred, _Kt>> std::pair< const_iterator, const_iterator > std::__debug::unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc >::equal_range (const _Kt & __k) const [inline]
       Definition at line 652 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> std::pair< iterator,
       iterator > std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::equal_range (const key_type & __key) [inline]
       Definition at line 622 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> std::pair<
       const_iterator, const_iterator > std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::equal_range (const key_type & __key) const [inline]
       Definition at line 641 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> _Base_iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::erase (_Base_const_iterator __it) [inline]
       Definition at line 683 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> size_type
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::erase (const key_type & __key) [inline]
       Definition at line 663 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::erase (const_iterator __first, const_iterator __last) [inline]
       Definition at line 697 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::erase (const_iterator __it) [inline]
       Definition at line 676 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::erase (iterator __it) [inline]
       Definition at line 690 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> node_type
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::extract (const key_type & __key) [inline]
       Definition at line 535 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> node_type
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::extract (const_iterator __position) [inline]
       Definition at line 528 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename _Kt
       , typename  = std::__has_is_transparent_t<_Hash, _Kt>, typename  = std::__has_is_transparent_t<_Pred, _Kt>> iterator std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::find (const
       _Kt & __k) [inline]
       Definition at line 599 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename _Kt
       , typename  = std::__has_is_transparent_t<_Hash, _Kt>, typename  = std::__has_is_transparent_t<_Pred, _Kt>> const_iterator std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::find
       (const _Kt & __k) const [inline]
       Definition at line 612 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::find (const key_type & __key) [inline]
       Definition at line 591 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> const_iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::find (const key_type & __key) const [inline]
       Definition at line 604 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename
       _InputIterator > void std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert (_InputIterator __first, _InputIterator __last) [inline]
       Definition at line 428 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename
       _Pair , typename  = typename std::enable_if<std::is_constructible<value_type,                                _Pair&&>::value>::type> std::pair< iterator, bool > std::__debug::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::insert (_Pair && __obj) [inline]
       Definition at line 375 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> std::pair< iterator,
       bool > std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert (const value_type & __obj) [inline]
       Definition at line 352 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename
       _Pair , typename  = typename std::enable_if<std::is_constructible<value_type,                                _Pair&&>::value>::type> iterator std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred,
       _Alloc >::insert (const_iterator __hint, _Pair && __obj) [inline]
       Definition at line 409 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert (const_iterator __hint, const value_type & __obj) [inline]
       Definition at line 384 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert (const_iterator __hint, node_type && __nh) [inline]
       Definition at line 552 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> iterator
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert (const_iterator __hint, value_type && __x) [inline]
       Definition at line 396 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> insert_return_type
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert (node_type && __nh) [inline]
       Definition at line 544 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> void
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert (std::initializer_list< value_type > __l) [inline]
       Definition at line 419 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> std::pair< iterator,
       bool > std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert (value_type && __x) [inline]
       Definition at line 363 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename
       _Obj > pair< iterator, bool > std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert_or_assign (const key_type & __k, _Obj && __obj) [inline]
       Definition at line 485 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename
       _Obj > iterator std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert_or_assign (const_iterator __hint, const key_type & __k, _Obj && __obj) [inline]
       Definition at line 503 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename
       _Obj > iterator std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert_or_assign (const_iterator __hint, key_type && __k, _Obj && __obj) [inline]
       Definition at line 514 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename
       _Obj > pair< iterator, bool > std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert_or_assign (key_type && __k, _Obj && __obj) [inline]
       Definition at line 494 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> float
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::max_load_factor () const [inline],  [noexcept]
       Definition at line 319 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> void
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::max_load_factor (float __f) [inline]
       Definition at line 323 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename _H2
       , typename _P2 > void std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::merge (unordered_map< _Key, _Tp, _H2, _P2, _Alloc > && __source) [inline]
       Definition at line 569 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename _H2
       , typename _P2 > void std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::merge (unordered_map< _Key, _Tp, _H2, _P2, _Alloc > & __source) [inline]
       Definition at line 560 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename _H2
       , typename _P2 > void std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::merge (unordered_multimap< _Key, _Tp, _H2, _P2, _Alloc > && __source) [inline]
       Definition at line 583 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename _H2
       , typename _P2 > void std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::merge (unordered_multimap< _Key, _Tp, _H2, _P2, _Alloc > & __source) [inline]
       Definition at line 574 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> unordered_map &
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::operator= (initializer_list< value_type > __l) [inline]
       Definition at line 211 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> void
       std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::swap (unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc > & __x) [inline],  [noexcept]
       Definition at line 224 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename...
       _Args> pair< iterator, bool > std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::try_emplace (const key_type & __k, _Args &&... __args) [inline]
       Definition at line 446 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename...
       _Args> iterator std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::try_emplace (const_iterator __hint, const key_type & __k, _Args &&... __args) [inline]
       Definition at line 464 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename...
       _Args> iterator std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::try_emplace (const_iterator __hint, key_type && __k, _Args &&... __args) [inline]
       Definition at line 475 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename...
       _Args> pair< iterator, bool > std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::try_emplace (key_type && __k, _Args &&... __args) [inline]
       Definition at line 455 of file debug/unordered_map.

Friends And Related Function Documentation
   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename
       _ItT , typename _SeqT , typename _CatT > friend class ::__gnu_debug::_Safe_iterator [friend]
       Definition at line 80 of file debug/unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = std::hash<_Key>, typename _Pred  = std::equal_to<_Key>, typename _Alloc  = std::allocator<std::pair<const _Key, _Tp> >> template<typename
       _ItT , typename _SeqT > friend class ::__gnu_debug::_Safe_local_iterator [friend]
       Definition at line 82 of file debug/unordered_map.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                                                                                     Wed Feb 1 2023                             std::__debug::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >(3)
