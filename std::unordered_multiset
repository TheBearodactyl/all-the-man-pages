std::unordered_multistd::unordered_multiset<d_Value,c_Hash, _Pred, _Alloc >(3)

NAME
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc > - A standard
       container composed of equivalent keys (possibly containing multiple of
       each key value) in which the elements' keys are the elements
       themselves.

SYNOPSIS
       #include <unordered_set>

   Public Types
       using node_type = typename _Hashtable::node_type

           typedef _Hashtable::key_type key_type
               Public typedefs.
           typedef _Hashtable::value_type value_type
               Public typedefs.
           typedef _Hashtable::hasher hasher
               Public typedefs.
           typedef _Hashtable::key_equal key_equal
               Public typedefs.
           typedef _Hashtable::allocator_type allocator_type
               Public typedefs.

           typedef _Hashtable::pointer pointer
               Iterator-related typedefs.
           typedef _Hashtable::const_pointer const_pointer
               Iterator-related typedefs.
           typedef _Hashtable::reference reference
               Iterator-related typedefs.
           typedef _Hashtable::const_reference const_reference
               Iterator-related typedefs.
           typedef _Hashtable::iterator iterator
               Iterator-related typedefs.
           typedef _Hashtable::const_iterator const_iterator
               Iterator-related typedefs.
           typedef _Hashtable::local_iterator local_iterator
               Iterator-related typedefs.
           typedef _Hashtable::const_local_iterator const_local_iterator
               Iterator-related typedefs.
           typedef _Hashtable::size_type size_type
               Iterator-related typedefs.
           typedef _Hashtable::difference_type difference_type
               Iterator-related typedefs.

   Public Member Functions
       unordered_multiset ()=default
           Default constructor.
       template<typename _InputIterator > unordered_multiset (_InputIterator
           __first, _InputIterator __last, size_type __n, const allocator_type
           &__a)
       template<typename _InputIterator > unordered_multiset (_InputIterator
           __first, _InputIterator __last, size_type __n, const hasher &__hf,
           const allocator_type &__a)
       template<typename _InputIterator > unordered_multiset (_InputIterator
           __first, _InputIterator __last, size_type __n=0, const hasher
           &__hf=hasher(), const key_equal &__eql=key_equal(), const
           allocator_type &__a=allocator_type())
           Builds an unordered_multiset from a range.
       unordered_multiset (const allocator_type &__a)
           Creates an unordered_multiset with no elements.
       unordered_multiset (const unordered_multiset &)=default
           Copy constructor.
       unordered_multiset (const unordered_multiset &__umset, const
           allocator_type &__a)
       unordered_multiset (initializer_list< value_type > __l, size_type __n,
           const allocator_type &__a)
       unordered_multiset (initializer_list< value_type > __l, size_type __n,
           const hasher &__hf, const allocator_type &__a)
       unordered_multiset (initializer_list< value_type > __l, size_type
           __n=0, const hasher &__hf=hasher(), const key_equal
           &__eql=key_equal(), const allocator_type &__a=allocator_type())
           Builds an unordered_multiset from an initializer_list.
       unordered_multiset (size_type __n, const allocator_type &__a)
       unordered_multiset (size_type __n, const hasher &__hf, const
           allocator_type &__a)
       unordered_multiset (size_type __n, const hasher &__hf=hasher(), const
           key_equal &__eql=key_equal(), const allocator_type
           &__a=allocator_type())
           Default constructor creates no elements.
       unordered_multiset (unordered_multiset &&)=default
           Move constructor.
       unordered_multiset (unordered_multiset &&__umset, const allocator_type
           &__a) noexcept(noexcept(_Hashtable(std::move(__umset._M_h), __a)))
       size_type bucket (const key_type &__key) const
       size_type bucket_count () const noexcept
           Returns the number of buckets of the unordered_multiset.
       size_type bucket_size (size_type __n) const
       const_iterator cbegin () const noexcept
       const_iterator cend () const noexcept
       void clear () noexcept
       template<typename... _Args> iterator emplace (_Args &&... __args)
           Builds and insert an element into the unordered_multiset.
       template<typename... _Args> iterator emplace_hint (const_iterator
           __pos, _Args &&... __args)
           Inserts an element into the unordered_multiset.
       bool empty () const noexcept
           Returns true if the unordered_multiset is empty.
       size_type erase (const key_type &__x)
           Erases elements according to the provided key.
       iterator erase (const_iterator __first, const_iterator __last)
           Erases a [__first,__last) range of elements from an
           unordered_multiset.
       node_type extract (const key_type &__key)
           Extract a node.
       node_type extract (const_iterator __pos)
           Extract a node.
       allocator_type get_allocator () const noexcept
           Returns the allocator object used by the unordered_multiset.
       hasher hash_function () const
           Returns the hash functor object with which the unordered_multiset
           was constructed.
       template<typename _InputIterator > void insert (_InputIterator __first,
           _InputIterator __last)
           A template function that inserts a range of elements.
       iterator insert (const_iterator __hint, node_type &&__nh)
           Re-insert an extracted node.
       void insert (initializer_list< value_type > __l)
           Inserts a list of elements into the unordered_multiset.
       iterator insert (node_type &&__nh)
           Re-insert an extracted node.
       key_equal key_eq () const
           Returns the key comparison object with which the unordered_multiset
           was constructed.
       float load_factor () const noexcept
           Returns the average number of elements per bucket.
       size_type max_bucket_count () const noexcept
           Returns the maximum number of buckets of the unordered_multiset.
       float max_load_factor () const noexcept
           Returns a positive number that the unordered_multiset tries to keep
           the load factor less than or equal to.
       void max_load_factor (float __z)
           Change the unordered_multiset maximum load factor.
       size_type max_size () const noexcept
           Returns the maximum size of the unordered_multiset.
       template<typename _H2 , typename _P2 > void merge (unordered_multiset<
           _Value, _H2, _P2, _Alloc > &&__source)
       template<typename _H2 , typename _P2 > void merge (unordered_multiset<
           _Value, _H2, _P2, _Alloc > &__source)
       template<typename _H2 , typename _P2 > void merge (unordered_set<
           _Value, _H2, _P2, _Alloc > &&__source)
       template<typename _H2 , typename _P2 > void merge (unordered_set<
           _Value, _H2, _P2, _Alloc > &__source)
       unordered_multiset & operator= (const unordered_multiset &)=default
           Copy assignment operator.
       unordered_multiset & operator= (initializer_list< value_type > __l)
           Unordered_multiset list assignment operator.
       unordered_multiset & operator= (unordered_multiset &&)=default
           Move assignment operator.
       void rehash (size_type __n)
           May rehash the unordered_multiset.
       void reserve (size_type __n)
           Prepare the unordered_multiset for a specified number of elements.
       size_type size () const noexcept
           Returns the size of the unordered_multiset.
       void swap (unordered_multiset &__x)
           noexcept(noexcept(_M_h.swap(__x._M_h)))
           Swaps data with another unordered_multiset.

           iterator begin () noexcept
           const_iterator begin () const noexcept

           iterator end () noexcept
           const_iterator end () const noexcept

           iterator insert (const value_type &__x)
               Inserts an element into the unordered_multiset.
           iterator insert (value_type &&__x)
               Inserts an element into the unordered_multiset.

           iterator insert (const_iterator __hint, const value_type &__x)
               Inserts an element into the unordered_multiset.
           iterator insert (const_iterator __hint, value_type &&__x)
               Inserts an element into the unordered_multiset.

           iterator erase (const_iterator __position)
               Erases an element from an unordered_multiset.
           iterator erase (iterator __position)
               Erases an element from an unordered_multiset.

           iterator find (const key_type &__x)
               Tries to locate an element in an unordered_multiset.
           template<typename _Kt > auto find (const _Kt &__x) ->
               decltype(_M_h._M_find_tr(__x))
               Tries to locate an element in an unordered_multiset.
           const_iterator find (const key_type &__x) const
               Tries to locate an element in an unordered_multiset.
           template<typename _Kt > auto find (const _Kt &__x) const ->
               decltype(_M_h._M_find_tr(__x))
               Tries to locate an element in an unordered_multiset.

           size_type count (const key_type &__x) const
               Finds the number of elements.
           template<typename _Kt > auto count (const _Kt &__x) const ->
               decltype(_M_h._M_count_tr(__x))
               Finds the number of elements.

           bool contains (const key_type &__x) const
               Finds whether an element with the given key exists.
           template<typename _Kt > auto contains (const _Kt &__x) const ->
               decltype(_M_h._M_find_tr(__x), void(), true)
               Finds whether an element with the given key exists.

           std::pair< iterator, iterator > equal_range (const key_type &__x)
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) ->
               decltype(_M_h._M_equal_range_tr(__x))
               Finds a subsequence matching given key.
           std::pair< const_iterator, const_iterator > equal_range (const
               key_type &__x) const
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) const ->
               decltype(_M_h._M_equal_range_tr(__x))
               Finds a subsequence matching given key.

           local_iterator begin (size_type __n)
               Returns a read-only (constant) iterator pointing to the first
               bucket element.
           const_local_iterator begin (size_type __n) const
               Returns a read-only (constant) iterator pointing to the first
               bucket element.
           const_local_iterator cbegin (size_type __n) const
               Returns a read-only (constant) iterator pointing to the first
               bucket element.

           local_iterator end (size_type __n)
               Returns a read-only (constant) iterator pointing to one past
               the last bucket elements.
           const_local_iterator end (size_type __n) const
               Returns a read-only (constant) iterator pointing to one past
               the last bucket elements.
           const_local_iterator cend (size_type __n) const
               Returns a read-only (constant) iterator pointing to one past
               the last bucket elements.

   Friends
       template<typename _Value1 , typename _Hash1 , typename _Pred1 ,
           typename _Alloc1 > bool operator== (const unordered_multiset<
           _Value1, _Hash1, _Pred1, _Alloc1 > &, const unordered_multiset<
           _Value1, _Hash1, _Pred1, _Alloc1 > &)
       template<typename , typename , typename > class std::_Hash_merge_helper

Detailed Description
   template<typename _Value, typename _Hash = hash<_Value>, typename _Pred =
       equal_to<_Value>, typename _Alloc = allocator<_Value>>
       class std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >"A
       standard container composed of equivalent keys (possibly containing
       multiple of each key value) in which the elements' keys are the
       elements themselves.

       Template Parameters
           _Value Type of key objects.
           _Hash Hashing function object type, defaults to hash<_Value>.
           _Pred Predicate function object type, defaults to equal_to<_Value>.
           _Alloc Allocator type, defaults to allocator<_Key>.

       Meets the requirements of a container, and unordered associative
       container

       Base is _Hashtable, dispatched at compile time via template alias
       __umset_hashtable.

       Definition at line 963 of file unordered_set.

Member Typedef Documentation
   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::allocator_type std::unordered_multiset< _Value, _Hash,
       _Pred, _Alloc >::allocator_type
       Public typedefs.

       Definition at line 976 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::const_iterator std::unordered_multiset< _Value, _Hash,
       _Pred, _Alloc >::const_iterator
       Iterator-related typedefs.

       Definition at line 986 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::const_local_iterator std::unordered_multiset< _Value,
       _Hash, _Pred, _Alloc >::const_local_iterator
       Iterator-related typedefs.

       Definition at line 988 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::const_pointer std::unordered_multiset< _Value, _Hash,
       _Pred, _Alloc >::const_pointer
       Iterator-related typedefs.

       Definition at line 982 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::const_reference std::unordered_multiset< _Value, _Hash,
       _Pred, _Alloc >::const_reference
       Iterator-related typedefs.

       Definition at line 984 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::difference_type std::unordered_multiset< _Value, _Hash,
       _Pred, _Alloc >::difference_type
       Iterator-related typedefs.

       Definition at line 990 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::hasher std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::hasher
       Public typedefs.

       Definition at line 974 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::iterator std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::iterator
       Iterator-related typedefs.

       Definition at line 985 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::key_equal std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::key_equal
       Public typedefs.

       Definition at line 975 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::key_type std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::key_type
       Public typedefs.

       Definition at line 972 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::local_iterator std::unordered_multiset< _Value, _Hash,
       _Pred, _Alloc >::local_iterator
       Iterator-related typedefs.

       Definition at line 987 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> using
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::node_type =
       typename _Hashtable::node_type
       Definition at line 994 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::pointer std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::pointer
       Iterator-related typedefs.

       Definition at line 981 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::reference std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::reference
       Iterator-related typedefs.

       Definition at line 983 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::size_type std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::size_type
       Iterator-related typedefs.

       Definition at line 989 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> typedef
       _Hashtable::value_type std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::value_type
       Public typedefs.

       Definition at line 973 of file unordered_set.

Constructor & Destructor Documentation
   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::unordered_multiset () [default]
       Default constructor.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::unordered_multiset (size_type __n, const hasher & __hf = hasher(),
       const key_equal & __eql = key_equal(), const allocator_type & __a =
       allocator_type()) [inline],  [explicit]
       Default constructor creates no elements.

       Parameters
           __n Minimal initial number of buckets.
           __hf A hash functor.
           __eql A key equality functor.
           __a An allocator object.

       Definition at line 1010 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _InputIterator > std::unordered_multiset< _Value,
       _Hash, _Pred, _Alloc >::unordered_multiset (_InputIterator __first,
       _InputIterator __last, size_type __n = 0, const hasher & __hf =
       hasher(), const key_equal & __eql = key_equal(), const allocator_type &
       __a = allocator_type()) [inline]
       Builds an unordered_multiset from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.
           __n Minimal initial number of buckets.
           __hf A hash functor.
           __eql A key equality functor.
           __a An allocator object.

       Create an unordered_multiset consisting of copies of the elements from
       [__first,__last). This is linear in N (where N is
       distance(__first,__last)).

       Definition at line 1031 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::unordered_multiset (const unordered_multiset< _Value, _Hash, _Pred,
       _Alloc > &) [default]
       Copy constructor.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::unordered_multiset (unordered_multiset< _Value, _Hash, _Pred, _Alloc
       > &&) [default]
       Move constructor.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::unordered_multiset (initializer_list< value_type > __l, size_type
       __n = 0, const hasher & __hf = hasher(), const key_equal & __eql =
       key_equal(), const allocator_type & __a = allocator_type()) [inline]
       Builds an unordered_multiset from an initializer_list.

       Parameters
           __l An initializer_list.
           __n Minimal initial number of buckets.
           __hf A hash functor.
           __eql A key equality functor.
           __a An allocator object.

       Create an unordered_multiset consisting of copies of the elements in
       the list. This is linear in N (where N is __l.size()).

       Definition at line 1056 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::unordered_multiset (const allocator_type & __a) [inline],
       [explicit]
       Creates an unordered_multiset with no elements.

       Parameters
           __a An allocator object.

       Definition at line 1077 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::unordered_multiset (const unordered_multiset< _Value, _Hash, _Pred,
       _Alloc > & __umset, const allocator_type & __a) [inline]
       Definition at line 1086 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::unordered_multiset (unordered_multiset< _Value, _Hash, _Pred, _Alloc
       > && __umset, const allocator_type & __a) [inline],  [noexcept]
       Definition at line 1096 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::unordered_multiset (size_type __n, const allocator_type & __a)
       [inline]
       Definition at line 1102 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::unordered_multiset (size_type __n, const hasher & __hf, const
       allocator_type & __a) [inline]
       Definition at line 1106 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _InputIterator > std::unordered_multiset< _Value,
       _Hash, _Pred, _Alloc >::unordered_multiset (_InputIterator __first,
       _InputIterator __last, size_type __n, const allocator_type & __a)
       [inline]
       Definition at line 1112 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _InputIterator > std::unordered_multiset< _Value,
       _Hash, _Pred, _Alloc >::unordered_multiset (_InputIterator __first,
       _InputIterator __last, size_type __n, const hasher & __hf, const
       allocator_type & __a) [inline]
       Definition at line 1119 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::unordered_multiset (initializer_list< value_type > __l, size_type
       __n, const allocator_type & __a) [inline]
       Definition at line 1125 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::unordered_multiset (initializer_list< value_type > __l, size_type
       __n, const hasher & __hf, const allocator_type & __a) [inline]
       Definition at line 1131 of file unordered_set.

Member Function Documentation
   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       const_iterator std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::begin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the unordered_multiset.

       Definition at line 1189 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> iterator
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::begin ()
       [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the unordered_multiset.

       Definition at line 1185 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       local_iterator std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::begin (size_type __n) [inline]
       Returns a read-only (constant) iterator pointing to the first bucket
       element.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1631 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       const_local_iterator std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::begin (size_type __n) const [inline]
       Returns a read-only (constant) iterator pointing to the first bucket
       element.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1635 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> size_type
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::bucket (const
       key_type & __key) const [inline]
       Definition at line 1620 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> size_type
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::bucket_count
       () const [inline],  [noexcept]
       Returns the number of buckets of the unordered_multiset.

       Definition at line 1597 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> size_type
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::bucket_size
       (size_type __n) const [inline]
       Definition at line 1611 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       const_iterator std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::cbegin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the unordered_multiset.

       Definition at line 1212 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       const_local_iterator std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::cbegin (size_type __n) const [inline]
       Returns a read-only (constant) iterator pointing to the first bucket
       element.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1639 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       const_iterator std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::cend () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the unordered_multiset.

       Definition at line 1220 of file unordered_set.

       Referenced by std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::insert().

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       const_local_iterator std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::cend (size_type __n) const [inline]
       Returns a read-only (constant) iterator pointing to one past the last
       bucket elements.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1659 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> void
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::clear ()
       [inline],  [noexcept]
       Erases all elements in an unordered_multiset.

       Note that this function only erases the elements, and that if the
       elements themselves are pointers, the pointed-to memory is not touched
       in any way. Managing the pointer is the user's responsibility.

       Definition at line 1421 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _Kt > auto std::unordered_multiset< _Value, _Hash,
       _Pred, _Alloc >::contains (const _Kt & __x) const ->
       decltype(_M_h._M_find_tr(__x), void(), true)
             [inline]"

       Finds whether an element with the given key exists.

       Parameters
           __x Key of elements to be located.

       Returns
           True if there is any element with the specified key.

       Definition at line 1555 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> bool
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::contains
       (const key_type & __x) const [inline]
       Finds whether an element with the given key exists.

       Parameters
           __x Key of elements to be located.

       Returns
           True if there is any element with the specified key.

       Definition at line 1550 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _Kt > auto std::unordered_multiset< _Value, _Hash,
       _Pred, _Alloc >::count (const _Kt & __x) const ->
       decltype(_M_h._M_count_tr(__x))
             [inline]"

       Finds the number of elements.

       Parameters
           __x Element to located.

       Returns
           Number of elements with specified key.

       Definition at line 1537 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> size_type
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::count (const
       key_type & __x) const [inline]
       Finds the number of elements.

       Parameters
           __x Element to located.

       Returns
           Number of elements with specified key.

       Definition at line 1531 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename... _Args> iterator std::unordered_multiset< _Value,
       _Hash, _Pred, _Alloc >::emplace (_Args &&... __args) [inline]
       Builds and insert an element into the unordered_multiset.

       Parameters
           __args Arguments used to generate an element.

       Returns
           An iterator that points to the inserted element.

       Insertion requires amortized constant time.

       Definition at line 1234 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename... _Args> iterator std::unordered_multiset< _Value,
       _Hash, _Pred, _Alloc >::emplace_hint (const_iterator __pos, _Args &&...
       __args) [inline]
       Inserts an element into the unordered_multiset.

       Parameters
           __pos An iterator that serves as a hint as to where the element
           should be inserted.
           __args Arguments used to generate the element to be inserted.

       Returns
           An iterator that points to the inserted element.

       Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       For more on hinting, see:
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints

       Insertion requires amortized constant time.

       Definition at line 1256 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> bool
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::empty () const
       [inline],  [noexcept]
       Returns true if the unordered_multiset is empty.

       Definition at line 1164 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       const_iterator std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::end () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the unordered_multiset.

       Definition at line 1203 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> iterator
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::end ()
       [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the unordered_multiset.

       Definition at line 1199 of file unordered_set.

       Referenced by std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::extract().

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       local_iterator std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::end (size_type __n) [inline]
       Returns a read-only (constant) iterator pointing to one past the last
       bucket elements.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1651 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       const_local_iterator std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::end (size_type __n) const [inline]
       Returns a read-only (constant) iterator pointing to one past the last
       bucket elements.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1655 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _Kt > auto std::unordered_multiset< _Value, _Hash,
       _Pred, _Alloc >::equal_range (const _Kt & __x) ->
       decltype(_M_h._M_equal_range_tr(__x))
             [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       Definition at line 1575 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _Kt > auto std::unordered_multiset< _Value, _Hash,
       _Pred, _Alloc >::equal_range (const _Kt & __x) const ->
       decltype(_M_h._M_equal_range_tr(__x))
             [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       Definition at line 1587 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> std::pair<
       iterator, iterator > std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::equal_range (const key_type & __x) [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       Definition at line 1569 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> std::pair<
       const_iterator, const_iterator > std::unordered_multiset< _Value,
       _Hash, _Pred, _Alloc >::equal_range (const key_type & __x) const
       [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       Definition at line 1581 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> size_type
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::erase (const
       key_type & __x) [inline]
       Erases elements according to the provided key.

       Parameters
           __x Key of element to be erased.

       Returns
           The number of elements erased.

       This function erases all the elements located by the given key from an
       unordered_multiset.

       Note that this function only erases the element, and that if the
       element is itself a pointer, the pointed-to memory is not touched in
       any way. Managing the pointer is the user's responsibility.

       Definition at line 1390 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> iterator
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::erase
       (const_iterator __first, const_iterator __last) [inline]
       Erases a [__first,__last) range of elements from an unordered_multiset.

       Parameters
           __first Iterator pointing to the start of the range to be erased.
           __last Iterator pointing to the end of the range to be erased.

       Returns
           The iterator __last.

       This function erases a sequence of elements from an unordered_multiset.

       Note that this function only erases the element, and that if the
       element is itself a pointer, the pointed-to memory is not touched in
       any way. Managing the pointer is the user's responsibility.

       Definition at line 1410 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> iterator
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::erase
       (const_iterator __position) [inline]
       Erases an element from an unordered_multiset.

       Parameters
           __position An iterator pointing to the element to be erased.

       Returns
           An iterator pointing to the element immediately following
           __position prior to the element being erased. If no such element
           exists, end() is returned.

       This function erases an element, pointed to by the given iterator, from
       an unordered_multiset.

       Note that this function only erases the element, and that if the
       element is itself a pointer, the pointed-to memory is not touched in
       any way. Managing the pointer is the user's responsibility.

       Definition at line 1367 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> iterator
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::erase
       (iterator __position) [inline]
       Erases an element from an unordered_multiset.

       Parameters
           __position An iterator pointing to the element to be erased.

       Returns
           An iterator pointing to the element immediately following
           __position prior to the element being erased. If no such element
           exists, end() is returned.

       This function erases an element, pointed to by the given iterator, from
       an unordered_multiset.

       Note that this function only erases the element, and that if the
       element is itself a pointer, the pointed-to memory is not touched in
       any way. Managing the pointer is the user's responsibility.

       Definition at line 1372 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> node_type
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::extract (const
       key_type & __key) [inline]
       Extract a node.

       Definition at line 1337 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> node_type
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::extract
       (const_iterator __pos) [inline]
       Extract a node.

       Definition at line 1329 of file unordered_set.

       References std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::end().

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _Kt > auto std::unordered_multiset< _Value, _Hash,
       _Pred, _Alloc >::find (const _Kt & __x) ->
       decltype(_M_h._M_find_tr(__x))
             [inline]"

       Tries to locate an element in an unordered_multiset.

       Parameters
           __x Element to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 1506 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _Kt > auto std::unordered_multiset< _Value, _Hash,
       _Pred, _Alloc >::find (const _Kt & __x) const ->
       decltype(_M_h._M_find_tr(__x))
             [inline]"

       Tries to locate an element in an unordered_multiset.

       Parameters
           __x Element to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 1518 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> iterator
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::find (const
       key_type & __x) [inline]
       Tries to locate an element in an unordered_multiset.

       Parameters
           __x Element to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 1500 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       const_iterator std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::find (const key_type & __x) const [inline]
       Tries to locate an element in an unordered_multiset.

       Parameters
           __x Element to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 1512 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       allocator_type std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::get_allocator () const [inline],  [noexcept]
       Returns the allocator object used by the unordered_multiset.

       Definition at line 1157 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> hasher
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::hash_function
       () const [inline]
       Returns the hash functor object with which the unordered_multiset was
       constructed.

       Definition at line 1476 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _InputIterator > void std::unordered_multiset<
       _Value, _Hash, _Pred, _Alloc >::insert (_InputIterator __first,
       _InputIterator __last) [inline]
       A template function that inserts a range of elements.

       Parameters
           __first Iterator pointing to the start of the range to be inserted.
           __last Iterator pointing to the end of the range.

       Complexity similar to that of the range constructor.

       Definition at line 1312 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> iterator
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::insert (const
       value_type & __x) [inline]
       Inserts an element into the unordered_multiset.

       Parameters
           __x Element to be inserted.

       Returns
           An iterator that points to the inserted element.

       Insertion requires amortized constant time.

       Definition at line 1268 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> iterator
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::insert
       (const_iterator __hint, const value_type & __x) [inline]
       Inserts an element into the unordered_multiset.

       Parameters
           __hint An iterator that serves as a hint as to where the element
           should be inserted.
           __x Element to be inserted.

       Returns
           An iterator that points to the inserted element.

       Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       For more on hinting, see:
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints

       Insertion requires amortized constant.

       Definition at line 1294 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> iterator
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::insert
       (const_iterator __hint, node_type && __nh) [inline]
       Re-insert an extracted node.

       Definition at line 1347 of file unordered_set.

       References std::move().

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> iterator
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::insert
       (const_iterator __hint, value_type && __x) [inline]
       Inserts an element into the unordered_multiset.

       Parameters
           __hint An iterator that serves as a hint as to where the element
           should be inserted.
           __x Element to be inserted.

       Returns
           An iterator that points to the inserted element.

       Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       For more on hinting, see:
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints

       Insertion requires amortized constant.

       Definition at line 1298 of file unordered_set.

       References std::move().

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> void
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::insert
       (initializer_list< value_type > __l) [inline]
       Inserts a list of elements into the unordered_multiset.

       Parameters
           __l A std::initializer_list<value_type> of elements to be inserted.

       Complexity similar to that of the range constructor.

       Definition at line 1323 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> iterator
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::insert
       (node_type && __nh) [inline]
       Re-insert an extracted node.

       Definition at line 1342 of file unordered_set.

       References std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::cend(), and std::move().

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> iterator
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::insert
       (value_type && __x) [inline]
       Inserts an element into the unordered_multiset.

       Parameters
           __x Element to be inserted.

       Returns
           An iterator that points to the inserted element.

       Insertion requires amortized constant time.

       Definition at line 1272 of file unordered_set.

       References std::move().

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> key_equal
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::key_eq ()
       const [inline]
       Returns the key comparison object with which the unordered_multiset was
       constructed.

       Definition at line 1482 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> float
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::load_factor ()
       const [inline],  [noexcept]
       Returns the average number of elements per bucket.

       Definition at line 1667 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> size_type
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::max_bucket_count () const [inline],  [noexcept]
       Returns the maximum number of buckets of the unordered_multiset.

       Definition at line 1602 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> float
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::max_load_factor () const [inline],  [noexcept]
       Returns a positive number that the unordered_multiset tries to keep the
       load factor less than or equal to.

       Definition at line 1673 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> void
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc
       >::max_load_factor (float __z) [inline]
       Change the unordered_multiset maximum load factor.

       Parameters
           __z The new maximum load factor.

       Definition at line 1681 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> size_type
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::max_size ()
       const [inline],  [noexcept]
       Returns the maximum size of the unordered_multiset.

       Definition at line 1174 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _H2 , typename _P2 > void std::unordered_multiset<
       _Value, _Hash, _Pred, _Alloc >::merge (unordered_multiset< _Value, _H2,
       _P2, _Alloc > && __source) [inline]
       Definition at line 1453 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _H2 , typename _P2 > void std::unordered_multiset<
       _Value, _Hash, _Pred, _Alloc >::merge (unordered_multiset< _Value, _H2,
       _P2, _Alloc > & __source) [inline]
       Definition at line 1444 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _H2 , typename _P2 > void std::unordered_multiset<
       _Value, _Hash, _Pred, _Alloc >::merge (unordered_set< _Value, _H2, _P2,
       _Alloc > && __source) [inline]
       Definition at line 1467 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename _H2 , typename _P2 > void std::unordered_multiset<
       _Value, _Hash, _Pred, _Alloc >::merge (unordered_set< _Value, _H2, _P2,
       _Alloc > & __source) [inline]
       Definition at line 1458 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       unordered_multiset & std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::operator= (const unordered_multiset< _Value, _Hash, _Pred,
       _Alloc > &) [default]
       Copy assignment operator.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       unordered_multiset & std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::operator= (initializer_list< value_type > __l) [inline]
       Unordered_multiset list assignment operator.

       Parameters
           __l An initializer_list.

       This function fills an unordered_multiset with copies of the elements
       in the initializer list __l.

       Note that the assignment completely changes the unordered_multiset and
       that the resulting unordered_multiset's size is the same as the number
       of elements assigned.

       Definition at line 1149 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       unordered_multiset & std::unordered_multiset< _Value, _Hash, _Pred,
       _Alloc >::operator= (unordered_multiset< _Value, _Hash, _Pred, _Alloc >
       &&) [default]
       Move assignment operator.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> void
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::rehash
       (size_type __n) [inline]
       May rehash the unordered_multiset.

       Parameters
           __n The new number of buckets.

       Rehash will occur only if the new number of buckets respect the
       unordered_multiset maximum load factor.

       Definition at line 1692 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> void
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::reserve
       (size_type __n) [inline]
       Prepare the unordered_multiset for a specified number of elements.

       Parameters
           __n Number of elements required.

       Same as rehash(ceil(n / max_load_factor())).

       Definition at line 1703 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> size_type
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::size () const
       [inline],  [noexcept]
       Returns the size of the unordered_multiset.

       Definition at line 1169 of file unordered_set.

   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>> void
       std::unordered_multiset< _Value, _Hash, _Pred, _Alloc >::swap
       (unordered_multiset< _Value, _Hash, _Pred, _Alloc > & __x) [inline],
       [noexcept]
       Swaps data with another unordered_multiset.

       Parameters
           __x An unordered_multiset of the same element and allocator types.

       This exchanges the elements between two sets in constant time. Note
       that the global std::swap() function is specialized such that
       std::swap(s1,s2) will feed to this function.

       Definition at line 1434 of file unordered_set.

Friends And Related Function Documentation
   template<typename _Value , typename _Hash  = hash<_Value>, typename _Pred
       = equal_to<_Value>, typename _Alloc  = allocator<_Value>>
       template<typename , typename , typename > friend class
       std::_Hash_merge_helper [friend]
       Definition at line 1440 of file unordered_set.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++           std::unordered_multiset<2_Value, _Hash, _Pred, _Alloc >(3)
