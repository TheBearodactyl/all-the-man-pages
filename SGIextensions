SGIextensions(3)           Library Functions Manual           SGIextensions(3)

NAME
       SGIextensions - SGI

SYNOPSIS
   Classes
       class __gnu_cxx::binary_compose< _Operation1, _Operation2, _Operation3
           >
           An SGI extension .
       struct __gnu_cxx::constant_binary_fun< _Result, _Arg1, _Arg2 >
           An SGI extension .
       struct __gnu_cxx::constant_unary_fun< _Result, _Argument >
           An SGI extension .
       struct __gnu_cxx::constant_void_fun< _Result >
           An SGI extension .
       class __gnu_cxx::hash_map< _Key, _Tp, _HashFn, _EqualKey, _Alloc >
       class __gnu_cxx::hash_multimap< _Key, _Tp, _HashFn, _EqualKey, _Alloc >
       class __gnu_cxx::hash_multiset< _Value, _HashFcn, _EqualKey, _Alloc >
       class __gnu_cxx::hash_set< _Value, _HashFcn, _EqualKey, _Alloc >
       struct __gnu_cxx::project1st< _Arg1, _Arg2 >
           An SGI extension .
       struct __gnu_cxx::project2nd< _Arg1, _Arg2 >
           An SGI extension .
       struct __gnu_cxx::rb_tree< _Key, _Value, _KeyOfValue, _Compare, _Alloc
           >
       class __gnu_cxx::rope< _CharT, _Alloc >
       struct __gnu_cxx::select1st< _Pair >
           An SGI extension .
       struct __gnu_cxx::select2nd< _Pair >
           An SGI extension .
       class __gnu_cxx::slist< _Tp, _Alloc >
       class __gnu_cxx::subtractive_rng
       struct __gnu_cxx::temporary_buffer< _ForwardIterator, _Tp >
       class __gnu_cxx::unary_compose< _Operation1, _Operation2 >
           An SGI extension .

   Functions
       template<typename _Tp > const _Tp & __gnu_cxx::__median (const _Tp
           &__a, const _Tp &__b, const _Tp &__c)
           Find the median of three values.
       template<typename _Tp , typename _Compare > const _Tp &
           __gnu_cxx::__median (const _Tp &__a, const _Tp &__b, const _Tp
           &__c, _Compare __comp)
           Find the median of three values using a predicate for comparison.
       size_t std::bitset< _Nb >::_Find_first () const noexcept
           Finds the index of the first 'on' bit.
       size_t std::bitset< _Nb >::_Find_next (size_t __prev) const noexcept
           Finds the index of the next 'on' bit after prev.
       template<class _Operation1 , class _Operation2 > unary_compose<
           _Operation1, _Operation2 > __gnu_cxx::compose1 (const _Operation1
           &__fn1, const _Operation2 &__fn2)
           An SGI extension .
       template<class _Operation1 , class _Operation2 , class _Operation3 >
           binary_compose< _Operation1, _Operation2, _Operation3 >
           __gnu_cxx::compose2 (const _Operation1 &__fn1, const _Operation2
           &__fn2, const _Operation3 &__fn3)
           An SGI extension .
       template<class _Result > constant_void_fun< _Result >
           __gnu_cxx::constant0 (const _Result &__val)
           An SGI extension .
       template<class _Result > constant_unary_fun< _Result, _Result >
           __gnu_cxx::constant1 (const _Result &__val)
           An SGI extension .
       template<class _Result > constant_binary_fun< _Result, _Result, _Result
           > __gnu_cxx::constant2 (const _Result &__val)
           An SGI extension .
       template<typename _InputIterator , typename _Size , typename
           _OutputIterator > std::pair< _InputIterator, _OutputIterator >
           __gnu_cxx::copy_n (_InputIterator __first, _Size __count,
           _OutputIterator __result)
           Copies the range [first,first+count) into [result,result+count).
       template<typename _InputIterator , typename _Distance > void
           __gnu_cxx::distance (_InputIterator __first, _InputIterator __last,
           _Distance &__n)
       template<class _Tp > _Tp __gnu_cxx::identity_element (std::multiplies<
           _Tp >)
           An SGI extension .
       template<class _Tp > _Tp __gnu_cxx::identity_element (std::plus< _Tp >)
           An SGI extension .
       template<typename _InputIterator1 , typename _InputIterator2 > int
           __gnu_cxx::lexicographical_compare_3way (_InputIterator1 __first1,
           _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2
           __last2)
           memcmp on steroids.
       template<typename _Tp , typename _Integer > _Tp __gnu_cxx::power (_Tp
           __x, _Integer __n)
       template<typename _Tp , typename _Integer , typename _MonoidOperation >
           _Tp __gnu_cxx::power (_Tp __x, _Integer __n, _MonoidOperation
           __monoid_op)
       template<typename _InputIterator , typename _RandomAccessIterator >
           _RandomAccessIterator __gnu_cxx::random_sample (_InputIterator
           __first, _InputIterator __last, _RandomAccessIterator __out_first,
           _RandomAccessIterator __out_last)
       template<typename _InputIterator , typename _RandomAccessIterator ,
           typename _RandomNumberGenerator > _RandomAccessIterator
           __gnu_cxx::random_sample (_InputIterator __first, _InputIterator
           __last, _RandomAccessIterator __out_first, _RandomAccessIterator
           __out_last, _RandomNumberGenerator &__rand)
       template<typename _ForwardIterator , typename _OutputIterator ,
           typename _Distance > _OutputIterator __gnu_cxx::random_sample_n
           (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator
           __out, const _Distance __n)
       template<typename _ForwardIterator , typename _OutputIterator ,
           typename _Distance , typename _RandomNumberGenerator >
           _OutputIterator __gnu_cxx::random_sample_n (_ForwardIterator
           __first, _ForwardIterator __last, _OutputIterator __out, const
           _Distance __n, _RandomNumberGenerator &__rand)
       template<typename _InputIter , typename _Size , typename _ForwardIter >
           std::pair< _InputIter, _ForwardIter >
           __gnu_cxx::uninitialized_copy_n (_InputIter __first, _Size __count,
           _ForwardIter __result)
           Copies the range [first,last) into result.
       bitset< _Nb > & std::bitset< _Nb >::_Unchecked_set (size_t __pos)
           noexcept
       bitset< _Nb > & std::bitset< _Nb >::_Unchecked_set (size_t __pos, int
           __val) noexcept
       bitset< _Nb > & std::bitset< _Nb >::_Unchecked_reset (size_t __pos)
           noexcept
       bitset< _Nb > & std::bitset< _Nb >::_Unchecked_flip (size_t __pos)
           noexcept
       constexpr bool std::bitset< _Nb >::_Unchecked_test (size_t __pos) const
           noexcept

Detailed Description
       Because libstdc++ based its implementation of the STL subsections of
       the library on the SGI 3.3 implementation, we inherited their
       extensions as well.

       They are additionally documented in the online documentation, a copy of
       which is also shipped with the library source code (in
       .../docs/html/documentation.html). You can also read the documentation
       on SGI's site, which is still running even though the code is not
       maintained.

       NB that the following notes are pulled from various comments all over
       the place, so they may seem stilted.

       The identity_element functions are not part of the C++ standard; SGI
       provided them as an extension. Its argument is an operation, and its
       return value is the identity element for that operation. It is
       overloaded for addition and multiplication, and you can overload it for
       your own nefarious operations.

       As an extension to the binders, SGI provided composition functors and
       wrapper functions to aid in their creation. The unary_compose functor
       is constructed from two functions/functors, f and g. Calling operator()
       with a single argument x returns f(g(x)). The function compose1 takes
       the two functions and constructs a unary_compose variable for you.

       binary_compose is constructed from three functors, f, g1, and g2. Its
       operator() returns f(g1(x),g2(x)). The function compose2 takes f, g1,
       and g2, and constructs the binary_compose instance for you. For
       example, if f returns an int, then

       int answer = (compose2(f,g1,g2))(x);

        is equivalent to

       int temp1 = g1(x);
       int temp2 = g2(x);
       int answer = f(temp1,temp2);

        But the first form is more compact, and can be passed around as a
       functor to other algorithms.

       As an extension, SGI provided a functor called identity. When a functor
       is required but no operations are desired, this can be used as a pass-
       through. Its operator() returns its argument unchanged.

       select1st and select2nd are extensions provided by SGI. Their
       operator()s take a std::pair as an argument, and return either the
       first member or the second member, respectively. They can be used
       (especially with the composition functors) to strip data from a
       sequence before performing the remainder of an algorithm.

       The operator() of the project1st functor takes two arbitrary arguments
       and returns the first one, while project2nd returns the second one.
       They are extensions provided by SGI.

       These three functors are each constructed from a single arbitrary
       variable/value. Later, their operator()s completely ignore any
       arguments passed, and return the stored value.

       • constant_void_fun's operator() takes no arguments

       • constant_unary_fun's operator() takes one argument (ignored)

       • constant_binary_fun's operator() takes two arguments (ignored)

       The helper creator functions constant0, constant1, and constant2 each
       take a result argument and construct variables of the appropriate
       functor type.

Function Documentation
   template<typename _Tp > const _Tp & __gnu_cxx::__median (const _Tp & __a,
       const _Tp & __b, const _Tp & __c)
       Find the median of three values.

       Parameters
           __a A value.
           __b A value.
           __c A value.

       Returns
           One of a, b or c.

       If {l,m,n} is some convolution of {a,b,c} such that l<=m<=n then the
       value returned will be m. This is an SGI extension.

       Definition at line 539 of file ext/algorithm.

   template<typename _Tp , typename _Compare > const _Tp & __gnu_cxx::__median
       (const _Tp & __a, const _Tp & __b, const _Tp & __c, _Compare __comp)
       Find the median of three values using a predicate for comparison.

       Parameters
           __a A value.
           __b A value.
           __c A value.
           __comp A binary predicate.

       Returns
           One of a, b or c.

       If {l,m,n} is some convolution of {a,b,c} such that comp(l,m) and
       comp(m,n) are both true then the value returned will be m. This is an
       SGI extension.

       Definition at line 573 of file ext/algorithm.

   template<size_t _Nb> size_t std::bitset< _Nb >::_Find_first () const
       [inline],  [noexcept]
       Finds the index of the first 'on' bit.

       Returns
           The index of the first bit set, or size() if not found.

       See also
           _Find_next

       Definition at line 1373 of file bitset.

   template<size_t _Nb> size_t std::bitset< _Nb >::_Find_next (size_t __prev)
       const [inline],  [noexcept]
       Finds the index of the next 'on' bit after prev.

       Returns
           The index of the next bit set, or size() if not found.

       Parameters
           __prev Where to start searching.

       See also
           _Find_first

       Definition at line 1384 of file bitset.

   template<size_t _Nb> bitset< _Nb > & std::bitset< _Nb >::_Unchecked_flip
       (size_t __pos) [inline],  [noexcept]
       These versions of single-bit set, reset, flip, and test are extensions
       from the SGI version. They do no range checking.

       Definition at line 1058 of file bitset.

   template<size_t _Nb> bitset< _Nb > & std::bitset< _Nb >::_Unchecked_reset
       (size_t __pos) [inline],  [noexcept]
       These versions of single-bit set, reset, flip, and test are extensions
       from the SGI version. They do no range checking.

       Definition at line 1051 of file bitset.

   template<size_t _Nb> bitset< _Nb > & std::bitset< _Nb >::_Unchecked_set
       (size_t __pos) [inline],  [noexcept]
       These versions of single-bit set, reset, flip, and test are extensions
       from the SGI version. They do no range checking.

       Definition at line 1034 of file bitset.

   template<size_t _Nb> bitset< _Nb > & std::bitset< _Nb >::_Unchecked_set
       (size_t __pos, int __val) [inline],  [noexcept]
       These versions of single-bit set, reset, flip, and test are extensions
       from the SGI version. They do no range checking.

       Definition at line 1041 of file bitset.

   template<size_t _Nb> constexpr bool std::bitset< _Nb >::_Unchecked_test
       (size_t __pos) const [inline],  [constexpr],  [noexcept]
       These versions of single-bit set, reset, flip, and test are extensions
       from the SGI version. They do no range checking.

       Definition at line 1065 of file bitset.

   template<class _Operation1 , class _Operation2 > unary_compose<
       _Operation1, _Operation2 > __gnu_cxx::compose1 (const _Operation1 &
       __fn1, const _Operation2 & __fn2) [inline]
       An SGI extension .

       Definition at line 140 of file ext/functional.

   template<class _Operation1 , class _Operation2 , class _Operation3 >
       binary_compose< _Operation1, _Operation2, _Operation3 >
       __gnu_cxx::compose2 (const _Operation1 & __fn1, const _Operation2 &
       __fn2, const _Operation3 & __fn3) [inline]
       An SGI extension .

       Definition at line 167 of file ext/functional.

   template<class _Result > constant_void_fun< _Result > __gnu_cxx::constant0
       (const _Result & __val) [inline]
       An SGI extension .

       Definition at line 325 of file ext/functional.

   template<class _Result > constant_unary_fun< _Result, _Result >
       __gnu_cxx::constant1 (const _Result & __val) [inline]
       An SGI extension .

       Definition at line 331 of file ext/functional.

   template<class _Result > constant_binary_fun< _Result, _Result, _Result >
       __gnu_cxx::constant2 (const _Result & __val) [inline]
       An SGI extension .

       Definition at line 337 of file ext/functional.

   template<typename _InputIterator , typename _Size , typename
       _OutputIterator > std::pair< _InputIterator, _OutputIterator >
       __gnu_cxx::copy_n (_InputIterator __first, _Size __count,
       _OutputIterator __result) [inline]
       Copies the range [first,first+count) into [result,result+count).

       Parameters
           __first An input iterator.
           __count The number of elements to copy.
           __result An output iterator.

       Returns
           A std::pair composed of first+count and result+count.

       This is an SGI extension. This inline function will boil down to a call
       to memmove whenever possible. Failing that, if random access iterators
       are passed, then the loop count will be known (and therefore a
       candidate for compiler optimizations such as unrolling).

       Definition at line 113 of file ext/algorithm.

       References std::__iterator_category().

   template<typename _InputIterator , typename _Distance > void
       __gnu_cxx::distance (_InputIterator __first, _InputIterator __last,
       _Distance & __n) [inline]
       This is an SGI extension.

       Todo
           Needs documentation! See
           http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html

       Definition at line 105 of file ext/iterator.

       References std::__iterator_category().

   template<class _Tp > _Tp __gnu_cxx::identity_element (std::multiplies< _Tp
       >) [inline]
       An SGI extension .

       Definition at line 88 of file ext/functional.

   template<class _Tp > _Tp __gnu_cxx::identity_element (std::plus< _Tp >)
       [inline]
       An SGI extension .

       Definition at line 82 of file ext/functional.

   template<typename _InputIterator1 , typename _InputIterator2 > int
       __gnu_cxx::lexicographical_compare_3way (_InputIterator1 __first1,
       _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2
       __last2)
       memcmp on steroids.

       Parameters
           __first1 An input iterator.
           __last1 An input iterator.
           __first2 An input iterator.
           __last2 An input iterator.

       Returns
           An int, as with memcmp.

       The return value will be less than zero if the first range is
       lexigraphically less than the second, greater than zero if the second
       range is lexigraphically less than the first, and zero otherwise. This
       is an SGI extension.

       Definition at line 194 of file ext/algorithm.

   template<typename _Tp , typename _Integer > _Tp __gnu_cxx::power (_Tp __x,
       _Integer __n) [inline]
       This is an SGI extension.

       Todo
           Needs documentation! See
           http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html

       Definition at line 123 of file ext/numeric.

   template<typename _Tp , typename _Integer , typename _MonoidOperation > _Tp
       __gnu_cxx::power (_Tp __x, _Integer __n, _MonoidOperation __monoid_op)
       [inline]
       This is an SGI extension.

       Todo
           Needs documentation! See
           http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html

       Definition at line 113 of file ext/numeric.

   template<typename _InputIterator , typename _RandomAccessIterator >
       _RandomAccessIterator __gnu_cxx::random_sample (_InputIterator __first,
       _InputIterator __last, _RandomAccessIterator __out_first,
       _RandomAccessIterator __out_last) [inline]
       This is an SGI extension.

       Todo
           Needs documentation! See
           http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html

       Definition at line 381 of file ext/algorithm.

   template<typename _InputIterator , typename _RandomAccessIterator ,
       typename _RandomNumberGenerator > _RandomAccessIterator
       __gnu_cxx::random_sample (_InputIterator __first, _InputIterator
       __last, _RandomAccessIterator __out_first, _RandomAccessIterator
       __out_last, _RandomNumberGenerator & __rand) [inline]
       This is an SGI extension.

       Todo
           Needs documentation! See
           http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html

       Definition at line 404 of file ext/algorithm.

   template<typename _ForwardIterator , typename _OutputIterator , typename
       _Distance > _OutputIterator __gnu_cxx::random_sample_n
       (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator
       __out, const _Distance __n)
       This is an SGI extension.

       Todo
           Needs documentation! See
           http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html

       Definition at line 260 of file ext/algorithm.

       References std::distance(), and std::min().

   template<typename _ForwardIterator , typename _OutputIterator , typename
       _Distance , typename _RandomNumberGenerator > _OutputIterator
       __gnu_cxx::random_sample_n (_ForwardIterator __first, _ForwardIterator
       __last, _OutputIterator __out, const _Distance __n,
       _RandomNumberGenerator & __rand)
       This is an SGI extension.

       Todo
           Needs documentation! See
           http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html

       Definition at line 294 of file ext/algorithm.

       References std::distance(), and std::min().

   template<typename _InputIter , typename _Size , typename _ForwardIter >
       std::pair< _InputIter, _ForwardIter > __gnu_cxx::uninitialized_copy_n
       (_InputIter __first, _Size __count, _ForwardIter __result) [inline]
       Copies the range [first,last) into result.

       Parameters
           __first An input iterator.
           __count Length
           __result An output iterator.

       Returns
           __result + (__first + __count)

       Like copy(), but does not require an initialized output range.

       Definition at line 121 of file ext/memory.

       References std::__iterator_category().

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Feb 1 2023                SGIextensions(3)
