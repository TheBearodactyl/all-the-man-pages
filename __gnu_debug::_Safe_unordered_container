__gnu_debug::_Safe_unordered_container< _Container >(3)                                  Library Functions Manual                                  __gnu_debug::_Safe_unordered_container< _Container >(3)

NAME
       __gnu_debug::_Safe_unordered_container< _Container > - Base class for constructing a safe unordered container type that tracks iterators that reference it.

SYNOPSIS
       #include <safe_unordered_container.h>

       Inherits __gnu_debug::_Safe_unordered_container_base.

   Public Member Functions
       void _M_invalidate_all ()
       template<typename _Predicate > void _M_invalidate_if (_Predicate __pred)
       template<typename _Predicate > void _M_invalidate_local_if (_Predicate __pred)

   Public Attributes
       _Safe_iterator_base * _M_const_iterators
           The list of constant iterators that reference this container.
       _Safe_iterator_base * _M_const_local_iterators
           The list of constant local iterators that reference this container.
       _Safe_iterator_base * _M_iterators
           The list of mutable iterators that reference this container.
       _Safe_iterator_base * _M_local_iterators
           The list of mutable local iterators that reference this container.
       unsigned int _M_version
           The container version number. This number may never be 0.

   Protected Member Functions
       void _M_detach_all ()
       void _M_detach_singular ()
       __gnu_cxx::__mutex & _M_get_mutex ()  throw ()
       void _M_invalidate_all () const
       void _M_invalidate_locals ()
       void _M_revalidate_singular ()
       void _M_swap (_Safe_sequence_base &__x) noexcept
       void _M_swap (_Safe_unordered_container_base &__x) noexcept

   Static Protected Member Functions
       template<typename _ExtractKey , typename _Source > static _UContMergeGuard< _Source, _UContInvalidatePred< _ExtractKey, _Source > > _S_uc_guard (_ExtractKey, _Source &__src)
       template<typename _ExtractKey , typename _Source > static _UContMergeGuard< _Source, _UMContInvalidatePred< _ExtractKey, _Source > > _S_umc_guard (_ExtractKey, _Source &__src)

Detailed Description
   template<typename _Container>
       class __gnu_debug::_Safe_unordered_container< _Container >"Base class for constructing a safe unordered container type that tracks iterators that reference it.

       The class template _Safe_unordered_container simplifies the construction of safe unordered containers that track the iterators that reference the container, so that the iterators are notified of
       changes in the container that may affect their operation, e.g., if the container invalidates its iterators or is destructed. This class template may only be used by deriving from it and passing
       the name of the derived class as its template parameter via the curiously recurring template pattern. The derived class must have iterator and const_iterator types that are instantiations of
       class template _Safe_iterator for this container and local_iterator and const_local_iterator types that are instantiations of class template _Safe_local_iterator for this container. Iterators
       will then be tracked automatically.

       Definition at line 58 of file safe_unordered_container.h.

Member Function Documentation
   void __gnu_debug::_Safe_unordered_container_base::_M_detach_all () [protected],  [inherited]
       Detach all iterators, leaving them singular.

   void __gnu_debug::_Safe_sequence_base::_M_detach_singular () [protected],  [inherited]
       Detach all singular iterators.

       Postcondition
           for all iterators i attached to this sequence, i->_M_version == _M_version.

   __gnu_cxx::__mutex & __gnu_debug::_Safe_sequence_base::_M_get_mutex () [protected],  [inherited]
       For use in _Safe_sequence.

       Referenced by __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_from_if().

   template<typename _Container > void __gnu_debug::_Safe_unordered_container< _Container >::_M_invalidate_all () [inline]
       Definition at line 166 of file safe_unordered_container.h.

   void __gnu_debug::_Safe_sequence_base::_M_invalidate_all () const [inline],  [protected],  [inherited]
       Invalidates all iterators.

       Definition at line 256 of file safe_base.h.

       References __gnu_debug::_Safe_sequence_base::_M_version.

   template<typename _Container > template<typename _Predicate > void __gnu_debug::_Safe_unordered_container< _Container >::_M_invalidate_if (_Predicate __pred)
       Invalidates all iterators x that reference this container, are not singular, and for which __pred(x) returns true. __pred will be invoked with the normal iterators nested in the safe ones.

       Definition at line 37 of file safe_unordered_container.tcc.

   template<typename _Container > template<typename _Predicate > void __gnu_debug::_Safe_unordered_container< _Container >::_M_invalidate_local_if (_Predicate __pred)
       Invalidates all local iterators x that reference this container, are not singular, and for which __pred(x) returns true. __pred will be invoked with the normal local iterators nested in the safe
       ones.

       Definition at line 69 of file safe_unordered_container.tcc.

   template<typename _Container > void __gnu_debug::_Safe_unordered_container< _Container >::_M_invalidate_locals () [inline],  [protected]
       Definition at line 67 of file safe_unordered_container.h.

   void __gnu_debug::_Safe_sequence_base::_M_revalidate_singular () [protected],  [inherited]
       Revalidates all attached singular iterators. This method may be used to validate iterators that were invalidated before (but for some reason, such as an exception, need to become valid again).

   void __gnu_debug::_Safe_sequence_base::_M_swap (_Safe_sequence_base & __x) [protected],  [noexcept],  [inherited]
       Swap this sequence with the given sequence. This operation also swaps ownership of the iterators, so that when the operation is complete all iterators that originally referenced one container now
       reference the other container.

   void __gnu_debug::_Safe_unordered_container_base::_M_swap (_Safe_unordered_container_base & __x) [protected],  [noexcept],  [inherited]
       Swap this container with the given container. This operation also swaps ownership of the iterators, so that when the operation is complete all iterators that originally referenced one container
       now reference the other container.

   template<typename _Container > template<typename _ExtractKey , typename _Source > static _UContMergeGuard< _Source, _UContInvalidatePred< _ExtractKey, _Source > >
       __gnu_debug::_Safe_unordered_container< _Container >::_S_uc_guard (_ExtractKey, _Source & __src) [inline],  [static],  [protected]
       Definition at line 148 of file safe_unordered_container.h.

   template<typename _Container > template<typename _ExtractKey , typename _Source > static _UContMergeGuard< _Source, _UMContInvalidatePred< _ExtractKey, _Source > >
       __gnu_debug::_Safe_unordered_container< _Container >::_S_umc_guard (_ExtractKey, _Source & __src) [inline],  [static],  [protected]
       Definition at line 157 of file safe_unordered_container.h.

Member Data Documentation
   _Safe_iterator_base* __gnu_debug::_Safe_sequence_base::_M_const_iterators [inherited]
       The list of constant iterators that reference this container.

       Definition at line 197 of file safe_base.h.

       Referenced by __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_from_if().

   _Safe_iterator_base* __gnu_debug::_Safe_unordered_container_base::_M_const_local_iterators [inherited]
       The list of constant local iterators that reference this container.

       Definition at line 130 of file safe_unordered_base.h.

   _Safe_iterator_base* __gnu_debug::_Safe_sequence_base::_M_iterators [inherited]
       The list of mutable iterators that reference this container.

       Definition at line 194 of file safe_base.h.

       Referenced by __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_from_if().

   _Safe_iterator_base* __gnu_debug::_Safe_unordered_container_base::_M_local_iterators [inherited]
       The list of mutable local iterators that reference this container.

       Definition at line 127 of file safe_unordered_base.h.

   unsigned int __gnu_debug::_Safe_sequence_base::_M_version [mutable],  [inherited]
       The container version number. This number may never be 0.

       Definition at line 200 of file safe_base.h.

       Referenced by __gnu_debug::_Safe_sequence_base::_M_invalidate_all(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                                                                                     Wed Feb 1 2023                                       __gnu_debug::_Safe_unordered_container< _Container >(3)
