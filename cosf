cos(3)                                                                                   Library Functions Manual                                                                                   cos(3)

NAME
       cos, cosf, cosl - cosine function

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       double cos(double x);
       float cosf(float x);
       long double cosl(long double x);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       cosf(), cosl():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       These functions return the cosine of x, where x is given in radians.

RETURN VALUE
       On success, these functions return the cosine of x.

       If x is a NaN, a NaN is returned.

       If x is positive infinity or negative infinity, a domain error occurs, and a NaN is returned.

ERRORS
       See math_error(7) for information on how to determine whether an error has occurred when calling these functions.

       The following errors can occur:

       Domain error: x is an infinity
              errno is set to EDOM (but see BUGS).  An invalid floating-point exception (FE_INVALID) is raised.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │cos(), cosf(), cosl()                                                                                                                                                   │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       C89, POSIX.1-2001.

       The variant returning double also conforms to SVr4, 4.3BSD.

BUGS
       Before glibc 2.10, the glibc implementation did not set errno to EDOM when a domain error occurred.

SEE ALSO
       acos(3), asin(3), atan(3), atan2(3), ccos(3), sin(3), sincos(3), tan(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                          cos(3)
COS(3P)                                                                                  POSIX Programmer's Manual                                                                                 COS(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       cos, cosf, cosl — cosine function

SYNOPSIS
       #include <math.h>

       double cos(double x);
       float cosf(float x);
       long double cosl(long double x);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       These functions shall compute the cosine of their argument x, measured in radians.

       An  application  wishing  to check for error situations should set errno to zero and call feclearexcept(FE_ALL_EXCEPT) before calling these functions. On return, if errno is non-zero or fetestex‐
       cept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.

RETURN VALUE
       Upon successful completion, these functions shall return the cosine of x.

       If x is NaN, a NaN shall be returned.

       If x is ±0, the value 1.0 shall be returned.

       If x is ±Inf, a domain error shall occur, and a NaN shall be returned.

ERRORS
       These functions shall fail if:

       Domain Error
                   The x argument is ±Inf.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [EDOM].  If the integer expression (math_errhandling & MATH_ERREXCEPT)  is  non-zero,
                   then the invalid floating-point exception shall be raised.

       The following sections are informative.

EXAMPLES
   Taking the Cosine of a 45-Degree Angle
           #include <math.h>
           ...
           double radians = 45 * M_PI / 180;
           double result;
           ...
           result = cos(radians);

APPLICATION USAGE
       These functions may lose accuracy when their argument is near an odd multiple of π/2 or is far from 0.

       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling & MATH_ERREXCEPT) are independent of each other, but at least one of them must be non-zero.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       acos(), feclearexcept(), fetestexcept(), isnan(), sin(), tan()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                            COS(3P)
