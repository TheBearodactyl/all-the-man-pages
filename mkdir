MKDIR(1)                                                                                       User Commands                                                                                      MKDIR(1)

NAME
       mkdir - make directories

SYNOPSIS
       mkdir [OPTION]... DIRECTORY...

DESCRIPTION
       Create the DIRECTORY(ies), if they do not already exist.

       Mandatory arguments to long options are mandatory for short options too.

       -m, --mode=MODE
              set file mode (as in chmod), not a=rwx - umask

       -p, --parents
              no error if existing, make parent directories as needed, with their file modes unaffected by any -m option.

       -v, --verbose
              print a message for each created directory

       -Z     set SELinux security context of each created directory to the default type

       --context[=CTX]
              like -Z, or if CTX is specified then set the SELinux or SMACK security context to CTX

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2023 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       mkdir(2)

       Full documentation <https://www.gnu.org/software/coreutils/mkdir>
       or available locally via: info '(coreutils) mkdir invocation'

GNU coreutils 9.2                                                                               April 2023                                                                                        MKDIR(1)
MKDIR(1P)                                                                                POSIX Programmer's Manual                                                                               MKDIR(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       mkdir — make directories

SYNOPSIS
       mkdir [-p] [-m mode] dir...

DESCRIPTION
       The mkdir utility shall create the directories specified by the operands, in the order specified.

       For each dir operand, the mkdir utility shall perform actions equivalent to the mkdir() function defined in the System Interfaces volume of POSIX.1‐2017, called with the following arguments:

        1. The dir operand is used as the path argument.

        2. The value of the bitwise-inclusive OR of S_IRWXU, S_IRWXG, and S_IRWXO is used as the mode argument. (If the -m option is specified, the value of the mkdir() mode argument is unspecified, but
           the directory shall at no time have permissions less restrictive than the -m mode option-argument.)

OPTIONS
       The mkdir utility shall conform to the Base Definitions volume of POSIX.1‐2017, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported:

       -m mode   Set the file permission bits of the newly-created directory to the specified mode value. The mode option-argument shall be the same as the mode operand defined for the chmod utility. In
                 the symbolic_mode strings, the op characters '+' and '-' shall be interpreted relative to an assumed initial mode of a=rwx; '+' shall add permissions to  the  default  mode,  '-'  shall
                 delete permissions from the default mode.

       -p        Create any missing intermediate pathname components.

                 For  each  dir operand that does not name an existing directory, before performing the actions described in the DESCRIPTION above, the mkdir utility shall create any pathname components
                 of the path prefix of dir that do not name an existing directory by performing actions equivalent to first calling the mkdir() function with the following arguments:

                  1. A pathname naming the missing pathname component, ending with a trailing <slash> character, as the path argument

                  2. The value zero as the mode argument

                 and then calling the chmod() function with the following arguments:

                  1. The same path argument as in the mkdir() call

                  2. The value (S_IWUSR|S_IXUSR|~filemask)&0777 as the mode argument, where filemask is the file mode creation mask of the process (see the  System  Interfaces  volume  of  POSIX.1‐2017,
                     umask())

                 Each dir operand that names an existing directory shall be ignored without error.

OPERANDS
       The following operand shall be supported:

       dir       A pathname of a directory to be created.

STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of mkdir:

       LANG      Provide  a default value for the internationalization variables that are unset or null. (See the Base Definitions volume of POSIX.1‐2017, Section 8.2, Internationalization Variables for
                 the precedence of internationalization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

        0    All the specified directories were created successfully, or the -p option was specified and all the specified directories either already existed or were created successfully.

       >0    An error occurred.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       The default file mode for directories is a=rwx (777 on most systems) with selected permissions removed in accordance with the file mode creation mask. For intermediate pathname components created
       by  mkdir,  the  mode is the default modified by u+wx so that the subdirectories can always be created regardless of the file mode creation mask; if different ultimate permissions are desired for
       the intermediate directories, they can be changed afterwards with chmod.

       Note that some of the requested directories may have been created even if an error occurs.

EXAMPLES
       None.

RATIONALE
       The System V -m option was included to control the file mode.

       The System V -p option was included to create any needed intermediate directories and to complement the functionality provided by rmdir for removing directories in the path prefix as they  become
       empty.  Because no error is produced if any path component already exists, the -p option is also useful to ensure that a particular directory exists.

       The  functionality of mkdir is described substantially through a reference to the mkdir() function in the System Interfaces volume of POSIX.1‐2017. For example, by default, the mode of the direc‐
       tory is affected by the file mode creation mask in accordance with the specified behavior of the mkdir() function. In this way, there is less duplication of effort required for describing details
       of the directory creation.

FUTURE DIRECTIONS
       None.

SEE ALSO
       chmod, rm, rmdir, umask

       The Base Definitions volume of POSIX.1‐2017, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

       The System Interfaces volume of POSIX.1‐2017, mkdir(), umask()

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          MKDIR(1P)
MKDIR(3P)                                                                                POSIX Programmer's Manual                                                                               MKDIR(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       mkdir, mkdirat — make a directory

SYNOPSIS
       #include <sys/stat.h>

       int mkdir(const char *path, mode_t mode);

       #include <fcntl.h>

       int mkdirat(int fd, const char *path, mode_t mode);

DESCRIPTION
       The mkdir() function shall create a new directory with name path.  The file permission bits of the new directory shall be initialized from mode.  These file permission bits of the  mode  argument
       shall be modified by the process' file creation mask.

       When bits in mode other than the file permission bits are set, the meaning of these additional bits is implementation-defined.

       The directory's user ID shall be set to the process' effective user ID.  The directory's group ID shall be set to the group ID of the parent directory or to the effective group ID of the process.
       Implementations shall provide a way to initialize the directory's group ID to the group ID of the parent directory. Implementations may, but need not, provide  an  implementation-defined  way  to
       initialize the directory's group ID to the effective group ID of the calling process.

       The newly created directory shall be an empty directory.

       If path names a symbolic link, mkdir() shall fail and set errno to [EEXIST].

       Upon  successful  completion, mkdir() shall mark for update the last data access, last data modification, and last file status change timestamps of the directory. Also, the last data modification
       and last file status change timestamps of the directory that contains the new entry shall be marked for update.

       The mkdirat() function shall be equivalent to the mkdir() function except in the case where path specifies a relative path. In this case the newly created directory is created relative to the di‐
       rectory  associated  with the file descriptor fd instead of the current working directory. If the access mode of the open file description associated with the file descriptor is not O_SEARCH, the
       function shall check whether directory searches are permitted using the current permissions of the directory underlying the file descriptor. If the access mode is O_SEARCH, the function shall not
       perform the check.

       If mkdirat() is passed the special value AT_FDCWD in the fd parameter, the current working directory shall be used and the behavior shall be identical to a call to mkdir().

RETURN VALUE
       Upon successful completion, these functions shall return 0.  Otherwise, these functions shall return -1 and set errno to indicate the error. If -1 is returned, no directory shall be created.

ERRORS
       These functions shall fail if:

       EACCES Search permission is denied on a component of the path prefix, or write permission is denied on the parent directory of the directory to be created.

       EEXIST The named file exists.

       ELOOP  A loop exists in symbolic links encountered during resolution of the path argument.

       EMLINK The link count of the parent directory would exceed {LINK_MAX}.

       ENAMETOOLONG
              The length of a component of a pathname is longer than {NAME_MAX}.

       ENOENT A component of the path prefix specified by path does not name an existing directory or path is an empty string.

       ENOSPC The file system does not contain enough space to hold the contents of the new directory or to extend the parent directory of the new directory.

       ENOTDIR
              A component of the path prefix names an existing file that is neither a directory nor a symbolic link to a directory.

       EROFS  The parent directory resides on a read-only file system.

       In addition, the mkdirat() function shall fail if:

       EACCES The access mode of the open file description associated with fd is not O_SEARCH and the permissions of the directory underlying fd do not permit directory searches.

       EBADF  The path argument does not specify an absolute path and the fd argument is neither AT_FDCWD nor a valid file descriptor open for reading or searching.

       ENOTDIR
              The path argument is not an absolute path and fd is a file descriptor associated with a non-directory file.

       These functions may fail if:

       ELOOP  More than {SYMLOOP_MAX} symbolic links were encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of a pathname exceeds {PATH_MAX}, or pathname resolution of a symbolic link produced an intermediate result with a length that exceeds {PATH_MAX}.

       The following sections are informative.

EXAMPLES
   Creating a Directory
       The following example shows how to create a directory named /home/cnd/mod1, with read/write/search permissions for owner and group, and with read/search permissions for others.

           #include <sys/types.h>
           #include <sys/stat.h>

           int status;
           ...
           status = mkdir("/home/cnd/mod1", S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);

APPLICATION USAGE
       None.

RATIONALE
       The mkdir() function originated in 4.2 BSD and was added to System V in Release 3.0.

       4.3 BSD detects [ENAMETOOLONG].

       The  POSIX.1‐1990  standard required that the group ID of a newly created directory be set to the group ID of its parent directory or to the effective group ID of the creating process. FIPS 151‐2
       required that implementations provide a way to have the group ID be set to the group ID of the containing directory, but did not prohibit implementations also supporting a way to set the group ID
       to  the effective group ID of the creating process.  Conforming applications should not assume which group ID will be used. If it matters, an application can use chown() to set the group ID after
       the directory is created, or determine under what conditions the implementation will set the desired group ID.

       The purpose of the mkdirat() function is to create a directory in directories other than the current working directory without exposure to race conditions. Any part of the path of a file could be
       changed in parallel to the call to mkdir(), resulting in unspecified behavior. By opening a file descriptor for the target directory and using the mkdirat() function it can be guaranteed that the
       newly created directory is located relative to the desired directory.

FUTURE DIRECTIONS
       None.

SEE ALSO
       chmod(), mkdtemp(), mknod(), umask()

       The Base Definitions volume of POSIX.1‐2017, <fcntl.h>, <sys_stat.h>, <sys_types.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          MKDIR(3P)
mkdir(2)                                                                                    System Calls Manual                                                                                   mkdir(2)

NAME
       mkdir, mkdirat - create a directory

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <sys/stat.h>

       int mkdir(const char *pathname, mode_t mode);

       #include <fcntl.h>           /* Definition of AT_* constants */
       #include <sys/stat.h>

       int mkdirat(int dirfd, const char *pathname, mode_t mode);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       mkdirat():
           Since glibc 2.10:
               _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _ATFILE_SOURCE

DESCRIPTION
       mkdir() attempts to create a directory named pathname.

       The argument mode specifies the mode for the new directory (see inode(7)).  It is modified by the process's umask in the usual way: in the absence of a default ACL, the mode of the created direc‐
       tory is (mode & ~umask & 0777).  Whether other mode bits are honored for the created directory depends on the operating system.  For Linux, see NOTES below.

       The newly created directory will be owned by the effective user ID of the process.  If the directory containing the file has the set-group-ID bit set, or if the filesystem  is  mounted  with  BSD
       group  semantics  (mount -o bsdgroups or, synonymously mount -o grpid), the new directory will inherit the group ownership from its parent; otherwise it will be owned by the effective group ID of
       the process.

       If the parent directory has the set-group-ID bit set, then so will the newly created directory.

   mkdirat()
       The mkdirat() system call operates in exactly the same way as mkdir(), except for the differences described here.

       If the pathname given in pathname is relative, then it is interpreted relative to the directory referred to by the file descriptor dirfd (rather than relative to the current working directory  of
       the calling process, as is done by mkdir() for a relative pathname).

       If pathname is relative and dirfd is the special value AT_FDCWD, then pathname is interpreted relative to the current working directory of the calling process (like mkdir()).

       If pathname is absolute, then dirfd is ignored.

       See openat(2) for an explanation of the need for mkdirat().

RETURN VALUE
       mkdir() and mkdirat() return zero on success.  On error, -1 is returned and errno is set to indicate the error.

ERRORS
       EACCES The parent directory does not allow write permission to the process, or one of the directories in pathname did not allow search permission.  (See also path_resolution(7).)

       EBADF  (mkdirat()) pathname is relative but dirfd is neither AT_FDCWD nor a valid file descriptor.

       EDQUOT The user's quota of disk blocks or inodes on the filesystem has been exhausted.

       EEXIST pathname already exists (not necessarily as a directory).  This includes the case where pathname is a symbolic link, dangling or not.

       EFAULT pathname points outside your accessible address space.

       EINVAL The final component ("basename") of the new directory's pathname is invalid (e.g., it contains characters not permitted by the underlying filesystem).

       ELOOP  Too many symbolic links were encountered in resolving pathname.

       EMLINK The number of links to the parent directory would exceed LINK_MAX.

       ENAMETOOLONG
              pathname was too long.

       ENOENT A directory component in pathname does not exist or is a dangling symbolic link.

       ENOMEM Insufficient kernel memory was available.

       ENOSPC The device containing pathname has no room for the new directory.

       ENOSPC The new directory cannot be created because the user's disk quota is exhausted.

       ENOTDIR
              A component used as a directory in pathname is not, in fact, a directory.

       ENOTDIR
              (mkdirat()) pathname is relative and dirfd is a file descriptor referring to a file other than a directory.

       EPERM  The filesystem containing pathname does not support the creation of directories.

       EROFS  pathname refers to a file on a read-only filesystem.

VERSIONS
       Under Linux, apart from the permission bits, the S_ISVTX mode bit is also honored.

   glibc notes
       On  older kernels where mkdirat() is unavailable, the glibc wrapper function falls back to the use of mkdir().  When pathname is a relative pathname, glibc constructs a pathname based on the sym‐
       bolic link in /proc/self/fd that corresponds to the dirfd argument.

STANDARDS
       POSIX.1-2008.

HISTORY
       mkdir()
              SVr4, BSD, POSIX.1-2001.

       mkdirat()
              Linux 2.6.16, glibc 2.4.

NOTES
       There are many infelicities in the protocol underlying NFS.  Some of these affect mkdir().

SEE ALSO
       mkdir(1), chmod(2), chown(2), mknod(2), mount(2), rmdir(2), stat(2), umask(2), unlink(2), acl(5), path_resolution(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        mkdir(2)
