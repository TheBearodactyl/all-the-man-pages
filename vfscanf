scanf(3)                                                                                 Library Functions Manual                                                                                 scanf(3)

NAME
       scanf, fscanf, vscanf, vfscanf - input FILE format conversion

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdio.h>

       int scanf(const char *restrict format, ...);
       int fscanf(FILE *restrict stream,
                  const char *restrict format, ...);

       #include <stdarg.h>

       int vscanf(const char *restrict format, va_list ap);
       int vfscanf(FILE *restrict stream,
                  const char *restrict format, va_list ap);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       vscanf(), vfscanf():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L

DESCRIPTION
       The  scanf()  family of functions scans input like sscanf(3), but read from a FILE.  It is very difficult to use these functions correctly, and it is preferable to read entire lines with fgets(3)
       or getline(3) and parse them later with sscanf(3) or more specialized functions such as strtol(3).

       The scanf() function reads input from the standard input stream stdin and fscanf() reads input from the stream pointer stream.

       The vfscanf() function is analogous to vfprintf(3) and reads input from the stream pointer stream using a variable argument list of pointers (see stdarg(3).  The vscanf() function is analogous to
       vprintf(3) and reads from the standard input.

RETURN VALUE
       On success, these functions return the number of input items successfully matched and assigned; this can be fewer than provided for, or even zero, in the event of an early matching failure.

       The  value  EOF  is returned if the end of input is reached before either the first successful conversion or a matching failure occurs.  EOF is also returned if a read error occurs, in which case
       the error indicator for the stream (see ferror(3)) is set, and errno is set to indicate the error.

ERRORS
       EAGAIN The file descriptor underlying stream is marked nonblocking, and the read operation would block.

       EBADF  The file descriptor underlying stream is invalid, or not open for reading.

       EILSEQ Input byte sequence does not form a valid character.

       EINTR  The read operation was interrupted by a signal; see signal(7).

       EINVAL Not enough arguments; or format is NULL.

       ENOMEM Out of memory.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬────────────────┐
       │Interface                                                                                                                                                        │ Attribute     │ Value          │
       ├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼────────────────┤
       │scanf(), fscanf(), vscanf(), vfscanf()                                                                                                                           │ Thread safety │ MT-Safe locale │
       └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴────────────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       C99, POSIX.1-2001.

SEE ALSO
       fgets(3), getline(3), sscanf(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        scanf(3)
VFSCANF(3P)                                                                              POSIX Programmer's Manual                                                                             VFSCANF(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       vfscanf, vscanf, vsscanf — format input of a stdarg argument list

SYNOPSIS
       #include <stdarg.h>
       #include <stdio.h>

       int vfscanf(FILE *restrict stream, const char *restrict format,
           va_list arg);
       int vscanf(const char *restrict format, va_list arg);
       int vsscanf(const char *restrict s, const char *restrict format,
           va_list arg);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       The  vscanf(), vfscanf(), and vsscanf() functions shall be equivalent to the scanf(), fscanf(), and sscanf() functions, respectively, except that instead of being called with a variable number of
       arguments, they are called with an argument list as defined in the <stdarg.h> header. These functions shall not invoke the va_end macro. As these functions invoke the va_arg macro, the  value  of
       ap after the return is unspecified.

RETURN VALUE
       Refer to fscanf().

ERRORS
       Refer to fscanf().

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       Applications using these functions should call va_end(ap) afterwards to clean up.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.5, Standard I/O Streams, fscanf()

       The Base Definitions volume of POSIX.1‐2017, <stdarg.h>, <stdio.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                        VFSCANF(3P)
