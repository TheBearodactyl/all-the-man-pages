XRANDR(1)                                                                                 General Commands Manual                                                                                XRANDR(1)

NAME
       xrandr - primitive command line interface to RandR extension

SYNOPSIS
       xrandr   [--help]    [--display   display]   [-q]   [-v]   [--verbose]   [--dryrun]   [--screen   snum]   [--q1]  [--q12]  [--current]  [--noprimary]  [--panning  widthxheight[+x+y[/track_widthx‐
       track_height+track_x+track_y[/border_left/border_top/border_right/border_bottom]]]] [--scale x[xy]] [--scale-from wxh] [--transform a,b,c,d,e,f,g,h,i]  [--primary]  [--prop]  [--fb  widthxheight]
       [--fbmm  widthxheight] [--dpi dpi] [--dpi from-output] [--newmode name mode] [--rmmode name] [--addmode output name] [--delmode output name] [--output output] [--auto] [--mode mode] [--preferred]
       [--pos xxy] [--rate rate] [--reflect reflection] [--rotate orientation] [--left-of output] [--right-of output] [--above output] [--below output] [--same-as output] [--set property value]  [--off]
       [--crtc  crtc]  [--gamma red[:green:blue]] [--brightness brightness] [-o orientation] [-s size] [-r rate] [-x] [-y] [--listproviders] [--setprovideroutputsource provider source] [--setproviderof‐
       floadsink provider sink] [--listmonitors] [--listactivemonitors] [--setmonitor name geometry outputs] [--delmonitor name]

DESCRIPTION
       Xrandr is used to set the size, orientation and/or reflection of the outputs for a screen. It can also set the screen size.

       If invoked without any option, it will dump the state of the outputs, showing the existing modes for each of them, with a '+' after the preferred modes and a '*' after the current mode.

       There are a few global options. Other options modify the last output that is specified in earlier parameters in the command line. Multiple outputs may be modified at the same time by passing mul‐
       tiple --output options followed immediately by their corresponding modifying options.

       --help Print out a summary of the usage and exit.

       -v, --version
              Print out the RandR version reported by the X server and exit.

       --verbose
              Causes  xrandr  to be more verbose. When used with -q (or without other options), xrandr will display more information about the server state. Please note that the gamma and brightness in‐
              formation are only approximations of the complete color profile stored in the server. When used along with options that reconfigure the system, progress will be  reported  while  executing
              the configuration changes.

       -q, --query
              When this option is present, or when no configuration changes are requested, xrandr will display the current state of the system.

       --dryrun
              Performs all the actions specified except that no changes are made.

       --nograb
              Apply  the modifications without grabbing the screen. It avoids to block other applications during the update but it might also cause some applications that detect screen resize to receive
              old values.

       -d, --display name
              This option selects the X display to use. Note this refers to the X screen abstraction, not the monitor (or output).

       --screen snum
              This option selects which screen to manipulate. Note this refers to the X screen abstraction, not the monitor (or output).

       --q1   Forces the usage of the RandR version 1.1 protocol, even if a higher version is available.

       --q12  Forces the usage of the RandR version 1.2 protocol, even if the display does not report it as supported or a higher version is available.

RandR version 1.5 options
       Options for RandR 1.5 are used as a superset of the options for RandR 1.4.

       --listmonitors
              Report information about all defined monitors.

       --listactivemonitors
              Report information about currently active monitors.

       --setmonitor name geometry outputs
              Define a new monitor with the given geometry and associated to the given outputs.  The output list is either the keyword none or a comma-separated list of outputs.  The geometry is  either
              the  keyword  auto, in which case the monitor will automatically track the geometry of the associated outputs, or a manual specification in the form w/mmwxh/mmh+x+y where w, h, x, y are in
              pixels and mmw, mmh are the physical dimensions of the monitor.

       --delmonitor name
              Delete the given user-defined monitor.

RandR version 1.4 options
       Options for RandR 1.4 are used as a superset of the options for RandR 1.3.

       --listproviders
              Report information about the providers available.

       --setprovideroutputsource provider source
              Set source as the source of display output images for provider.  This is only possible if source and provider have the Source Output and Sink Output capabilities, respectively.  If  source
              is 0x0, then provider is disconnected from its current output source.

       --setprovideroffloadsink provider sink
              Set  provider  as  a  render offload device for sink.  This is only possible if provider and sink have the Source Offload and Sink Offload capabilities, respectively.  If sink is 0x0, then
              provider is disconnected from its current render offload sink.

RandR version 1.3 options
       Options for RandR 1.3 are used as a superset of the options for RandR 1.2.

       --current
              Return the current screen configuration, without polling for hardware changes.

       --noprimary
              Don't define a primary output.

       Per-output options

       --panning widthxheight[+x+y[/track_widthxtrack_height+track_x+track_y[/border_left/border_top/border_right/border_bottom]]]
              This option sets the panning parameters.  As soon as panning is enabled, the CRTC position can change with every pointer move.  The first four parameters specify the  total  panning  area,
              the  next  four the pointer tracking area (which defaults to the same area). The last four parameters specify the border and default to 0. A width or height set to zero disables panning on
              the according axis. You typically have to set the screen size with --fb simultaneously.

       --transform a,b,c,d,e,f,g,h,i
              Specifies a transformation matrix to apply on the output.  A bilinear filter is selected automatically unless the --filter parameter is also specified.  The mathematical  form  corresponds
              to:
                     a b c
                     d e f
                     g h i
              The  transformation  is  based on homogeneous coordinates. The matrix multiplied by the coordinate vector of a pixel of the output gives the transformed coordinate vector of a pixel in the
              graphic buffer.  More precisely, the vector (x y) of the output pixel is extended to 3 values (x y w), with 1 as the w coordinate and multiplied against the matrix. The final device  coor‐
              dinates  of  the  pixel  are then calculated with the so-called homogenic division by the transformed w coordinate.  In other words, the device coordinates (x' y') of the transformed pixel
              are:
                     x' = (ax + by + c) / w'   and
                     y' = (dx + ey + f) / w'   ,
                     with  w' = (gx + hy + i)  .
              Typically, a and e corresponds to the scaling on the X and Y axes, c and f corresponds to the translation on those axes, and g, h, and i are respectively 0, 0 and 1. The matrix can also be
              used to express more complex transformations such as keystone correction, or rotation.  For a rotation of an angle T, this formula can be used:
                     cos T  -sin T   0
                     sin T   cos T   0
                      0       0      1
              As a special argument, instead of passing a matrix, one can pass the string none, in which case the default values are used (a unit matrix without filter).

       --filter filtermode
              Chooses the scaling filter method to be applied when the screen is scaled or transformed.  Can be either 'bilinear' or 'nearest'.

       --scale x[xy]
              Changes  the dimensions of the output picture.  If the y value is omitted, the x value will be used for both dimensions.  Values larger than 1 lead to a compressed screen (screen dimension
              bigger than the dimension of the output mode), and values less than 1 lead to a zoom in on the output.  This option is actually a shortcut version of the --transform option.

       --scale-from wxh
              Specifies the size in pixels of the area of the framebuffer to be displayed on this output.  This option is actually a shortcut version of the --transform option.

       --primary
              Set the output as primary.  It will be sorted first in Xinerama and RANDR geometry requests.

RandR version 1.2 options
       These options are only available for X server supporting RandR version 1.2 or newer.

       --prop, --properties
              This option causes xrandr to display the contents of properties for each output. --verbose also enables --prop.

       --fb widthxheight
              Reconfigures the screen to the specified size. All configured monitors must fit within this size. When this option is not provided, xrandr computes the smallest screen size that will  hold
              the set of configured outputs; this option provides a way to override that behaviour.

       --fbmm widthxheight
              Sets the value reported as physical size of the X screen as a whole (union of all configured monitors). In configurations with multiple monitors with different DPIs, the value has no phys‐
              ical meaning, but it may be used by some legacy clients which do not support RandR version 1.2 to compute a reference font scaling. Normally, xrandr resets the reported physical size  val‐
              ues to keep the DPI constant.  This overrides that computation. Default DPI value is 96.

       --dpi dpi

       --dpi from-output
              This  also  sets  the value reported as physical size of the X screen as a whole (union of all configured monitors). In configurations with multiple monitors with different DPIs, the value
              has no physical meaning, but it may be used by some legacy clients which do not support RandR version 1.2 to compute a reference font scaling. This option uses  either  the  specified  DPI
              value,  or  the DPI of the given output, to compute an appropriate physical size using whatever pixel size will be set. Typical values are the default (96 DPI), the DPI of the only monitor
              in single-monitor configurations, or the DPI of the primary monitor in multi-monitor configurations.

       --newmode name mode
              New modelines can be added to the server and then associated with outputs.  This option does the former. The mode is specified using the ModeLine syntax for xorg.conf: clock  hdisp  hsync‐
              start  hsyncend htotal vdisp vsyncstart vsyncend vtotal flags. flags can be zero or more of +HSync, -HSync, +VSync, -VSync, Interlace, DoubleScan, CSync, +CSync, -CSync. Several tools per‐
              mit to compute the usual modeline from a height, width, and refresh rate, for instance you can use cvt.

       --rmmode name
              This removes a mode from the server if it is otherwise unused.

       --addmode output name
              Add a mode to the set of valid modes for an output.

       --delmode output name
              Remove a mode from the set of valid modes for an output.

       Per-output options

       --output output
              Selects an output to reconfigure. Use either the name of the output or the XID.

       --auto For connected but disabled outputs, this will enable them using their first preferred mode (or, something close to 96dpi if they have no preferred mode). For disconnected but enabled  out‐
              puts, this will disable them.

       --mode mode
              This selects a mode. Use either the name or the XID for mode

       --preferred
              This selects the same mode as --auto, but it doesn't automatically enable or disable the output.

       --pos xxy
              Position the output within the screen using pixel coordinates. In case reflection or rotation is applied, the translation is applied after the effects.

       --rate rate
              This marks a preference for refresh rates close to the specified value, when multiple modes have the same name, this will select the one with the nearest refresh rate.

       --reflect reflection
              Reflection can be one of 'normal' 'x', 'y' or 'xy'. This causes the output contents to be reflected across the specified axes.

       --rotate rotation
              Rotation can be one of 'normal', 'left', 'right' or 'inverted'. This causes the output contents to be rotated in the specified direction. 'right' specifies a clockwise rotation of the pic‐
              ture and 'left' specifies a counter-clockwise rotation.

       --left-of, --right-of, --above, --below, --same-as another-output
              Use one of these options to position the output relative to the position of another output. This allows convenient tiling of outputs within the screen.  The  position  is  always  computed
              relative to the new position of the other output, so it is not valid to say --output a --left-of b --output b --left-of a.

       --set property value
              Sets  an output property. Integer properties may be specified as a valid (see --prop) comma-separated list of decimal or hexadecimal (with a leading 0x) values.  Atom properties may be set
              to any of the valid atoms (see --prop).  String properties may be set to any value.

       --off  Disables the output.

       --crtc crtc
              Uses the specified crtc (either as an index in the list of CRTCs or XID).  In normal usage, this option is not required as xrandr tries to make sensible choices about  which  crtc  to  use
              with each output. When that fails for some reason, this option can override the normal selection.

       --gamma red[:green:blue]
              Set  the  specified  floating point values as gamma correction on the crtc currently attached to this output.  If green and blue are not specified, the red value will be used for all three
              components.  Note that you cannot get two different values for cloned outputs (i.e.: which share the same crtc) and that switching an output to another crtc doesn't change the  crtc  gamma
              corrections at all.

       --brightness brightness
              Multiply  the gamma values on the crtc currently attached to the output to specified floating value. Useful for overly bright or overly dim outputs.  However, this is a software only modi‐
              fication, if your hardware has support to actually change the brightness, you will probably prefer to use xbacklight.

RandR version 1.1 options
       These options are available for X servers supporting RandR version 1.1 or older. They are still valid for newer X servers, but they don't interact sensibly with version 1.2 options  on  the  same
       command line.

       -s, --size size-index or --size widthxheight
              This sets the screen size, either matching by size or using the index into the list of available sizes.

       -r, --rate, --refresh rate
              This sets the refresh rate closest to the specified value.

       -o, --orientation rotation
              This specifies the orientation of the screen, and can be one of normal, inverted, left or right.

       -x     Reflect across the X axis.

       -y     Reflect across the Y axis.

EXAMPLES
       Sets an output called LVDS to its preferred mode, and on its right put an output called VGA to preferred mode of a screen which has been physically rotated clockwise:
              xrandr --output LVDS --auto --rotate normal --pos 0x0 --output VGA --auto --rotate left --right-of LVDS

       Forces to use a 1024x768 mode on an output called VGA:
              xrandr --newmode "1024x768" 63.50  1024 1072 1176 1328  768 771 775 798 -hsync +vsync
              xrandr --addmode VGA 1024x768
              xrandr --output VGA --mode 1024x768

       Enables panning on a 1600x768 desktop while displaying 1024x768 mode on an output called VGA:
              xrandr --fb 1600x768 --output VGA --mode 1024x768 --panning 1600x0

       Have one small 1280x800 LVDS screen showing a small version of a huge 3200x2000 desktop, and have a big VGA screen display the surrounding of the mouse at normal size.
              xrandr --fb 3200x2000 --output LVDS --scale 2.5x2.5 --output VGA --pos 0x0 --panning 3200x2000+0+0/3200x2000+0+0/64/64/64/64

       Displays the VGA output in trapezoid shape so that it is keystone corrected when the projector is slightly above the screen:
              xrandr --fb 1024x768 --output VGA --transform 1.24,0.16,-124,0,1.24,0,0,0.000316,1

SEE ALSO
       Xrandr(3), cvt(1), xkeystone(1), xbacklight(1)

AUTHORS
       Keith Packard, Open Source Technology Center, Intel Corporation.  and Jim Gettys, Cambridge Research Laboratory, HP Labs, HP.

X Version 11                                                                                   xrandr 1.5.2                                                                                      XRANDR(1)
XRANDR(3)                                                                                Library Functions Manual                                                                                XRANDR(3)

NAME
        Xrandr - X Resize, Rotate and Reflection extension.

SYNTAX
       #include <X11/extensions/Xrandr.h>

       Bool XRRQueryExtension (Display *dpy,
            int *event_base_return, int *error_base_return);

       Status XRRQueryVersion (Display *dpy,
            int *major_version_return,
            int *minor_version_return);

       XRRScreenConfiguration *XRRGetScreenInfo (Display *dpy,
            Drawable draw);

       void XRRFreeScreenConfigInfo (
            XRRScreenConfiguration *config);

       Status XRRSetScreenConfig (Display *dpy,
            XRRScreenConfiguration *config,
            Drawable draw,
            int size_index,
            Rotation rotation,
            Time timestamp);

       Status XRRSetScreenConfigAndRate (Display *dpy,
                             XRRScreenConfiguration *config,
                             Drawable draw,
                             int size_index,
                             Rotation rotation,
                             short rate,
                             Time timestamp);

       Rotation XRRConfigRotations(
            XRRScreenConfiguration *config,
            Rotation *current_rotation);

       Time XRRConfigTimes (
            XRRScreenConfiguration *config,
            Time *config_timestamp);

       XRRScreenSize *XRRConfigSizes(
            XRRScreenConfiguration *config,
            int *nsizes);

       short *XRRConfigRates (
            XRRScreenConfiguration *config,
            int size_index,
            int *nrates);

       SizeID XRRConfigCurrentConfiguration (
            XRRScreenConfiguration *config,
            Rotation *rotation);

       short XRRConfigCurrentRate (
            XRRScreenConfiguration *config);

       int XRRRootToScreen(
            Display *dpy,
            Window root);

       void XRRSelectInput(Display *dpy, Window window, int mask);

       /∗
        * intended to take RRScreenChangeNotify,  or
        * ConfigureNotify (on the root window)
        * returns 1 if it is an event type it understands, 0 if not
        */
       int XRRUpdateConfiguration(XEvent *event);

       /∗
        * the following are always safe to call, even if RandR is
        * not implemented on a screen
        */
       Rotation XRRRotations(
            Display *dpy, int screen,
            Rotation *current_rotation);

       XRRScreenSize *XRRSizes(Display *dpy,
            int screen, int *nsizes);

       short *XRRRates (Display *dpy, int screen,
            int size_index, int *nrates);

       Time XRRTimes (Display *dpy, int screen, Time *config_timestamp);

ARGUMENTS
       display   Specifies the connection to the X server.

       screen    Specifies which screen.

       draw      Specifies the screen.

       rotation  Specifies the possible rotations or reflections of the screen.

       current_rotation
                 Specifies the current rotations and reflection of the screen.

       timestamp Specifies the server timestamp.

       config_timestamp
                 Specifies the timestamp when the screen was last (re)configured.

       config    Specifies the screen configuration being used.

       sizes     Specifies the array of supported sizes.

       rate      Specifies the refresh rate in Hz.

DATATYPES
       Rotations/Reflections

       Can be any of:
       #define RR_Rotate_0             1
       #define RR_Rotate_90            2
       #define RR_Rotate_180           4
       #define RR_Rotate_270           8

       /∗ new in 1.0 protocol, to allow reflection of screen */
       /∗ reflection is applied after rotation */

       #define RR_Reflect_X            16
       #define RR_Reflect_Y            32

       typedef struct {
           int   width, height;
           int   mwidth, mheight;
       } XRRScreenSize;

       typedef struct {
           int type;                 /∗ event base */
           unsigned long serial;     /∗ # of last request processed by server */
           Bool send_event;          /∗ true if this came from a SendEvent request */
           Display *display;         /∗ Display the event was read from */
           Window window;            /∗ window which selected for this event */
           Window root;              /∗ Root window for changed screen */
           Time timestamp;           /∗ when the screen change occurred */
           Time config_timestamp;    /∗ when the last configuration change */
           SizeID size_index;
           SubpixelOrder subpixel_order;
           Rotation rotation;
           int width;
           int height;
           int mwidth;
           int mheight;
       } XRRScreenChangeNotifyEvent;

       The XRRScreenSize structure contains a possible root size in pixels and in millimeters.

       A XRRScreenChangeNotifyEvent is sent to a client that has requested notification whenever the screen configuration is changed. A client can perform this request by calling XRRSelectInput, passing
       the display, the root window, and the RRScreenChangeNotifyMask mask.

       XRRScreenConfiguration is an opaque data type containing the configuration information for a screen.

       Timestamps

       Time stamps are included and must be used to ensure the client is playing with a full deck: the screen may change properties on the fly and this ensures its knowledge of the configuration  is  up
       to date.  This is to help issues when screens may become hot-pluggable in the future.

DESCRIPTION
       Xrandr  is a simple library designed to interface the X Resize and Rotate Extension.  This allows clients to change the size and rotation of the root window of a screen, along with the ability to
       reflect the screen about either axis (if supported by the implementation).  Rotation and reflection may be implemented by software and may result in slower performance if rotation and  reflection
       are implemented in this fashion (as are all implementations as of October 2002).

       The  Xrandr  library  does  some minimal caching to avoid roundtrips to provide clients frequently used information.  See "The X Resize and Rotate Extension" for a detailed description; also note
       that depth switching, as described in the document is not implemented, and may (or may not) ever be implemented, as display memory is growing rapidly, and toolkits are already beginning  to  sup‐
       port  migration, mitigating the need for depth switching.  If it is implemented in the future, we expect to do so via an upward compatible extension to the current library/protocol; functionality
       described here should continue to work.

       Rotation and reflection and how they interact can be confusing.  In Randr, the coordinate system is rotated in a counter-clockwise direction relative to the  normal  orientation.   Reflection  is
       along the window system coordinate system, not the physical screen X and Y axis, so that rotation and reflection do not interact.  The other way to consider reflection is to treat it as specified
       in the "normal" orientation, before rotation.

       The XRRScreenChangeNotify event is sent to clients that ask to be informed whenever the root window configuration changes.  Configuration changes may include resolution, physical  size,  subpixel
       order (see XRender(3)), and rotation.  Note that changes to any or all of these could occur due to external events (user control in the X server, a different monitor/flat panel display being hot-
       plugged) and is not only the result of a protocol/library request to the X server.

       Additionally, to eliminate a potential race condition, this event may be generated immediately upon selecting for notification if the screen has changed since the client of  Xrandr  connected  to
       the X server, to enable reliable screen resolution changing when a user may log in and change the configuration while one or many clients are starting up.

       Xlib notification

       Clients  must  call  back into Xlib using XRRUpdateConfiguration when screen configuration change notify events are generated (or root window configuration changes occur, to update Xlib's view of
       the resolution, size, rotation, reflection or subpixel order.  Generally, toolkits will perform this operation on behalf of applications; we did not want to change display structure  data  behind
       the back of toolkits, as in multithreaded clients, various race conditions might occur.  Toolkits should provide clients some mechanism for notification of screen change, of course.

FUNCTIONS
       There  are  two  classes of interfaces: those which can be safely called even if RandR is not implemented on a screen (to make common idioms not dependent on the server having support), and those
       which will return errors if the extension is not present.

       XRRRotations returns both the possible set of rotations/reflections supported (as a bitmask) as the value of the function, along with the current rotation/reflection of the screen.

       XRRSizes returns the size and a pointer to the current sizes supported by the specified screen.  The first size specified is the default size of the server. If RandR is not supported, it  returns
       0 for the number of sizes.

       XRRRates returns a pointer to the rates supported by the specified size.  If RandR is not supported, it returns 0 for the number of rates.

       XRRTimes  returns  the  time  last  reported by the server along with the timestamp the last configuration changed.  If the configuration has changed since the client last updated its view of the
       server time, requests to change the configuration will fail until the client has an up to date timestamp.

       XRRRootToScreen returns the screen number given a root window (for example, from an XRRScreenChangeNotifyEvent).

       The rest of the functions will fail if applied to screens not implementing the RandR extension.  XRRSetScreenConfig sets the screen size and rotation and reflection to the desired values  on  the
       screen  specified  by draw, or returns a BadValue error.  size_index specifies which size configuration is to be used, rotation specifies which rotation or reflection is to be used (or a BadValue
       error is returned).  The timestamp is used by the server to make sure the client has up to date configuration information. Status is returned to indicate success or failure; a client must refresh
       its configuration information if it fails and try the call again (by calling XRRGetScreenInfo).

       XRRSetScreenConfigAndRate is like XRRSetScreenConfig but also sets the refresh rate. If specified rate is not supported a BadValue error is returned.

       XRRConfigRotations, XRRConfigSizes, XRRConfigCurrentConfiguration, XRRConfigTimes, XRRConfigRates, and XRRConfigCurrentRate are used to get specific configuration information out of a screen con‐
       figuration.

       XRRGetScreenInfo returns a screen configuration for later use; the information is private to the library.  Call XRRFreeScreenConfigInfo to free this information when you are finished with it.  It
       forces a round trip to the server.

       Other  functions  include:  XRRQueryExtension which returns the event and error base codes, XRRQueryVersion , which returns the current version of the extension (this information is cached by the
       library).

RESTRICTIONS
       Xrandr will remain upward compatible after the current 1.0 release.

AUTHOR
       Jim Gettys, and Keith Packard, HP.

X Version 11                                                                                  libXrandr 1.5.3                                                                                    XRANDR(3)
