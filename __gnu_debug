__gnu_debug(3)                                                                           Library Functions Manual                                                                           __gnu_debug(3)

NAME
       __gnu_debug - GNU debug classes for public use.

SYNOPSIS
   Classes
       class _After_nth_from
       struct _BeforeBeginHelper
       class _Equal_to
       class _Not_equal_to
       class _Safe_container
           Safe class dealing with some allocator dependent operations.
       class _Safe_forward_list
           Special iterators swap and invalidation for forward_list because of the before_begin iterator.
       class _Safe_iterator
           Safe iterator wrapper.
       class _Safe_iterator_base
           Basic functionality for a safe iterator.
       class _Safe_local_iterator
           Safe iterator wrapper.
       class _Safe_local_iterator_base
           Basic functionality for a safe iterator.
       class _Safe_node_sequence
           Like _Safe_sequence but with a special _M_invalidate_all implementation not invalidating past-the-end iterators. Used by node based sequence.
       class _Safe_sequence
           Base class for constructing a safe sequence type that tracks iterators that reference it.
       class _Safe_sequence_base
           Base class that supports tracking of iterators that reference a sequence.
       class _Safe_unordered_container
           Base class for constructing a safe unordered container type that tracks iterators that reference it.
       class _Safe_unordered_container_base
           Base class that supports tracking of local iterators that reference an unordered container.
       class _Safe_vector
           Base class for Debug Mode vector.
       struct _Sequence_traits
       class basic_string
           Class std::basic_string with safety/checking/debug instrumentation.

   Typedefs
       typedef basic_string< char > string
       typedef basic_string< char16_t > u16string
           A string of char16_t.
       typedef basic_string< char32_t > u32string
           A string of char32_t.
       typedef basic_string< wchar_t > wstring

   Enumerations
       enum _Debug_msg_id { __msg_valid_range, __msg_insert_singular, __msg_insert_different, __msg_erase_bad, __msg_erase_different, __msg_subscript_oob, __msg_empty, __msg_unpartitioned,
           __msg_unpartitioned_pred, __msg_unsorted, __msg_unsorted_pred, __msg_not_heap, __msg_not_heap_pred, __msg_bad_bitset_write, __msg_bad_bitset_read, __msg_bad_bitset_flip, __msg_self_splice,
           __msg_splice_alloc, __msg_splice_bad, __msg_splice_other, __msg_splice_overlap, __msg_init_singular, __msg_init_copy_singular, __msg_init_const_singular, __msg_copy_singular, __msg_bad_deref,
           __msg_bad_inc, __msg_bad_dec, __msg_iter_subscript_oob, __msg_advance_oob, __msg_retreat_oob, __msg_iter_compare_bad, __msg_compare_different, __msg_iter_order_bad, __msg_order_different,
           __msg_distance_bad, __msg_distance_different, __msg_deref_istream, __msg_inc_istream, __msg_output_ostream, __msg_deref_istreambuf, __msg_inc_istreambuf, __msg_insert_after_end,
           __msg_erase_after_bad, __msg_valid_range2, __msg_local_iter_compare_bad, __msg_non_empty_range, __msg_self_move_assign, __msg_bucket_index_oob, __msg_valid_load_factor, __msg_equal_allocs,
           __msg_insert_range_from_self, __msg_irreflexive_ordering }
       enum _Distance_precision { __dp_none, __dp_equality, __dp_sign, __dp_sign_max_size, __dp_exact }

   Functions
       template<typename _Iterator > constexpr _Iterator __base (_Iterator __it)
       template<typename _Iterator , typename _Sequence > _Iterator __base (const _Safe_iterator< _Iterator, _Sequence, std::random_access_iterator_tag > &__it)
       template<typename _Iterator > constexpr auto __base (const std::move_iterator< _Iterator > &__it) -> decltype(std::make_move_iterator(__base(__it.base())))
       template<typename _Iterator , typename _Sequence > constexpr std::reverse_iterator< _Iterator > __base (const std::reverse_iterator< _Safe_iterator< _Iterator, _Sequence,
           std::random_access_iterator_tag > > &__it)
       template<typename _InputIterator , typename _Size > constexpr bool __can_advance (_InputIterator, _Size)
       template<typename _InputIterator , typename _Diff > constexpr bool __can_advance (_InputIterator, const std::pair< _Diff, _Distance_precision > &, int)
       template<typename _Iterator , typename _Sequence , typename _Category , typename _Size > bool __can_advance (const _Safe_iterator< _Iterator, _Sequence, _Category > &, _Size)
       template<typename _Iterator , typename _Sequence , typename _Category , typename _Diff > bool __can_advance (const _Safe_iterator< _Iterator, _Sequence, _Category > &, const std::pair< _Diff,
           _Distance_precision > &, int)
       template<typename _Iterator , typename _Size > constexpr bool __can_advance (const std::move_iterator< _Iterator > &__it, _Size __n)
       template<typename _Iterator , typename _Diff > constexpr bool __can_advance (const std::move_iterator< _Iterator > &__it, const std::pair< _Diff, _Distance_precision > &__dist, int __way)
       template<typename _Iterator , typename _Size > constexpr bool __can_advance (const std::reverse_iterator< _Iterator > &__it, _Size __n)
       template<typename _Iterator , typename _Diff > constexpr bool __can_advance (const std::reverse_iterator< _Iterator > &__it, const std::pair< _Diff, _Distance_precision > &__dist, int __way)
       template<typename _ForwardIterator , typename _Tp > constexpr bool __check_partitioned_lower (_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)
       template<typename _ForwardIterator , typename _Tp , typename _Pred > constexpr bool __check_partitioned_lower (_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value, _Pred __pred)
       template<typename _ForwardIterator , typename _Tp > constexpr bool __check_partitioned_upper (_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)
       template<typename _ForwardIterator , typename _Tp , typename _Pred > constexpr bool __check_partitioned_upper (_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value, _Pred __pred)
       template<typename _Iterator > constexpr bool __check_singular (_Iterator const &)
       template<typename _Tp > constexpr bool __check_singular (_Tp *const &__ptr)
       bool __check_singular_aux (const _Safe_iterator_base *__x)
       bool __check_singular_aux (const void *)
       template<typename _InputIterator > constexpr bool __check_sorted (const _InputIterator &__first, const _InputIterator &__last)
       template<typename _InputIterator , typename _Predicate > constexpr bool __check_sorted (const _InputIterator &__first, const _InputIterator &__last, _Predicate __pred)
       template<typename _ForwardIterator , typename _Predicate > constexpr bool __check_sorted_aux (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, std::forward_iterator_tag)
       template<typename _ForwardIterator > constexpr bool __check_sorted_aux (_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
       template<typename _InputIterator , typename _Predicate > constexpr bool __check_sorted_aux (const _InputIterator &, const _InputIterator &, _Predicate, std::input_iterator_tag)
       template<typename _InputIterator > constexpr bool __check_sorted_aux (const _InputIterator &, const _InputIterator &, std::input_iterator_tag)
       template<typename _InputIterator1 , typename _InputIterator2 > constexpr bool __check_sorted_set (const _InputIterator1 &__first, const _InputIterator1 &__last, const _InputIterator2 &)
       template<typename _InputIterator1 , typename _InputIterator2 , typename _Predicate > constexpr bool __check_sorted_set (const _InputIterator1 &__first, const _InputIterator1 &__last, const
           _InputIterator2 &, _Predicate __pred)
       template<typename _InputIterator , typename _Predicate > constexpr bool __check_sorted_set_aux (const _InputIterator &, const _InputIterator &, _Predicate, std::__false_type)
       template<typename _InputIterator > constexpr bool __check_sorted_set_aux (const _InputIterator &, const _InputIterator &, std::__false_type)
       template<typename _InputIterator , typename _Predicate > constexpr bool __check_sorted_set_aux (const _InputIterator &__first, const _InputIterator &__last, _Predicate __pred, std::__true_type)
       template<typename _InputIterator > constexpr bool __check_sorted_set_aux (const _InputIterator &__first, const _InputIterator &__last, std::__true_type)
       template<typename _CharT , typename _Integer > const _CharT * __check_string (const _CharT *__s, _Integer __n, const char *__file, unsigned int __line, const char *__function)
       template<typename _CharT > const _CharT * __check_string (const _CharT *__s, const char *__file, unsigned int __line, const char *__function)
       template<typename _InputIterator > _InputIterator __check_valid_range (const _InputIterator &__first, const _InputIterator &__last, const char *__file, unsigned int __line, const char
           *__function)
       template<typename _Iterator , typename _Sequence , typename _Category , typename _InputIterator > bool __foreign_iterator (const _Safe_iterator< _Iterator, _Sequence, _Category > &__it,
           _InputIterator __other, _InputIterator __other_end)
       template<typename _Iterator , typename _Sequence , typename _Category , typename _Integral > bool __foreign_iterator_aux (const _Safe_iterator< _Iterator, _Sequence, _Category > &, _Integral,
           _Integral, std::__true_type)
       template<typename _Iterator , typename _Sequence , typename _Category , typename _InputIterator > bool __foreign_iterator_aux (const _Safe_iterator< _Iterator, _Sequence, _Category > &__it,
           _InputIterator __other, _InputIterator __other_end, std::__false_type)
       template<typename _Iterator , typename _Sequence , typename _Category , typename _OtherIterator , typename _OtherSequence , typename _OtherCategory > bool __foreign_iterator_aux2 (const
           _Safe_iterator< _Iterator, _Sequence, _Category > &, const _Safe_iterator< _OtherIterator, _OtherSequence, _OtherCategory > &, const _Safe_iterator< _OtherIterator, _OtherSequence,
           _OtherCategory > &)
       template<typename _Iterator , typename _Sequence , typename _Category , typename _InputIterator > bool __foreign_iterator_aux2 (const _Safe_iterator< _Iterator, _Sequence, _Category > &__it,
           const _InputIterator &__other, const _InputIterator &__other_end)
       template<typename _Iterator , typename _Sequence , typename _Category , typename _OtherIterator > bool __foreign_iterator_aux2 (const _Safe_iterator< _Iterator, _Sequence, _Category > &__it,
           const _Safe_iterator< _OtherIterator, _Sequence, _Category > &__other, const _Safe_iterator< _OtherIterator, _Sequence, _Category > &)
       template<typename _Iterator , typename _Sequence , typename _Category , typename _InputIterator > bool __foreign_iterator_aux3 (const _Safe_iterator< _Iterator, _Sequence, _Category > &, const
           _InputIterator &, const _InputIterator &, std::__false_type)
       template<typename _Iterator , typename _Sequence , typename _Category , typename _InputIterator > bool __foreign_iterator_aux3 (const _Safe_iterator< _Iterator, _Sequence, _Category > &__it,
           const _InputIterator &__other, const _InputIterator &__other_end, std::__true_type)
       template<typename _Iterator , typename _Sequence , typename _Category > bool __foreign_iterator_aux4 (const _Safe_iterator< _Iterator, _Sequence, _Category > &,...)
       template<typename _Iterator , typename _Sequence , typename _Category > bool __foreign_iterator_aux4 (const _Safe_iterator< _Iterator, _Sequence, _Category > &__it, const typename
           _Sequence::value_type *__other)
       template<typename _Iterator > constexpr _Distance_traits< _Iterator >::__type __get_distance (_Iterator __lhs, _Iterator __rhs)
       template<typename _Iterator > constexpr _Distance_traits< _Iterator >::__type __get_distance (_Iterator __lhs, _Iterator __rhs, std::input_iterator_tag)
       template<typename _Iterator > constexpr _Distance_traits< _Iterator >::__type __get_distance (_Iterator __lhs, _Iterator __rhs, std::random_access_iterator_tag)
       template<typename _Iterator > constexpr _Distance_traits< _Iterator >::__type __get_distance (const std::move_iterator< _Iterator > &__first, const std::move_iterator< _Iterator > &__last)
       template<typename _Iterator > constexpr _Distance_traits< _Iterator >::__type __get_distance (const std::reverse_iterator< _Iterator > &__first, const std::reverse_iterator< _Iterator > &__last)
       template<typename _Iterator > constexpr bool __is_irreflexive (_Iterator __it)
       template<typename _Iterator , typename _Pred > constexpr bool __is_irreflexive_pred (_Iterator __it, _Pred __pred)
       template<typename _Iterator > _Iterator __unsafe (_Iterator __it)
       template<typename _Iterator , typename _Sequence > _Iterator __unsafe (const _Safe_iterator< _Iterator, _Sequence > &__it)
       template<typename _Iterator , typename _Sequence > _Iterator __unsafe (const _Safe_local_iterator< _Iterator, _Sequence > &__it)
       template<typename _Iterator > constexpr auto __unsafe (const std::move_iterator< _Iterator > &__it) -> decltype(std::make_move_iterator(__unsafe(__it.base())))
       template<typename _Iterator > constexpr auto __unsafe (const std::reverse_iterator< _Iterator > &__it) -> decltype(std::__make_reverse_iterator(__unsafe(__it.base())))
       template<typename _InputIterator > constexpr bool __valid_range (_InputIterator __first, _InputIterator __last)
       template<typename _InputIterator > constexpr bool __valid_range (_InputIterator __first, _InputIterator __last, typename _Distance_traits< _InputIterator >::__type &__dist)
       template<typename _Iterator , typename _Sequence , typename _Category > bool __valid_range (const _Safe_iterator< _Iterator, _Sequence, _Category > &, const _Safe_iterator< _Iterator, _Sequence,
           _Category > &)
       template<typename _Iterator , typename _Sequence , typename _Category > bool __valid_range (const _Safe_iterator< _Iterator, _Sequence, _Category > &, const _Safe_iterator< _Iterator, _Sequence,
           _Category > &, typename _Distance_traits< _Iterator >::__type &)
       template<typename _Iterator , typename _Sequence > bool __valid_range (const _Safe_local_iterator< _Iterator, _Sequence > &, const _Safe_local_iterator< _Iterator, _Sequence > &)
       template<typename _Iterator , typename _Sequence > bool __valid_range (const _Safe_local_iterator< _Iterator, _Sequence > &, const _Safe_local_iterator< _Iterator, _Sequence > &, typename
           _Distance_traits< _Iterator >::__type &)
       template<typename _Iterator > constexpr bool __valid_range (const std::move_iterator< _Iterator > &__first, const std::move_iterator< _Iterator > &__last, typename _Distance_traits< _Iterator
           >::__type &__dist)
       template<typename _Iterator > constexpr bool __valid_range (const std::reverse_iterator< _Iterator > &__first, const std::reverse_iterator< _Iterator > &__last, typename _Distance_traits<
           _Iterator >::__type &__dist)
       template<typename _InputIterator > constexpr bool __valid_range_aux (_InputIterator __first, _InputIterator __last, std::__false_type)
       template<typename _InputIterator > constexpr bool __valid_range_aux (_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
       template<typename _InputIterator > constexpr bool __valid_range_aux (_InputIterator __first, _InputIterator __last, std::random_access_iterator_tag)
       template<typename _InputIterator > constexpr bool __valid_range_aux (_InputIterator __first, _InputIterator __last, typename _Distance_traits< _InputIterator >::__type &__dist, std::__false_type)
       template<typename _Integral > constexpr bool __valid_range_aux (_Integral, _Integral, std::__true_type)
       template<typename _Integral > constexpr bool __valid_range_aux (_Integral, _Integral, typename _Distance_traits< _Integral >::__type &__dist, std::__true_type)
       template<typename _CharT , typename _Traits , typename _Allocator > std::basic_istream< _CharT, _Traits > & getline (std::basic_istream< _CharT, _Traits > &__is, basic_string< _CharT, _Traits,
           _Allocator > &__str)
       template<typename _CharT , typename _Traits , typename _Allocator > std::basic_istream< _CharT, _Traits > & getline (std::basic_istream< _CharT, _Traits > &__is, basic_string< _CharT, _Traits,
           _Allocator > &__str, _CharT __delim)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator!= (const _CharT *__lhs, const basic_string< _CharT, _Traits, _Allocator > &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator!= (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const _CharT *__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator!= (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const basic_string< _CharT, _Traits, _Allocator >
           &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > basic_string< _CharT, _Traits, _Allocator > operator+ (_CharT __lhs, const basic_string< _CharT, _Traits, _Allocator > &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > basic_string< _CharT, _Traits, _Allocator > operator+ (const _CharT *__lhs, const basic_string< _CharT, _Traits, _Allocator >
           &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > basic_string< _CharT, _Traits, _Allocator > operator+ (const basic_string< _CharT, _Traits, _Allocator > &__lhs, _CharT __rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > basic_string< _CharT, _Traits, _Allocator > operator+ (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const _CharT
           *__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > basic_string< _CharT, _Traits, _Allocator > operator+ (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const
           basic_string< _CharT, _Traits, _Allocator > &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator< (const _CharT *__lhs, const basic_string< _CharT, _Traits, _Allocator > &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator< (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const _CharT *__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator< (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const basic_string< _CharT, _Traits, _Allocator >
           &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > std::basic_ostream< _CharT, _Traits > & operator<< (std::basic_ostream< _CharT, _Traits > &__os, const basic_string< _CharT,
           _Traits, _Allocator > &__str)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator<= (const _CharT *__lhs, const basic_string< _CharT, _Traits, _Allocator > &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator<= (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const _CharT *__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator<= (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const basic_string< _CharT, _Traits, _Allocator >
           &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator== (const _CharT *__lhs, const basic_string< _CharT, _Traits, _Allocator > &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator== (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const _CharT *__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator== (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const basic_string< _CharT, _Traits, _Allocator >
           &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator> (const _CharT *__lhs, const basic_string< _CharT, _Traits, _Allocator > &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator> (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const _CharT *__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator> (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const basic_string< _CharT, _Traits, _Allocator >
           &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator>= (const _CharT *__lhs, const basic_string< _CharT, _Traits, _Allocator > &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator>= (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const _CharT *__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > bool operator>= (const basic_string< _CharT, _Traits, _Allocator > &__lhs, const basic_string< _CharT, _Traits, _Allocator >
           &__rhs)
       template<typename _CharT , typename _Traits , typename _Allocator > std::basic_istream< _CharT, _Traits > & operator>> (std::basic_istream< _CharT, _Traits > &__is, basic_string< _CharT, _Traits,
           _Allocator > &__str)
       template<typename _CharT , typename _Traits , typename _Allocator > void swap (basic_string< _CharT, _Traits, _Allocator > &__lhs, basic_string< _CharT, _Traits, _Allocator > &__rhs)

Detailed Description
       GNU debug classes for public use.

Typedef Documentation
   typedef basic_string<char> __gnu_debug::string
       Definition at line 1291 of file debug/string.

   typedef basic_string<char16_t> __gnu_debug::u16string
       A string of char16_t.

       Definition at line 1302 of file debug/string.

   typedef basic_string<char32_t> __gnu_debug::u32string
       A string of char32_t.

       Definition at line 1305 of file debug/string.

   typedef basic_string<wchar_t> __gnu_debug::wstring
       Definition at line 1293 of file debug/string.

Enumeration Type Documentation
   enum __gnu_debug::_Debug_msg_id
       Definition at line 89 of file formatter.h.

   enum __gnu_debug::_Distance_precision
       The precision to which we can calculate the distance between two iterators.

       Definition at line 52 of file helper_functions.h.

Function Documentation
   template<typename _Iterator > constexpr _Iterator __gnu_debug::__base (_Iterator __it) [inline],  [constexpr]
       Helper function to extract base iterator of random access safe iterator in order to reduce performance impact of debug mode. Limited to random access iterator because it is the only category for
       which it is possible to check for correct iterators order in the __valid_range function thanks to the < operator.

       Definition at line 306 of file helper_functions.h.

       Referenced by __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category >::_M_before_dereferenceable().

   template<typename _Iterator , typename _Sequence > _Iterator __gnu_debug::__base (const _Safe_iterator< _Iterator, _Sequence, std::random_access_iterator_tag > & __it)
       Definition at line 999 of file safe_iterator.h.

   template<typename _Iterator > constexpr auto __gnu_debug::__base (const std::move_iterator< _Iterator > & __it) -> decltype(std::make_move_iterator(__base(__it.base())))
            [inline],  [constexpr]"

       Definition at line 142 of file debug/stl_iterator.h.

   template<typename _Iterator , typename _Sequence > constexpr std::reverse_iterator< _Iterator > __gnu_debug::__base (const std::reverse_iterator< _Safe_iterator< _Iterator, _Sequence,
       std::random_access_iterator_tag > > & __it) [inline],  [constexpr]
       Definition at line 71 of file debug/stl_iterator.h.

   template<typename _InputIterator , typename _Size > constexpr bool __gnu_debug::__can_advance (_InputIterator, _Size) [inline],  [constexpr]
       Definition at line 276 of file helper_functions.h.

   template<typename _InputIterator , typename _Diff > constexpr bool __gnu_debug::__can_advance (_InputIterator, const std::pair< _Diff, _Distance_precision > &, int) [inline],  [constexpr]
       Definition at line 288 of file helper_functions.h.

   template<typename _Iterator , typename _Sequence , typename _Category , typename _Size > bool __gnu_debug::__can_advance (const _Safe_iterator< _Iterator, _Sequence, _Category > & __it, _Size __n)
       [inline]
       Definition at line 985 of file safe_iterator.h.

   template<typename _Iterator , typename _Sequence , typename _Category , typename _Diff > bool __gnu_debug::__can_advance (const _Safe_iterator< _Iterator, _Sequence, _Category > & __it, const
       std::pair< _Diff, _Distance_precision > & __dist, int __way) [inline]
       Definition at line 992 of file safe_iterator.h.

   template<typename _Iterator , typename _Size > constexpr bool __gnu_debug::__can_advance (const std::move_iterator< _Iterator > & __it, _Size __n) [inline],  [constexpr]
       Definition at line 121 of file debug/stl_iterator.h.

   template<typename _Iterator , typename _Diff > constexpr bool __gnu_debug::__can_advance (const std::move_iterator< _Iterator > & __it, const std::pair< _Diff, _Distance_precision > & __dist, int
       __way) [inline],  [constexpr]
       Definition at line 127 of file debug/stl_iterator.h.

   template<typename _Iterator , typename _Size > constexpr bool __gnu_debug::__can_advance (const std::reverse_iterator< _Iterator > & __it, _Size __n) [inline],  [constexpr]
       Definition at line 57 of file debug/stl_iterator.h.

   template<typename _Iterator , typename _Diff > constexpr bool __gnu_debug::__can_advance (const std::reverse_iterator< _Iterator > & __it, const std::pair< _Diff, _Distance_precision > & __dist, int
       __way) [inline],  [constexpr]
       Definition at line 63 of file debug/stl_iterator.h.

   template<typename _ForwardIterator , typename _Tp > constexpr bool __gnu_debug::__check_partitioned_lower (_ForwardIterator __first, _ForwardIterator __last, const _Tp & __value) [inline],
       [constexpr]
       Definition at line 351 of file functions.h.

   template<typename _ForwardIterator , typename _Tp , typename _Pred > constexpr bool __gnu_debug::__check_partitioned_lower (_ForwardIterator __first, _ForwardIterator __last, const _Tp & __value,
       _Pred __pred) [inline],  [constexpr]
       Definition at line 386 of file functions.h.

   template<typename _ForwardIterator , typename _Tp > constexpr bool __gnu_debug::__check_partitioned_upper (_ForwardIterator __first, _ForwardIterator __last, const _Tp & __value) [inline],
       [constexpr]
       Definition at line 368 of file functions.h.

   template<typename _ForwardIterator , typename _Tp , typename _Pred > constexpr bool __gnu_debug::__check_partitioned_upper (_ForwardIterator __first, _ForwardIterator __last, const _Tp & __value,
       _Pred __pred) [inline],  [constexpr]
       Definition at line 404 of file functions.h.

   template<typename _Iterator > constexpr bool __gnu_debug::__check_singular (_Iterator const & __x) [inline],  [constexpr]
       Definition at line 125 of file helper_functions.h.

   template<typename _Tp > constexpr bool __gnu_debug::__check_singular (_Tp *const & __ptr) [inline],  [constexpr]
       Non-NULL pointers are nonsingular.

       Definition at line 135 of file helper_functions.h.

   bool __gnu_debug::__check_singular_aux (const _Safe_iterator_base * __x) [inline]
       Iterators that derive from _Safe_iterator_base can be determined singular or non-singular.

       Definition at line 168 of file safe_base.h.

       References __gnu_debug::_Safe_iterator_base::_M_singular().

   bool __gnu_debug::__check_singular_aux (const void *) [inline]
       Definition at line 118 of file helper_functions.h.

   template<typename _InputIterator > constexpr bool __gnu_debug::__check_sorted (const _InputIterator & __first, const _InputIterator & __last) [inline],  [constexpr]
       Definition at line 261 of file functions.h.

   template<typename _InputIterator , typename _Predicate > constexpr bool __gnu_debug::__check_sorted (const _InputIterator & __first, const _InputIterator & __last, _Predicate __pred) [inline],
       [constexpr]
       Definition at line 270 of file functions.h.

   template<typename _ForwardIterator , typename _Predicate > constexpr bool __gnu_debug::__check_sorted_aux (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred,
       std::forward_iterator_tag) [inline],  [constexpr]
       Definition at line 243 of file functions.h.

   template<typename _ForwardIterator > constexpr bool __gnu_debug::__check_sorted_aux (_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) [inline],  [constexpr]
       Definition at line 215 of file functions.h.

   template<typename _InputIterator , typename _Predicate > constexpr bool __gnu_debug::__check_sorted_aux (const _InputIterator &, const _InputIterator &, _Predicate, std::input_iterator_tag) [inline],
       [constexpr]
       Definition at line 234 of file functions.h.

   template<typename _InputIterator > constexpr bool __gnu_debug::__check_sorted_aux (const _InputIterator &, const _InputIterator &, std::input_iterator_tag) [inline],  [constexpr]
       Definition at line 206 of file functions.h.

   template<typename _InputIterator1 , typename _InputIterator2 > constexpr bool __gnu_debug::__check_sorted_set (const _InputIterator1 & __first, const _InputIterator1 & __last, const _InputIterator2
       &) [inline],  [constexpr]
       Definition at line 313 of file functions.h.

   template<typename _InputIterator1 , typename _InputIterator2 , typename _Predicate > constexpr bool __gnu_debug::__check_sorted_set (const _InputIterator1 & __first, const _InputIterator1 & __last,
       const _InputIterator2 &, _Predicate __pred) [inline],  [constexpr]
       Definition at line 331 of file functions.h.

   template<typename _InputIterator , typename _Predicate > constexpr bool __gnu_debug::__check_sorted_set_aux (const _InputIterator &, const _InputIterator &, _Predicate, std::__false_type) [inline],
       [constexpr]
       Definition at line 304 of file functions.h.

   template<typename _InputIterator > constexpr bool __gnu_debug::__check_sorted_set_aux (const _InputIterator &, const _InputIterator &, std::__false_type) [inline],  [constexpr]
       Definition at line 288 of file functions.h.

   template<typename _InputIterator , typename _Predicate > constexpr bool __gnu_debug::__check_sorted_set_aux (const _InputIterator & __first, const _InputIterator & __last, _Predicate __pred,
       std::__true_type) [inline],  [constexpr]
       Definition at line 296 of file functions.h.

   template<typename _InputIterator > constexpr bool __gnu_debug::__check_sorted_set_aux (const _InputIterator & __first, const _InputIterator & __last, std::__true_type) [inline],  [constexpr]
       Definition at line 280 of file functions.h.

   template<typename _CharT , typename _Integer > const _CharT * __gnu_debug::__check_string (const _CharT * __s, _Integer __n, const char * __file, unsigned int __line, const char * __function)
       [inline]
       Checks that __s is non-NULL or __n == 0, and then returns __s.

       Definition at line 57 of file debug/string.

   template<typename _CharT > const _CharT * __gnu_debug::__check_string (const _CharT * __s, const char * __file, unsigned int __line, const char * __function) [inline]
       Checks that __s is non-NULL and then returns __s.

       Definition at line 73 of file debug/string.

   template<typename _InputIterator > _InputIterator __gnu_debug::__check_valid_range (const _InputIterator & __first, const _InputIterator & __last, const char * __file, unsigned int __line, const char
       * __function) [inline]
       Definition at line 57 of file functions.h.

   template<typename _Iterator , typename _Sequence , typename _Category , typename _InputIterator > bool __gnu_debug::__foreign_iterator (const _Safe_iterator< _Iterator, _Sequence, _Category > & __it,
       _InputIterator __other, _InputIterator __other_end) [inline]
       Definition at line 193 of file functions.h.

   template<typename _Iterator , typename _Sequence , typename _Category , typename _Integral > bool __gnu_debug::__foreign_iterator_aux (const _Safe_iterator< _Iterator, _Sequence, _Category > &,
       _Integral, _Integral, std::__true_type) [inline]
       Definition at line 171 of file functions.h.

   template<typename _Iterator , typename _Sequence , typename _Category , typename _InputIterator > bool __gnu_debug::__foreign_iterator_aux (const _Safe_iterator< _Iterator, _Sequence, _Category > &
       __it, _InputIterator __other, _InputIterator __other_end, std::__false_type) [inline]
       Definition at line 180 of file functions.h.

   template<typename _Iterator , typename _Sequence , typename _Category , typename _OtherIterator , typename _OtherSequence , typename _OtherCategory > bool __gnu_debug::__foreign_iterator_aux2 (const
       _Safe_iterator< _Iterator, _Sequence, _Category > &, const _Safe_iterator< _OtherIterator, _OtherSequence, _OtherCategory > &, const _Safe_iterator< _OtherIterator, _OtherSequence, _OtherCategory
       > &) [inline]
       Handle debug iterators from different types of container.

       Definition at line 138 of file functions.h.

   template<typename _Iterator , typename _Sequence , typename _Category , typename _InputIterator > bool __gnu_debug::__foreign_iterator_aux2 (const _Safe_iterator< _Iterator, _Sequence, _Category > &
       __it, const _InputIterator & __other, const _InputIterator & __other_end) [inline]
       Definition at line 150 of file functions.h.

   template<typename _Iterator , typename _Sequence , typename _Category , typename _OtherIterator > bool __gnu_debug::__foreign_iterator_aux2 (const _Safe_iterator< _Iterator, _Sequence, _Category > &
       __it, const _Safe_iterator< _OtherIterator, _Sequence, _Category > & __other, const _Safe_iterator< _OtherIterator, _Sequence, _Category > &) [inline]
       Handle debug iterators from the same type of container.

       Definition at line 127 of file functions.h.

   template<typename _Iterator , typename _Sequence , typename _Category , typename _InputIterator > bool __gnu_debug::__foreign_iterator_aux3 (const _Safe_iterator< _Iterator, _Sequence, _Category > &,
       const _InputIterator &, const _InputIterator &, std::__false_type) [inline]
       Definition at line 117 of file functions.h.

   template<typename _Iterator , typename _Sequence , typename _Category , typename _InputIterator > bool __gnu_debug::__foreign_iterator_aux3 (const _Safe_iterator< _Iterator, _Sequence, _Category > &
       __it, const _InputIterator & __other, const _InputIterator & __other_end, std::__true_type) [inline]
       Definition at line 101 of file functions.h.

   template<typename _Iterator , typename _Sequence , typename _Category > bool __gnu_debug::__foreign_iterator_aux4 (const _Safe_iterator< _Iterator, _Sequence, _Category > &,  ...) [inline]
       Definition at line 93 of file functions.h.

   template<typename _Iterator , typename _Sequence , typename _Category > bool __gnu_debug::__foreign_iterator_aux4 (const _Safe_iterator< _Iterator, _Sequence, _Category > & __it, const typename
       _Sequence::value_type * __other) [inline]
       Definition at line 71 of file functions.h.

   template<typename _Iterator > constexpr _Distance_traits< _Iterator >::__type __gnu_debug::__get_distance (_Iterator __lhs, _Iterator __rhs) [inline],  [constexpr]
       Definition at line 113 of file helper_functions.h.

   template<typename _Iterator > constexpr _Distance_traits< _Iterator >::__type __gnu_debug::__get_distance (_Iterator __lhs, _Iterator __rhs, std::input_iterator_tag) [inline],  [constexpr]
       Definition at line 101 of file helper_functions.h.

   template<typename _Iterator > constexpr _Distance_traits< _Iterator >::__type __gnu_debug::__get_distance (_Iterator __lhs, _Iterator __rhs, std::random_access_iterator_tag) [inline],  [constexpr]
       Determine the distance between two iterators with some known precision.

       Definition at line 94 of file helper_functions.h.

   template<typename _Iterator > constexpr _Distance_traits< _Iterator >::__type __gnu_debug::__get_distance (const std::move_iterator< _Iterator > & __first, const std::move_iterator< _Iterator > &
       __last) [inline],  [constexpr]
       Definition at line 114 of file debug/stl_iterator.h.

   template<typename _Iterator > constexpr _Distance_traits< _Iterator >::__type __gnu_debug::__get_distance (const std::reverse_iterator< _Iterator > & __first, const std::reverse_iterator< _Iterator >
       & __last) [inline],  [constexpr]
       Definition at line 50 of file debug/stl_iterator.h.

   template<typename _Iterator > constexpr bool __gnu_debug::__is_irreflexive (_Iterator __it) [inline],  [constexpr]
       Definition at line 458 of file functions.h.

   template<typename _Iterator , typename _Pred > constexpr bool __gnu_debug::__is_irreflexive_pred (_Iterator __it, _Pred __pred) [inline],  [constexpr]
       Definition at line 464 of file functions.h.

   template<typename _Iterator > _Iterator __gnu_debug::__unsafe (_Iterator __it) [inline]
       Definition at line 318 of file helper_functions.h.

   template<typename _Iterator , typename _Sequence > _Iterator __gnu_debug::__unsafe (const _Safe_iterator< _Iterator, _Sequence > & __it) [inline]
       Definition at line 1011 of file safe_iterator.h.

   template<typename _Iterator , typename _Sequence > _Iterator __gnu_debug::__unsafe (const _Safe_local_iterator< _Iterator, _Sequence > & __it) [inline]
       Definition at line 431 of file safe_local_iterator.h.

   template<typename _Iterator > constexpr auto __gnu_debug::__unsafe (const std::move_iterator< _Iterator > & __it) -> decltype(std::make_move_iterator(__unsafe(__it.base())))
            [inline],  [constexpr]"

       Definition at line 135 of file debug/stl_iterator.h.

   template<typename _Iterator > constexpr auto __gnu_debug::__unsafe (const std::reverse_iterator< _Iterator > & __it) -> decltype(std::__make_reverse_iterator(__unsafe(__it.base())))
            [inline],  [constexpr]"

       Definition at line 94 of file debug/stl_iterator.h.

   template<typename _InputIterator > constexpr bool __gnu_debug::__valid_range (_InputIterator __first, _InputIterator __last) [inline],  [constexpr]
       Definition at line 254 of file helper_functions.h.

   template<typename _InputIterator > constexpr bool __gnu_debug::__valid_range (_InputIterator __first, _InputIterator __last, typename _Distance_traits< _InputIterator >::__type & __dist) [inline],
       [constexpr]
       Don't know what these iterators are, or if they are even iterators (we may get an integral type for InputIterator), so see if they are integral and pass them on to the next phase otherwise.

       Definition at line 230 of file helper_functions.h.

       References __valid_range_aux().

   template<typename _Iterator , typename _Sequence , typename _Category > bool __gnu_debug::__valid_range (const _Safe_iterator< _Iterator, _Sequence, _Category > & __first, const _Safe_iterator<
       _Iterator, _Sequence, _Category > & __last) [inline]
       Definition at line 973 of file safe_iterator.h.

   template<typename _Iterator , typename _Sequence , typename _Category > bool __gnu_debug::__valid_range (const _Safe_iterator< _Iterator, _Sequence, _Category > & __first, const _Safe_iterator<
       _Iterator, _Sequence, _Category > & __last, typename _Distance_traits< _Iterator >::__type & __dist) [inline]
       Safe iterators know how to check if they form a valid range.

       Definition at line 964 of file safe_iterator.h.

   template<typename _Iterator , typename _Sequence > bool __gnu_debug::__valid_range (const _Safe_local_iterator< _Iterator, _Sequence > & __first, const _Safe_local_iterator< _Iterator, _Sequence > &
       __last) [inline]
       Definition at line 416 of file safe_local_iterator.h.

   template<typename _Iterator , typename _Sequence > bool __gnu_debug::__valid_range (const _Safe_local_iterator< _Iterator, _Sequence > & __first, const _Safe_local_iterator< _Iterator, _Sequence > &
       __last, typename _Distance_traits< _Iterator >::__type & __dist_info) [inline]
       Safe local iterators know how to check if they form a valid range.

       Definition at line 409 of file safe_local_iterator.h.

   template<typename _Iterator > constexpr bool __gnu_debug::__valid_range (const std::move_iterator< _Iterator > & __first, const std::move_iterator< _Iterator > & __last, typename _Distance_traits<
       _Iterator >::__type & __dist) [inline],  [constexpr]
       Definition at line 104 of file debug/stl_iterator.h.

   template<typename _Iterator > constexpr bool __gnu_debug::__valid_range (const std::reverse_iterator< _Iterator > & __first, const std::reverse_iterator< _Iterator > & __last, typename
       _Distance_traits< _Iterator >::__type & __dist) [inline],  [constexpr]
       Definition at line 40 of file debug/stl_iterator.h.

   template<typename _InputIterator > constexpr bool __gnu_debug::__valid_range_aux (_InputIterator __first, _InputIterator __last, std::__false_type) [inline],  [constexpr]
       We have iterators, so figure out what kind of iterators they are to see if we can check the range ahead of time.

       Definition at line 186 of file helper_functions.h.

       References std::__iterator_category(), and __valid_range_aux().

   template<typename _InputIterator > constexpr bool __gnu_debug::__valid_range_aux (_InputIterator __first, _InputIterator __last, std::input_iterator_tag) [inline],  [constexpr]
       Definition at line 162 of file helper_functions.h.

   template<typename _InputIterator > constexpr bool __gnu_debug::__valid_range_aux (_InputIterator __first, _InputIterator __last, std::random_access_iterator_tag) [inline],  [constexpr]
       Definition at line 172 of file helper_functions.h.

   template<typename _InputIterator > constexpr bool __gnu_debug::__valid_range_aux (_InputIterator __first, _InputIterator __last, typename _Distance_traits< _InputIterator >::__type & __dist,
       std::__false_type) [inline],  [constexpr]
       Definition at line 196 of file helper_functions.h.

   template<typename _Integral > constexpr bool __gnu_debug::__valid_range_aux (_Integral, _Integral, std::__true_type) [inline],  [constexpr]
       We say that integral types for a valid range, and defer to other routines to realize what to do with integral types instead of iterators.

       Definition at line 145 of file helper_functions.h.

       Referenced by __valid_range(), and __valid_range_aux().

   template<typename _Integral > constexpr bool __gnu_debug::__valid_range_aux (_Integral, _Integral, typename _Distance_traits< _Integral >::__type & __dist, std::__true_type) [inline],  [constexpr]
       Definition at line 151 of file helper_functions.h.

   template<typename _CharT , typename _Traits , typename _Allocator > std::basic_istream< _CharT, _Traits > & __gnu_debug::getline (std::basic_istream< _CharT, _Traits > & __is, basic_string< _CharT,
       _Traits, _Allocator > & __str)
       Definition at line 1282 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > std::basic_istream< _CharT, _Traits > & __gnu_debug::getline (std::basic_istream< _CharT, _Traits > & __is, basic_string< _CharT,
       _Traits, _Allocator > & __str, _CharT __delim)
       Definition at line 1270 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator!= (const _CharT * __lhs, const basic_string< _CharT, _Traits, _Allocator > & __rhs) [inline]
       Definition at line 1133 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator!= (const basic_string< _CharT, _Traits, _Allocator > & __lhs, const _CharT * __rhs) [inline]
       Definition at line 1142 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator!= (const basic_string< _CharT, _Traits, _Allocator > & __lhs, const basic_string< _CharT, _Traits,
       _Allocator > & __rhs) [inline]
       Definition at line 1127 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > basic_string< _CharT, _Traits, _Allocator > __gnu_debug::operator+ (_CharT __lhs, const basic_string< _CharT, _Traits, _Allocator >
       & __rhs) [inline]
       Definition at line 1082 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > basic_string< _CharT, _Traits, _Allocator > __gnu_debug::operator+ (const _CharT * __lhs, const basic_string< _CharT, _Traits,
       _Allocator > & __rhs) [inline]
       Definition at line 1073 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > basic_string< _CharT, _Traits, _Allocator > __gnu_debug::operator+ (const basic_string< _CharT, _Traits, _Allocator > & __lhs,
       _CharT __rhs) [inline]
       Definition at line 1097 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > basic_string< _CharT, _Traits, _Allocator > __gnu_debug::operator+ (const basic_string< _CharT, _Traits, _Allocator > & __lhs,
       const _CharT * __rhs) [inline]
       Definition at line 1088 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > basic_string< _CharT, _Traits, _Allocator > __gnu_debug::operator+ (const basic_string< _CharT, _Traits, _Allocator > & __lhs,
       const basic_string< _CharT, _Traits, _Allocator > & __rhs) [inline]
       Definition at line 1067 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator< (const _CharT * __lhs, const basic_string< _CharT, _Traits, _Allocator > & __rhs) [inline]
       Definition at line 1156 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator< (const basic_string< _CharT, _Traits, _Allocator > & __lhs, const _CharT * __rhs) [inline]
       Definition at line 1165 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator< (const basic_string< _CharT, _Traits, _Allocator > & __lhs, const basic_string< _CharT, _Traits,
       _Allocator > & __rhs) [inline]
       Definition at line 1150 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > std::basic_ostream< _CharT, _Traits > & __gnu_debug::operator<< (std::basic_ostream< _CharT, _Traits > & __os, const basic_string<
       _CharT, _Traits, _Allocator > & __str)
       Definition at line 1248 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator<= (const _CharT * __lhs, const basic_string< _CharT, _Traits, _Allocator > & __rhs) [inline]
       Definition at line 1180 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator<= (const basic_string< _CharT, _Traits, _Allocator > & __lhs, const _CharT * __rhs) [inline]
       Definition at line 1189 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator<= (const basic_string< _CharT, _Traits, _Allocator > & __lhs, const basic_string< _CharT, _Traits,
       _Allocator > & __rhs) [inline]
       Definition at line 1174 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator== (const _CharT * __lhs, const basic_string< _CharT, _Traits, _Allocator > & __rhs) [inline]
       Definition at line 1109 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator== (const basic_string< _CharT, _Traits, _Allocator > & __lhs, const _CharT * __rhs) [inline]
       Definition at line 1118 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator== (const basic_string< _CharT, _Traits, _Allocator > & __lhs, const basic_string< _CharT, _Traits,
       _Allocator > & __rhs) [inline]
       Definition at line 1103 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator> (const _CharT * __lhs, const basic_string< _CharT, _Traits, _Allocator > & __rhs) [inline]
       Definition at line 1229 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator> (const basic_string< _CharT, _Traits, _Allocator > & __lhs, const _CharT * __rhs) [inline]
       Definition at line 1238 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator> (const basic_string< _CharT, _Traits, _Allocator > & __lhs, const basic_string< _CharT, _Traits,
       _Allocator > & __rhs) [inline]
       Definition at line 1223 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator>= (const _CharT * __lhs, const basic_string< _CharT, _Traits, _Allocator > & __rhs) [inline]
       Definition at line 1205 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator>= (const basic_string< _CharT, _Traits, _Allocator > & __lhs, const _CharT * __rhs) [inline]
       Definition at line 1214 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > bool __gnu_debug::operator>= (const basic_string< _CharT, _Traits, _Allocator > & __lhs, const basic_string< _CharT, _Traits,
       _Allocator > & __rhs) [inline]
       Definition at line 1199 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > std::basic_istream< _CharT, _Traits > & __gnu_debug::operator>> (std::basic_istream< _CharT, _Traits > & __is, basic_string<
       _CharT, _Traits, _Allocator > & __str)
       Definition at line 1260 of file debug/string.

   template<typename _CharT , typename _Traits , typename _Allocator > void __gnu_debug::swap (basic_string< _CharT, _Traits, _Allocator > & __lhs, basic_string< _CharT, _Traits, _Allocator > & __rhs)
       [inline]
       Definition at line 1248 of file debug/string.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                                                                                     Wed Feb 1 2023                                                                                __gnu_debug(3)
