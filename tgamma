tgamma(3)                                                                                Library Functions Manual                                                                                tgamma(3)

NAME
       tgamma, tgammaf, tgammal - true gamma function

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       double tgamma(double x);
       float tgammaf(float x);
       long double tgammal(long double x);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       tgamma(), tgammaf(), tgammal():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L

DESCRIPTION
       These functions calculate the Gamma function of x.

       The Gamma function is defined by

              Gamma(x) = integral from 0 to infinity of t^(x-1) e^-t dt

       It is defined for every real number except for nonpositive integers.  For nonnegative integral m one has

              Gamma(m+1) = m!

       and, more generally, for all x:

              Gamma(x+1) = x * Gamma(x)

       Furthermore, the following is valid for all values of x outside the poles:

              Gamma(x) * Gamma(1 - x) = PI / sin(PI * x)

RETURN VALUE
       On success, these functions return Gamma(x).

       If x is a NaN, a NaN is returned.

       If x is positive infinity, positive infinity is returned.

       If x is a negative integer, or is negative infinity, a domain error occurs, and a NaN is returned.

       If the result overflows, a range error occurs, and the functions return HUGE_VAL, HUGE_VALF, or HUGE_VALL, respectively, with the correct mathematical sign.

       If the result underflows, a range error occurs, and the functions return 0, with the correct mathematical sign.

       If x is -0 or +0, a pole error occurs, and the functions return HUGE_VAL, HUGE_VALF, or HUGE_VALL, respectively, with the same sign as the 0.

ERRORS
       See math_error(7) for information on how to determine whether an error has occurred when calling these functions.

       The following errors can occur:

       Domain error: x is a negative integer, or negative infinity
              errno is set to EDOM.  An invalid floating-point exception (FE_INVALID) is raised (but see BUGS).

       Pole error: x is +0 or -0
              errno is set to ERANGE.  A divide-by-zero floating-point exception (FE_DIVBYZERO) is raised.

       Range error: result overflow
              errno is set to ERANGE.  An overflow floating-point exception (FE_OVERFLOW) is raised.

       glibc also gives the following error which is not specified in C99 or POSIX.1-2001.

       Range error: result underflow
              An underflow floating-point exception (FE_UNDERFLOW) is raised, and errno is set to ERANGE.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │tgamma(), tgammaf(), tgammal()                                                                                                                                          │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       glibc 2.1.  C99, POSIX.1-2001.

NOTES
       This function had to be called "true gamma function" since there is already a function gamma(3) that returns something else (see gamma(3) for details).

BUGS
       Before glibc 2.18, the glibc implementation of these functions did not set errno to EDOM when x is negative infinity.

       Before glibc 2.19, the glibc implementation of these functions did not set errno to ERANGE on an underflow range error.

       In glibc versions 2.3.3 and earlier, an argument of +0 or -0 incorrectly produced a domain error (errno set to EDOM and an FE_INVALID exception raised), rather than a pole error.

SEE ALSO
       gamma(3), lgamma(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                       tgamma(3)
TGAMMA(3P)                                                                               POSIX Programmer's Manual                                                                              TGAMMA(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       tgamma, tgammaf, tgammal — compute gamma() function

SYNOPSIS
       #include <math.h>

       double tgamma(double x);
       float tgammaf(float x);
       long double tgammal(long double x);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       These functions shall compute Γ(x) where Γ(x) is defined as ∫e^ −tt^ x−1dt.

       An  application  wishing  to check for error situations should set errno to zero and call feclearexcept(FE_ALL_EXCEPT) before calling these functions. On return, if errno is non-zero or fetestex‐
       cept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.

RETURN VALUE
       Upon successful completion, these functions shall return the gamma of x.

       If x is a negative integer, a domain error may occur and either a NaN (if supported) or an implementation-defined value shall be returned.  On systems that support the  IEC  60559  Floating-Point
       option, a domain error shall occur and a NaN shall be returned.

       If  x  is ±0, tgamma(), tgammaf(), and tgammal() shall return ±HUGE_VAL, ±HUGE_VALF, and ±HUGE_VALL, respectively.  On systems that support the IEC 60559 Floating-Point option, a pole error shall
       occur; otherwise, a pole error may occur.

       If the correct value would cause overflow, a range error shall occur and tgamma(), tgammaf(), and tgammal() shall return ±HUGE_VAL, ±HUGE_VALF, or ±HUGE_VALL, respectively, with the same sign  as
       the correct value of the function.

       If the correct value would cause underflow, and is not representable, a range error may occur, and tgamma(), tgammaf(), and tgammal() shall return 0.0, or (if IEC 60559 Floating-Point is not sup‐
       ported) an implementation-defined value no greater in magnitude than DBL_MIN, FLT_MIN, and LDBL_MIN, respectively.

       If the correct value would cause underflow, and is representable, a range error may occur and the correct value shall be returned.

       If x is subnormal and 1/x is representable, 1/x should be returned.

       If x is NaN, a NaN shall be returned.

       If x is +Inf, x shall be returned.

       If x is -Inf, a domain error shall occur, and a NaN shall be returned.

ERRORS
       These functions shall fail if:

       Domain Error
                   The value of x is a negative integer, or x is -Inf.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [EDOM].  If the integer expression (math_errhandling & MATH_ERREXCEPT)  is  non-zero,
                   then the invalid floating-point exception shall be raised.

       Pole Error  The value of x is zero.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the divide-by-zero floating-point exception shall be raised.

       Range Error The value overflows.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the overflow floating-point exception shall be raised.

       These functions may fail if:

       Domain Error
                   The value of x is a negative integer.

                   If  the  integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [EDOM].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the invalid floating-point exception shall be raised.

       Pole Error  The value of x is zero.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the divide-by-zero floating-point exception shall be raised.

       Range Error The result underflows.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the underflow floating-point exception shall be raised.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling & MATH_ERREXCEPT) are independent of each other, but at least one of them must be non-zero.

RATIONALE
       This function is named tgamma() in order to avoid conflicts with the historical gamma() and lgamma() functions.

FUTURE DIRECTIONS
       It is possible that the error response for a negative integer argument may be changed to a pole error and a return value of ±Inf.

SEE ALSO
       feclearexcept(), fetestexcept(), lgamma()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                         TGAMMA(3P)
