fread(3)                                                                                 Library Functions Manual                                                                                 fread(3)

NAME
       fread, fwrite - binary stream input/output

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdio.h>

       size_t fread(void ptr[restrict .size * .nmemb],
                    size_t size, size_t nmemb,
                    FILE *restrict stream);
       size_t fwrite(const void ptr[restrict .size * .nmemb],
                    size_t size, size_t nmemb,
                    FILE *restrict stream);

DESCRIPTION
       The function fread() reads nmemb items of data, each size bytes long, from the stream pointed to by stream, storing them at the location given by ptr.

       The function fwrite() writes nmemb items of data, each size bytes long, to the stream pointed to by stream, obtaining them from the location given by ptr.

       For nonlocking counterparts, see unlocked_stdio(3).

RETURN VALUE
       On  success,  fread() and fwrite() return the number of items read or written.  This number equals the number of bytes transferred only when size is 1.  If an error occurs, or the end of the file
       is reached, the return value is a short item count (or zero).

       The file position indicator for the stream is advanced by the number of bytes successfully read or written.

       fread() does not distinguish between end-of-file and error, and callers must use feof(3) and ferror(3) to determine which occurred.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │fread(), fwrite()                                                                                                                                                       │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       POSIX.1-2001, C89.

EXAMPLES
       The program below demonstrates the use of fread() by parsing /bin/sh ELF executable in binary mode and printing its magic and class:

           $ ./a.out
           ELF magic: 0x7f454c46
           Class: 0x02

   Program source

       #include <stdio.h>
       #include <stdlib.h>

       #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))

       int
       main(void)
       {
           FILE           *fp;
           size_t         ret;
           unsigned char  buffer[4];

           fp = fopen("/bin/sh", "rb");
           if (!fp) {
               perror("fopen");
               return EXIT_FAILURE;
           }

           ret = fread(buffer, sizeof(*buffer), ARRAY_SIZE(buffer), fp);
           if (ret != ARRAY_SIZE(buffer)) {
               fprintf(stderr, "fread() failed: %zu\n", ret);
               exit(EXIT_FAILURE);
           }

           printf("ELF magic: %#04x%02x%02x%02x\n", buffer[0], buffer[1],
                  buffer[2], buffer[3]);

           ret = fread(buffer, 1, 1, fp);
           if (ret != 1) {
               fprintf(stderr, "fread() failed: %zu\n", ret);
               exit(EXIT_FAILURE);
           }

           printf("Class: %#04x\n", buffer[0]);

           fclose(fp);

           exit(EXIT_SUCCESS);
       }

SEE ALSO
       read(2), write(2), feof(3), ferror(3), unlocked_stdio(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        fread(3)
FREAD(3P)                                                                                POSIX Programmer's Manual                                                                               FREAD(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       fread — binary input

SYNOPSIS
       #include <stdio.h>

       size_t fread(void *restrict ptr, size_t size, size_t nitems,
           FILE *restrict stream);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       The fread() function shall read into the array pointed to by ptr up to nitems elements whose size is specified by size in bytes, from the stream pointed to by stream.  For each object, size calls
       shall be made to the fgetc() function and the results stored, in the order read, in an array of unsigned char exactly overlaying the object. The file position indicator for  the  stream  (if  de‐
       fined)  shall  be  advanced by the number of bytes successfully read. If an error occurs, the resulting value of the file position indicator for the stream is unspecified. If a partial element is
       read, its value is unspecified.

       The fread() function may mark the last data access timestamp of the file associated with stream for update. The last data access timestamp shall be marked for update by the first successful  exe‐
       cution of fgetc(), fgets(), fread(), fscanf(), getc(), getchar(), getdelim(), getline(), gets(), or scanf() using stream that returns data not supplied by a prior call to ungetc().

RETURN VALUE
       Upon  successful  completion,  fread()  shall return the number of elements successfully read which is less than nitems only if a read error or end-of-file is encountered. If size or nitems is 0,
       fread() shall return 0 and the contents of the array and the state of the stream remain unchanged. Otherwise, if a read error occurs, the error indicator for the stream shall be  set,  and  errno
       shall be set to indicate the error.

ERRORS
       Refer to fgetc().

       The following sections are informative.

EXAMPLES
   Reading from a Stream
       The following example transfers a single 100-byte fixed length record from the fp stream into the array pointed to by buf.

           #include <stdio.h>
           ...
           size_t elements_read;
           char buf[100];
           FILE *fp;
           ...
           elements_read = fread(buf, sizeof(buf), 1, fp);
           ...

       If a read error occurs, elements_read will be zero but the number of bytes read from the stream could be anything from zero to sizeof(buf)-1.

       The following example reads multiple single-byte elements from the fp stream into the array pointed to by buf.

           #include <stdio.h>
           ...
           size_t bytes_read;
           char buf[100];
           FILE *fp;
           ...
           bytes_read = fread(buf, 1, sizeof(buf), fp);
           ...

       If a read error occurs, bytes_read will contain the number of bytes read from the stream.

APPLICATION USAGE
       The ferror() or feof() functions must be used to distinguish between an error condition and an end-of-file condition.

       Because  of  possible differences in element length and byte ordering, files written using fwrite() are application-dependent, and possibly cannot be read using fread() by a different application
       or by the same application on a different processor.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.5, Standard I/O Streams, feof(), ferror(), fgetc(), fopen(), fscanf(), getc(), gets()

       The Base Definitions volume of POSIX.1‐2017, <stdio.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          FREAD(3P)
