NANOSLEEP(3P)                                                                            POSIX Programmer's Manual                                                                           NANOSLEEP(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       nanosleep — high resolution sleep

SYNOPSIS
       #include <time.h>

       int nanosleep(const struct timespec *rqtp, struct timespec *rmtp);

DESCRIPTION
       The nanosleep() function shall cause the current thread to be suspended from execution until either the time interval specified by the rqtp argument has elapsed or a signal is  delivered  to  the
       calling thread, and its action is to invoke a signal-catching function or to terminate the process. The suspension time may be longer than requested because the argument value is rounded up to an
       integer multiple of the sleep resolution or because of the scheduling of other activity by the system. But, except for the case of being interrupted by a signal, the suspension time shall not  be
       less than the time specified by rqtp, as measured by the system clock CLOCK_REALTIME.

       The use of the nanosleep() function has no effect on the action or blockage of any signal.

RETURN VALUE
       If the nanosleep() function returns because the requested time has elapsed, its return value shall be zero.

       If  the  nanosleep()  function returns because it has been interrupted by a signal, it shall return a value of -1 and set errno to indicate the interruption. If the rmtp argument is non-NULL, the
       timespec structure referenced by it is updated to contain the amount of time remaining in the interval (the requested time minus the time actually slept). The rqtp and rmtp arguments can point to
       the same object. If the rmtp argument is NULL, the remaining time is not returned.

       If nanosleep() fails, it shall return a value of -1 and set errno to indicate the error.

ERRORS
       The nanosleep() function shall fail if:

       EINTR  The nanosleep() function was interrupted by a signal.

       EINVAL The rqtp argument specified a nanosecond value less than zero or greater than or equal to 1000 million.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       It  is  common  to  suspend  execution of a thread for an interval in order to poll the status of a non-interrupting function. A large number of actual needs can be met with a simple extension to
       sleep() that provides finer resolution.

       In the POSIX.1‐1990 standard and SVR4, it is possible to implement such a routine, but the frequency of wakeup is limited by the resolution of the alarm() and sleep() functions. In 4.3 BSD, it is
       possible  to write such a routine using no static storage and reserving no system facilities. Although it is possible to write a function with similar functionality to sleep() using the remainder
       of the timer_*() functions, such a function requires the use of signals and the reservation of some signal number. This volume of POSIX.1‐2017 requires that nanosleep() be  non-intrusive  of  the
       signals function.

       The  nanosleep()  function  shall  return a value of 0 on success and -1 on failure or if interrupted. This latter case is different from sleep().  This was done because the remaining time is re‐
       turned via an argument structure pointer, rmtp, instead of as the return value.

FUTURE DIRECTIONS
       None.

SEE ALSO
       clock_nanosleep(), sleep()

       The Base Definitions volume of POSIX.1‐2017, <time.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                      NANOSLEEP(3P)
nanosleep(2)                                                                                System Calls Manual                                                                               nanosleep(2)

NAME
       nanosleep - high-resolution sleep

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <time.h>

       int nanosleep(const struct timespec *req,
                     struct timespec *_Nullable rem);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       nanosleep():
           _POSIX_C_SOURCE >= 199309L

DESCRIPTION
       nanosleep() suspends the execution of the calling thread until either at least the time specified in *req has elapsed, or the delivery of a signal that triggers the invocation of a handler in the
       calling thread or that terminates the process.

       If the call is interrupted by a signal handler, nanosleep() returns -1, sets errno to EINTR, and writes the remaining time into the structure pointed to by rem unless rem is NULL.  The  value  of
       *rem can then be used to call nanosleep() again and complete the specified pause (but see NOTES).

       The timespec(3) structure is used to specify intervals of time with nanosecond precision.

       The value of the nanoseconds field must be in the range [0, 999999999].

       Compared  to sleep(3) and usleep(3), nanosleep() has the following advantages: it provides a higher resolution for specifying the sleep interval; POSIX.1 explicitly specifies that it does not in‐
       teract with signals; and it makes the task of resuming a sleep that has been interrupted by a signal handler easier.

RETURN VALUE
       On successfully sleeping for the requested interval, nanosleep() returns 0.  If the call is interrupted by a signal handler or encounters an error, then it returns -1, with errno set to  indicate
       the error.

ERRORS
       EFAULT Problem with copying information from user space.

       EINTR  The  pause  has  been  interrupted  by  a  signal  that was delivered to the thread (see signal(7)).  The remaining sleep time has been written into *rem so that the thread can easily call
              nanosleep() again and continue with the pause.

       EINVAL The value in the tv_nsec field was not in the range [0, 999999999] or tv_sec was negative.

VERSIONS
       POSIX.1 specifies that nanosleep() should measure time against the CLOCK_REALTIME clock.  However, Linux measures the time using the CLOCK_MONOTONIC clock.  This probably does not  matter,  since
       the POSIX.1 specification for clock_settime(2) says that discontinuous changes in CLOCK_REALTIME should not affect nanosleep():

              Setting the value of the CLOCK_REALTIME clock via clock_settime(2) shall have no effect on threads that are blocked waiting for a relative time service based upon this clock, including the
              nanosleep() function; ...  Consequently, these time services shall expire when the requested relative interval elapses, independently of the new or old value of the clock.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

       In order to support applications requiring much more precise pauses (e.g., in order to control some time-critical hardware), nanosleep() would handle pauses of up to 2 milliseconds by busy  wait‐
       ing  with  microsecond  precision  when  called  from a thread scheduled under a real-time policy like SCHED_FIFO or SCHED_RR.  This special extension was removed in Linux 2.5.39, and is thus not
       available in Linux 2.6.0 and later kernels.

NOTES
       If the interval specified in req is not an exact multiple of the granularity underlying clock (see time(7)), then the interval will be rounded up to the next  multiple.   Furthermore,  after  the
       sleep completes, there may still be a delay before the CPU becomes free to once again execute the calling thread.

       The  fact  that  nanosleep() sleeps for a relative interval can be problematic if the call is repeatedly restarted after being interrupted by signals, since the time between the interruptions and
       restarts of the call will lead to drift in the time when the sleep finally completes.  This problem can be avoided by using clock_nanosleep(2) with an absolute time value.

BUGS
       If a program that catches signals and uses nanosleep() receives signals at a very high rate, then scheduling delays and rounding errors in the kernel's calculation of the sleep interval  and  the
       returned  remain value mean that the remain value may steadily increase on successive restarts of the nanosleep() call.  To avoid such problems, use clock_nanosleep(2) with the TIMER_ABSTIME flag
       to sleep to an absolute deadline.

       In Linux 2.4, if nanosleep() is stopped by a signal (e.g., SIGTSTP), then the call fails with the error EINTR after the thread is resumed by a SIGCONT signal.  If the system call is  subsequently
       restarted, then the time that the thread spent in the stopped state is not counted against the sleep interval.  This problem is fixed in Linux 2.6.0 and later kernels.

SEE ALSO
       clock_nanosleep(2), restart_syscall(2), sched_setscheduler(2), timer_create(2), sleep(3), timespec(3), usleep(3), time(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                    nanosleep(2)
