std::reference_wrapper< _TpLibrary Functions Mstd::reference_wrapper< _Tp >(3)

NAME
       std::reference_wrapper< _Tp > - Primary class template for
       reference_wrapper.

SYNOPSIS
       #include <functional>

   Public Types
       typedef _Tp type

   Public Member Functions
       template<typename _Up , typename  = __not_same<_Up>, typename  =
           decltype(reference_wrapper::_S_fun(std::declval<_Up>()))> constexpr
           reference_wrapper (_Up &&__uref)
           noexcept(noexcept(reference_wrapper::_S_fun(std::declval< _Up
           >())))
       reference_wrapper (const reference_wrapper &)=default
       constexpr _Tp & get () const noexcept
       constexpr operator _Tp & () const noexcept
       template<typename... _Args> constexpr result_of< _Tp &(_Args
           &&...)>::type operator() (_Args &&... __args) const
       reference_wrapper & operator= (const reference_wrapper &)=default

   Related Functions
       (Note that these are not member functions.)

           template<typename _Tp > constexpr reference_wrapper< _Tp > ref (_Tp
               &__t) noexcept
           template<typename _Tp > constexpr reference_wrapper< const _Tp >
               cref (const _Tp &__t) noexcept
               Denotes a const reference should be taken to a variable.
           template<typename _Tp > constexpr reference_wrapper< _Tp > ref
               (reference_wrapper< _Tp > __t) noexcept
               std::ref overload to prevent wrapping a reference_wrapper
           template<typename _Tp > constexpr reference_wrapper< const _Tp >
               cref (reference_wrapper< _Tp > __t) noexcept
               std::cref overload to prevent wrapping a reference_wrapper

Detailed Description
   template<typename _Tp>
       class std::reference_wrapper< _Tp >"Primary class template for
       reference_wrapper.

       Definition at line 303 of file functional.

Member Typedef Documentation
   template<typename _Tp > typedef _Tp std::reference_wrapper< _Tp >::type
       Definition at line 322 of file functional.

Constructor & Destructor Documentation
   template<typename _Tp > template<typename _Up , typename  =
       __not_same<_Up>, typename  =
       decltype(reference_wrapper::_S_fun(std::declval<_Up>()))> constexpr
       std::reference_wrapper< _Tp >::reference_wrapper (_Up && __uref)
       [inline],  [constexpr],  [noexcept]
       Definition at line 330 of file functional.

Member Function Documentation
   template<typename _Tp > constexpr _Tp & std::reference_wrapper< _Tp >::get
       () const [inline],  [constexpr],  [noexcept]
       Definition at line 346 of file functional.

   template<typename _Tp > constexpr std::reference_wrapper< _Tp >::operator
       _Tp & () const [inline],  [constexpr],  [noexcept]
       Definition at line 341 of file functional.

   template<typename _Tp > template<typename... _Args> constexpr result_of<
       _Tp &(_Args &&...)>::type std::reference_wrapper< _Tp >::operator()
       (_Args &&... __args) const [inline],  [constexpr]
       Definition at line 352 of file functional.

Friends And Related Function Documentation
   template<typename _Tp > constexpr reference_wrapper< const _Tp > cref
       (const _Tp & __t) [related]
       Denotes a const reference should be taken to a variable.

       Definition at line 380 of file functional.

   template<typename _Tp > constexpr reference_wrapper< const _Tp > cref
       (reference_wrapper< _Tp > __t) [related]
       std::cref overload to prevent wrapping a reference_wrapper

       Definition at line 400 of file functional.

   template<typename _Tp > constexpr reference_wrapper< _Tp > ref (_Tp & __t)
       [related]
       Denotes a reference should be taken to a variable.

       Definition at line 373 of file functional.

   template<typename _Tp > constexpr reference_wrapper< _Tp > ref
       (reference_wrapper< _Tp > __t) [related]
       std::ref overload to prevent wrapping a reference_wrapper

       Definition at line 393 of file functional.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Feb 1 2023std::reference_wrapper< _Tp >(3)
