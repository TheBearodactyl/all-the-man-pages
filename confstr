confstr(3)                                                                               Library Functions Manual                                                                               confstr(3)

NAME
       confstr - get configuration dependent string variables

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       size_t confstr(int name, char buf[.size], size_t size);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       confstr():
           _POSIX_C_SOURCE >= 2 || _XOPEN_SOURCE

DESCRIPTION
       confstr() gets the value of configuration-dependent string variables.

       The name argument is the system variable to be queried.  The following variables are supported:

       _CS_GNU_LIBC_VERSION (GNU C library only; since glibc 2.3.2)
              A string which identifies the GNU C library version on this system (e.g., "glibc 2.3.4").

       _CS_GNU_LIBPTHREAD_VERSION (GNU C library only; since glibc 2.3.2)
              A string which identifies the POSIX implementation supplied by this C library (e.g., "NPTL 2.3.4" or "linuxthreads-0.10").

       _CS_PATH
              A value for the PATH variable which indicates where all the POSIX.2 standard utilities can be found.

       If  buf is not NULL and size is not zero, confstr() copies the value of the string to buf truncated to size - 1 bytes if necessary, with a null byte ('\0') as terminator.  This can be detected by
       comparing the return value of confstr() against size.

       If size is zero and buf is NULL, confstr() just returns the value as defined below.

RETURN VALUE
       If name is a valid configuration variable, confstr() returns the number of bytes (including the terminating null byte) that would be required to hold the entire  value  of  that  variable.   This
       value may be greater than size, which means that the value in buf is truncated.

       If  name is a valid configuration variable, but that variable does not have a value, then confstr() returns 0.  If name does not correspond to a valid configuration variable, confstr() returns 0,
       and errno is set to EINVAL.

ERRORS
       EINVAL The value of name is invalid.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │confstr()                                                                                                                                                               │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

EXAMPLES
       The following code fragment determines the path where to find the POSIX.2 system utilities:

           char *pathbuf;
           size_t n;

           n = confstr(_CS_PATH, NULL, (size_t) 0);
           pathbuf = malloc(n);
           if (pathbuf == NULL)
               abort();
           confstr(_CS_PATH, pathbuf, n);

SEE ALSO
       getconf(1), sh(1), exec(3), fpathconf(3), pathconf(3), sysconf(3), system(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                      confstr(3)
CONFSTR(3P)                                                                              POSIX Programmer's Manual                                                                             CONFSTR(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       confstr — get configurable variables

SYNOPSIS
       #include <unistd.h>

       size_t confstr(int name, char *buf, size_t len);

DESCRIPTION
       The confstr() function shall return configuration-defined string values. Its use and purpose are similar to sysconf(), but it is used where string values rather than numeric values are returned.

       The name argument represents the system variable to be queried. The implementation shall support the following name values, defined in <unistd.h>.  It may support others:

       _CS_PATH
       _CS_POSIX_V7_ILP32_OFF32_CFLAGS
       _CS_POSIX_V7_ILP32_OFF32_LDFLAGS
       _CS_POSIX_V7_ILP32_OFF32_LIBS
       _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
       _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
       _CS_POSIX_V7_ILP32_OFFBIG_LIBS
       _CS_POSIX_V7_LP64_OFF64_CFLAGS
       _CS_POSIX_V7_LP64_OFF64_LDFLAGS
       _CS_POSIX_V7_LP64_OFF64_LIBS
       _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
       _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
       _CS_POSIX_V7_LPBIG_OFFBIG_LIBS
       _CS_POSIX_V7_THREADS_CFLAGS
       _CS_POSIX_V7_THREADS_LDFLAGS
       _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
       _CS_V7_ENV
       _CS_POSIX_V6_ILP32_OFF32_CFLAGS
       _CS_POSIX_V6_ILP32_OFF32_LDFLAGS
       _CS_POSIX_V6_ILP32_OFF32_LIBS
       _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
       _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
       _CS_POSIX_V6_ILP32_OFFBIG_LIBS
       _CS_POSIX_V6_LP64_OFF64_CFLAGS
       _CS_POSIX_V6_LP64_OFF64_LDFLAGS
       _CS_POSIX_V6_LP64_OFF64_LIBS
       _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
       _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
       _CS_POSIX_V6_LPBIG_OFFBIG_LIBS
       _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
       _CS_V6_ENV

       If len is not 0, and if name has a configuration-defined value, confstr() shall copy that value into the len-byte buffer pointed to by buf.  If the string to be returned is longer than len bytes,
       including  the  terminating  null, then confstr() shall truncate the string to len-1 bytes and null-terminate the result. The application can detect that the string was truncated by comparing the
       value returned by confstr() with len.

       If len is 0 and buf is a null pointer, then confstr() shall still return the integer value as defined below, but shall not return a string. If len is 0 but buf is not a null pointer,  the  result
       is unspecified.

       After a call to:

           confstr(_CS_V7_ENV, buf, sizeof(buf))

       the  string stored in buf shall contain a <space>-separated list of the variable=value environment variable pairs an implementation requires as part of specifying a conforming environment, as de‐
       scribed in the implementations' conformance documentation.

       If the implementation supports the POSIX shell option, the string stored in buf after a call to:

           confstr(_CS_PATH, buf, sizeof(buf))

       can be used as a value of the PATH environment variable that accesses all of the standard utilities of POSIX.1‐2008, that are provided in a manner accessible via the exec family of functions,  if
       the return value is less than or equal to sizeof(buf).

RETURN VALUE
       If  name  has  a configuration-defined value, confstr() shall return the size of buffer that would be needed to hold the entire configuration-defined value including the terminating null. If this
       return value is greater than len, the string returned in buf is truncated.

       If name is invalid, confstr() shall return 0 and set errno to indicate the error.

       If name does not have a configuration-defined value, confstr() shall return 0 and leave errno unchanged.

ERRORS
       The confstr() function shall fail if:

       EINVAL The value of the name argument is invalid.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       An application can distinguish between an invalid name parameter value and one that corresponds to a configurable variable that has no configuration-defined value by checking if  errno  is  modi‐
       fied. This mirrors the behavior of sysconf().

       The  original  need for this function was to provide a way of finding the configuration-defined default value for the environment variable PATH.  Since PATH can be modified by the user to include
       directories that could contain utilities replacing the standard utilities in the Shell and Utilities volume of POSIX.1‐2017, applications need a way to determine the system-supplied PATH environ‐
       ment variable value that contains the correct search path for the standard utilities.

       An application could use:

           confstr(name, (char *)NULL, (size_t)0)

       to  find  out  how  big a buffer is needed for the string value; use malloc() to allocate a buffer to hold the string; and call confstr() again to get the string. Alternately, it could allocate a
       fixed, static buffer that is big enough to hold most answers (perhaps 512 or 1024 bytes), but then use malloc() to allocate a larger buffer if it finds that this is too small.

RATIONALE
       Application developers can normally determine any configuration variable by means of reading from the stream opened by a call to:

           popen("command -p getconf variable", "r");

       The confstr() function with a name argument of _CS_PATH returns a string that can be used as a PATH environment variable setting that will reference the standard shell and utilities as  described
       in the Shell and Utilities volume of POSIX.1‐2017.

       The  confstr()  function  copies  the  returned string into a buffer supplied by the application instead of returning a pointer to a string. This allows a cleaner function in some implementations
       (such as those with lightweight threads) and resolves questions about when the application must copy the string returned.

FUTURE DIRECTIONS
       None.

SEE ALSO
       exec, fpathconf(), sysconf()

       The Base Definitions volume of POSIX.1‐2017, <unistd.h>

       The Shell and Utilities volume of POSIX.1‐2017, c99

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                        CONFSTR(3P)
