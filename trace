trace(n)                                                                                   Tcl Built-In Commands                                                                                  trace(n)

__________________________________________________________________________________________________________________________________________________________________________________________________________

NAME
       trace - Monitor variable accesses, command usages and command executions

SYNOPSIS
       trace option ?arg arg ...?
__________________________________________________________________________________________________________________________________________________________________________________________________________

DESCRIPTION
       This command causes Tcl commands to be executed whenever certain operations are invoked.  The legal options (which may be abbreviated) are:

       trace add type name ops ?args?
              Where type is command, execution, or variable.

              trace add command name ops commandPrefix
                     Arrange  for  commandPrefix  to  be  executed (with additional arguments) whenever command name is modified in one of the ways given by the list ops. Name will be resolved using the
                     usual namespace resolution rules used by commands. If the command does not exist, an error will be thrown.

                     Ops indicates which operations are of interest, and is a list of one or more of the following items:

                     rename Invoke commandPrefix whenever the traced command is renamed.  Note that renaming to the empty string is considered deletion, and will not be traced with “rename”.

                     delete Invoke commandPrefix when the traced command is deleted. Commands can be deleted explicitly by using the rename command to rename the command to an empty string. Commands are
                            also deleted when the interpreter is deleted, but traces will not be invoked because there is no interpreter in which to execute them.

                     When the trace triggers, depending on the operations being traced, a number of arguments are appended to commandPrefix so that the actual command is as follows:

                            commandPrefix oldName newName op

                     OldName  and  newName  give the traced command's current (old) name, and the name to which it is being renamed (the empty string if this is a “delete” operation).  Op indicates what
                     operation is being performed on the command, and is one of rename or delete as defined above.  The trace operation cannot be used to stop a command from being deleted.  Tcl will al‐
                     ways  remove  the  command once the trace is complete.  Recursive renaming or deleting will not cause further traces of the same type to be evaluated, so a delete trace which itself
                     deletes the command, or a rename trace which itself renames the command will not cause further trace evaluations to occur.  Both oldName and newName are  fully  qualified  with  any
                     namespace(s) in which they appear.

              trace add execution name ops commandPrefix
                     Arrange  for commandPrefix to be executed (with additional arguments) whenever command name is executed, with traces occurring at the points indicated by the list ops.  Name will be
                     resolved using the usual namespace resolution rules used by commands.  If the command does not exist, an error will be thrown.

                     Ops indicates which operations are of interest, and is a list of one or more of the following items:

                     enter  Invoke commandPrefix whenever the command name is executed, just before the actual execution takes place.

                     leave  Invoke commandPrefix whenever the command name is executed, just after the actual execution takes place.

                     enterstep
                            Invoke commandPrefix for every Tcl command which is executed from the start of the execution of the procedure name until that procedure  finishes.  CommandPrefix  is  invoked
                            just  before  the actual execution of the Tcl command being reported takes place.  For example if we have “proc foo {} { puts "hello" }”, then an enterstep trace would be in‐
                            voked just before “puts "hello"” is executed.  Setting an enterstep trace on a command name that does not refer to a procedure will not result in an error and is  simply  ig‐
                            nored.

                     leavestep
                            Invoke  commandPrefix  for  every  Tcl command which is executed from the start of the execution of the procedure name until that procedure finishes. CommandPrefix is invoked
                            just after the actual execution of the Tcl command being reported takes place.  Setting a leavestep trace on a command name that does not refer to a procedure will not result
                            in an error and is simply ignored.

                     When the trace triggers, depending on the operations being traced, a number of arguments are appended to commandPrefix so that the actual command is as follows:

                     For enter and enterstep operations:

                            commandPrefix command-string op

                     Command-string  gives the complete current command being executed (the traced command for a enter operation, an arbitrary command for a enterstep operation), including all arguments
                     in their fully expanded form.  Op indicates what operation is being performed on the command execution, and is one of enter or enterstep as defined above.  The trace  operation  can
                     be used to stop the command from executing, by deleting the command in question.  Of course when the command is subsequently executed, an “invalid command” error will occur.

                     For leave and leavestep operations:

                            commandPrefix command-string code result op

                     Command-string  gives the complete current command being executed (the traced command for a enter operation, an arbitrary command for a enterstep operation), including all arguments
                     in their fully expanded form.  Code gives the result code of that execution, and result the result string.  Op indicates what operation is being performed on the command  execution,
                     and is one of leave or leavestep as defined above.  Note that the creation of many enterstep or leavestep traces can lead to unintuitive results, since the invoked commands from one
                     trace can themselves lead to further command invocations for other traces.

                     CommandPrefix executes in the same context as the code that invoked the traced operation: thus the commandPrefix, if invoked from a procedure, will have access  to  the  same  local
                     variables as code in the procedure. This context may be different than the context in which the trace was created. If commandPrefix invokes a procedure (which it normally does) then
                     the procedure will have to use upvar or uplevel commands if it wishes to access the local variables of the code which invoked the trace operation.

                     While commandPrefix is executing during an execution trace, traces on name are temporarily disabled. This allows the commandPrefix to execute name in its body without  invoking  any
                     other traces again.  If an error occurs while executing the commandPrefix, then the command name as a whole will return that same error.

                     When  multiple  traces  are set on name, then for enter and enterstep operations, the traced commands are invoked in the reverse order of how the traces were originally created; and
                     for leave and leavestep operations, the traced commands are invoked in the original order of creation.

                     The behavior of execution traces is currently undefined for a command name imported into another namespace.

              trace add variable name ops commandPrefix
                     Arrange for commandPrefix to be executed whenever variable name is accessed in one of the ways given by the list ops.  Name may refer to a normal variable, an element of  an  array,
                     or to an array as a whole (i.e. name may be just the name of an array, with no parenthesized index).  If name refers to a whole array, then commandPrefix is invoked whenever any el‐
                     ement of the array is manipulated.  If the variable does not exist, it will be created but will not be given a value, so it will be visible to namespace which queries,  but  not  to
                     info exists queries.

                     Ops indicates which operations are of interest, and is a list of one or more of the following items:

                     array  Invoke  commandPrefix  whenever  the variable is accessed or modified via the array command, provided that name is not a scalar variable at the time that the array command is
                            invoked.  If name is a scalar variable, the access via the array command will not trigger the trace.

                     read   Invoke commandPrefix whenever the variable is read.

                     write  Invoke commandPrefix whenever the variable is written.

                     unset  Invoke commandPrefix whenever the variable is unset.  Variables can be unset explicitly with the unset command, or implicitly when procedures return (all of their local vari‐
                            ables are unset).  Variables are also unset when interpreters are deleted, but traces will not be invoked because there is no interpreter in which to execute them.

                     When the trace triggers, three arguments are appended to commandPrefix so that the actual command is as follows:

                            commandPrefix name1 name2 op

                     Name1  and name2 give the name(s) for the variable being accessed:  if the variable is a scalar then name1 gives the variable's name and name2 is an empty string; if the variable is
                     an array element then name1 gives the name of the array and name2 gives the index into the array; if an entire array is being deleted and the trace was registered on the overall ar‐
                     ray, rather than a single element, then name1 gives the array name and name2 is an empty string.  Name1 and name2 are not necessarily the same as the name used in the trace variable
                     command:  the upvar command allows a procedure to reference a variable under a different name.  Op indicates what operation is being performed on the variable, and is one  of  read,
                     write, or unset as defined above.

                     CommandPrefix  executes in the same context as the code that invoked the traced operation:  if the variable was accessed as part of a Tcl procedure, then commandPrefix will have ac‐
                     cess to the same local variables as code in the procedure.  This context may be different than the context in which the trace was  created.  If  commandPrefix  invokes  a  procedure
                     (which  it  normally  does) then the procedure will have to use upvar or uplevel if it wishes to access the traced variable.  Note also that name1 may not necessarily be the same as
                     the name used to set the trace on the variable; differences can occur if the access is made through a variable defined with the upvar command.

                     For read and write traces, commandPrefix can modify the variable to affect the result of the traced operation.  If commandPrefix modifies the value of a variable during  a  read  or
                     write  trace,  then  the new value will be returned as the result of the traced operation.  The return value from  commandPrefix is ignored except that if it returns an error of any
                     sort then the traced operation also returns an error with the same error message returned by the trace command (this mechanism can be used to implement read-only variables, for  ex‐
                     ample).   For write traces, commandPrefix is invoked after the variable's value has been changed; it can write a new value into the variable to override the original value specified
                     in the write operation.  To implement read-only variables, commandPrefix will have to restore the old value of the variable.

                     While commandPrefix is executing during a read or write trace, traces on the variable are temporarily disabled.  This means that reads and writes invoked by commandPrefix will occur
                     directly, without invoking commandPrefix (or any other traces) again.  However, if commandPrefix unsets the variable then unset traces will be invoked.

                     When  an  unset  trace  is invoked, the variable has already been deleted: it will appear to be undefined with no traces.  If an unset occurs because of a procedure return, then the
                     trace will be invoked in the variable context of the procedure being returned to:  the stack frame of the returning procedure will no longer exist.  Traces are not  disabled  during
                     unset traces, so if an unset trace command creates a new trace and accesses the variable, the trace will be invoked.  Any errors in unset traces are ignored.

                     If there are multiple traces on a variable they are invoked in order of creation, most-recent first.  If one trace returns an error, then no further traces are invoked for the vari‐
                     able.  If an array element has a trace set, and there is also a trace set on the array as a whole, the trace on the overall array is invoked before the one on the element.

                     Once created, the trace remains in effect either until the trace is removed with the trace remove variable command described below, until the variable is unset, or until the  inter‐
                     preter is deleted.  Unsetting an element of array will remove any traces on that element, but will not remove traces on the overall array.

                     This command returns an empty string.

       trace remove type name opList commandPrefix
              Where type is either command, execution or variable.

              trace remove command name opList commandPrefix
                     If  there  is a trace set on command name with the operations and command given by opList and commandPrefix, then the trace is removed, so that commandPrefix will never again be in‐
                     voked.  Returns an empty string.   If name does not exist, the command will throw an error.

              trace remove execution name opList commandPrefix
                     If there is a trace set on command name with the operations and command given by opList and commandPrefix, then the trace is removed, so that commandPrefix will never again  be  in‐
                     voked.  Returns an empty string.   If name does not exist, the command will throw an error.

              trace remove variable name opList commandPrefix
                     If  there is a trace set on variable name with the operations and command given by opList and commandPrefix, then the trace is removed, so that commandPrefix will never again be in‐
                     voked.  Returns an empty string.

       trace info type name
              Where type is either command, execution or variable.

              trace info command name
                     Returns a list containing one element for each trace currently set on command name. Each element of the list is itself a list containing two elements, which are the opList and  com‐
                     mandPrefix  associated with the trace.  If name does not have any traces set, then the result of the command will be an empty string.  If name does not exist, the command will throw
                     an error.

              trace info execution name
                     Returns a list containing one element for each trace currently set on command name. Each element of the list is itself a list containing two elements, which are the opList and  com‐
                     mandPrefix  associated with the trace.  If name does not have any traces set, then the result of the command will be an empty string.  If name does not exist, the command will throw
                     an error.

              trace info variable name
                     Returns a list containing one element for each trace currently set on variable name.  Each element of the list is itself a list containing two elements, which  are  the  opList  and
                     commandPrefix associated with the trace.  If name does not exist or does not have any traces set, then the result of the command will be an empty string.

       For backwards compatibility, three other subcommands are available:

              trace variable name ops command
                     This is equivalent to trace add variable name ops command.

              trace vdelete name ops command
                     This is equivalent to trace remove variable name ops command

              trace vinfo name
                     This is equivalent to trace info variable name

       These  subcommands  are  deprecated and will likely be removed in a future version of Tcl.  They use an older syntax in which array, read, write, unset are replaced by a, r, w and u respectively,
       and the ops argument is not a list, but simply a string concatenation of the operations, such as rwua.

EXAMPLES
       Print a message whenever either of the global variables foo and bar are updated, even if they have a different local name at the time (which can be done with the upvar command):

              proc tracer {varname args} {
                  upvar #0 $varname var
                  puts "$varname was updated to be \"$var\""
              }
              trace add variable foo write "tracer foo"
              trace add variable bar write "tracer bar"

       Ensure that the global variable foobar always contains the product of the global variables foo and bar:

              proc doMult args {
                  global foo bar foobar
                  set foobar [expr {$foo * $bar}]
              }
              trace add variable foo write doMult
              trace add variable bar write doMult

       Print a trace of what commands are executed during the processing of a Tcl procedure:

              proc x {} { y }
              proc y {} { z }
              proc z {} { puts hello }
              proc report args {puts [info level 0]}
              trace add execution x enterstep report
              x
                → report y enterstep
                  report z enterstep
                  report {puts hello} enterstep
                  hello

SEE ALSO
       set(n), unset(n)

KEYWORDS
       read, command, rename, variable, write, trace, unset

Tcl                                                                                                 8.4                                                                                           trace(n)
curs_trace(3X)                                                                                                                                                                              curs_trace(3X)

NAME
       curses_trace, trace, _tracef, _traceattr, _traceattr2, _tracecchar_t, _tracecchar_t2, _tracechar, _tracechtype, _tracechtype2, _nc_tracebits, _tracedump, _tracemouse - curses debugging routines

SYNOPSIS
       #include <curses.h>

       unsigned curses_trace(const unsigned param);

       void _tracef(const char *format, ...);

       char *_traceattr(attr_t attr);
       char *_traceattr2(int buffer, chtype ch);
       char *_tracecchar_t(const cchar_t *string);
       char *_tracecchar_t2(int buffer, const cchar_t *string);
       char *_tracechar(int ch);
       char *_tracechtype(chtype ch);
       char *_tracechtype2(int buffer, chtype ch);

       void _tracedump(const char *label, WINDOW *win);
       char *_nc_tracebits(void);
       char *_tracemouse(const MEVENT *event);

       /* deprecated */
       void trace(const unsigned int param);

DESCRIPTION
       The curses trace routines are used for debugging the ncurses libraries, as well as applications which use the ncurses libraries.  Some limitations apply:

       •   Aside from curses_trace, the other functions are normally available only with the debugging library e.g., libncurses_g.a.

           All of the trace functions may be compiled into any model (shared, static, profile) by defining the symbol TRACE.

       •   Additionally, the functions which use cchar_t are only available with the wide-character configuration of the libraries.

   Functions
       The principal parts of this interface are

       •   curses_trace, which selectively enables different tracing features, and

       •   _tracef, which writes formatted data to the trace file.

           The  other functions either return a pointer to a string-area (allocated by the corresponding function), or return no value (such as _tracedump, which implements the screen dump for TRACE_UP‐
           DATE).  The caller should not free these strings, since the allocation is reused on successive calls.  To work around the problem of a single string-area per function, some use a  buffer-num‐
           ber parameter, telling the library to allocate additional string-areas.

       The curses_trace function is always available, whether or not the other trace functions are available:

       •   If tracing is available, calling curses_trace with a nonzero parameter updates the trace mask, and returns the previous trace mask.

           When the trace mask is nonzero, ncurses creates the file “trace” in the current directory for output.  If the file already exists, no tracing is done.

       •   If tracing is not available, curses_trace returns zero (0).

   Trace Parameter
       The trace parameter is formed by OR'ing values from the list of TRACE_xxx definitions in <curses.h>.  These include:

       TRACE_DISABLE
            turn off tracing by passing a zero parameter.

            The library flushes the output file, but retains an open file-descriptor to the trace file so that it can resume tracing later if a nonzero parameter is passed to the curses_trace function.

       TRACE_TIMES
            trace user and system times of updates.

       TRACE_TPUTS
            trace tputs(3X) calls.

       TRACE_UPDATE
            trace update actions, old & new screens.

       TRACE_MOVE
            trace cursor movement and scrolling.

       TRACE_CHARPUT
            trace all character outputs.

       TRACE_ORDINARY
            trace all update actions.  The old and new screen contents are written to the trace file for each refresh.

       TRACE_CALLS
            trace all curses calls.  The parameters for each call are traced, as well as return values.

       TRACE_VIRTPUT
            trace virtual character puts, i.e., calls to addch.

       TRACE_IEVENT
            trace low-level input processing, including timeouts.

       TRACE_BITS
            trace state of TTY control bits.

       TRACE_ICALLS
            trace internal/nested calls.

       TRACE_CCALLS
            trace per-character calls.

       TRACE_DATABASE
            trace read/write of terminfo/termcap data.

       TRACE_ATTRS
            trace changes to video attributes and colors.

       TRACE_MAXIMUM
            maximum trace level, enables all of the separate trace features.

       Some tracing features are enabled whenever the curses_trace parameter is nonzero.  Some features overlap.  The specific names are used as a guideline.

   Initialization
       These functions check the NCURSES_TRACE environment variable, to set the tracing feature as if curses_trace was called:

           filter, initscr, new_prescr, newterm, nofilter, restartterm, ripoffline, setupterm, slk_init, tgetent, use_env, use_extended_names, use_tioctl

   Command-line Utilities
       The  command-line  utilities  such  as tic(1) provide a verbose option which extends the set of messages written using the curses_trace function.  Both of these (-v and curses_trace) use the same
       variable (_nc_tracing), which determines the messages which are written.

       Because the command-line utilities may call initialization functions such as setupterm, tgetent or use_extended_names, some of their debugging output may be directed to  the  trace  file  if  the
       NCURSES_TRACE environment variable is set:

       •   messages produced in the utility are written to the standard error.

       •   messages produced by the underlying library are written to trace.

       If ncurses is built without tracing, none of the latter are produced, and fewer diagnostics are provided by the command-line utilities.

RETURN VALUE
       Routines which return a value are designed to be used as parameters to the _tracef routine.

PORTABILITY
       These functions are not part of the XSI interface.  Some other curses implementations are known to have similar features, but they are not compatible with ncurses:

       •   SVr4  provided traceon and traceoff, to control whether debugging information was written to the “trace” file.  While the functions were always available, this feature was only enabled if DE‐
           BUG was defined when building the library.

           The SVr4 tracing feature is undocumented.

       •   PDCurses provides traceon and traceoff, which (like SVr4) are always available, and enable tracing to the “trace” file only when a debug-library is built.

           PDCurses has a short description of these functions, with a note that they are not present in X/Open Curses, ncurses or NetBSD.  It does not mention SVr4, but the functions'  inclusion  in  a
           header file section labeled “Quasi-standard” hints at the origin.

       •   NetBSD  does not provide functions for enabling/disabling traces.  It uses environment variables CURSES_TRACE_MASK and CURSES_TRACE_FILE to determine what is traced, and where the results are
           written.  This is available only when a debug-library is built.

           The NetBSD tracing feature is undocumented.

       A few ncurses functions are not provided when symbol versioning is used:

           _nc_tracebits, _tracedump, _tracemouse

       The original trace routine was deprecated because it often conflicted with application names.

SEE ALSO
       curses(3X).

                                                                                                                                                                                            curs_trace(3X)
