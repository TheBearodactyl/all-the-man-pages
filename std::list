std::list< _Tp, _Alloc >(3)Library Functions Manualstd::list< _Tp, _Alloc >(3)

NAME
       std::list< _Tp, _Alloc > - A standard container with linear time access
       to elements, and fixed time insertion/deletion at any point in the
       sequence.

SYNOPSIS
       #include <list>

       Inherits std::_List_base< _Tp, _Alloc >.

   Public Types
       typedef _Alloc allocator_type
       typedef _List_const_iterator< _Tp > const_iterator
       typedef _Tp_alloc_traits::const_pointer const_pointer
       typedef _Tp_alloc_traits::const_reference const_reference
       typedef std::reverse_iterator< const_iterator > const_reverse_iterator
       typedef ptrdiff_t difference_type
       typedef _List_iterator< _Tp > iterator
       typedef _Tp_alloc_traits::pointer pointer
       typedef _Tp_alloc_traits::reference reference
       typedef std::reverse_iterator< iterator > reverse_iterator
       typedef size_t size_type
       typedef _Tp value_type

   Public Member Functions
       list ()=default
           Creates a list with no elements.
       template<typename _InputIterator , typename  =
           std::_RequireInputIter<_InputIterator>> list (_InputIterator
           __first, _InputIterator __last, const allocator_type
           &__a=allocator_type())
           Builds a list from a range.
       list (const allocator_type &__a) noexcept
           Creates a list with no elements.
       list (const list &__x)
           List copy constructor.
       list (const list &__x, const __type_identity_t< allocator_type > &__a)
       list (initializer_list< value_type > __l, const allocator_type
           &__a=allocator_type())
           Builds a list from an initializer_list.
       list (list &&)=default
           List move constructor.
       list (list &&__x, const __type_identity_t< allocator_type > &__a)
           noexcept(_Node_alloc_traits::_S_always_equal())
       list (size_type __n, const allocator_type &__a=allocator_type())
           Creates a list with default constructed elements.
       list (size_type __n, const value_type &__value, const allocator_type
           &__a=allocator_type())
           Creates a list with copies of an exemplar element.
       ~list ()=default
       template<typename _InputIterator , typename  =
           std::_RequireInputIter<_InputIterator>> void assign (_InputIterator
           __first, _InputIterator __last)
           Assigns a range to a list.
       void assign (initializer_list< value_type > __l)
           Assigns an initializer_list to a list.
       void assign (size_type __n, const value_type &__val)
           Assigns a given value to a list.
       const_reference back () const noexcept
       reference back () noexcept
       const_iterator begin () const noexcept
       iterator begin () noexcept
       const_iterator cbegin () const noexcept
       const_iterator cend () const noexcept
       void clear () noexcept
       const_reverse_iterator crbegin () const noexcept
       const_reverse_iterator crend () const noexcept
       template<typename... _Args> iterator emplace (const_iterator
           __position, _Args &&... __args)
           Constructs object in list before specified iterator.
       template<typename... _Args> reference emplace_back (_Args &&... __args)
       template<typename... _Args> reference emplace_front (_Args &&...
           __args)
       bool empty () const noexcept
       const_iterator end () const noexcept
       iterator end () noexcept
       iterator erase (const_iterator __first, const_iterator __last) noexcept
           Remove a range of elements.
       iterator erase (const_iterator __position) noexcept
           Remove element at given position.
       const_reference front () const noexcept
       reference front () noexcept
       allocator_type get_allocator () const noexcept
           Get a copy of the memory allocation object.
       iterator insert (const_iterator __p, initializer_list< value_type >
           __l)
           Inserts the contents of an initializer_list into list before
           specified const_iterator.
       template<typename _InputIterator , typename  =
           std::_RequireInputIter<_InputIterator>> iterator insert
           (const_iterator __position, _InputIterator __first, _InputIterator
           __last)
           Inserts a range into the list.
       iterator insert (const_iterator __position, const value_type &__x)
           Inserts given value into list before specified iterator.
       iterator insert (const_iterator __position, size_type __n, const
           value_type &__x)
           Inserts a number of copies of given data into the list.
       iterator insert (const_iterator __position, value_type &&__x)
           Inserts given rvalue into list before specified iterator.
       size_type max_size () const noexcept
       void merge (list &&__x)
           Merge sorted lists.
       template<typename _StrictWeakOrdering > void merge (list &&__x,
           _StrictWeakOrdering __comp)
           Merge sorted lists according to comparison function.
       void merge (list &__x)
       template<typename _StrictWeakOrdering > void merge (list &__x,
           _StrictWeakOrdering __comp)
       list & operator= (const list &__x)
           List assignment operator.
       list & operator= (initializer_list< value_type > __l)
           List initializer list assignment operator.
       list & operator= (list &&__x)
           noexcept(_Node_alloc_traits::_S_nothrow_move())
           List move assignment operator.
       void pop_back () noexcept
           Removes last element.
       void pop_front () noexcept
           Removes first element.
       void push_back (const value_type &__x)
           Add data to the end of the list.
       void push_back (value_type &&__x)
       void push_front (const value_type &__x)
           Add data to the front of the list.
       void push_front (value_type &&__x)
       const_reverse_iterator rbegin () const noexcept
       reverse_iterator rbegin () noexcept
       __remove_return_type remove (const _Tp &__value)
           Remove all elements equal to value.
       template<typename _Predicate > __remove_return_type remove_if
           (_Predicate)
           Remove all elements satisfying a predicate.
       const_reverse_iterator rend () const noexcept
       reverse_iterator rend () noexcept
       void resize (size_type __new_size)
           Resizes the list to the specified number of elements.
       void resize (size_type __new_size, const value_type &__x)
           Resizes the list to the specified number of elements.
       void reverse () noexcept
           Reverse the elements in list.
       size_type size () const noexcept
       void sort ()
           Sort the elements.
       template<typename _StrictWeakOrdering > void sort (_StrictWeakOrdering)
           Sort the elements according to comparison function.
       void splice (const_iterator __position, list &&__x) noexcept
           Insert contents of another list.
       void splice (const_iterator __position, list &&__x, const_iterator
           __first, const_iterator __last) noexcept
           Insert range from another list.
       void splice (const_iterator __position, list &&__x, const_iterator __i)
           noexcept
           Insert element from another list.
       void splice (const_iterator __position, list &__x) noexcept
       void splice (const_iterator __position, list &__x, const_iterator
           __first, const_iterator __last) noexcept
           Insert range from another list.
       void splice (const_iterator __position, list &__x, const_iterator __i)
           noexcept
           Insert element from another list.
       void swap (list &__x) noexcept
           Swaps data with another list.
       __remove_return_type unique ()
           Remove consecutive duplicate elements.
       template<typename _BinaryPredicate > __remove_return_type unique
           (_BinaryPredicate)
           Remove consecutive elements satisfying a predicate.

   Protected Types
       typedef _List_node< _Tp > _Node

   Protected Member Functions
       template<typename _InputIterator > void _M_assign_dispatch
           (_InputIterator __first, _InputIterator __last, __false_type)
       template<typename _Integer > void _M_assign_dispatch (_Integer __n,
           _Integer __val, __true_type)
       void _M_check_equal_allocators (list &__x) noexcept
       void _M_clear () noexcept
       template<typename... _Args> _Node * _M_create_node (_Args &&... __args)
       void _M_dec_size (size_t)
       void _M_default_append (size_type __n)
       void _M_default_initialize (size_type __n)
       size_t _M_distance (const void *, const void *) const
       void _M_erase (iterator __position) noexcept
       void _M_fill_assign (size_type __n, const value_type &__val)
       void _M_fill_initialize (size_type __n, const value_type &__x)
       _Node_alloc_traits::pointer _M_get_node ()
       const _Node_alloc_type & _M_get_Node_allocator () const noexcept
       _Node_alloc_type & _M_get_Node_allocator () noexcept
       size_t _M_get_size () const
       void _M_inc_size (size_t)
       void _M_init () noexcept
       template<typename _InputIterator > void _M_initialize_dispatch
           (_InputIterator __first, _InputIterator __last, __false_type)
       template<typename _Integer > void _M_initialize_dispatch (_Integer __n,
           _Integer __x, __true_type)
       template<typename... _Args> void _M_insert (iterator __position, _Args
           &&... __args)
       void _M_move_assign (list &&__x, false_type)
       void _M_move_assign (list &&__x, true_type) noexcept
       void _M_move_nodes (_List_base &&__x)
       size_t _M_node_count () const
       void _M_put_node (typename _Node_alloc_traits::pointer __p) noexcept
       const_iterator _M_resize_pos (size_type &__new_size) const
       void _M_set_size (size_t)
       void _M_transfer (iterator __position, iterator __first, iterator
           __last)

   Static Protected Member Functions
       static size_t _S_distance (const __detail::_List_node_base *__first,
           const __detail::_List_node_base *__last)
       static size_t _S_distance (const_iterator, const_iterator)

   Protected Attributes
       _List_impl _M_impl

Detailed Description
   template<typename _Tp, typename _Alloc = std::allocator<_Tp>>
       class std::list< _Tp, _Alloc >"A standard container with linear time
       access to elements, and fixed time insertion/deletion at any point in
       the sequence.

       Template Parameters
           _Tp Type of element.
           _Alloc Allocator type, defaults to allocator<_Tp>.

       Meets the requirements of a container, a reversible container, and a
       sequence, including the optional sequence requirements with the
       exception of at and operator[].

       This is a doubly linked list. Traversal up and down the list requires
       linear time, but adding and removing elements (or nodes) is done in
       constant time, regardless of where the change takes place. Unlike
       std::vector and std::deque, random-access iterators are not provided,
       so subscripting ( [] ) access is not allowed. For algorithms which only
       need sequential access, this lack makes no difference.

       Also unlike the other standard containers, std::list provides
       specialized algorithms unique to linked lists, such as splicing,
       sorting, and in-place reversal.

       A couple points on memory allocation for list<Tp>:

       First, we never actually allocate a Tp, we allocate List_node<Tp>'s and
       trust [20.1.5]/4 to DTRT. This is to ensure that after elements from
       list<X,Alloc1> are spliced into list<X,Alloc2>, destroying the memory
       of the second list is a valid operation, i.e., Alloc1 giveth and Alloc2
       taketh away.

       Second, a list conceptually represented as

       A <---> B <---> C <---> D

        is actually circular; a link exists between A and D. The list class
       holds (as its only data member) a private list::iterator pointing to D,
       not to A! To get to the head of the list, we start at the tail and move
       forward by one. When this member iterator's next/previous pointers
       refer to itself, the list is empty.

       Definition at line 632 of file list.

Member Typedef Documentation
   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _List_node<_Tp> std::list< _Tp, _Alloc >::_Node [protected]
       Definition at line 675 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Alloc std::list< _Tp, _Alloc >::allocator_type
       Definition at line 670 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _List_const_iterator<_Tp> std::list< _Tp, _Alloc >::const_iterator
       Definition at line 665 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Tp_alloc_traits::const_pointer std::list< _Tp, _Alloc >::const_pointer
       Definition at line 661 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Tp_alloc_traits::const_reference std::list< _Tp, _Alloc
       >::const_reference
       Definition at line 663 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       std::reverse_iterator<const_iterator> std::list< _Tp, _Alloc
       >::const_reverse_iterator
       Definition at line 666 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       ptrdiff_t std::list< _Tp, _Alloc >::difference_type
       Definition at line 669 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _List_iterator<_Tp> std::list< _Tp, _Alloc >::iterator
       Definition at line 664 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Tp_alloc_traits::pointer std::list< _Tp, _Alloc >::pointer
       Definition at line 660 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Tp_alloc_traits::reference std::list< _Tp, _Alloc >::reference
       Definition at line 662 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       std::reverse_iterator<iterator> std::list< _Tp, _Alloc
       >::reverse_iterator
       Definition at line 667 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       size_t std::list< _Tp, _Alloc >::size_type
       Definition at line 668 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef _Tp
       std::list< _Tp, _Alloc >::value_type
       Definition at line 659 of file list.

Constructor & Destructor Documentation
   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::list<
       _Tp, _Alloc >::list () [default]
       Creates a list with no elements.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::list<
       _Tp, _Alloc >::list (const allocator_type & __a) [inline],  [explicit],
       [noexcept]
       Creates a list with no elements.

       Parameters
           __a An allocator object.

       Definition at line 759 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::list<
       _Tp, _Alloc >::list (size_type __n, const allocator_type & __a =
       allocator_type()) [inline],  [explicit]
       Creates a list with default constructed elements.

       Parameters
           __n The number of elements to initially create.
           __a An allocator object.

       This constructor fills the list with __n default constructed elements.

       Definition at line 772 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::list<
       _Tp, _Alloc >::list (size_type __n, const value_type & __value, const
       allocator_type & __a = allocator_type()) [inline]
       Creates a list with copies of an exemplar element.

       Parameters
           __n The number of elements to initially create.
           __value An element to copy.
           __a An allocator object.

       This constructor fills the list with __n copies of __value.

       Definition at line 784 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::list<
       _Tp, _Alloc >::list (const list< _Tp, _Alloc > & __x) [inline]
       List copy constructor.

       Parameters
           __x A list of identical element and allocator types.

       The newly-created list uses a copy of the allocation object used by __x
       (unless the allocator traits dictate a different object).

       Definition at line 811 of file list.

       References std::list< _Tp, _Alloc >::begin(), and std::list< _Tp,
       _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::list<
       _Tp, _Alloc >::list (list< _Tp, _Alloc > &&) [default]
       List move constructor. The newly-created list contains the exact
       contents of the moved instance. The contents of the moved instance are
       a valid, but unspecified list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::list<
       _Tp, _Alloc >::list (initializer_list< value_type > __l, const
       allocator_type & __a = allocator_type()) [inline]
       Builds a list from an initializer_list.

       Parameters
           __l An initializer_list of value_type.
           __a An allocator object.

       Create a list consisting of copies of the elements in the
       initializer_list __l. This is linear in __l.size().

       Definition at line 834 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::list<
       _Tp, _Alloc >::list (const list< _Tp, _Alloc > & __x, const
       __type_identity_t< allocator_type > & __a) [inline]
       Definition at line 839 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::list<
       _Tp, _Alloc >::list (list< _Tp, _Alloc > && __x, const
       __type_identity_t< allocator_type > & __a) [inline],  [noexcept]
       Definition at line 859 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> std::list< _Tp, _Alloc >::list
       (_InputIterator __first, _InputIterator __last, const allocator_type &
       __a = allocator_type()) [inline]
       Builds a list from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.
           __a An allocator object.

       Create a list consisting of copies of the elements from
       [__first,__last). This is linear in N (where N is
       distance(__first,__last)).

       Definition at line 879 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::list<
       _Tp, _Alloc >::~list () [default]
       No explicit dtor needed as the _Base dtor takes care of things. The
       _Base dtor only erases the elements, and note that if the elements
       themselves are pointers, the pointed-to memory is not touched in any
       way. Managing the pointer is the user's responsibility.

Member Function Documentation
   template<typename _Tp , typename _Alloc > template<typename _InputIterator
       > void list::_M_assign_dispatch (_InputIterator __first, _InputIterator
       __last, __false_type) [protected]
       Definition at line 308 of file list.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _Integer > void std::list< _Tp, _Alloc
       >::_M_assign_dispatch (_Integer __n, _Integer __val, __true_type)
       [inline],  [protected]
       Definition at line 1971 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::_M_check_equal_allocators (list< _Tp, _Alloc
       > & __x) [inline],  [protected],  [noexcept]
       Definition at line 2029 of file list.

   template<typename _Tp , typename _Alloc > void std::_List_base< _Tp, _Alloc
       >::_M_clear [noexcept],  [inherited]
       Definition at line 66 of file list.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename... _Args> _Node * std::list< _Tp, _Alloc
       >::_M_create_node (_Args &&... __args) [inline],  [protected]
       Parameters
           __args An instance of user data.

       Allocates space for a new node and constructs a copy of __args in it.

       Definition at line 708 of file list.

   template<typename _Tp , typename _Alloc > void std::_List_base< _Tp, _Alloc
       >::_M_dec_size (size_t) [inline],  [protected],  [inherited]
       Definition at line 502 of file list.

   template<typename _Tp , typename _Alloc > void list::_M_default_append
       (size_type __n) [protected]
       Definition at line 211 of file list.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::_M_default_initialize (size_type __n)
       [inline],  [protected]
       Definition at line 1952 of file list.

   template<typename _Tp , typename _Alloc > size_t std::_List_base< _Tp,
       _Alloc >::_M_distance (const void *, const void *) const [inline],
       [protected],  [inherited]
       Definition at line 505 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::_M_erase (iterator __position) [inline],
       [protected],  [noexcept]
       Definition at line 2013 of file list.

   template<typename _Tp , typename _Alloc > void list::_M_fill_assign
       (size_type __n, const value_type & __val) [protected]
       Definition at line 293 of file list.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::_M_fill_initialize (size_type __n, const
       value_type & __x) [inline],  [protected]
       Definition at line 1943 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       _Node_alloc_traits::pointer std::_List_base< _Tp, _Alloc >::_M_get_node
       () [inline],  [protected]
       Definition at line 517 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> const
       _Node_alloc_type & std::_List_base< _Tp, _Alloc
       >::_M_get_Node_allocator () const [inline],  [protected],  [noexcept]
       Definition at line 532 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       _Node_alloc_type & std::_List_base< _Tp, _Alloc
       >::_M_get_Node_allocator () [inline],  [protected],  [noexcept]
       Definition at line 528 of file list.

   template<typename _Tp , typename _Alloc > size_t std::_List_base< _Tp,
       _Alloc >::_M_get_size () const [inline],  [protected],  [inherited]
       Definition at line 499 of file list.

   template<typename _Tp , typename _Alloc > void std::_List_base< _Tp, _Alloc
       >::_M_inc_size (size_t) [inline],  [protected],  [inherited]
       Definition at line 501 of file list.

   template<typename _Tp , typename _Alloc > void std::_List_base< _Tp, _Alloc
       >::_M_init () [inline],  [noexcept],  [inherited]
       Definition at line 581 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _InputIterator > void std::list< _Tp, _Alloc
       >::_M_initialize_dispatch (_InputIterator __first, _InputIterator
       __last, __false_type) [inline],  [protected]
       Definition at line 1929 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _Integer > void std::list< _Tp, _Alloc
       >::_M_initialize_dispatch (_Integer __n, _Integer __x, __true_type)
       [inline],  [protected]
       Definition at line 1923 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename... _Args> void std::list< _Tp, _Alloc >::_M_insert
       (iterator __position, _Args &&... __args) [inline],  [protected]
       Definition at line 2003 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::_M_move_assign (list< _Tp, _Alloc > && __x,
       false_type) [inline],  [protected]
       Definition at line 2051 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::_M_move_assign (list< _Tp, _Alloc > && __x,
       true_type) [inline],  [protected],  [noexcept]
       Definition at line 2042 of file list.

   template<typename _Tp , typename _Alloc > void std::_List_base< _Tp, _Alloc
       >::_M_move_nodes (_List_base< _Tp, _Alloc > && __x) [inline],
       [inherited]
       Definition at line 569 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> size_t
       std::list< _Tp, _Alloc >::_M_node_count () const [inline],  [protected]
       Definition at line 737 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::_List_base< _Tp, _Alloc >::_M_put_node (typename
       _Node_alloc_traits::pointer __p) [inline],  [protected],  [noexcept]
       Definition at line 521 of file list.

   template<typename _Tp , typename _Alloc > list< _Tp, _Alloc
       >::const_iterator list::_M_resize_pos (size_type & __new_size) const
       [protected]
       Definition at line 175 of file list.tcc.

   template<typename _Tp , typename _Alloc > void std::_List_base< _Tp, _Alloc
       >::_M_set_size (size_t) [inline],  [protected],  [inherited]
       Definition at line 500 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::_M_transfer (iterator __position, iterator
       __first, iterator __last) [inline],  [protected]
       Definition at line 1988 of file list.

   template<typename _Tp , typename _Alloc > static size_t std::_List_base<
       _Tp, _Alloc >::_S_distance (const __detail::_List_node_base * __first,
       const __detail::_List_node_base * __last) [inline],  [static],
       [protected],  [inherited]
       Definition at line 437 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> static
       size_t std::list< _Tp, _Alloc >::_S_distance (const_iterator,
       const_iterator) [inline],  [static],  [protected]
       Definition at line 732 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> void std::list< _Tp, _Alloc
       >::assign (_InputIterator __first, _InputIterator __last) [inline]
       Assigns a range to a list.

       Parameters
           __first An input iterator.
           __last An input iterator.

       This function fills a list with copies of the elements in the range
       [__first,__last).

       Note that the assignment completely changes the list and that the
       resulting list's size is the same as the number of elements assigned.

       Definition at line 984 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::assign (initializer_list< value_type > __l)
       [inline]
       Assigns an initializer_list to a list.

       Parameters
           __l An initializer_list of value_type.

       Replace the contents of the list with copies of the elements in the
       initializer_list __l. This is linear in __l.size().

       Definition at line 1006 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::assign (size_type __n, const value_type &
       __val) [inline]
       Assigns a given value to a list.

       Parameters
           __n Number of elements to be assigned.
           __val Value to be assigned.

       This function fills a list with __n copies of the given value. Note
       that the assignment completely changes the list and that the resulting
       list's size is the same as the number of elements assigned.

       Definition at line 965 of file list.

       Referenced by std::list< _Tp, _Alloc >::operator=().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reference std::list< _Tp, _Alloc >::back () const [inline],
       [noexcept]
       Returns a read-only (constant) reference to the data at the last
       element of the list.

       Definition at line 1236 of file list.

       References std::list< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> reference
       std::list< _Tp, _Alloc >::back () [inline],  [noexcept]
       Returns a read/write reference to the data at the last element of the
       list.

       Definition at line 1223 of file list.

       References std::list< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_iterator std::list< _Tp, _Alloc >::begin () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the list. Iteration is done in ordinary element order.

       Definition at line 1032 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::list< _Tp, _Alloc >::begin () [inline],  [noexcept]
       Returns a read/write iterator that points to the first element in the
       list. Iteration is done in ordinary element order.

       Definition at line 1022 of file list.

       Referenced by std::list< _Tp, _Alloc >::list(), std::list< _Tp, _Alloc
       >::crend(), std::list< _Tp, _Alloc >::front(), std::list< _Tp, _Alloc
       >::insert(), std::list< _Tp, _Alloc >::merge(), std::operator<(),
       std::list< _Tp, _Alloc >::operator=(), std::operator==(), std::list<
       _Tp, _Alloc >::pop_front(), std::list< _Tp, _Alloc >::push_front(),
       std::list< _Tp, _Alloc >::remove(), std::list< _Tp, _Alloc
       >::remove_if(), std::list< _Tp, _Alloc >::rend(), std::list< _Tp,
       _Alloc >::splice(), and std::list< _Tp, _Alloc >::unique().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_iterator std::list< _Tp, _Alloc >::cbegin () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the list. Iteration is done in ordinary element order.

       Definition at line 1103 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_iterator std::list< _Tp, _Alloc >::cend () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the list. Iteration is done in ordinary element order.

       Definition at line 1113 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::clear () [inline],  [noexcept]
       Erases all the elements. Note that this function only erases the
       elements, and that if the elements themselves are pointers, the
       pointed-to memory is not touched in any way. Managing the pointer is
       the user's responsibility.

       Definition at line 1592 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reverse_iterator std::list< _Tp, _Alloc >::crbegin () const
       [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       element in the list. Iteration is done in reverse element order.

       Definition at line 1123 of file list.

       References std::list< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reverse_iterator std::list< _Tp, _Alloc >::crend () const
       [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first element in the list. Iteration is done in reverse
       element order.

       Definition at line 1133 of file list.

       References std::list< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc > template<typename... _Args> list<
       _Tp, _Alloc >::iterator list::emplace (const_iterator __position, _Args
       &&... __args)
       Constructs object in list before specified iterator.

       Parameters
           __position A const_iterator into the list.
           __args Arguments.

       Returns
           An iterator that points to the inserted data.

       This function will insert an object of type T constructed with
       T(std::forward<Args>(args)...) before the specified location. Due to
       the nature of a list this operation can be done in constant time, and
       does not invalidate iterators and references.

       Definition at line 89 of file list.tcc.

       Referenced by std::list< _Tp, _Alloc >::insert().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename... _Args> reference std::list< _Tp, _Alloc
       >::emplace_back (_Args &&... __args) [inline]
       Definition at line 1319 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename... _Args> reference std::list< _Tp, _Alloc
       >::emplace_front (_Args &&... __args) [inline]
       Definition at line 1269 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> bool
       std::list< _Tp, _Alloc >::empty () const [inline],  [noexcept]
       Returns true if the list is empty. (Thus begin() would equal end().)

       Definition at line 1143 of file list.

       Referenced by std::list< _Tp, _Alloc >::insert(), and std::list< _Tp,
       _Alloc >::splice().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_iterator std::list< _Tp, _Alloc >::end () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the list. Iteration is done in ordinary element order.

       Definition at line 1052 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::list< _Tp, _Alloc >::end () [inline],  [noexcept]
       Returns a read/write iterator that points one past the last element in
       the list. Iteration is done in ordinary element order.

       Definition at line 1042 of file list.

       Referenced by std::list< _Tp, _Alloc >::list(), std::list< _Tp, _Alloc
       >::back(), std::list< _Tp, _Alloc >::crbegin(), std::list< _Tp, _Alloc
       >::merge(), std::operator<(), std::list< _Tp, _Alloc >::operator=(),
       std::operator==(), std::list< _Tp, _Alloc >::push_back(), std::list<
       _Tp, _Alloc >::rbegin(), and std::list< _Tp, _Alloc >::splice().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::list< _Tp, _Alloc >::erase (const_iterator __first, const_iterator
       __last) [inline],  [noexcept]
       Remove a range of elements.

       Parameters
           __first Iterator pointing to the first element to be erased.
           __last Iterator pointing to one past the last element to be erased.

       Returns
           An iterator pointing to the element pointed to by last prior to
           erasing (or end()).

       This function will erase the elements in the range [first,last) and
       shorten the list accordingly.

       This operation is linear time in the size of the range and only
       invalidates iterators/references to the element being removed. The user
       is also cautioned that this function only erases the elements, and that
       if the elements themselves are pointers, the pointed-to memory is not
       touched in any way. Managing the pointer is the user's responsibility.

       Definition at line 1550 of file list.

       References std::list< _Tp, _Alloc >::erase().

   template<typename _Tp , typename _Alloc > list< _Tp, _Alloc >::iterator
       list::erase (const_iterator __position) [noexcept]
       Remove element at given position.

       Parameters
           __position Iterator pointing to element to be erased.

       Returns
           An iterator pointing to the next element (or end()).

       This function will erase the element at the given position and thus
       shorten the list by one.

       Due to the nature of a list this operation can be done in constant
       time, and only invalidates iterators/references to the element being
       removed. The user is also cautioned that this function only erases the
       element, and that if the element is itself a pointer, the pointed-to
       memory is not touched in any way. Managing the pointer is the user's
       responsibility.

       Definition at line 150 of file list.tcc.

       Referenced by std::list< _Tp, _Alloc >::erase().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reference std::list< _Tp, _Alloc >::front () const [inline],
       [noexcept]
       Returns a read-only (constant) reference to the data at the first
       element of the list.

       Definition at line 1214 of file list.

       References std::list< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> reference
       std::list< _Tp, _Alloc >::front () [inline],  [noexcept]
       Returns a read/write reference to the data at the first element of the
       list.

       Definition at line 1205 of file list.

       References std::list< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       allocator_type std::list< _Tp, _Alloc >::get_allocator () const
       [inline],  [noexcept]
       Get a copy of the memory allocation object.

       Definition at line 1012 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::list< _Tp, _Alloc >::insert (const_iterator __p, initializer_list<
       value_type > __l) [inline]
       Inserts the contents of an initializer_list into list before specified
       const_iterator.

       Parameters
           __p A const_iterator into the list.
           __l An initializer_list of value_type.

       Returns
           An iterator pointing to the first element inserted (or __position).

       This function will insert copies of the data in the initializer_list l
       into the list before the location specified by p.

       This operation is linear in the number of elements inserted and does
       not invalidate iterators and references.

       Definition at line 1421 of file list.

       References std::list< _Tp, _Alloc >::insert().

   template<typename _Tp , typename _Alloc > template<typename _InputIterator
       , typename > list< _Tp, _Alloc >::iterator list::insert (const_iterator
       __position, _InputIterator __first, _InputIterator __last)
       Inserts a range into the list.

       Parameters
           __position A const_iterator into the list.
           __first An input iterator.
           __last An input iterator.

       Returns
           An iterator pointing to the first element inserted (or __position).

       This function will insert copies of the data in the range [first,last)
       into the list before the location specified by position.

       This operation is linear in the number of elements inserted and does
       not invalidate iterators and references.

       Definition at line 133 of file list.tcc.

       References std::list< _Tp, _Alloc >::begin(), and std::list< _Tp,
       _Alloc >::empty().

   template<typename _Tp , typename _Alloc > list< _Tp, _Alloc >::iterator
       list::insert (const_iterator __position, const value_type & __x)
       Inserts given value into list before specified iterator.

       Parameters
           __position A const_iterator into the list.
           __x Data to be inserted.

       Returns
           An iterator that points to the inserted data.

       This function will insert a copy of the given value before the
       specified location. Due to the nature of a list this operation can be
       done in constant time, and does not invalidate iterators and
       references.

       Definition at line 101 of file list.tcc.

       Referenced by std::list< _Tp, _Alloc >::insert().

   template<typename _Tp , typename _Alloc > list< _Tp, _Alloc >::iterator
       list::insert (const_iterator __position, size_type __n, const
       value_type & __x)
       Inserts a number of copies of given data into the list.

       Parameters
           __position A const_iterator into the list.
           __n Number of elements to be inserted.
           __x Data to be inserted.

       Returns
           An iterator pointing to the first element inserted (or __position).

       This function will insert a specified number of copies of the given
       data before the location specified by position.

       This operation is linear in the number of elements inserted and does
       not invalidate iterators and references.

       Definition at line 117 of file list.tcc.

       References std::list< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::list< _Tp, _Alloc >::insert (const_iterator __position, value_type
       && __x) [inline]
       Inserts given rvalue into list before specified iterator.

       Parameters
           __position A const_iterator into the list.
           __x Data to be inserted.

       Returns
           An iterator that points to the inserted data.

       This function will insert a copy of the given rvalue before the
       specified location. Due to the nature of a list this operation can be
       done in constant time, and does not invalidate iterators and
       references.

       Definition at line 1402 of file list.

       References std::list< _Tp, _Alloc >::emplace(), and std::move().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> size_type
       std::list< _Tp, _Alloc >::max_size () const [inline],  [noexcept]
       Returns the size() of the largest possible list.

       Definition at line 1155 of file list.

       References __gnu_cxx::__alloc_traits< _Alloc, typename >::max_size().

   template<typename _Tp , typename _Alloc > void list::merge (list< _Tp,
       _Alloc > && __x)
       Merge sorted lists.

       Parameters
           __x Sorted list to merge.

       Assumes that both __x and this list are sorted according to
       operator<(). Merges elements of __x into this list in sorted order,
       leaving __x empty when complete. Elements in this list precede elements
       in __x that are equal.

       Definition at line 402 of file list.tcc.

       References std::__addressof(), std::list< _Tp, _Alloc >::begin(),
       std::begin(), std::list< _Tp, _Alloc >::end(), and std::end().

   template<typename _Tp , typename _Alloc > template<typename
       _StrictWeakOrdering > void list::merge (list< _Tp, _Alloc > && __x,
       _StrictWeakOrdering __comp)
       Merge sorted lists according to comparison function.

       Template Parameters
           _StrictWeakOrdering Comparison function defining sort order.

       Parameters
           __x Sorted list to merge.
           __comp Comparison functor.

       Assumes that both __x and this list are sorted according to
       StrictWeakOrdering. Merges elements of __x into this list in sorted
       order, leaving __x empty when complete. Elements in this list precede
       elements in __x that are equivalent according to StrictWeakOrdering().

       Definition at line 442 of file list.tcc.

       References std::__addressof(), std::list< _Tp, _Alloc >::begin(),
       std::begin(), std::list< _Tp, _Alloc >::end(), and std::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::merge (list< _Tp, _Alloc > & __x) [inline]
       Definition at line 1851 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _StrictWeakOrdering > void std::list< _Tp, _Alloc
       >::merge (list< _Tp, _Alloc > & __x, _StrictWeakOrdering __comp)
       [inline]
       Definition at line 1878 of file list.

   template<typename _Tp , typename _Alloc > list< _Tp, _Alloc > &
       list::operator= (const list< _Tp, _Alloc > & __x)
       List assignment operator.

       Parameters
           __x A list of identical element and allocator types.

       All the elements of __x are copied.

       Whether the allocator is copied depends on the allocator traits.

       Definition at line 267 of file list.tcc.

       References std::__addressof(), std::list< _Tp, _Alloc >::begin(), and
       std::list< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> list &
       std::list< _Tp, _Alloc >::operator= (initializer_list< value_type >
       __l) [inline]
       List initializer list assignment operator.

       Parameters
           __l An initializer_list of value_type.

       Replace the contents of the list with copies of the elements in the
       initializer_list __l. This is linear in l.size().

       Definition at line 947 of file list.

       References std::list< _Tp, _Alloc >::assign().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> list &
       std::list< _Tp, _Alloc >::operator= (list< _Tp, _Alloc > && __x)
       [inline],  [noexcept]
       List move assignment operator.

       Parameters
           __x A list of identical element and allocator types.

       The contents of __x are moved into this list (without copying).

       Afterwards __x is a valid, but unspecified list

       Whether the allocator is moved depends on the allocator traits.

       Definition at line 929 of file list.

       References std::move().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::pop_back () [inline],  [noexcept]
       Removes last element. This is a typical stack operation. It shrinks the
       list by one. Due to the nature of a list this operation can be done in
       constant time, and only invalidates iterators/references to the element
       being removed.

       Note that no data is returned, and if the last element's data is
       needed, it should be retrieved before pop_back() is called.

       Definition at line 1340 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::pop_front () [inline],  [noexcept]
       Removes first element. This is a typical stack operation. It shrinks
       the list by one. Due to the nature of a list this operation can be done
       in constant time, and only invalidates iterators/references to the
       element being removed.

       Note that no data is returned, and if the first element's data is
       needed, it should be retrieved before pop_front() is called.

       Definition at line 1291 of file list.

       References std::list< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::push_back (const value_type & __x) [inline]
       Add data to the end of the list.

       Parameters
           __x Data to be added.

       This is a typical stack operation. The function creates an element at
       the end of the list and assigns the given data to it. Due to the nature
       of a list this operation can be done in constant time, and does not
       invalidate iterators and references.

       Definition at line 1305 of file list.

       References std::list< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::push_back (value_type && __x) [inline]
       Definition at line 1310 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::push_front (const value_type & __x) [inline]
       Add data to the front of the list.

       Parameters
           __x Data to be added.

       This is a typical stack operation. The function creates an element at
       the front of the list and assigns the given data to it. Due to the
       nature of a list this operation can be done in constant time, and does
       not invalidate iterators and references.

       Definition at line 1255 of file list.

       References std::list< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::push_front (value_type && __x) [inline]
       Definition at line 1260 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reverse_iterator std::list< _Tp, _Alloc >::rbegin () const
       [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       element in the list. Iteration is done in reverse element order.

       Definition at line 1072 of file list.

       References std::list< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       reverse_iterator std::list< _Tp, _Alloc >::rbegin () [inline],
       [noexcept]
       Returns a read/write reverse iterator that points to the last element
       in the list. Iteration is done in reverse element order.

       Definition at line 1062 of file list.

       References std::list< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc > list< _Tp, _Alloc
       >::__remove_return_type list::remove (const _Tp & __value)
       Remove all elements equal to value.

       Parameters
           __value The value to remove.

       Removes every element in the list equal to value. Remaining elements
       stay in list order. Note that this function only erases the elements,
       and that if the elements themselves are pointers, the pointed-to memory
       is not touched in any way. Managing the pointer is the user's
       responsibility.

       Definition at line 331 of file list.tcc.

       References std::list< _Tp, _Alloc >::begin(), std::begin(), std::end(),
       std::list< _Tp, _Alloc >::size(), and std::list< _Tp, _Alloc
       >::splice().

   template<typename _Tp , typename _Alloc > template<typename _Predicate >
       list< _Tp, _Alloc >::__remove_return_type list::remove_if (_Predicate
       __pred)
       Remove all elements satisfying a predicate.

       Template Parameters
           _Predicate Unary predicate function or object.

       Removes every element in the list for which the predicate returns true.
       Remaining elements stay in list order. Note that this function only
       erases the elements, and that if the elements themselves are pointers,
       the pointed-to memory is not touched in any way. Managing the pointer
       is the user's responsibility.

       Definition at line 542 of file list.tcc.

       References std::list< _Tp, _Alloc >::begin(), std::begin(), std::end(),
       std::list< _Tp, _Alloc >::size(), and std::list< _Tp, _Alloc
       >::splice().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reverse_iterator std::list< _Tp, _Alloc >::rend () const
       [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first element in the list. Iteration is done in reverse
       element order.

       Definition at line 1092 of file list.

       References std::list< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       reverse_iterator std::list< _Tp, _Alloc >::rend () [inline],
       [noexcept]
       Returns a read/write reverse iterator that points to one before the
       first element in the list. Iteration is done in reverse element order.

       Definition at line 1082 of file list.

       References std::list< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc > void list::resize (size_type
       __new_size)
       Resizes the list to the specified number of elements.

       Parameters
           __new_size Number of elements the list should contain.

       This function will resize the list to the specified number of elements.
       If the number is smaller than the list's current size the list is
       truncated, otherwise default constructed elements are appended.

       Definition at line 230 of file list.tcc.

       References std::end().

   template<typename _Tp , typename _Alloc > void list::resize (size_type
       __new_size, const value_type & __x)
       Resizes the list to the specified number of elements.

       Parameters
           __new_size Number of elements the list should contain.
           __x Data with which new elements should be populated.

       This function will resize the list to the specified number of elements.
       If the number is smaller than the list's current size the list is
       truncated, otherwise the list is extended and new elements are
       populated with given data.

       Definition at line 242 of file list.tcc.

       References std::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::reverse () [inline],  [noexcept]
       Reverse the elements in list. Reverse the order of elements in the list
       in linear time.

       Definition at line 1892 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> size_type
       std::list< _Tp, _Alloc >::size () const [inline],  [noexcept]
       Returns the number of elements in the list.

       Definition at line 1149 of file list.

       Referenced by std::operator==(), std::list< _Tp, _Alloc >::remove(),
       std::list< _Tp, _Alloc >::remove_if(), and std::list< _Tp, _Alloc
       >::unique().

   template<typename _Tp , typename _Alloc > void list::sort
       Sort the elements. Sorts the elements of this list in NlogN time.
       Equivalent elements remain in list order.

       Definition at line 481 of file list.tcc.

       References std::begin(), std::empty(), and std::end().

   template<typename _Tp , typename _Alloc > template<typename
       _StrictWeakOrdering > void list::sort (_StrictWeakOrdering __comp)
       Sort the elements according to comparison function. Sorts the elements
       of this list in NlogN time. Equivalent elements remain in list order.

       Definition at line 613 of file list.tcc.

       References std::begin(), std::empty(), and std::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::splice (const_iterator __position, list< _Tp,
       _Alloc > && __x) [inline],  [noexcept]
       Insert contents of another list.

       Parameters
           __position Iterator referencing the element to insert before.
           __x Source list.

       The elements of __x are inserted in constant time in front of the
       element referenced by __position. __x becomes an empty list.

       Requires this != __x.

       Definition at line 1612 of file list.

       References std::list< _Tp, _Alloc >::begin(), std::list< _Tp, _Alloc
       >::empty(), and std::list< _Tp, _Alloc >::end().

       Referenced by std::list< _Tp, _Alloc >::remove(), std::list< _Tp,
       _Alloc >::remove_if(), std::list< _Tp, _Alloc >::splice(), and
       std::list< _Tp, _Alloc >::unique().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::splice (const_iterator __position, list< _Tp,
       _Alloc > && __x, const_iterator __first, const_iterator __last)
       [inline],  [noexcept]
       Insert range from another list.

       Parameters
           __position Const_iterator referencing the element to insert before.
           __x Source list.
           __first Const_iterator referencing the start of range in x.
           __last Const_iterator referencing the end of range in x.

       Removes elements in the range [__first,__last) and inserts them before
       __position in constant time.

       Undefined if __position is in [__first,__last).

       Definition at line 1708 of file list.

       References std::__addressof().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::splice (const_iterator __position, list< _Tp,
       _Alloc > && __x, const_iterator __i) [inline],  [noexcept]
       Insert element from another list.

       Parameters
           __position Const_iterator referencing the element to insert before.
           __x Source list.
           __i Const_iterator referencing the element to move.

       Removes the element in list __x referenced by __i and inserts it into
       the current list before __position.

       Definition at line 1647 of file list.

       References std::__addressof().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::splice (const_iterator __position, list< _Tp,
       _Alloc > & __x) [inline],  [noexcept]
       Definition at line 1631 of file list.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::splice (const_iterator __position, list< _Tp,
       _Alloc > & __x, const_iterator __first, const_iterator __last)
       [inline],  [noexcept]
       Insert range from another list.

       Parameters
           __position Const_iterator referencing the element to insert before.
           __x Source list.
           __first Const_iterator referencing the start of range in x.
           __last Const_iterator referencing the end of range in x.

       Removes elements in the range [__first,__last) and inserts them before
       __position in constant time.

       Undefined if __position is in [__first,__last).

       Definition at line 1758 of file list.

       References std::move(), and std::list< _Tp, _Alloc >::splice().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::splice (const_iterator __position, list< _Tp,
       _Alloc > & __x, const_iterator __i) [inline],  [noexcept]
       Insert element from another list.

       Parameters
           __position Const_iterator referencing the element to insert before.
           __x Source list.
           __i Const_iterator referencing the element to move.

       Removes the element in list __x referenced by __i and inserts it into
       the current list before __position.

       Definition at line 1689 of file list.

       References std::move(), and std::list< _Tp, _Alloc >::splice().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::list< _Tp, _Alloc >::swap (list< _Tp, _Alloc > & __x) [inline],
       [noexcept]
       Swaps data with another list.

       Parameters
           __x A list of the same element and allocator types.

       This exchanges the elements between two lists in constant time. Note
       that the global std::swap() function is specialized such that
       std::swap(l1,l2) will feed to this function.

       Whether the allocators are swapped depends on the allocator traits.

       Definition at line 1572 of file list.

   template<typename _Tp , typename _Alloc > list< _Tp, _Alloc
       >::__remove_return_type list::unique
       Remove consecutive duplicate elements. For each consecutive set of
       elements with the same value, remove all but the first one. Remaining
       elements stay in list order. Note that this function only erases the
       elements, and that if the elements themselves are pointers, the
       pointed-to memory is not touched in any way. Managing the pointer is
       the user's responsibility.

       Definition at line 367 of file list.tcc.

       References std::list< _Tp, _Alloc >::begin(), std::begin(), std::end(),
       std::list< _Tp, _Alloc >::size(), and std::list< _Tp, _Alloc
       >::splice().

   template<typename _Tp , typename _Alloc > template<typename
       _BinaryPredicate > list< _Tp, _Alloc >::__remove_return_type
       list::unique (_BinaryPredicate __binary_pred)
       Remove consecutive elements satisfying a predicate.

       Template Parameters
           _BinaryPredicate Binary predicate function or object.

       For each consecutive set of elements [first,last) that satisfy
       predicate(first,i) where i is an iterator in [first,last), remove all
       but the first one. Remaining elements stay in list order. Note that
       this function only erases the elements, and that if the elements
       themselves are pointers, the pointed-to memory is not touched in any
       way. Managing the pointer is the user's responsibility.

       Definition at line 575 of file list.tcc.

       References std::list< _Tp, _Alloc >::begin(), std::begin(), std::end(),
       std::list< _Tp, _Alloc >::size(), and std::list< _Tp, _Alloc
       >::splice().

Member Data Documentation
   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> _List_impl
       std::_List_base< _Tp, _Alloc >::_M_impl [protected]
       Definition at line 477 of file list.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Feb 1 2023     std::list< _Tp, _Alloc >(3)
