puts(3)                                                                                  Library Functions Manual                                                                                  puts(3)

NAME
       fputc, fputs, putc, putchar, puts - output of characters and strings

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdio.h>

       int fputc(int c, FILE *stream);
       int putc(int c, FILE *stream);
       int putchar(int c);

       int fputs(const char *restrict s, FILE *restrict stream);
       int puts(const char *s);

DESCRIPTION
       fputc() writes the character c, cast to an unsigned char, to stream.

       putc() is equivalent to fputc() except that it may be implemented as a macro which evaluates stream more than once.

       putchar(c) is equivalent to putc(c, stdout).

       fputs() writes the string s to stream, without its terminating null byte ('\0').

       puts() writes the string s and a trailing newline to stdout.

       Calls to the functions described here can be mixed with each other and with calls to other output functions from the stdio library for the same output stream.

       For nonlocking counterparts, see unlocked_stdio(3).

RETURN VALUE
       fputc(), putc(), and putchar() return the character written as an unsigned char cast to an int or EOF on error.

       puts() and fputs() return a nonnegative number on success, or EOF on error.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │fputc(), fputs(), putc(), putchar(), puts()                                                                                                                             │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       POSIX.1-2001, C89, C99.

BUGS
       It  is  not  advisable to mix calls to output functions from the stdio library with low-level calls to write(2) for the file descriptor associated with the same output stream; the results will be
       undefined and very probably not what you want.

SEE ALSO
       write(2), ferror(3), fgets(3), fopen(3), fputwc(3), fputws(3), fseek(3), fwrite(3), putwchar(3), scanf(3), unlocked_stdio(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                         puts(3)
FPUTC(3P)                                                                                POSIX Programmer's Manual                                                                               FPUTC(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       fputc — put a byte on a stream

SYNOPSIS
       #include <stdio.h>

       int fputc(int c, FILE *stream);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       The fputc() function shall write the byte specified by c (converted to an unsigned char) to the output stream pointed to by stream, at the position indicated by the associated file-position indi‐
       cator for the stream (if defined), and shall advance the indicator appropriately.  If the file cannot support positioning requests, or if the stream was opened with append mode, the byte shall be
       appended to the output stream.

       The  last  data modification and last file status change timestamps of the file shall be marked for update between the successful execution of fputc() and the next successful completion of a call
       to fflush() or fclose() on the same stream or a call to exit() or abort().

RETURN VALUE
       Upon successful completion, fputc() shall return the value it has written. Otherwise, it shall return EOF, the error indicator for the stream shall be set, and errno shall be set to indicate  the
       error.

ERRORS
       The fputc() function shall fail if either the stream is unbuffered or the stream's buffer needs to be flushed, and:

       EAGAIN The O_NONBLOCK flag is set for the file descriptor underlying stream and the thread would be delayed in the write operation.

       EBADF  The file descriptor underlying stream is not a valid file descriptor open for writing.

       EFBIG  An attempt was made to write to a file that exceeds the maximum file size.

       EFBIG  An attempt was made to write to a file that exceeds the file size limit of the process.

       EFBIG  The file is a regular file and an attempt was made to write at or beyond the offset maximum.

       EINTR  The write operation was terminated due to the receipt of a signal, and no data was transferred.

       EIO    A physical I/O error has occurred, or the process is a member of a background process group attempting to write to its controlling terminal, TOSTOP is set, the calling thread is not block‐
              ing SIGTTOU, the process is not ignoring SIGTTOU, and the process group of the process is orphaned.  This error may also be returned under implementation-defined conditions.

       ENOSPC There was no free space remaining on the device containing the file.

       EPIPE  An attempt is made to write to a pipe or FIFO that is not open for reading by any process. A SIGPIPE signal shall also be sent to the thread.

       The fputc() function may fail if:

       ENOMEM Insufficient storage space is available.

       ENXIO  A request was made of a nonexistent device, or the request was outside the capabilities of the device.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.5, Standard I/O Streams, ferror(), fopen(), getrlimit(), putc(), puts(), setbuf(), ulimit()

       The Base Definitions volume of POSIX.1‐2017, <stdio.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          FPUTC(3P)
