lio_listio(3)                                                                            Library Functions Manual                                                                            lio_listio(3)

NAME
       lio_listio - initiate a list of I/O requests

LIBRARY
       Real-time library (librt, -lrt)

SYNOPSIS
       #include <aio.h>

       int lio_listio(int mode,
                      struct aiocb *restrict const aiocb_list[restrict],
                      int nitems, struct sigevent *restrict sevp);

DESCRIPTION
       The lio_listio() function initiates the list of I/O operations described by the array aiocb_list.

       The mode operation has one of the following values:

       LIO_WAIT
              The call blocks until all operations are complete.  The sevp argument is ignored.

       LIO_NOWAIT
              The  I/O  operations  are queued for processing and the call returns immediately.  When all of the I/O operations complete, asynchronous notification occurs, as specified by the sevp argu‐
              ment; see sigevent(7) for details.  If sevp is NULL, no asynchronous notification occurs.

       The aiocb_list argument is an array of pointers to aiocb structures that describe I/O operations.  These operations are executed in an unspecified order.  The nitems argument specifies  the  size
       of the array aiocb_list.  Null pointers in aiocb_list are ignored.

       In each control block in aiocb_list, the aio_lio_opcode field specifies the I/O operation to be initiated, as follows:

       LIO_READ
              Initiate a read operation.  The operation is queued as for a call to aio_read(3) specifying this control block.

       LIO_WRITE
              Initiate a write operation.  The operation is queued as for a call to aio_write(3) specifying this control block.

       LIO_NOP
              Ignore this control block.

       The  remaining fields in each control block have the same meanings as for aio_read(3) and aio_write(3).  The aio_sigevent fields of each control block can be used to specify notifications for the
       individual I/O operations (see sigevent(7)).

RETURN VALUE
       If mode is LIO_NOWAIT, lio_listio() returns 0 if all I/O operations are successfully queued.  Otherwise, -1 is returned, and errno is set to indicate the error.

       If mode is LIO_WAIT, lio_listio() returns 0 when all of the I/O operations have completed successfully.  Otherwise, -1 is returned, and errno is set to indicate the error.

       The return status from lio_listio() provides information only about the call itself, not about the individual I/O operations.  One or more of the I/O operations may fail, but this does  not  pre‐
       vent  other operations completing.  The status of individual I/O operations in aiocb_list can be determined using aio_error(3).  When an operation has completed, its return status can be obtained
       using aio_return(3).  Individual I/O operations can fail for the reasons described in aio_read(3) and aio_write(3).

ERRORS
       The lio_listio() function may fail for the following reasons:

       EAGAIN Out of resources.

       EAGAIN The number of I/O operations specified by nitems would cause the limit AIO_MAX to be exceeded.

       EINTR  mode was LIO_WAIT and a signal was caught before all I/O operations completed; see signal(7).  (This may even be one of the signals used for asynchronous I/O completion notification.)

       EINVAL mode is invalid, or nitems exceeds the limit AIO_LISTIO_MAX.

       EIO    One of more of the operations specified by aiocb_list failed.  The application can check the status of each operation using aio_return(3).

       If lio_listio() fails with the error EAGAIN, EINTR, or EIO, then some of the operations in aiocb_list may have been initiated.  If lio_listio() fails for any other reason, then none  of  the  I/O
       operations has been initiated.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │lio_listio()                                                                                                                                                            │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       glibc 2.1.  POSIX.1-2001.

NOTES
       It  is  a  good idea to zero out the control blocks before use.  The control blocks must not be changed while the I/O operations are in progress.  The buffer areas being read into or written from
       must not be accessed during the operations or undefined results may occur.  The memory areas involved must remain valid.

       Simultaneous I/O operations specifying the same aiocb structure produce undefined results.

SEE ALSO
       aio_cancel(3), aio_error(3), aio_fsync(3), aio_return(3), aio_suspend(3), aio_write(3), aio(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                   lio_listio(3)
LIO_LISTIO(3P)                                                                           POSIX Programmer's Manual                                                                          LIO_LISTIO(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       lio_listio — list directed I/O

SYNOPSIS
       #include <aio.h>

       int lio_listio(int mode, struct aiocb *restrict const list[restrict],
           int nent, struct sigevent *restrict sig);

DESCRIPTION
       The lio_listio() function shall initiate a list of I/O requests with a single function call.

       The mode argument takes one of the values LIO_WAIT or LIO_NOWAIT declared in <aio.h> and determines whether the function returns when the I/O operations have been completed, or as soon as the op‐
       erations have been queued. If the mode argument is LIO_WAIT, the function shall wait until all I/O is complete and the sig argument shall be ignored.

       If  the  mode argument is LIO_NOWAIT, the function shall return immediately, and asynchronous notification shall occur, according to the sig argument, when all the I/O operations complete. If sig
       is NULL, then no asynchronous notification shall occur. If sig is not NULL, asynchronous notification occurs as specified in Section 2.4.1, Signal Generation and Delivery when all the requests in
       list have completed.

       The I/O requests enumerated by list are submitted in an unspecified order.

       The list argument is an array of pointers to aiocb structures. The array contains nent elements. The array may contain NULL elements, which shall be ignored.

       If the buffer pointed to by list or the aiocb structures pointed to by the elements of the array list become illegal addresses before all asynchronous I/O completed and, if necessary, the notifi‐
       cation is sent, then the behavior is undefined. If the buffers pointed to by the aio_buf member of the aiocb structure pointed to by the elements of the array list become illegal addresses  prior
       to the asynchronous I/O associated with that aiocb structure being completed, the behavior is undefined.

       The aio_lio_opcode field of each aiocb structure specifies the operation to be performed. The supported operations are LIO_READ, LIO_WRITE, and LIO_NOP; these symbols are defined in <aio.h>.  The
       LIO_NOP operation causes the list entry to be ignored. If the aio_lio_opcode element is equal to LIO_READ, then an I/O operation is submitted as if by a call to aio_read() with the  aiocbp  equal
       to  the address of the aiocb structure. If the aio_lio_opcode element is equal to LIO_WRITE, then an I/O operation is submitted as if by a call to aio_write() with the aiocbp equal to the address
       of the aiocb structure.

       The aio_fildes member specifies the file descriptor on which the operation is to be performed.

       The aio_buf member specifies the address of the buffer to or from which the data is transferred.

       The aio_nbytes member specifies the number of bytes of data to be transferred.

       The members of the aiocb structure further describe the I/O operation to be performed, in a manner identical to that of  the  corresponding  aiocb  structure  when  used  by  the  aio_read()  and
       aio_write() functions.

       The nent argument specifies how many elements are members of the list; that is, the length of the array.

       The  behavior  of this function is altered according to the definitions of synchronized I/O data integrity completion and synchronized I/O file integrity completion if synchronized I/O is enabled
       on the file associated with aio_fildes.

       For regular files, no data transfer shall occur past the offset maximum established in the open file description associated with aiocbp->aio_fildes.

       If sig->sigev_notify is SIGEV_THREAD and sig->sigev_notify_attributes is a non-null pointer and the block pointed to by this pointer becomes an illegal address prior to all asynchronous I/O being
       completed, then the behavior is undefined.

RETURN VALUE
       If  the mode argument has the value LIO_NOWAIT, the lio_listio() function shall return the value zero if the I/O operations are successfully queued; otherwise, the function shall return the value
       -1 and set errno to indicate the error.

       If the mode argument has the value LIO_WAIT, the lio_listio() function shall return the value zero when all the indicated I/O has completed successfully. Otherwise, lio_listio()  shall  return  a
       value of -1 and set errno to indicate the error.

       In  either  case,  the  return value only indicates the success or failure of the lio_listio() call itself, not the status of the individual I/O requests. In some cases one or more of the I/O re‐
       quests contained in the list may fail.  Failure of an individual request does not prevent completion of any other individual request. To determine the outcome of each I/O request, the application
       shall examine the error status associated with each aiocb control block. The error statuses so returned are identical to those returned as the result of an aio_read() or aio_write() function.

ERRORS
       The lio_listio() function shall fail if:

       EAGAIN The resources necessary to queue all the I/O requests were not available. The application may check the error status for each aiocb to determine the individual request(s) that failed.

       EAGAIN The number of entries indicated by nent would cause the system-wide limit {AIO_MAX} to be exceeded.

       EINVAL The mode argument is not a proper value, or the value of nent was greater than {AIO_LISTIO_MAX}.

       EINTR  A  signal was delivered while waiting for all I/O requests to complete during an LIO_WAIT operation. Note that, since each I/O operation invoked by lio_listio() may possibly provoke a sig‐
              nal when it completes, this error return may be caused by the completion of one (or more) of the very I/O operations being awaited. Outstanding I/O requests are not canceled, and  the  ap‐
              plication shall examine each list element to determine whether the request was initiated, canceled, or completed.

       EIO    One or more of the individual I/O operations failed. The application may check the error status for each aiocb structure to determine the individual request(s) that failed.

       In  addition  to the errors returned by the lio_listio() function, if the lio_listio() function succeeds or fails with errors of [EAGAIN], [EINTR], or [EIO], then some of the I/O specified by the
       list may have been initiated. If the lio_listio() function fails with an error code other than [EAGAIN], [EINTR], or [EIO], no operations from the list shall have been initiated. The  I/O  opera‐
       tion  indicated  by each list element can encounter errors specific to the individual read or write function being performed. In this event, the error status for each aiocb control block contains
       the associated error code. The error codes that can be set are the same as would be set by a read() or write() function, with the following additional error codes possible:

       EAGAIN The requested I/O operation was not queued due to resource limitations.

       ECANCELED
              The requested I/O was canceled before the I/O completed due to an explicit aio_cancel() request.

       EFBIG  The aiocbp->aio_lio_opcode is LIO_WRITE, the file is a regular file, aiocbp->aio_nbytes is greater than 0, and the aiocbp->aio_offset is greater than or equal to the offset maximum in  the
              open file description associated with aiocbp->aio_fildes.

       EINPROGRESS
              The requested I/O is in progress.

       EOVERFLOW
              The  aiocbp->aio_lio_opcode is LIO_READ, the file is a regular file, aiocbp->aio_nbytes is greater than 0, and the aiocbp->aio_offset is before the end-of-file and is greater than or equal
              to the offset maximum in the open file description associated with aiocbp->aio_fildes.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       Although it may appear that there are inconsistencies in the specified circumstances for error codes, the [EIO] error condition applies when any circumstance relating to an  individual  operation
       makes that operation fail. This might be due to a badly formulated request (for example, the aio_lio_opcode field is invalid, and aio_error() returns [EINVAL]) or might arise from application be‐
       havior (for example, the file descriptor is closed before the operation is initiated, and aio_error() returns [EBADF]).

       The limitation on the set of error codes returned when operations from the list shall have been initiated enables applications to know when operations have been started and whether aio_error() is
       valid for a specific operation.

FUTURE DIRECTIONS
       None.

SEE ALSO
       aio_read(), aio_write(), aio_error(), aio_return(), aio_cancel(), close(), exec, exit(), fork(), lseek(), read()

       The Base Definitions volume of POSIX.1‐2017, <aio.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                     LIO_LISTIO(3P)
