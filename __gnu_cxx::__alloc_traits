__gnu_cxx::__alloc_traits< _Alloc, typename >(3)                                         Library Functions Manual                                         __gnu_cxx::__alloc_traits< _Alloc, typename >(3)

NAME
       __gnu_cxx::__alloc_traits< _Alloc, typename > - Uniform interface to C++98 and C++11 allocators.

SYNOPSIS
       #include <alloc_traits.h>

       Inherits std::allocator_traits< _Alloc >.

   Public Types
       typedef std::allocator_traits< _Alloc > _Base_type
       typedef _Alloc allocator_type
       typedef _Base_type::const_pointer const_pointer
       typedef const value_type & const_reference
       using const_void_pointer = typename _Ptr< __cv_pointer, const void >::type
           The allocator's const void pointer type.
       typedef _Base_type::difference_type difference_type
       using is_always_equal = __detected_or_t< typename is_empty< _Alloc >::type, __equal, _Alloc >
           Whether all instances of the allocator type compare equal.
       typedef _Base_type::pointer pointer
       using propagate_on_container_copy_assignment = __detected_or_t< false_type, __pocca, _Alloc >
           How the allocator is propagated on copy assignment.
       using propagate_on_container_move_assignment = __detected_or_t< false_type, __pocma, _Alloc >
           How the allocator is propagated on move assignment.
       using propagate_on_container_swap = __detected_or_t< false_type, __pocs, _Alloc >
           How the allocator is propagated on swap.
       template<typename _Tp > using rebind_alloc = __alloc_rebind< _Alloc, _Tp >
       template<typename _Tp > using rebind_traits = allocator_traits< rebind_alloc< _Tp > >
       typedef value_type & reference
       typedef _Base_type::size_type size_type
       typedef _Base_type::value_type value_type
       using void_pointer = typename _Ptr< __v_pointer, void >::type
           The allocator's void pointer type.

   Static Public Member Functions
       static constexpr bool _S_always_equal ()
       static constexpr bool _S_nothrow_move ()
       static constexpr void _S_on_swap (_Alloc &__a, _Alloc &__b)
       static constexpr bool _S_propagate_on_copy_assign ()
       static constexpr bool _S_propagate_on_move_assign ()
       static constexpr bool _S_propagate_on_swap ()
       static constexpr _Alloc _S_select_on_copy (const _Alloc &__a)
       static constexpr pointer allocate (_Alloc &__a, size_type __n)
           Allocate memory.
       static constexpr pointer allocate (_Alloc &__a, size_type __n)
           Allocate memory.
       static constexpr pointer allocate (_Alloc &__a, size_type __n, const_void_pointer __hint)
           Allocate memory.
       static constexpr pointer allocate (_Alloc &__a, size_type __n, const_void_pointer __hint)
           Allocate memory.
       template<typename _Ptr , typename... _Args> static constexpr std::__enable_if_t< __is_custom_pointer< _Ptr >::value > construct (_Alloc &__a, _Ptr __p, _Args &&... __args)
           noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p), std::forward< _Args >(__args)...)))
       template<typename _Tp , typename... _Args> static constexpr auto construct (_Alloc &__a, _Tp *__p, _Args &&... __args) noexcept(noexcept(_S_construct(__a, __p, std::forward< _Args >(__args)...)))
           -> decltype(_S_construct(__a, __p, std::forward< _Args >(__args)...))
           Construct an object of type _Tp
       static constexpr void deallocate (_Alloc &__a, pointer __p, size_type __n)
           Deallocate memory.
       static constexpr void deallocate (_Alloc &__a, pointer __p, size_type __n)
           Deallocate memory.
       template<typename _Ptr > static constexpr std::__enable_if_t< __is_custom_pointer< _Ptr >::value > destroy (_Alloc &__a, _Ptr __p) noexcept(noexcept(_Base_type::destroy(__a,
           std::__to_address(__p))))
       template<typename _Tp > static constexpr void destroy (_Alloc &__a, _Tp *__p) noexcept(noexcept(_S_destroy(__a, __p, 0)))
           Destroy an object of type _Tp.
       static constexpr size_type max_size (const _Alloc &__a) noexcept
           The maximum supported allocation size.
       static constexpr _Alloc select_on_container_copy_construction (const _Alloc &__rhs)
           Obtain an allocator to use when copying a container.

Detailed Description
   template<typename _Alloc, typename = typename _Alloc::value_type>
       struct __gnu_cxx::__alloc_traits< _Alloc, typename >"Uniform interface to C++98 and C++11 allocators.

       Definition at line 48 of file ext/alloc_traits.h.

Member Typedef Documentation
   template<typename _Alloc , typename  = typename _Alloc::value_type> typedef std::allocator_traits<_Alloc> __gnu_cxx::__alloc_traits< _Alloc, typename >::_Base_type
       Definition at line 55 of file ext/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> typedef _Alloc __gnu_cxx::__alloc_traits< _Alloc, typename >::allocator_type
       Definition at line 53 of file ext/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> typedef _Base_type::const_pointer __gnu_cxx::__alloc_traits< _Alloc, typename >::const_pointer
       Definition at line 58 of file ext/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> typedef const value_type& __gnu_cxx::__alloc_traits< _Alloc, typename >::const_reference
       Definition at line 63 of file ext/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc >::const_void_pointer =  typename _Ptr<__cv_pointer, const void>::type [inherited]
       The allocator's const void pointer type. Alloc::const_void_pointer if that type exists, otherwise  pointer_traits<pointer>::rebind<const void>

       Definition at line 158 of file bits/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> typedef _Base_type::difference_type __gnu_cxx::__alloc_traits< _Alloc, typename >::difference_type
       Definition at line 60 of file ext/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc >::is_always_equal =  __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc> [inherited]
       Whether all instances of the allocator type compare equal. Alloc::is_always_equal if that type exists, otherwise is_empty<Alloc>::type

       Definition at line 209 of file bits/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> typedef _Base_type::pointer __gnu_cxx::__alloc_traits< _Alloc, typename >::pointer
       Definition at line 57 of file ext/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc >::propagate_on_container_copy_assignment =  __detected_or_t<false_type, __pocca, _Alloc> [inherited]
       How the allocator is propagated on copy assignment. Alloc::propagate_on_container_copy_assignment if that type exists, otherwise false_type

       Definition at line 182 of file bits/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc >::propagate_on_container_move_assignment =  __detected_or_t<false_type, __pocma, _Alloc> [inherited]
       How the allocator is propagated on move assignment. Alloc::propagate_on_container_move_assignment if that type exists, otherwise false_type

       Definition at line 191 of file bits/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc >::propagate_on_container_swap =  __detected_or_t<false_type, __pocs, _Alloc> [inherited]
       How the allocator is propagated on swap. Alloc::propagate_on_container_swap if that type exists, otherwise false_type

       Definition at line 200 of file bits/alloc_traits.h.

   template<typename _Alloc > template<typename _Tp > using std::allocator_traits< _Alloc >::rebind_alloc =  __alloc_rebind<_Alloc, _Tp> [inherited]
       Definition at line 213 of file bits/alloc_traits.h.

   template<typename _Alloc > template<typename _Tp > using std::allocator_traits< _Alloc >::rebind_traits =  allocator_traits<rebind_alloc<_Tp> > [inherited]
       Definition at line 215 of file bits/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> typedef value_type& __gnu_cxx::__alloc_traits< _Alloc, typename >::reference
       Definition at line 62 of file ext/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> typedef _Base_type::size_type __gnu_cxx::__alloc_traits< _Alloc, typename >::size_type
       Definition at line 59 of file ext/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> typedef _Base_type::value_type __gnu_cxx::__alloc_traits< _Alloc, typename >::value_type
       Definition at line 56 of file ext/alloc_traits.h.

   template<typename _Alloc > using std::allocator_traits< _Alloc >::void_pointer =  typename _Ptr<__v_pointer, void>::type [inherited]
       The allocator's void pointer type. Alloc::void_pointer if that type exists, otherwise  pointer_traits<pointer>::rebind<void>

       Definition at line 150 of file bits/alloc_traits.h.

Member Function Documentation
   template<typename _Alloc , typename  = typename _Alloc::value_type> static constexpr bool __gnu_cxx::__alloc_traits< _Alloc, typename >::_S_always_equal () [inline],  [static],  [constexpr]
       Definition at line 112 of file ext/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> static constexpr bool __gnu_cxx::__alloc_traits< _Alloc, typename >::_S_nothrow_move () [inline],  [static],  [constexpr]
       Definition at line 115 of file ext/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> static constexpr void __gnu_cxx::__alloc_traits< _Alloc, typename >::_S_on_swap (_Alloc & __a, _Alloc & __b) [inline],  [static],
       [constexpr]
       Definition at line 100 of file ext/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> static constexpr bool __gnu_cxx::__alloc_traits< _Alloc, typename >::_S_propagate_on_copy_assign () [inline],  [static],
       [constexpr]
       Definition at line 103 of file ext/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> static constexpr bool __gnu_cxx::__alloc_traits< _Alloc, typename >::_S_propagate_on_move_assign () [inline],  [static],
       [constexpr]
       Definition at line 106 of file ext/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> static constexpr bool __gnu_cxx::__alloc_traits< _Alloc, typename >::_S_propagate_on_swap () [inline],  [static],  [constexpr]
       Definition at line 109 of file ext/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> static constexpr _Alloc __gnu_cxx::__alloc_traits< _Alloc, typename >::_S_select_on_copy (const _Alloc & __a) [inline],  [static],
       [constexpr]
       Definition at line 97 of file ext/alloc_traits.h.

   template<typename _Alloc > static constexpr pointer std::allocator_traits< _Alloc >::allocate (_Alloc & __a, size_type __n) [inline],  [static],  [constexpr],  [inherited]
       Allocate memory.

       Parameters
           __a An allocator.
           __n The number of objects to allocate space for.

       Calls a.allocate(n)

       Definition at line 317 of file bits/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> static constexpr pointer std::allocator_traits< _Alloc >::allocate (_Alloc & __a, size_type __n) [inline],  [static],  [constexpr]
       Allocate memory.

       Parameters
           __a An allocator.
           __n The number of objects to allocate space for.

       Calls a.allocate(n)

       Definition at line 317 of file bits/alloc_traits.h.

   template<typename _Alloc > static constexpr pointer std::allocator_traits< _Alloc >::allocate (_Alloc & __a, size_type __n, const_void_pointer __hint) [inline],  [static],  [constexpr],  [inherited]
       Allocate memory.

       Parameters
           __a An allocator.
           __n The number of objects to allocate space for.
           __hint Aid to locality.

       Returns
           Memory of suitable size and alignment for n objects of type value_type

       Returns  a.allocate(n, hint)  if that expression is well-formed, otherwise returns a.allocate(n)

       Definition at line 332 of file bits/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> static constexpr pointer std::allocator_traits< _Alloc >::allocate (_Alloc & __a, size_type __n, const_void_pointer __hint)
       [inline],  [static],  [constexpr]
       Allocate memory.

       Parameters
           __a An allocator.
           __n The number of objects to allocate space for.
           __hint Aid to locality.

       Returns
           Memory of suitable size and alignment for n objects of type value_type

       Returns  a.allocate(n, hint)  if that expression is well-formed, otherwise returns a.allocate(n)

       Definition at line 332 of file bits/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> template<typename _Ptr , typename... _Args> static constexpr std::__enable_if_t< __is_custom_pointer< _Ptr >::value >
       __gnu_cxx::__alloc_traits< _Alloc, typename >::construct (_Alloc & __a, _Ptr __p, _Args &&... __args) [inline],  [static],  [constexpr],  [noexcept]
       Definition at line 81 of file ext/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> template<typename _Tp , typename... _Args> static constexpr auto std::allocator_traits< _Alloc >::construct (_Alloc & __a, _Tp *
       __p, _Args &&... __args) -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
             [inline],  [static],  [constexpr],  [noexcept]"

       Construct an object of type _Tp

       Parameters
           __a An allocator.
           __p Pointer to memory of suitable size and alignment for Tp
           __args Constructor arguments.

       Calls  __a.construct(__p, std::forward<Args>(__args)...)  if that expression is well-formed, otherwise uses placement-new to construct an object of type _Tp at location __p from the arguments
       __args...

       Definition at line 360 of file bits/alloc_traits.h.

   template<typename _Alloc > static constexpr void std::allocator_traits< _Alloc >::deallocate (_Alloc & __a, pointer __p, size_type __n) [inline],  [static],  [constexpr],  [inherited]
       Deallocate memory.

       Parameters
           __a An allocator.
           __p Pointer to the memory to deallocate.
           __n The number of objects space was allocated for.

       Calls  a.deallocate(p, n)

       Definition at line 344 of file bits/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> static constexpr void std::allocator_traits< _Alloc >::deallocate (_Alloc & __a, pointer __p, size_type __n) [inline],  [static],
       [constexpr]
       Deallocate memory.

       Parameters
           __a An allocator.
           __p Pointer to the memory to deallocate.
           __n The number of objects space was allocated for.

       Calls  a.deallocate(p, n)

       Definition at line 344 of file bits/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> template<typename _Ptr > static constexpr std::__enable_if_t< __is_custom_pointer< _Ptr >::value > __gnu_cxx::__alloc_traits<
       _Alloc, typename >::destroy (_Alloc & __a, _Ptr __p) [inline],  [static],  [constexpr],  [noexcept]
       Definition at line 93 of file ext/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> template<typename _Tp > static constexpr void std::allocator_traits< _Alloc >::destroy (_Alloc & __a, _Tp * __p) [inline],
       [static],  [constexpr],  [noexcept]
       Destroy an object of type _Tp.

       Parameters
           __a An allocator.
           __p Pointer to the object to destroy

       Calls __a.destroy(__p) if that expression is well-formed, otherwise calls __p->~_Tp()

       Definition at line 376 of file bits/alloc_traits.h.

   template<typename _Alloc , typename  = typename _Alloc::value_type> static constexpr size_type std::allocator_traits< _Alloc >::max_size (const _Alloc & __a) [inline],  [static],  [constexpr],
       [noexcept]
       The maximum supported allocation size.

       Parameters
           __a An allocator.

       Returns
           __a.max_size() or numeric_limits<size_type>::max()

       Returns __a.max_size() if that expression is well-formed, otherwise returns numeric_limits<size_type>::max()

       Definition at line 389 of file bits/alloc_traits.h.

       Referenced by std::forward_list< _Tp, _Alloc >::max_size(), and std::list< _Tp, _Alloc >::max_size().

   template<typename _Alloc > static constexpr _Alloc std::allocator_traits< _Alloc >::select_on_container_copy_construction (const _Alloc & __rhs) [inline],  [static],  [constexpr],  [inherited]
       Obtain an allocator to use when copying a container.

       Parameters
           __rhs An allocator.

       Returns
           __rhs.select_on_container_copy_construction() or __rhs

       Returns __rhs.select_on_container_copy_construction() if that expression is well-formed, otherwise returns __rhs

       Definition at line 401 of file bits/alloc_traits.h.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                                                                                     Wed Feb 1 2023                                              __gnu_cxx::__alloc_traits< _Alloc, typename >(3)
