REALPATH(1)                      User Commands                     REALPATH(1)

NAME
       realpath - print the resolved path

SYNOPSIS
       realpath [OPTION]... FILE...

DESCRIPTION
       Print  the resolved absolute file name; all but the last component must
       exist

       -e, --canonicalize-existing
              all components of the path must exist

       -m, --canonicalize-missing
              no path components need exist or be a directory

       -L, --logical
              resolve '..' components before symlinks

       -P, --physical
              resolve symlinks as encountered (default)

       -q, --quiet
              suppress most error messages

       --relative-to=DIR
              print the resolved path relative to DIR

       --relative-base=DIR
              print absolute paths unless paths below DIR

       -s, --strip, --no-symlinks
              don't expand symlinks

       -z, --zero
              end each output line with NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Padraig Brady.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2023 Free Software Foundation, Inc.   License  GPLv3+:  GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you  are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       readlink(1), readlink(2), realpath(3)

       Full documentation <https://www.gnu.org/software/coreutils/realpath>
       or available locally via: info '(coreutils) realpath invocation'

GNU coreutils 9.2                 April 2023                       REALPATH(1)
realpath(3)                Library Functions Manual                realpath(3)

NAME
       realpath - return the canonicalized absolute pathname

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <limits.h>
       #include <stdlib.h>

       char *realpath(const char *restrict path,
                      char *restrict resolved_path);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       realpath():
           _XOPEN_SOURCE >= 500
               || /* glibc >= 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE

DESCRIPTION
       realpath()  expands  all symbolic links and resolves references to /./,
       /../ and extra '/' characters in the null-terminated  string  named  by
       path to produce a canonicalized absolute pathname.  The resulting path‐
       name is stored as a null-terminated string, up to a maximum of PATH_MAX
       bytes,  in  the buffer pointed to by resolved_path.  The resulting path
       will have no symbolic link, /./ or /../ components.

       If resolved_path is specified as NULL, then realpath()  uses  malloc(3)
       to allocate a buffer of up to PATH_MAX bytes to hold the resolved path‐
       name, and returns a pointer to this buffer.  The caller should  deallo‐
       cate this buffer using free(3).

RETURN VALUE
       If  there  is  no  error,  realpath()  returns  a  pointer  to  the re‐
       solved_path.

       Otherwise, it returns NULL, the contents of the array resolved_path are
       undefined, and errno is set to indicate the error.

ERRORS
       EACCES Read or search permission was denied for a component of the path
              prefix.

       EINVAL path is NULL.  (Before glibc 2.3, this error is also returned if
              resolved_path is NULL.)

       EIO    An I/O error occurred while reading from the filesystem.

       ELOOP  Too  many  symbolic  links  were  encountered in translating the
              pathname.

       ENAMETOOLONG
              A component of a pathname exceeded NAME_MAX  characters,  or  an
              entire pathname exceeded PATH_MAX characters.

       ENOENT The named file does not exist.

       ENOMEM Out of memory.

       ENOTDIR
              A component of the path prefix is not a directory.

ATTRIBUTES
       For  an  explanation  of  the  terms  used  in  this  section,  see at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │realpath()                                  │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
   GNU extensions
       If the call fails with either EACCES or ENOENT and resolved_path is not
       NULL, then the prefix of path that is not readable or does not exist is
       returned in resolved_path.

STANDARDS
       POSIX.1-2008.

HISTORY
       4.4BSD, POSIX.1-2001, Solaris.

       POSIX.1-2001 says that the behavior if resolved_path is NULL is  imple‐
       mentation-defined.   POSIX.1-2008  specifies  the behavior described in
       this page.

       In 4.4BSD and Solaris, the limit on the pathname length  is  MAXPATHLEN
       (found  in  <sys/param.h>).  SUSv2 prescribes PATH_MAX and NAME_MAX, as
       found in <limits.h> or provided by the pathconf(3) function.  A typical
       source fragment would be

           #ifdef PATH_MAX
             path_max = PATH_MAX;
           #else
             path_max = pathconf(path, _PC_PATH_MAX);
             if (path_max <= 0)
               path_max = 4096;
           #endif

       (But see the BUGS section.)

BUGS
       The POSIX.1-2001 standard version of this function is broken by design,
       since it is impossible to determine a suitable size for the output buf‐
       fer,  resolved_path.   According  to  POSIX.1-2001  a  buffer  of  size
       PATH_MAX suffices, but PATH_MAX need not be a defined constant, and may
       have to be obtained using pathconf(3).  And asking pathconf(3) does not
       really help, since, on the one hand POSIX  warns  that  the  result  of
       pathconf(3) may be huge and unsuitable for mallocing memory, and on the
       other hand pathconf(3) may return -1 to signify that  PATH_MAX  is  not
       bounded.    The  resolved_path == NULL  feature,  not  standardized  in
       POSIX.1-2001, but standardized  in  POSIX.1-2008,  allows  this  design
       problem to be avoided.

SEE ALSO
       realpath(1),  readlink(2),  canonicalize_file_name(3), getcwd(3), path‐
       conf(3), sysconf(3)

Linux man-pages 6.04              2023-03-30                       realpath(3)
REALPATH(3P)               POSIX Programmer's Manual              REALPATH(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       realpath — resolve a pathname

SYNOPSIS
       #include <stdlib.h>

       char *realpath(const char *restrict file_name,
           char *restrict resolved_name);

DESCRIPTION
       The realpath() function shall derive, from the pathname pointed  to  by
       file_name, an absolute pathname that resolves to the same directory en‐
       try, whose resolution does not involve '.', '..', or symbolic links. If
       resolved_name is a null pointer, the generated pathname shall be stored
       as a null-terminated string in a buffer allocated as if by  a  call  to
       malloc().   Otherwise,  if  {PATH_MAX}  is defined as a constant in the
       <limits.h> header, then the generated pathname shall  be  stored  as  a
       null-terminated  string,  up  to  a maximum of {PATH_MAX} bytes, in the
       buffer pointed to by resolved_name.

       If resolved_name is not a null pointer and {PATH_MAX} is not defined as
       a constant in the <limits.h> header, the behavior is undefined.

RETURN VALUE
       Upon  successful  completion,  realpath() shall return a pointer to the
       buffer containing the resolved name.  Otherwise, realpath()  shall  re‐
       turn a null pointer and set errno to indicate the error.

       If  the  resolved_name argument is a null pointer, the pointer returned
       by realpath() can be passed to free().

       If the resolved_name argument is not a null pointer and the  realpath()
       function  fails, the contents of the buffer pointed to by resolved_name
       are undefined.

ERRORS
       The realpath() function shall fail if:

       EACCES Search permission was denied for a component of the path  prefix
              of file_name.

       EINVAL The file_name argument is a null pointer.

       EIO    An error occurred while reading from the file system.

       ELOOP  A loop exists in symbolic links encountered during resolution of
              the file_name argument.

       ENAMETOOLONG
              The  length  of  a  component  of  a  pathname  is  longer  than
              {NAME_MAX}.

       ENOENT A  component  of  file_name  does  not  name an existing file or
              file_name points to an empty string.

       ENOTDIR
              A component of the path prefix names an existing  file  that  is
              neither  a  directory nor a symbolic link to a directory, or the
              file_name argument contains at least one  non-<slash>  character
              and  ends  with  one or more trailing <slash> characters and the
              last pathname component names an existing file that is neither a
              directory nor a symbolic link to a directory.

       The realpath() function may fail if:

       EACCES The file_name argument does not begin with a <slash> and none of
              the symbolic links (if any) processed during pathname resolution
              of  file_name had contents that began with a <slash>, and either
              search permission was denied for the current directory  or  read
              or  search  permission was denied for a directory above the cur‐
              rent directory in the file hierarchy.

       ELOOP  More than {SYMLOOP_MAX} symbolic links were  encountered  during
              resolution of the file_name argument.

       ENAMETOOLONG
              The length of a pathname exceeds {PATH_MAX}, or pathname resolu‐
              tion of a symbolic link produced an intermediate result  with  a
              length that exceeds {PATH_MAX}.

       ENOMEM Insufficient storage space is available.

       The following sections are informative.

EXAMPLES
   Generating an Absolute Pathname
       The following example generates an absolute pathname for the file iden‐
       tified by the symlinkpath argument. The generated pathname is stored in
       the buffer pointed to by actualpath.

           #include <stdlib.h>
           ...
           char *symlinkpath = "/tmp/symlink/file";
           char *actualpath;

           actualpath = realpath(symlinkpath, NULL);
           if (actualpath != NULL)
           {
               ... use actualpath ...

               free(actualpath);
           }
           else
           {
               ... handle error ...
           }

APPLICATION USAGE
       For  functions  that allocate memory as if by malloc(), the application
       should release such memory when it is no longer required by a  call  to
       free().  For realpath(), this is the return value.

RATIONALE
       Since  realpath()  has no length argument, if {PATH_MAX} is not defined
       as a constant in <limits.h>, applications have no  way  of  determining
       how  large  a buffer they need to allocate for it to be safe to pass to
       realpath().  A {PATH_MAX} value obtained from a prior  pathconf()  call
       is  out-of-date  by the time realpath() is called. Hence the only reli‐
       able way to use realpath() when {PATH_MAX} is not defined in <limits.h>
       is to pass a null pointer for resolved_name so that realpath() will al‐
       locate a buffer of the necessary size.

FUTURE DIRECTIONS
       None.

SEE ALSO
       fpathconf(), free(), getcwd(), sysconf()

       The Base Definitions volume of POSIX.1‐2017, <limits.h>, <stdlib.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                         REALPATH(3P)
