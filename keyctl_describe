KEYCTL_DESCRIBE(3)                                                                      Linux Key Management Calls                                                                      KEYCTL_DESCRIBE(3)

NAME
       keyctl_describe - describe a key

SYNOPSIS
       #include <keyutils.h>

       long keyctl_describe(key_serial_t key, char *buffer,
       size_tbuflen);

       long keyctl_describe_alloc(key_serial_t key, char **_buffer);

DESCRIPTION
       keyctl_describe() describes the attributes of a key as a NUL-terminated string.

       The caller must have view permission on a key to be able to get a description of it.

       buffer and buflen specify the buffer into which the key description will be placed.  If the buffer is too small, the full size of the description will be returned, and no copy will take place.

       keyctl_describe_alloc()  is  similar  to  keyctl_describe() except that it allocates a buffer big enough to hold the description and places the description in it.  If successful, A pointer to the
       buffer is placed in *_buffer.  The caller must free the buffer.

       The description will be a string of format:

              “%s;%d;%d;%08x;%s”

       where the arguments are: key type name, key UID, key GID, key permissions mask and key description.

       NOTE!  The key description will not contain any semicolons, so that should be separated out by working backwards from the end of the string.  This permits extra information to be inserted  before
       it by later versions of the kernel simply by inserting more semicolon-terminated substrings.

RETURN VALUE
       On  success  keyctl_describe() returns the amount of data placed into the buffer.  If the buffer was too small, then the size of buffer required will be returned, but no data will be transferred.
       On error, the value -1 will be returned and errno will have been set to an appropriate error.

       On success keyctl_describe_alloc() returns the amount of data in the buffer, less the NUL terminator.  On error, the value -1 will be returned and errno will have been set to an  appropriate  er‐
       ror.

ERRORS
       ENOKEY The key specified is invalid.

       EKEYEXPIRED
              The key specified has expired.

       EKEYREVOKED
              The key specified had been revoked.

       EACCES The key exists, but is not viewable by the calling process.

LINKING
       This is a library function that can be found in libkeyutils.  When linking, -lkeyutils should be specified to the linker.

SEE ALSO
       keyctl(1), add_key(2), keyctl(2), request_key(2), keyctl(3), keyrings(7), keyutils(7)

Linux                                                                                           4 May 2006                                                                              KEYCTL_DESCRIBE(3)
