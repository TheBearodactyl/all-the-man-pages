std::chrono(3)             Library Functions Manual             std::chrono(3)

NAME
       std::chrono - ISO C++ 2011 namespace for date and time utilities.

SYNOPSIS
   Classes
       struct duration
           chrono::duration represents a distance between two points in time
       struct duration_values
           duration_values
       struct steady_clock
           Monotonic clock.
       struct system_clock
           System clock.
       struct time_point
           chrono::time_point represents a point in time as measured by a
           clock
       struct treat_as_floating_point
           treat_as_floating_point

   Typedefs
       using days = duration< int64_t, ratio< 86400 > >
           days
       using file_clock = ::std::filesystem::__file_clock
       template<typename _Duration > using file_time = time_point< file_clock,
           _Duration >
       using gps_seconds = gps_time< seconds >
       template<typename _Duration > using gps_time = time_point< gps_clock,
           _Duration >
       using high_resolution_clock = system_clock
           Highest-resolution clock.
       using hours = duration< int64_t, ratio< 3600 > >
           hours
       using local_days = local_time< days >
       using local_seconds = local_time< seconds >
       template<typename _Duration > using local_time = time_point< local_t,
           _Duration >
       using microseconds = duration< int64_t, micro >
           microseconds
       using milliseconds = duration< int64_t, milli >
           milliseconds
       using minutes = duration< int64_t, ratio< 60 > >
           minutes
       using months = duration< int64_t, ratio< 2629746 > >
           months
       using nanoseconds = duration< int64_t, nano >
           nanoseconds
       using seconds = duration< int64_t >
           seconds
       using sys_days = sys_time< days >
       using sys_seconds = sys_time< seconds >
       template<typename _Duration > using sys_time = time_point<
           system_clock, _Duration >
       using tai_seconds = tai_time< seconds >
       template<typename _Duration > using tai_time = time_point< tai_clock,
           _Duration >
       using utc_seconds = utc_time< seconds >
       template<typename _Duration > using utc_time = time_point< utc_clock,
           _Duration >
       using weeks = duration< int64_t, ratio< 604800 > >
           weeks
       using years = duration< int64_t, ratio< 31556952 > >
           years

   Functions
       template<typename _Rep , typename _Period > constexpr enable_if_t<
           numeric_limits< _Rep >::is_signed, duration< _Rep, _Period > > abs
           (duration< _Rep, _Period > __d)
       template<typename _ToDur , typename _Rep , typename _Period > constexpr
           __enable_if_is_duration< _ToDur > ceil (const duration< _Rep,
           _Period > &__d)
       template<typename _ToDur , typename _Clock , typename _Dur > constexpr
           enable_if_t< __is_duration< _ToDur >::value, time_point< _Clock,
           _ToDur > > ceil (const time_point< _Clock, _Dur > &__tp)
       template<typename _ToDur , typename _Rep , typename _Period > constexpr
           __enable_if_is_duration< _ToDur > duration_cast (const duration<
           _Rep, _Period > &__d)
           duration_cast
       template<typename _ToDur , typename _Rep , typename _Period > constexpr
           __enable_if_is_duration< _ToDur > floor (const duration< _Rep,
           _Period > &__d)
       template<typename _ToDur , typename _Clock , typename _Dur > constexpr
           enable_if_t< __is_duration< _ToDur >::value, time_point< _Clock,
           _ToDur > > floor (const time_point< _Clock, _Dur > &__tp)
       constexpr bool is_am (const hours &__h) noexcept
       constexpr bool is_pm (const hours &__h) noexcept
       constexpr hours make12 (const hours &__h) noexcept
       constexpr hours make24 (const hours &__h, bool __is_pm) noexcept
       template<typename _CharT , typename _Traits , typename _Rep , typename
           _Period > basic_ostream< _CharT, _Traits > & operator<<
           (std::basic_ostream< _CharT, _Traits > &__os, const duration< _Rep,
           _Period > &__d)
       template<typename _ToDur , typename _Rep , typename _Period > constexpr
           enable_if_t< __and_< __is_duration< _ToDur >, __not_<
           treat_as_floating_point< typename _ToDur::rep > > >::value, _ToDur
           > round (const duration< _Rep, _Period > &__d)
       template<typename _ToDur , typename _Clock , typename _Dur > constexpr
           enable_if_t< __and_< __is_duration< _ToDur >, __not_<
           treat_as_floating_point< typename _ToDur::rep > > >::value,
           time_point< _Clock, _ToDur > > round (const time_point< _Clock,
           _Dur > &__tp)
       template<typename _ToDur , typename _Clock , typename _Dur > constexpr
           enable_if< __is_duration< _ToDur >::value, time_point< _Clock,
           _ToDur > >::type time_point_cast (const time_point< _Clock, _Dur >
           &__t)
           time_point_cast

           template<typename _Rep1 , typename _Period1 , typename _Rep2 ,
               typename _Period2 > constexpr common_type< duration< _Rep1,
               _Period1 >, duration< _Rep2, _Period2 > >::type operator-
               (const duration< _Rep1, _Period1 > &__lhs, const duration<
               _Rep2, _Period2 > &__rhs)
               The difference between two durations.

           template<typename _Rep1 , typename _Rep2 , typename _Period >
               constexpr duration< __common_rep_t< _Rep2, _Rep1 >, _Period >
               operator* (const _Rep1 &__s, const duration< _Rep2, _Period >
               &__d)
           template<typename _Rep1 , typename _Period , typename _Rep2 >
               constexpr duration< __common_rep_t< _Rep1,
               __disable_if_is_duration< _Rep2 > >, _Period > operator/ (const
               duration< _Rep1, _Period > &__d, const _Rep2 &__s)
           template<typename _Rep1 , typename _Period1 , typename _Rep2 ,
               typename _Period2 > constexpr common_type< _Rep1, _Rep2 >::type
               operator/ (const duration< _Rep1, _Period1 > &__lhs, const
               duration< _Rep2, _Period2 > &__rhs)
           template<typename _Rep1 , typename _Period , typename _Rep2 >
               constexpr duration< __common_rep_t< _Rep1,
               __disable_if_is_duration< _Rep2 > >, _Period > operator% (const
               duration< _Rep1, _Period > &__d, const _Rep2 &__s)
           template<typename _Rep1 , typename _Period1 , typename _Rep2 ,
               typename _Period2 > constexpr common_type< duration< _Rep1,
               _Period1 >, duration< _Rep2, _Period2 > >::type operator%
               (const duration< _Rep1, _Period1 > &__lhs, const duration<
               _Rep2, _Period2 > &__rhs)

           template<typename _Rep1 , typename _Period1 , typename _Rep2 ,
               typename _Period2 > constexpr bool operator< (const duration<
               _Rep1, _Period1 > &__lhs, const duration< _Rep2, _Period2 >
               &__rhs)
           template<typename _Rep1 , typename _Period1 , typename _Rep2 ,
               typename _Period2 > constexpr bool operator!= (const duration<
               _Rep1, _Period1 > &__lhs, const duration< _Rep2, _Period2 >
               &__rhs)
           template<typename _Rep1 , typename _Period1 , typename _Rep2 ,
               typename _Period2 > constexpr bool operator<= (const duration<
               _Rep1, _Period1 > &__lhs, const duration< _Rep2, _Period2 >
               &__rhs)
           template<typename _Rep1 , typename _Period1 , typename _Rep2 ,
               typename _Period2 > constexpr bool operator> (const duration<
               _Rep1, _Period1 > &__lhs, const duration< _Rep2, _Period2 >
               &__rhs)
           template<typename _Rep1 , typename _Period1 , typename _Rep2 ,
               typename _Period2 > constexpr bool operator>= (const duration<
               _Rep1, _Period1 > &__lhs, const duration< _Rep2, _Period2 >
               &__rhs)

           template<typename _Rep1 , typename _Period1 , typename _Clock ,
               typename _Dur2 > constexpr time_point< _Clock, typename
               common_type< duration< _Rep1, _Period1 >, _Dur2 >::type >
               operator+ (const duration< _Rep1, _Period1 > &__lhs, const
               time_point< _Clock, _Dur2 > &__rhs)
               Adjust a time point forwards by the given duration.
           template<typename _Clock , typename _Dur1 , typename _Rep2 ,
               typename _Period2 > constexpr time_point< _Clock, typename
               common_type< _Dur1, duration< _Rep2, _Period2 > >::type >
               operator- (const time_point< _Clock, _Dur1 > &__lhs, const
               duration< _Rep2, _Period2 > &__rhs)
               Adjust a time point backwards by the given duration.
           template<typename _Clock , typename _Dur1 , typename _Dur2 >
               constexpr common_type< _Dur1, _Dur2 >::type operator- (const
               time_point< _Clock, _Dur1 > &__lhs, const time_point< _Clock,
               _Dur2 > &__rhs)
               The difference between two time points (as a duration)

           template<typename _Clock , typename _Dur1 , typename _Dur2 >
               constexpr bool operator!= (const time_point< _Clock, _Dur1 >
               &__lhs, const time_point< _Clock, _Dur2 > &__rhs)
           template<typename _Clock , typename _Dur1 , typename _Dur2 >
               constexpr bool operator< (const time_point< _Clock, _Dur1 >
               &__lhs, const time_point< _Clock, _Dur2 > &__rhs)
           template<typename _Clock , typename _Dur1 , typename _Dur2 >
               constexpr bool operator<= (const time_point< _Clock, _Dur1 >
               &__lhs, const time_point< _Clock, _Dur2 > &__rhs)
           template<typename _Clock , typename _Dur1 , typename _Dur2 >
               constexpr bool operator> (const time_point< _Clock, _Dur1 >
               &__lhs, const time_point< _Clock, _Dur2 > &__rhs)
           template<typename _Clock , typename _Dur1 , typename _Dur2 >
               constexpr bool operator>= (const time_point< _Clock, _Dur1 >
               &__lhs, const time_point< _Clock, _Dur2 > &__rhs)

   Variables
       constexpr month April
       constexpr month August
       constexpr month December
       constexpr month February
       constexpr weekday Friday
       template<typename _Tp > constexpr bool is_clock_v
       template<> constexpr bool is_clock_v< file_clock >
       template<> constexpr bool is_clock_v< gps_clock >
       template<> constexpr bool is_clock_v< steady_clock >
       template<> constexpr bool is_clock_v< system_clock >
       template<> constexpr bool is_clock_v< tai_clock >
       template<> constexpr bool is_clock_v< utc_clock >
       constexpr month January
       constexpr month July
       constexpr month June
       constexpr last_spec last
       constexpr month March
       constexpr month May
       constexpr weekday Monday
       constexpr month November
       constexpr month October
       constexpr weekday Saturday
       constexpr month September
       constexpr weekday Sunday
       constexpr weekday Thursday
       template<typename _Rep > constexpr bool treat_as_floating_point_v
       constexpr weekday Tuesday
       constexpr weekday Wednesday

Detailed Description
       ISO C++ 2011 namespace for date and time utilities.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Feb 1 2023                  std::chrono(3)
