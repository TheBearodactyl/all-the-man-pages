mq_notify(3)                                                                             Library Functions Manual                                                                             mq_notify(3)

NAME
       mq_notify - register for notification when a message is available

LIBRARY
       Real-time library (librt, -lrt)

SYNOPSIS
       #include <mqueue.h>
       #include <signal.h>           /* Definition of SIGEV_* constants */

       int mq_notify(mqd_t mqdes, const struct sigevent *sevp);

DESCRIPTION
       mq_notify()  allows  the  calling  process  to register or unregister for delivery of an asynchronous notification when a new message arrives on the empty message queue referred to by the message
       queue descriptor mqdes.

       The sevp argument is a pointer to a sigevent structure.  For the definition and general details of this structure, see sigevent(7).

       If sevp is a non-null pointer, then mq_notify() registers the calling process to receive message notification.  The sigev_notify field of the sigevent structure to which sevp points specifies how
       notification is to be performed.  This field has one of the following values:

       SIGEV_NONE
              A "null" notification: the calling process is registered as the target for notification, but when a message arrives, no notification is sent.

       SIGEV_SIGNAL
              Notify  the  process  by sending the signal specified in sigev_signo.  See sigevent(7) for general details.  The si_code field of the siginfo_t structure will be set to SI_MESGQ.  In addi‐
              tion, si_pid will be set to the PID of the process that sent the message, and si_uid will be set to the real user ID of the sending process.

       SIGEV_THREAD
              Upon message delivery, invoke sigev_notify_function as if it were the start function of a new thread.  See sigevent(7) for details.

       Only one process can be registered to receive notification from a message queue.

       If sevp is NULL, and the calling process is currently registered to receive notifications for this message queue, then the registration is removed; another process can then register to receive  a
       message notification for this queue.

       Message notification occurs only when a new message arrives and the queue was previously empty.  If the queue was not empty at the time mq_notify() was called, then a notification will occur only
       after the queue is emptied and a new message arrives.

       If another process or thread is waiting to read a message from an empty queue using mq_receive(3), then any message notification registration is ignored: the message is delivered to  the  process
       or thread calling mq_receive(3), and the message notification registration remains in effect.

       Notification  occurs  once: after a notification is delivered, the notification registration is removed, and another process can register for message notification.  If the notified process wishes
       to receive the next notification, it can use mq_notify() to request a further notification.  This should be done before emptying all unread messages from the queue.  (Placing the  queue  in  non‐
       blocking mode is useful for emptying the queue of messages without blocking once it is empty.)

RETURN VALUE
       On success mq_notify() returns 0; on error, -1 is returned, with errno set to indicate the error.

ERRORS
       EBADF  The message queue descriptor specified in mqdes is invalid.

       EBUSY  Another process has already registered to receive notification for this message queue.

       EINVAL sevp->sigev_notify is not one of the permitted values; or sevp->sigev_notify is SIGEV_SIGNAL and sevp->sigev_signo is not a valid signal number.

       ENOMEM Insufficient memory.

       POSIX.1-2008 says that an implementation may generate an EINVAL error if sevp is NULL, and the caller is not currently registered to receive notifications for the queue mqdes.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │mq_notify()                                                                                                                                                             │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
   C library/kernel differences
       In  the  glibc  implementation,  the  mq_notify()  library function is implemented on top of the system call of the same name.  When sevp is NULL, or specifies a notification mechanism other than
       SIGEV_THREAD, the library function directly invokes the system call.  For SIGEV_THREAD, much of the implementation resides within the library, rather than the kernel.  (This  is  necessarily  so,
       since  the thread involved in handling the notification is one that must be managed by the C library POSIX threads implementation.)  The implementation involves the use of a raw netlink(7) socket
       and creates a new thread for each notification that is delivered to the process.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

EXAMPLES
       The following program registers a notification request for the message queue named in its command-line argument.  Notification is performed by creating a thread.  The thread executes  a  function
       which reads one message from the queue and then terminates the process.

   Program source
       #include <mqueue.h>
       #include <pthread.h>
       #include <signal.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>

       #define handle_error(msg) \
           do { perror(msg); exit(EXIT_FAILURE); } while (0)

       static void                     /* Thread start function */
       tfunc(union sigval sv)
       {
           struct mq_attr attr;
           ssize_t nr;
           void *buf;
           mqd_t mqdes = *((mqd_t *) sv.sival_ptr);

           /* Determine max. msg size; allocate buffer to receive msg */

           if (mq_getattr(mqdes, &attr) == -1)
               handle_error("mq_getattr");
           buf = malloc(attr.mq_msgsize);
           if (buf == NULL)
               handle_error("malloc");

           nr = mq_receive(mqdes, buf, attr.mq_msgsize, NULL);
           if (nr == -1)
               handle_error("mq_receive");

           printf("Read %zd bytes from MQ\n", nr);
           free(buf);
           exit(EXIT_SUCCESS);         /* Terminate the process */
       }

       int
       main(int argc, char *argv[])
       {
           mqd_t mqdes;
           struct sigevent sev;

           if (argc != 2) {
               fprintf(stderr, "Usage: %s <mq-name>\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           mqdes = mq_open(argv[1], O_RDONLY);
           if (mqdes == (mqd_t) -1)
               handle_error("mq_open");

           sev.sigev_notify = SIGEV_THREAD;
           sev.sigev_notify_function = tfunc;
           sev.sigev_notify_attributes = NULL;
           sev.sigev_value.sival_ptr = &mqdes;   /* Arg. to thread func. */
           if (mq_notify(mqdes, &sev) == -1)
               handle_error("mq_notify");

           pause();    /* Process will be terminated by thread function */
       }

SEE ALSO
       mq_close(3), mq_getattr(3), mq_open(3), mq_receive(3), mq_send(3), mq_unlink(3), mq_overview(7), sigevent(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                    mq_notify(3)
MQ_NOTIFY(3P)                                                                            POSIX Programmer's Manual                                                                           MQ_NOTIFY(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       mq_notify — notify process that a message is available (REALTIME)

SYNOPSIS
       #include <mqueue.h>

       int mq_notify(mqd_t mqdes, const struct sigevent *notification);

DESCRIPTION
       If the argument notification is not NULL, this function shall register the calling process to be notified of message arrival at an empty message queue associated with the specified message  queue
       descriptor,  mqdes.  The notification specified by the notification argument shall be sent to the process when the message queue transitions from empty to non-empty. At any time, only one process
       may be registered for notification by a message queue. If the calling process or any other process has already registered for notification of message arrival at the specified message queue,  sub‐
       sequent attempts to register for that message queue shall fail.

       If notification is NULL and the process is currently registered for notification by the specified message queue, the existing registration shall be removed.

       When the notification is sent to the registered process, its registration shall be removed. The message queue shall then be available for registration.

       If  a process has registered for notification of message arrival at a message queue and some thread is blocked in mq_receive() or mq_timedreceive() waiting to receive a message when a message ar‐
       rives at the queue, the arriving message shall satisfy the appropriate mq_receive() or mq_timedreceive(), respectively. The resulting behavior is as if the message queue remains empty, and no no‐
       tification shall be sent.

RETURN VALUE
       Upon successful completion, the mq_notify() function shall return a value of zero; otherwise, the function shall return a value of -1 and set errno to indicate the error.

ERRORS
       The mq_notify() function shall fail if:

       EBADF  The mqdes argument is not a valid message queue descriptor.

       EBUSY  A process is already registered for notification by the message queue.

       The mq_notify() function may fail if:

       EINVAL The notification argument is NULL and the process is currently not registered.

       The following sections are informative.

EXAMPLES
       The  following  program  registers  a notification request for the message queue named in its command-line argument. Notification is performed by creating a thread. The thread executes a function
       which reads one message from the queue and then terminates the process.

           #include <pthread.h>
           #include <mqueue.h>
           #include <assert.h>
           #include <stdio.h>
           #include <stdlib.h>
           #include <unistd.h>

           static void                     /* Thread start function */
           tfunc(union sigval sv)
           {
               struct mq_attr attr;
               ssize_t nr;
               void *buf;
               mqd_t mqdes = *((mqd_t *) sv.sival_ptr);

               /* Determine maximum msg size; allocate buffer to receive msg */

               if (mq_getattr(mqdes, &attr) == -1) {
                   perror("mq_getattr");
                   exit(EXIT_FAILURE);
               }
               buf = malloc(attr.mq_msgsize);

               if (buf == NULL) {
                   perror("malloc");
                   exit(EXIT_FAILURE);
               }

               nr = mq_receive(mqdes, buf, attr.mq_msgsize, NULL);
               if (nr == -1) {
                   perror("mq_receive");
                   exit(EXIT_FAILURE);
               }

               printf("Read %ld bytes from message queue\n", (long) nr);
               free(buf);
               exit(EXIT_SUCCESS);         /* Terminate the process */
           }

           int
           main(int argc, char *argv[])
           {
               mqd_t mqdes;
               struct sigevent not;

               assert(argc == 2);

               mqdes = mq_open(argv[1], O_RDONLY);
               if (mqdes == (mqd_t) -1) {
                   perror("mq_open");
                   exit(EXIT_FAILURE);
               }

               not.sigev_notify = SIGEV_THREAD;
               not.sigev_notify_function = tfunc;
               not.sigev_notify_attributes = NULL;
               not.sigev_value.sival_ptr = &mqdes;   /* Arg. to thread func. */
               if (mq_notify(mqdes, &not) == -1) {
                   perror("mq_notify");
                   exit(EXIT_FAILURE);
               }

               pause();    /* Process will be terminated by thread function */
           }

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       mq_open(), mq_send(), mq_receive(), msgctl(), msgget(), msgrcv(), msgsnd()

       The Base Definitions volume of POSIX.1‐2017, <mqueue.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                      MQ_NOTIFY(3P)
