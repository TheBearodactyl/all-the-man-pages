UMASK(1P)                                                                                POSIX Programmer's Manual                                                                               UMASK(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       umask — get or set the file mode creation mask

SYNOPSIS
       umask [-S] [mask]

DESCRIPTION
       The umask utility shall set the file mode creation mask of the current shell execution environment (see Section 2.12, Shell Execution Environment) to the value specified by the mask operand. This
       mask  shall affect the initial value of the file permission bits of subsequently created files. If umask is called in a subshell or separate utility execution environment, such as one of the fol‐
       lowing:

           (umask 002)
           nohup umask ...
           find . -exec umask ... \;

       it shall not affect the file mode creation mask of the caller's environment.

       If the mask operand is not specified, the umask utility shall write to standard output the value of the file mode creation mask of the invoking process.

OPTIONS
       The umask utility shall conform to the Base Definitions volume of POSIX.1‐2017, Section 12.2, Utility Syntax Guidelines.

       The following option shall be supported:

       -S        Produce symbolic output.

       The default output style is unspecified, but shall be recognized on a subsequent invocation of umask on the same system as a mask operand to restore the previous file mode creation mask.

OPERANDS
       The following operand shall be supported:

       mask      A string specifying the new file mode creation mask. The string is treated in the same way as the mode operand described in the EXTENDED DESCRIPTION section for chmod.

                 For a symbolic_mode value, the new value of the file mode creation mask shall be the logical complement of the file permission bits portion of  the  file  mode  specified  by  the  sym‐
                 bolic_mode string.

                 In a symbolic_mode value, the permissions op characters '+' and '-' shall be interpreted relative to the current file mode creation mask; '+' shall cause the bits for the indicated per‐
                 missions to be cleared in the mask; '-' shall cause the bits for the indicated permissions to be set in the mask.

                 The interpretation of mode values that specify file mode bits other than the file permission bits is unspecified.

                 In the octal integer form of mode, the specified bits are set in the file mode creation mask.

                 The file mode creation mask shall be set to the resulting numeric value.

                 The default output of a prior invocation of umask on the same system with no operand also shall be recognized as a mask operand.

STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of umask:

       LANG      Provide a default value for the internationalization variables that are unset or null. (See the Base Definitions volume of POSIX.1‐2017, Section 8.2, Internationalization Variables  for
                 the precedence of internationalization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       When the mask operand is not specified, the umask utility shall write a message to standard output that can later be used as a umask mask operand.

       If -S is specified, the message shall be in the following format:

           "u=%s,g=%s,o=%s\n", <owner permissions>, <group permissions>,
               <other permissions>

       where the three values shall be combinations of letters from the set {r, w, x}; the presence of a letter shall indicate that the corresponding bit is clear in the file mode creation mask.

       If a mask operand is specified, there shall be no output written to standard output.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

        0    The file mode creation mask was successfully changed, or no mask operand was supplied.

       >0    An error occurred.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Since umask affects the current shell execution environment, it is generally provided as a shell regular built-in.

       In contrast to the negative permission logic provided by the file mode creation mask and the octal number form of the mask argument, the symbolic form of the mask argument specifies those permis‐
       sions that are left alone.

EXAMPLES
       Either of the commands:

           umask a=rx,ug+w

           umask 002

       sets the mode mask so that subsequently created files have their S_IWOTH bit cleared.

       After setting the mode mask with either of the above commands, the umask command can be used to write out the current value of the mode mask:

           $ umask
           0002

       (The output format is unspecified, but historical implementations use the octal integer mode format.)

           $ umask -S
           u=rwx,g=rwx,o=rx

       Either of these outputs can be used as the mask operand to a subsequent invocation of the umask utility.

       Assuming the mode mask is set as above, the command:

           umask g-w

       sets the mode mask so that subsequently created files have their S_IWGRP and S_IWOTH bits cleared.

       The command:

           umask -- -w

       sets the mode mask so that subsequently created files have all their write bits cleared. Note that mask operands -r, -w, -x or anything beginning with a <hyphen-minus>, must be preceded  by  "--"
       to keep it from being interpreted as an option.

RATIONALE
       Since umask affects the current shell execution environment, it is generally provided as a shell regular built-in. If it is called in a subshell or separate utility execution environment, such as
       one of the following:

           (umask 002)
           nohup umask ...
           find . -exec umask ... \;

       it does not affect the file mode creation mask of the environment of the caller.

       The description of the historical utility was modified to allow it to use the symbolic modes of chmod.  The -s option used in early proposals was changed to -S because -s could be confused with a
       symbolic_mode form of mask referring to the S_ISUID and S_ISGID bits.

       The default output style is unspecified to permit implementors to provide migration to the new symbolic style at the time most appropriate to their users. A -o flag to force octal mode output was
       omitted because the octal mode may not be sufficient to specify all of the information that may be present in the file mode creation mask when more secure file access permission checks are imple‐
       mented.

       It has been suggested that trusted systems developers might appreciate ameliorating the requirement that the mode mask ``affects'' the file access permissions, since it seems access control lists
       might replace the mode mask to some degree. The wording has been changed to say that it affects the file permission bits, and it leaves the details of the behavior of how they affect the file ac‐
       cess permissions to the description in the System Interfaces volume of POSIX.1‐2017.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Chapter 2, Shell Command Language, chmod

       The Base Definitions volume of POSIX.1‐2017, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

       The System Interfaces volume of POSIX.1‐2017, umask()

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          UMASK(1P)
UMASK(3P)                                                                                POSIX Programmer's Manual                                                                               UMASK(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       umask — set and get the file mode creation mask

SYNOPSIS
       #include <sys/stat.h>

       mode_t umask(mode_t cmask);

DESCRIPTION
       The umask() function shall set the file mode creation mask of the process to cmask and return the previous value of the mask. Only the file permission bits of cmask (see <sys/stat.h>)  are  used;
       the meaning of the other bits is implementation-defined.

       The file mode creation mask of the process is used to turn off permission bits in the mode argument supplied during calls to the following functions:

        *  open(), openat(), creat(), mkdir(), mkdirat(), mkfifo(), and mkfifoat()

        *  mknod(), mknodat()

        *  mq_open()

        *  sem_open()

       Bit positions that are set in cmask are cleared in the mode of the created file.

RETURN VALUE
       The  file permission bits in the value returned by umask() shall be the previous value of the file mode creation mask. The state of any other bits in that value is unspecified, except that a sub‐
       sequent call to umask() with the returned value as cmask shall leave the state of the mask the same as its state before the first call, including any unspecified use of those bits.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       Unsigned argument and return types for umask() were proposed. The return type and the argument were both changed to mode_t.

       Historical implementations have made use of additional bits in cmask for their implementation-defined purposes. The addition of the text that the meaning of other bits of the field is implementa‐
       tion-defined permits these implementations to conform to this volume of POSIX.1‐2017.

FUTURE DIRECTIONS
       None.

SEE ALSO
       creat(), exec, mkdir(), mkfifo(), mknod(), mq_open(), open(), sem_open()

       The Base Definitions volume of POSIX.1‐2017, <sys_stat.h>, <sys_types.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          UMASK(3P)
umask(2)                                                                                    System Calls Manual                                                                                   umask(2)

NAME
       umask - set file mode creation mask

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <sys/stat.h>

       mode_t umask(mode_t mask);

DESCRIPTION
       umask() sets the calling process's file mode creation mask (umask) to mask & 0777 (i.e., only the file permission bits of mask are used), and returns the previous value of the mask.

       The  umask  is  used by open(2), mkdir(2), and other system calls that create files to modify the permissions placed on newly created files or directories.  Specifically, permissions in the umask
       are turned off from the mode argument to open(2) and mkdir(2).

       Alternatively, if the parent directory has a default ACL (see acl(5)), the umask is ignored, the default ACL is inherited, the permission bits are set based on the inherited ACL,  and  permission
       bits absent in the mode argument are turned off.  For example, the following default ACL is equivalent to a umask of 022:

           u::rwx,g::r-x,o::r-x

       Combining the effect of this default ACL with a mode argument of 0666 (rw-rw-rw-), the resulting file permissions would be 0644 (rw-r--r--).

       The constants that should be used to specify mask are described in inode(7).

       The typical default value for the process umask is S_IWGRP | S_IWOTH (octal 022).  In the usual case where the mode argument to open(2) is specified as:

           S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH

       (octal 0666) when creating a new file, the permissions on the resulting file will be:

           S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH

       (because 0666 & ~022 = 0644; i.e. rw-r--r--).

RETURN VALUE
       This system call always succeeds and the previous value of the mask is returned.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, SVr4, 4.3BSD.

NOTES
       A child process created via fork(2) inherits its parent's umask.  The umask is left unchanged by execve(2).

       It  is  impossible  to use umask() to fetch a process's umask without at the same time changing it.  A second call to umask() would then be needed to restore the umask.  The nonatomicity of these
       two steps provides the potential for races in multithreaded programs.

       Since Linux 4.7, the umask of any process can be viewed via the Umask field of /proc/pid/status.  Inspecting this field in /proc/self/status allows a process to retrieve its umask without at  the
       same time changing it.

       The  umask  setting also affects the permissions assigned to POSIX IPC objects (mq_open(3), sem_open(3), shm_open(3)), FIFOs (mkfifo(3)), and UNIX domain sockets (unix(7)) created by the process.
       The umask does not affect the permissions assigned to System V IPC objects created by the process (using msgget(2), semget(2), shmget(2)).

SEE ALSO
       chmod(2), mkdir(2), open(2), stat(2), acl(5)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        umask(2)
