sem_close(3)               Library Functions Manual               sem_close(3)

NAME
       sem_close - close a named semaphore

LIBRARY
       POSIX threads library (libpthread, -lpthread)

SYNOPSIS
       #include <semaphore.h>

       int sem_close(sem_t *sem);

DESCRIPTION
       sem_close() closes the named semaphore referred to by sem, allowing any
       resources that the system has allocated to the calling process for this
       semaphore to be freed.

RETURN VALUE
       On  success sem_close() returns 0; on error, -1 is returned, with errno
       set to indicate the error.

ERRORS
       EINVAL sem is not a valid semaphore.

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │sem_close()                                 │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

NOTES
       All  open named semaphores are automatically closed on process termina‐
       tion, or upon execve(2).

SEE ALSO
       sem_getvalue(3), sem_open(3), sem_post(3), sem_unlink(3),  sem_wait(3),
       sem_overview(7)

Linux man-pages 6.04              2023-03-30                      sem_close(3)
SEM_CLOSE(3P)              POSIX Programmer's Manual             SEM_CLOSE(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       sem_close — close a named semaphore

SYNOPSIS
       #include <semaphore.h>

       int sem_close(sem_t *sem);

DESCRIPTION
       The sem_close() function shall indicate that  the  calling  process  is
       finished  using  the  named semaphore indicated by sem.  The effects of
       calling  sem_close()  for  an  unnamed  semaphore   (one   created   by
       sem_init())  are  undefined.  The sem_close() function shall deallocate
       (that is, make available for reuse by a subsequent sem_open()  by  this
       process)  any  system resources allocated by the system for use by this
       process for this semaphore. The effect of subsequent use of  the  sema‐
       phore  indicated by sem by this process is undefined. If any threads in
       the calling process are currently blocked on the semaphore, the  behav‐
       ior  is  undefined.   If the semaphore has not been removed with a suc‐
       cessful call to sem_unlink(), then sem_close() has  no  effect  on  the
       state  of the semaphore. If the sem_unlink() function has been success‐
       fully invoked for name after the most recent call  to  sem_open()  with
       O_CREAT  for  this  semaphore, then when all processes that have opened
       the semaphore close it, the semaphore is no longer accessible.

RETURN VALUE
       Upon successful completion, a value of zero shall be returned.   Other‐
       wise, a value of -1 shall be returned and errno set to indicate the er‐
       ror.

ERRORS
       The sem_close() function may fail if:

       EINVAL The sem argument is not a valid semaphore descriptor.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       semctl(), semget(), semop(), sem_init(), sem_open(), sem_unlink()

       The Base Definitions volume of POSIX.1‐2017, <semaphore.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                        SEM_CLOSE(3P)
