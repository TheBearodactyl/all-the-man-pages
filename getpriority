GETPRIORITY(3P)                                                                          POSIX Programmer's Manual                                                                         GETPRIORITY(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       getpriority, setpriority — get and set the nice value

SYNOPSIS
       #include <sys/resource.h>

       int getpriority(int which, id_t who);
       int setpriority(int which, id_t who, int value);

DESCRIPTION
       The getpriority() function shall obtain the nice value of a process, process group, or user. The setpriority() function shall set  the  nice  value  of  a  process,  process  group,  or  user  to
       value+{NZERO}.

       Target  processes are specified by the values of the which and who arguments. The which argument may be one of the following values: PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, indicating that the who
       argument is to be interpreted as a process ID, a process group ID, or an effective user ID, respectively. A 0 value for the who argument specifies the current process, process group, or user.

       The nice value set with setpriority() shall be applied to the process. If the process is multi-threaded, the nice value shall affect all system scope threads in the process.

       If more than one process is specified, getpriority() shall return value {NZERO} less than the lowest nice value pertaining to any of the specified processes, and setpriority() shall set the  nice
       values of all of the specified processes to value+{NZERO}.

       The  default  nice value is {NZERO}; lower nice values shall cause more favorable scheduling. While the range of valid nice values is [0,{NZERO}*2-1], implementations may enforce more restrictive
       limits. If value+{NZERO} is less than the system's lowest supported nice value, setpriority() shall set the nice value to the lowest supported value; if value+{NZERO} is greater than the system's
       highest supported nice value, setpriority() shall set the nice value to the highest supported value.

       Only a process with appropriate privileges can lower its nice value.

       Any  processes  or  threads using SCHED_FIFO or SCHED_RR shall be unaffected by a call to setpriority().  This is not considered an error. A process which subsequently reverts to SCHED_OTHER need
       not have its priority affected by such a setpriority() call.

       The effect of changing the nice value may vary depending on the process-scheduling algorithm in effect.

       Since getpriority() can return the value -1 upon successful completion, it is necessary to set errno to 0 prior to a call to getpriority().  If getpriority() returns the value -1, then errno  can
       be checked to see if an error occurred or if the value is a legitimate nice value.

RETURN VALUE
       Upon successful completion, getpriority() shall return an integer in the range -{NZERO} to {NZERO}-1.  Otherwise, -1 shall be returned and errno set to indicate the error.

       Upon successful completion, setpriority() shall return 0; otherwise, -1 shall be returned and errno set to indicate the error.

ERRORS
       The getpriority() and setpriority() functions shall fail if:

       ESRCH  No process could be located using the which and who argument values specified.

       EINVAL The value of the which argument was not recognized, or the value of the who argument is not a valid process ID, process group ID, or user ID.

       In addition, setpriority() may fail if:

       EPERM  A process was located, but neither the real nor effective user ID of the executing process match the effective user ID of the process whose nice value is being changed.

       EACCES A request was made to change the nice value to a lower numeric value and the current process does not have appropriate privileges.

       The following sections are informative.

EXAMPLES
   Using getpriority()
       The following example returns the current scheduling priority for the process ID returned by the call to getpid().

           #include <sys/resource.h>
           ...
           int which = PRIO_PROCESS;
           id_t pid;
           int ret;

           pid = getpid();
           ret = getpriority(which, pid);

   Using setpriority()
       The following example sets the priority for the current process ID to -20.

           #include <sys/resource.h>
           ...
           int which = PRIO_PROCESS;
           id_t pid;
           int priority = -20;
           int ret;

           pid = getpid();
           ret = setpriority(which, pid, priority);

APPLICATION USAGE
       The  getpriority()  and setpriority() functions work with an offset nice value (nice value -{NZERO}). The nice value is in the range [0,2*{NZERO} -1], while the return value for getpriority() and
       the third parameter for setpriority() are in the range [-{NZERO},{NZERO} -1].

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       nice(), sched_get_priority_max(), sched_setscheduler()

       The Base Definitions volume of POSIX.1‐2017, <sys_resource.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                    GETPRIORITY(3P)
getpriority(2)                                                                              System Calls Manual                                                                             getpriority(2)

NAME
       getpriority, setpriority - get/set program scheduling priority

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <sys/resource.h>

       int getpriority(int which, id_t who);
       int setpriority(int which, id_t who, int prio);

DESCRIPTION
       The  scheduling  priority of the process, process group, or user, as indicated by which and who is obtained with the getpriority() call and set with the setpriority() call.  The process attribute
       dealt with by these system calls is the same attribute (also known as the "nice" value) that is dealt with by nice(2).

       The value which is one of PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and who is interpreted relative to which (a process identifier for PRIO_PROCESS, process group identifier  for  PRIO_PGRP,  and  a
       user ID for PRIO_USER).  A zero value for who denotes (respectively) the calling process, the process group of the calling process, or the real user ID of the calling process.

       The prio argument is a value in the range -20 to 19 (but see NOTES below), with -20 being the highest priority and 19 being the lowest priority.  Attempts to set a priority outside this range are
       silently clamped to the range.  The default priority is 0; lower values give a process a higher scheduling priority.

       The getpriority() call returns the highest priority (lowest numerical value) enjoyed by any of the specified processes.  The setpriority() call sets the priorities of all of  the  specified  pro‐
       cesses to the specified value.

       Traditionally,  only  a  privileged process could lower the nice value (i.e., set a higher priority).  However, since Linux 2.6.12, an unprivileged process can decrease the nice value of a target
       process that has a suitable RLIMIT_NICE soft limit; see getrlimit(2) for details.

RETURN VALUE
       On success, getpriority() returns the calling thread's nice value, which may be a negative number.  On error, it returns -1 and sets errno to indicate the error.

       Since a successful call to getpriority() can legitimately return the value -1, it is necessary to clear errno prior to the call, then check errno afterward to determine if -1 is an error or a le‐
       gitimate value.

       setpriority() returns 0 on success.  On failure, it returns -1 and sets errno to indicate the error.

ERRORS
       EACCES The caller attempted to set a lower nice value (i.e., a higher process priority), but did not have the required privilege (on Linux: did not have the CAP_SYS_NICE capability).

       EINVAL which was not one of PRIO_PROCESS, PRIO_PGRP, or PRIO_USER.

       EPERM  A process was located, but its effective user ID did not match either the effective or the real user ID of the caller, and was not privileged (on Linux: did not have the CAP_SYS_NICE capa‐
              bility).  But see NOTES below.

       ESRCH  No process was located using the which and who values specified.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, SVr4, 4.4BSD (these interfaces first appeared in 4.2BSD).

NOTES
       For further details on the nice value, see sched(7).

       Note: the addition of the "autogroup" feature in Linux 2.6.38 means that the nice value no longer has its traditional effect in many circumstances.  For details, see sched(7).

       A child created by fork(2) inherits its parent's nice value.  The nice value is preserved across execve(2).

       The details on the condition for EPERM depend on the system.  The above description is what POSIX.1-2001 says, and seems to be followed on all System V-like systems.  Linux kernels  before  Linux
       2.6.12  required the real or effective user ID of the caller to match the real user of the process who (instead of its effective user ID).  Linux 2.6.12 and later require the effective user ID of
       the caller to match the real or effective user ID of the process who.  All BSD-like systems (SunOS 4.1.3, Ultrix 4.2, 4.3BSD, FreeBSD 4.3, OpenBSD-2.5, ...) behave in the  same  manner  as  Linux
       2.6.12 and later.

   C library/kernel differences
       The getpriority system call returns nice values translated to the range 40..1, since a negative return value would be interpreted as an error.  The glibc wrapper function for getpriority() trans‐
       lates the value back according to the formula unice = 20 - knice (thus, the 40..1 range returned by the kernel corresponds to the range -20..19 as seen by user space).

BUGS
       According to POSIX, the nice value is a per-process setting.  However, under the current Linux/NPTL implementation of POSIX threads, the nice value is a per-thread attribute: different threads in
       the same process can have different nice values.  Portable applications should avoid relying on the Linux behavior, which may be made standards conformant in the future.

SEE ALSO
       nice(1), renice(1), fork(2), capabilities(7), sched(7)

       Documentation/scheduler/sched-nice-design.txt in the Linux kernel source tree (since Linux 2.6.23)

Linux man-pages 6.04                                                                            2023-03-30                                                                                  getpriority(2)
