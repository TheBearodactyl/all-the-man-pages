raise(n)                     Tk Built-In Commands                     raise(n)

______________________________________________________________________________

NAME
       raise - Change a window's position in the stacking order

SYNOPSIS
       raise window ?aboveThis?
______________________________________________________________________________

DESCRIPTION
       If  the aboveThis argument is omitted then the command raises window so
       that it is above all of its siblings in the stacking order (it will not
       be  obscured by any siblings and will obscure any siblings that overlap
       it).  If aboveThis is specified then it must be the path name of a win‐
       dow  that  is either a sibling of window or the descendant of a sibling
       of window.  In this case the raise command will insert window into  the
       stacking  order just above aboveThis (or the ancestor of aboveThis that
       is a sibling of window); this could end up either raising  or  lowering
       window.

       All toplevel windows may be restacked with respect to each other, what‐
       ever their relative path names, but the window manager is not obligated
       to strictly honor requests to restack.

       On  macOS raising an iconified toplevel window causes it to be deiconi‐
       fied.

EXAMPLE
       Make a button appear to be in a sibling frame that  was  created  after
       it.  This  is  is often necessary when building GUIs in the style where
       you create your activity widgets first before laying them  out  on  the
       display:
              button .b -text "Hi there!"
              pack [frame .f -background blue]
              pack [label .f.l1 -text "This is above"]
              pack .b -in .f
              pack [label .f.l2 -text "This is below"]
              raise .b

SEE ALSO
       lower(n)

KEYWORDS
       obscure, raise, stacking order

Tk                                    3.3                             raise(n)
raise(3)                   Library Functions Manual                   raise(3)

NAME
       raise - send a signal to the caller

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <signal.h>

       int raise(int sig);

DESCRIPTION
       The  raise()  function sends a signal to the calling process or thread.
       In a single-threaded program it is equivalent to

           kill(getpid(), sig);

       In a multithreaded program it is equivalent to

           pthread_kill(pthread_self(), sig);

       If the signal causes a handler to be called, raise() will  return  only
       after the signal handler has returned.

RETURN VALUE
       raise() returns 0 on success, and nonzero for failure.

ATTRIBUTES
       For  an  explanation  of  the  terms  used  in  this  section,  see at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │raise()                                     │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       POSIX.1-2001, C89.

       Since glibc 2.3.3, raise() is implemented by calling tgkill(2), if  the
       kernel  supports  that  system  call.  Older glibc versions implemented
       raise() using kill(2).

SEE ALSO
       getpid(2), kill(2), sigaction(2), signal(2), pthread_kill(3), signal(7)

Linux man-pages 6.04              2023-03-30                          raise(3)
RAISE(3P)                  POSIX Programmer's Manual                 RAISE(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       raise — send a signal to the executing process

SYNOPSIS
       #include <signal.h>

       int raise(int sig);

DESCRIPTION
       The functionality described on this reference page is aligned with  the
       ISO C  standard.  Any  conflict between the requirements described here
       and the ISO C standard is unintentional. This  volume  of  POSIX.1‐2017
       defers to the ISO C standard.

       The  raise() function shall send the signal sig to the executing thread
       or process.  If a signal handler is called, the raise() function  shall
       not return until after the signal handler does.

       The effect of the raise() function shall be equivalent to calling:

           pthread_kill(pthread_self(), sig);

RETURN VALUE
       Upon  successful completion, 0 shall be returned. Otherwise, a non-zero
       value shall be returned and errno shall be set to indicate the error.

ERRORS
       The raise() function shall fail if:

       EINVAL The value of the sig argument is an invalid signal number.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       The term ``thread'' is an extension to the ISO C standard.

FUTURE DIRECTIONS
       None.

SEE ALSO
       kill(), sigaction()

       The Base Definitions volume of POSIX.1‐2017, <signal.h>, <sys_types.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                            RAISE(3P)
