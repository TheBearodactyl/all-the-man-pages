PIP-WHEEL(1)                          pip                         PIP-WHEEL(1)

NAME
       pip-wheel - description of pip wheel command

DESCRIPTION
       Build Wheel archives for your requirements and dependencies.

       Wheel is a built-package format, and offers the advantage of not recom‐
       piling your software during every install. For more  details,  see  the
       wheel docs: https://wheel.readthedocs.io/en/latest/

       'pip  wheel'  uses  the  build  system  interface  as  described  here:
       https://pip.pypa.io/en/stable/reference/build-system/

USAGE
          python -m pip wheel [options] <requirement specifier> ...
          python -m pip wheel [options] -r <requirements file> ...
          python -m pip wheel [options] [-e] <vcs project url> ...
          python -m pip wheel [options] [-e] <local project path> ...
          python -m pip wheel [options] <archive url/path> ...

OPTIONS
       -w, --wheel-dir <dir>
              Build wheels into <dir>, where the default is the current  work‐
              ing directory.

       --no-binary <format_control>
              Do  not use binary packages. Can be supplied multiple times, and
              each time adds to the existing value. Accepts either ":all:"  to
              disable  all  binary packages, ":none:" to empty the set (notice
              the colons), or one or more package names  with  commas  between
              them  (no colons). Note that some packages are tricky to compile
              and may fail to install when this option is used on them.

       --only-binary <format_control>
              Do not use source packages. Can be supplied multiple times,  and
              each  time adds to the existing value. Accepts either ":all:" to
              disable all source packages, ":none:" to empty the set,  or  one
              or more package names with commas between them. Packages without
              binary distributions will fail to install when  this  option  is
              used on them.

       --prefer-binary
              Prefer older binary packages over newer source packages.

       --no-build-isolation
              Disable  isolation  when  building a modern source distribution.
              Build dependencies specified by PEP  518  must  be  already  in‐
              stalled if this option is used.

       --use-pep517
              Use   PEP   517   for   building   source   distributions   (use
              --no-use-pep517 to force legacy behaviour).

       --check-build-dependencies
              Check the build dependencies when PEP517 is used.

       -c, --constraint <file>
              Constrain versions using the given constraints file. This option
              can be used multiple times.

       -e, --editable <path/url>
              Install  a  project  in  editable mode (i.e. setuptools "develop
              mode") from a local project path or a VCS url.

       -r, --requirement <file>
              Install from the given requirements file.  This  option  can  be
              used multiple times.

       --src <dir>
              Directory  to check out editable projects into. The default in a
              virtualenv is "<venv path>/src". The default for global installs
              is "<current dir>/src".

       --ignore-requires-python
              Ignore the Requires-Python information.

       --no-deps
              Don't install package dependencies.

       --progress-bar <progress_bar>
              Specify  whether  the progress bar should be used [on, off] (de‐
              fault: on)

       --no-verify
              Don't verify if built wheel is valid.

       --config-settings <settings>
              Configuration settings to be passed to the PEP 517  build  back‐
              end.  Settings  take  the  form  KEY=VALUE.  Use multiple --con‐
              fig-settings options to pass multiple keys to the backend.

       --build-option <options>
              Extra arguments to be supplied to 'setup.py bdist_wheel'.

       --global-option <options>
              Extra global options to be supplied to the setup.py call  before
              the install or bdist_wheel command.

       --pre  Include  pre-release  and  development versions. By default, pip
              only finds stable versions.

       --require-hashes
              Require a hash to check each requirement against, for repeatable
              installs.  This option is implied when any package in a require‐
              ments file has a --hash option.

       --no-clean
              Don't clean up build directories.

AUTHOR
       pip developers

COPYRIGHT
       The pip developers

23.0                             Feb 19, 2023                     PIP-WHEEL(1)
