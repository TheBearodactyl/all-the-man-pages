SETREGID(3P)               POSIX Programmer's Manual              SETREGID(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       setregid — set real and effective group IDs

SYNOPSIS
       #include <unistd.h>

       int setregid(gid_t rgid, gid_t egid);

DESCRIPTION
       The setregid() function shall set the real and effective group  IDs  of
       the calling process.

       If  rgid  is -1, the real group ID shall not be changed; if egid is -1,
       the effective group ID shall not be changed.

       The real and effective group IDs may be set to different values in  the
       same call.

       Only  a  process  with appropriate privileges can set the real group ID
       and the effective group ID to any valid value.

       A non-privileged process can set either the real group ID to the  saved
       set-group-ID from one of the exec family of functions, or the effective
       group ID to the saved set-group-ID or the real group ID.

       If the real group ID is being set (rgid is not -1),  or  the  effective
       group  ID  is being set to a value not equal to the real group ID, then
       the saved set-group-ID of the current process shall be set equal to the
       new effective group ID.

       Any supplementary group IDs of the calling process remain unchanged.

RETURN VALUE
       Upon successful completion, 0 shall be returned. Otherwise, -1 shall be
       returned and errno set to indicate the error, and neither of the  group
       IDs are changed.

ERRORS
       The setregid() function shall fail if:

       EINVAL The  value  of  the  rgid or egid argument is invalid or out-of-
              range.

       EPERM  The process does not have appropriate privileges  and  a  change
              other than changing the real group ID to the saved set-group-ID,
              or changing the effective group ID to the real group ID  or  the
              saved set-group-ID, was requested.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       If a non-privileged set-group-ID process sets its effective group ID to
       its real group ID, it can only set its effective group ID back  to  the
       previous  value if rgid was -1 in the setregid() call, since the saved-
       group-ID is not changed in that case. If rgid was  equal  to  the  real
       group  ID in the setregid() call, then the saved set-group-ID will also
       have been changed to the real user ID.

RATIONALE
       Earlier versions of this standard did not  specify  whether  the  saved
       set-group-ID  was  affected by setregid() calls. This version specifies
       common existing practice that constitutes an  important  security  fea‐
       ture.  The  ability  to  set both the effective group ID and saved set-
       group-ID to be the same as the real group ID means  that  any  security
       weakness in code that is executed after that point cannot result in ma‐
       licious code being executed with the previous effective group ID. Priv‐
       ileged  applications could already do this using just setgid(), but for
       non-privileged applications the only standard method  available  is  to
       use this feature of setregid().

FUTURE DIRECTIONS
       None.

SEE ALSO
       exec,  getegid(),  geteuid(), getgid(), getuid(), setegid(), seteuid(),
       setgid(), setreuid(), setuid()

       The Base Definitions volume of POSIX.1‐2017, <unistd.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                         SETREGID(3P)
setreuid(2)                   System Calls Manual                  setreuid(2)

NAME
       setreuid, setregid - set real and/or effective user or group ID

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       int setreuid(uid_t ruid, uid_t euid);
       int setregid(gid_t rgid, gid_t egid);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       setreuid(), setregid():
           _XOPEN_SOURCE >= 500
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE

DESCRIPTION
       setreuid() sets real and effective user IDs of the calling process.

       Supplying a value of -1 for either the real or effective user ID forces
       the system to leave that ID unchanged.

       Unprivileged processes may only set the effective user ID to  the  real
       user ID, the effective user ID, or the saved set-user-ID.

       Unprivileged users may only set the real user ID to the real user ID or
       the effective user ID.

       If the real user ID is set (i.e., ruid is not -1) or the effective user
       ID  is set to a value not equal to the previous real user ID, the saved
       set-user-ID will be set to the new effective user ID.

       Completely analogously, setregid() sets real and effective  group  ID's
       of the calling process, and all of the above holds with "group" instead
       of "user".

RETURN VALUE
       On success, zero is returned.  On error, -1 is returned, and  errno  is
       set to indicate the error.

       Note: there are cases where setreuid() can fail even when the caller is
       UID 0; it is a grave security error to omit checking for a failure  re‐
       turn from setreuid().

ERRORS
       EAGAIN The call would change the caller's real UID (i.e., ruid does not
              match the caller's real UID), but there was a temporary  failure
              allocating the necessary kernel data structures.

       EAGAIN ruid  does  not  match the caller's real UID and this call would
              bring the number of processes belonging to the real user ID ruid
              over the caller's RLIMIT_NPROC resource limit.  Since Linux 3.1,
              this error case no longer occurs (but robust applications should
              check  for  this  error);  see  the description of EAGAIN in ex‐
              ecve(2).

       EINVAL One or more of the target user or group IDs is not valid in this
              user namespace.

       EPERM  The  calling  process is not privileged (on Linux, does not have
              the necessary capability in its user  namespace:  CAP_SETUID  in
              the case of setreuid(), or CAP_SETGID in the case of setregid())
              and a change other than (i) swapping the effective user  (group)
              ID  with  the  real  user (group) ID, or (ii) setting one to the
              value of the other or (iii) setting the effective  user  (group)
              ID  to  the  value of the saved set-user-ID (saved set-group-ID)
              was specified.

VERSIONS
       POSIX.1 does not specify all of the UID changes that Linux permits  for
       an  unprivileged process.  For setreuid(), the effective user ID can be
       made the same as the real user ID or the saved set-user-ID, and  it  is
       unspecified  whether unprivileged processes may set the real user ID to
       the real user ID, the effective user ID, or the saved set-user-ID.  For
       setregid(),  the real group ID can be changed to the value of the saved
       set-group-ID, and the effective group ID can be changed to the value of
       the  real  group  ID or the saved set-group-ID.  The precise details of
       what ID changes are permitted vary across implementations.

       POSIX.1 makes no specification about the effect of these calls  on  the
       saved set-user-ID and saved set-group-ID.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, 4.3BSD (first appeared in 4.2BSD).

       Setting  the  effective user (group) ID to the saved set-user-ID (saved
       set-group-ID) is possible since Linux 1.1.37 (1.1.38).

       The original Linux setreuid() and  setregid()  system  calls  supported
       only  16-bit  user  and  group  IDs.  Subsequently, Linux 2.4 added se‐
       treuid32() and setregid32(), supporting  32-bit  IDs.   The  glibc  se‐
       treuid()  and  setregid() wrapper functions transparently deal with the
       variations across kernel versions.

   C library/kernel differences
       At the kernel level, user IDs and group IDs are a per-thread attribute.
       However,  POSIX  requires  that all threads in a process share the same
       credentials.  The NPTL threading implementation handles the  POSIX  re‐
       quirements  by providing wrapper functions for the various system calls
       that change process UIDs and GIDs.  These wrapper functions  (including
       those for setreuid() and setregid()) employ a signal-based technique to
       ensure that when one thread  changes  credentials,  all  of  the  other
       threads in the process also change their credentials.  For details, see
       nptl(7).

SEE ALSO
       getgid(2), getuid(2), seteuid(2), setgid(2),  setresuid(2),  setuid(2),
       capabilities(7), credentials(7), user_namespaces(7)

Linux man-pages 6.04              2023-03-30                       setreuid(2)
