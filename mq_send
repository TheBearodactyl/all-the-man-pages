mq_send(3)                                                                               Library Functions Manual                                                                               mq_send(3)

NAME
       mq_send, mq_timedsend - send a message to a message queue

LIBRARY
       Real-time library (librt, -lrt)

SYNOPSIS
       #include <mqueue.h>

       int mq_send(mqd_t mqdes, const char msg_ptr[.msg_len],
                     size_t msg_len, unsigned int msg_prio);

       #include <time.h>
       #include <mqueue.h>

       int mq_timedsend(mqd_t mqdes, const char msg_ptr[.msg_len],
                     size_t msg_len, unsigned int msg_prio,
                     const struct timespec *abs_timeout);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       mq_timedsend():
           _POSIX_C_SOURCE >= 200112L

DESCRIPTION
       mq_send() adds the message pointed to by msg_ptr to the message queue referred to by the message queue descriptor mqdes.  The msg_len argument specifies the length of the message pointed to by
       msg_ptr; this length must be less than or equal to the queue's mq_msgsize attribute.  Zero-length messages are allowed.

       The msg_prio argument is a nonnegative integer that specifies the priority of this message.  Messages are placed on the queue in decreasing order of priority, with newer messages of the same pri‐
       ority being placed after older messages with the same priority.  See mq_overview(7) for details on the range for the message priority.

       If the message queue is already full (i.e., the number of messages on the queue equals the queue's mq_maxmsg attribute), then, by default, mq_send() blocks until sufficient space becomes avail‐
       able to allow the message to be queued, or until the call is interrupted by a signal handler.  If the O_NONBLOCK flag is enabled for the message queue description, then the call instead fails im‐
       mediately with the error EAGAIN.

       mq_timedsend() behaves just like mq_send(), except that if the queue is full and the O_NONBLOCK flag is not enabled for the message queue description, then abs_timeout points to a structure which
       specifies how long the call will block.  This value is an absolute timeout in seconds and nanoseconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC), specified in a timespec(3) structure.

       If the message queue is full, and the timeout has already expired by the time of the call, mq_timedsend() returns immediately.

RETURN VALUE
       On success, mq_send() and mq_timedsend() return zero; on error, -1 is returned, with errno set to indicate the error.

ERRORS
       EAGAIN The queue was full, and the O_NONBLOCK flag was set for the message queue description referred to by mqdes.

       EBADF  The descriptor specified in mqdes was invalid or not opened for writing.

       EINTR  The call was interrupted by a signal handler; see signal(7).

       EINVAL The call would have blocked, and abs_timeout was invalid, either because tv_sec was less than zero, or because tv_nsec was less than zero or greater than 1000 million.

       EMSGSIZE
              msg_len was greater than the mq_msgsize attribute of the message queue.

       ETIMEDOUT
              The call timed out before a message could be transferred.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │mq_send(), mq_timedsend()                                                                                                                                               │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
       On Linux, mq_timedsend() is a system call, and mq_send() is a library function layered on top of that system call.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

SEE ALSO
       mq_close(3), mq_getattr(3), mq_notify(3), mq_open(3), mq_receive(3), mq_unlink(3), timespec(3), mq_overview(7), time(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                      mq_send(3)
MQ_SEND(3P)                                                                              POSIX Programmer's Manual                                                                             MQ_SEND(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       mq_send, mq_timedsend — send a message to a message queue (REALTIME)

SYNOPSIS
       #include <mqueue.h>

       int mq_send(mqd_t mqdes, const char *msg_ptr, size_t msg_len,
           unsigned msg_prio);

       #include <mqueue.h>
       #include <time.h>

       int mq_timedsend(mqd_t mqdes, const char *msg_ptr, size_t msg_len,
           unsigned msg_prio, const struct timespec *abstime);

DESCRIPTION
       The mq_send() function shall add the message pointed to by the argument msg_ptr to the message queue specified by mqdes.  The msg_len argument specifies the  length  of  the  message,  in  bytes,
       pointed to by msg_ptr.  The value of msg_len shall be less than or equal to the mq_msgsize attribute of the message queue, or mq_send() shall fail.

       If the specified message queue is not full, mq_send() shall behave as if the message is inserted into the message queue at the position indicated by the msg_prio argument. A message with a larger
       numeric value of msg_prio shall be inserted before messages with lower values of msg_prio.  A message shall be inserted after other messages in the queue, if any, with equal msg_prio.  The  value
       of msg_prio shall be less than {MQ_PRIO_MAX}.

       If  the  specified  message queue is full and O_NONBLOCK is not set in the message queue description associated with mqdes, mq_send() shall block until space becomes available to enqueue the mes‐
       sage, or until mq_send() is interrupted by a signal. If more than one thread is waiting to send when space becomes available in the message queue and the Priority Scheduling option is  supported,
       then  the thread of the highest priority that has been waiting the longest shall be unblocked to send its message. Otherwise, it is unspecified which waiting thread is unblocked. If the specified
       message queue is full and O_NONBLOCK is set in the message queue description associated with mqdes, the message shall not be queued and mq_send() shall return an error.

       The mq_timedsend() function shall add a message to the message queue specified by mqdes in the manner defined for the mq_send() function. However, if the  specified  message  queue  is  full  and
       O_NONBLOCK  is  not  set in the message queue description associated with mqdes, the wait for sufficient room in the queue shall be terminated when the specified timeout expires. If O_NONBLOCK is
       set in the message queue description, this function shall be equivalent to mq_send().

       The timeout shall expire when the absolute time specified by abstime passes, as measured by the clock on which timeouts are based (that is, when the value of that  clock  equals  or  exceeds  ab‐
       stime), or if the absolute time specified by abstime has already been passed at the time of the call.

       The  timeout shall be based on the CLOCK_REALTIME clock.  The resolution of the timeout shall be the resolution of the clock on which it is based. The timespec argument is defined in the <time.h>
       header.

       Under no circumstance shall the operation fail with a timeout if there is sufficient room in the queue to add the message immediately. The validity of the abstime parameter need  not  be  checked
       when there is sufficient room in the queue.

RETURN VALUE
       Upon successful completion, the mq_send() and mq_timedsend() functions shall return a value of zero. Otherwise, no message shall be enqueued, the functions shall return -1, and errno shall be set
       to indicate the error.

ERRORS
       The mq_send() and mq_timedsend() functions shall fail if:

       EAGAIN The O_NONBLOCK flag is set in the message queue description associated with mqdes, and the specified message queue is full.

       EBADF  The mqdes argument is not a valid message queue descriptor open for writing.

       EINTR  A signal interrupted the call to mq_send() or mq_timedsend().

       EINVAL The value of msg_prio was outside the valid range.

       EINVAL The process or thread would have blocked, and the abstime parameter specified a nanoseconds field value less than zero or greater than or equal to 1000 million.

       EMSGSIZE
              The specified message length, msg_len, exceeds the message size attribute of the message queue.

       ETIMEDOUT
              The O_NONBLOCK flag was not set when the message queue was opened, but the timeout expired before the message could be added to the queue.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       The value of the symbol {MQ_PRIO_MAX} limits the number of priority levels supported by the application.  Message priorities range from 0 to {MQ_PRIO_MAX}-1.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       mq_open(), mq_receive(), mq_setattr(), time()

       The Base Definitions volume of POSIX.1‐2017, <mqueue.h>, <time.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                        MQ_SEND(3P)
