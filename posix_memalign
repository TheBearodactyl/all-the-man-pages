posix_memalign(3)          Library Functions Manual          posix_memalign(3)

NAME
       posix_memalign,  aligned_alloc,  memalign,  valloc,  pvalloc - allocate
       aligned memory

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdlib.h>

       int posix_memalign(void **memptr, size_t alignment, size_t size);
       void *aligned_alloc(size_t alignment, size_t size);
       [[deprecated]] void *valloc(size_t size);

       #include <malloc.h>

       [[deprecated]] void *memalign(size_t alignment, size_t size);
       [[deprecated]] void *pvalloc(size_t size);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       posix_memalign():
           _POSIX_C_SOURCE >= 200112L

       aligned_alloc():
           _ISOC11_SOURCE

       valloc():
           Since glibc 2.12:
               (_XOPEN_SOURCE >= 500) && !(_POSIX_C_SOURCE >= 200112L)
                   || /* glibc >= 2.19: */ _DEFAULT_SOURCE
                   || /* glibc <= 2.19: */ _SVID_SOURCE || _BSD_SOURCE
           Before glibc 2.12:
               _BSD_SOURCE || _XOPEN_SOURCE >= 500

DESCRIPTION
       The function posix_memalign() allocates size bytes and places  the  ad‐
       dress of the allocated memory in *memptr.  The address of the allocated
       memory will be a multiple of alignment, which must be a  power  of  two
       and  a  multiple of sizeof(void *).  This address can later be success‐
       fully passed to free(3).  If size  is  0,  then  the  value  placed  in
       *memptr is either NULL or a unique pointer value.

       The  obsolete  function  memalign()  allocates size bytes and returns a
       pointer to the allocated memory.  The memory address will be a multiple
       of alignment, which must be a power of two.

       The  function aligned_alloc() is the same as memalign(), except for the
       added restriction that size should be a multiple of alignment.

       The obsolete function valloc()  allocates  size  bytes  and  returns  a
       pointer to the allocated memory.  The memory address will be a multiple
       of the page  size.   It  is  equivalent  to  memalign(sysconf(_SC_PAGE‐
       SIZE),size).

       The  obsolete function pvalloc() is similar to valloc(), but rounds the
       size of the allocation up to the next multiple of the system page size.

       For all of these functions, the memory is not zeroed.

RETURN VALUE
       aligned_alloc(), memalign(), valloc(), and pvalloc() return  a  pointer
       to  the  allocated  memory on success.  On error, NULL is returned, and
       errno is set to indicate the error.

       posix_memalign() returns zero on success, or one of  the  error  values
       listed  in the next section on failure.  The value of errno is not set.
       On Linux (and other systems), posix_memalign() does not  modify  memptr
       on  failure.   A  requirement  standardizing this behavior was added in
       POSIX.1-2008 TC2.

ERRORS
       EINVAL The alignment argument was not a power of two, or was not a mul‐
              tiple of sizeof(void *).

       ENOMEM There was insufficient memory to fulfill the allocation request.

ATTRIBUTES
       For  an  explanation  of  the  terms  used  in  this  section,  see at‐
       tributes(7).

       ┌─────────────────────────────────────┬───────────────┬────────────────┐
       │Interface                            │ Attribute     │ Value          │
       ├─────────────────────────────────────┼───────────────┼────────────────┤
       │aligned_alloc(), memalign(),         │ Thread safety │ MT-Safe        │
       │posix_memalign()                     │               │                │
       ├─────────────────────────────────────┼───────────────┼────────────────┤
       │valloc(), pvalloc()                  │ Thread safety │ MT-Unsafe init │
       └─────────────────────────────────────┴───────────────┴────────────────┘

STANDARDS
       aligned_alloc()
              C11.

       posix_memalign()
              POSIX.1-2008.

       memalign()
       valloc()
              None.

       pvalloc()
              GNU.

HISTORY
       aligned_alloc()
              glibc 2.16.  C11.

       posix_memalign()
              glibc 2.1.91.  POSIX.1d, POSIX.1-2001.

       memalign()
              glibc 2.0.  SunOS 4.1.3.

       valloc()
              glibc  2.0.   3.0BSD.   Documented as obsolete in 4.3BSD, and as
              legacy in SUSv2.

       pvalloc()
              glibc 2.0.

   Headers
       Everybody agrees that posix_memalign() is declared in <stdlib.h>.

       On some systems memalign() is declared in <stdlib.h> instead  of  <mal‐
       loc.h>.

       According to SUSv2, valloc() is declared in <stdlib.h>.  glibc declares
       it in <malloc.h>, and also  in  <stdlib.h>  if  suitable  feature  test
       macros are defined (see above).

NOTES
       On  many systems there are alignment restrictions, for example, on buf‐
       fers used for direct block  device  I/O.   POSIX  specifies  the  path‐
       conf(path,_PC_REC_XFER_ALIGN) call that tells what alignment is needed.
       Now one can use posix_memalign() to satisfy this requirement.

       posix_memalign() verifies that alignment matches the  requirements  de‐
       tailed  above.  memalign() may not check that the alignment argument is
       correct.

       POSIX requires that memory obtained from posix_memalign() can be  freed
       using free(3).  Some systems provide no way to reclaim memory allocated
       with memalign() or valloc() (because one can pass  to  free(3)  only  a
       pointer  obtained  from malloc(3), while, for example, memalign() would
       call malloc(3) and then align the obtained value).  The glibc implemen‐
       tation  allows  memory  obtained  from any of these functions to be re‐
       claimed with free(3).

       The glibc malloc(3) always returns 8-byte aligned memory addresses,  so
       these functions are needed only if you require larger alignment values.

SEE ALSO
       brk(2), getpagesize(2), free(3), malloc(3)

Linux man-pages 6.04              2023-03-30                 posix_memalign(3)
POSIX_MEMALIGN(3P)         POSIX Programmer's Manual        POSIX_MEMALIGN(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       posix_memalign — aligned memory allocation (ADVANCED REALTIME)

SYNOPSIS
       #include <stdlib.h>

       int posix_memalign(void **memptr, size_t alignment, size_t size);

DESCRIPTION
       The posix_memalign() function shall allocate size bytes  aligned  on  a
       boundary  specified by alignment, and shall return a pointer to the al‐
       located memory in memptr.  The value of alignment shall be a  power  of
       two multiple of sizeof(void *).

       Upon  successful  completion, the value pointed to by memptr shall be a
       multiple of alignment.

       If the size of the space requested is 0, the  behavior  is  implementa‐
       tion-defined: either a null pointer shall be returned in memptr, or the
       behavior shall be as if the size were some non-zero value, except  that
       the  behavior  is undefined if the the value returned in memptr is used
       to access an object.

       The free() function shall deallocate memory that  has  previously  been
       allocated by posix_memalign().

RETURN VALUE
       Upon  successful completion, posix_memalign() shall return zero; other‐
       wise, an error number shall be returned to indicate the error  and  the
       contents  of memptr shall either be left unmodified or be set to a null
       pointer.

       If size is 0, either:

        *  posix_memalign() shall not attempt to allocate any space, in  which
           case  either  an  implementation-defined  error number shall be re‐
           turned, or zero shall be returned with a null pointer  returned  in
           memptr, or

        *  posix_memalign()  shall  attempt to allocate some space and, if the
           allocation succeeds, zero shall be returned and a  pointer  to  the
           allocated space shall be returned in memptr.  The application shall
           ensure that the pointer is not used to access an object.

ERRORS
       The posix_memalign() function shall fail if:

       EINVAL The value of the alignment parameter is not a power of two  mul‐
              tiple of sizeof(void *).

       ENOMEM There is insufficient memory available with the requested align‐
              ment.

       The following sections are informative.

EXAMPLES
       The following example shows how applications can obtain consistent  be‐
       havior  on error by setting *memptr to be a null pointer before calling
       posix_memalign().

           void *ptr = NULL;
           ...
           //do some work, which might goto error
           if (posix_memalign(&ptr, align, size))
               goto error;

           //do some more work, which might goto error
           ...
           error:
               free(ptr);
               //more cleanup;

APPLICATION USAGE
       The posix_memalign() function is part of the Advisory  Information  op‐
       tion and need not be provided on all implementations.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       free(), malloc()

       The Base Definitions volume of POSIX.1‐2017, <stdlib.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                   POSIX_MEMALIGN(3P)
