mbstowcs(3)                                                                              Library Functions Manual                                                                              mbstowcs(3)

NAME
       mbstowcs - convert a multibyte string to a wide-character string

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdlib.h>

       size_t mbstowcs(wchar_t dest[restrict .n], const char *restrict src,
                       size_t n);

DESCRIPTION
       If  dest is not NULL, the mbstowcs() function converts the multibyte string src to a wide-character string starting at dest.  At most n wide characters are written to dest.  The sequence of char‐
       acters in the string src shall begin in the initial shift state.  The conversion can stop for three reasons:

       •  An invalid multibyte sequence has been encountered.  In this case, (size_t) -1 is returned.

       •  n non-L'\0' wide characters have been stored at dest.  In this case, the number of wide characters written to dest is returned, but the shift state at this point is lost.

       •  The multibyte string has been completely converted, including the terminating null character ('\0').  In this case, the number of wide characters written to  dest,  excluding  the  terminating
          null wide character, is returned.

       The programmer must ensure that there is room for at least n wide characters at dest.

       If dest is NULL, n is ignored, and the conversion proceeds as above, except that the converted wide characters are not written out to memory, and that no length limit exists.

       In order to avoid the case 2 above, the programmer should make sure n is greater than or equal to mbstowcs(NULL,src,0)+1.

RETURN VALUE
       The  mbstowcs()  function  returns  the  number  of wide characters that make up the converted part of the wide-character string, not including the terminating null wide character.  If an invalid
       multibyte sequence was encountered, (size_t) -1 is returned.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │mbstowcs()                                                                                                                                                              │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
       The function mbsrtowcs(3) provides a better interface to the same functionality.

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       POSIX.1-2001, C99.

NOTES
       The behavior of mbstowcs() depends on the LC_CTYPE category of the current locale.

EXAMPLES
       The program below illustrates the use of mbstowcs(), as well as some of the wide character classification functions.  An example run is the following:

           $ ./t_mbstowcs de_DE.UTF-8 Grüße!
           Length of source string (excluding terminator):
               8 bytes
               6 multibyte characters

           Wide character string is: Grüße! (6 characters)
               G alpha upper
               r alpha lower
               ü alpha lower
               ß alpha lower
               e alpha lower
               ! !alpha

   Program source

       #include <locale.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <string.h>
       #include <wchar.h>
       #include <wctype.h>

       int
       main(int argc, char *argv[])
       {
           size_t mbslen;      /* Number of multibyte characters in source */
           wchar_t *wcs;       /* Pointer to converted wide character string */

           if (argc < 3) {
               fprintf(stderr, "Usage: %s <locale> <string>\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           /* Apply the specified locale. */

           if (setlocale(LC_ALL, argv[1]) == NULL) {
               perror("setlocale");
               exit(EXIT_FAILURE);
           }

           /* Calculate the length required to hold argv[2] converted to
              a wide character string. */

           mbslen = mbstowcs(NULL, argv[2], 0);
           if (mbslen == (size_t) -1) {
               perror("mbstowcs");
               exit(EXIT_FAILURE);
           }

           /* Describe the source string to the user. */

           printf("Length of source string (excluding terminator):\n");
           printf("    %zu bytes\n", strlen(argv[2]));
           printf("    %zu multibyte characters\n\n", mbslen);

           /* Allocate wide character string of the desired size.  Add 1
              to allow for terminating null wide character (L'\0'). */

           wcs = calloc(mbslen + 1, sizeof(*wcs));
           if (wcs == NULL) {
               perror("calloc");
               exit(EXIT_FAILURE);
           }

           /* Convert the multibyte character string in argv[2] to a
              wide character string. */

           if (mbstowcs(wcs, argv[2], mbslen + 1) == (size_t) -1) {
               perror("mbstowcs");
               exit(EXIT_FAILURE);
           }

           printf("Wide character string is: %ls (%zu characters)\n",
                  wcs, mbslen);

           /* Now do some inspection of the classes of the characters in
              the wide character string. */

           for (wchar_t *wp = wcs; *wp != 0; wp++) {
               printf("    %lc ", (wint_t) *wp);

               if (!iswalpha(*wp))
                   printf("!");
               printf("alpha ");

               if (iswalpha(*wp)) {
                   if (iswupper(*wp))
                       printf("upper ");

                   if (iswlower(*wp))
                       printf("lower ");
               }

               putchar('\n');
           }

           exit(EXIT_SUCCESS);
       }

SEE ALSO
       mblen(3), mbsrtowcs(3), mbtowc(3), wcstombs(3), wctomb(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                     mbstowcs(3)
MBSTOWCS(3P)                                                                             POSIX Programmer's Manual                                                                            MBSTOWCS(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       mbstowcs — convert a character string to a wide-character string

SYNOPSIS
       #include <stdlib.h>

       size_t mbstowcs(wchar_t *restrict pwcs, const char *restrict s,
           size_t n);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       The  mbstowcs()  function  shall  convert  a sequence of characters that begins in the initial shift state from the array pointed to by s into a sequence of corresponding wide-character codes and
       shall store not more than n wide-character codes into the array pointed to by pwcs.  No characters that follow a null byte (which is converted into a wide-character code with value  0)  shall  be
       examined or converted. Each character shall be converted as if by a call to mbtowc(), except that the shift state of mbtowc() is not affected.

       No more than n elements shall be modified in the array pointed to by pwcs.  If copying takes place between objects that overlap, the behavior is undefined.

       The behavior of this function shall be affected by the LC_CTYPE category of the current locale.  If pwcs is a null pointer, mbstowcs() shall return the length required to convert the entire array
       regardless of the value of n, but no values are stored.

RETURN VALUE
       If an invalid character is encountered, mbstowcs() shall return (size_t)-1 and shall set errno to indicate the error.

       Otherwise, mbstowcs() shall return the number of the array elements modified (or required if pwcs is null), not including a terminating 0 code, if any. The array shall not be  zero-terminated  if
       the value returned is n.

ERRORS
       The mbstowcs() function shall fail if:

       EILSEQ An invalid character sequence is detected. In the POSIX locale an [EILSEQ] error cannot occur since all byte values are valid characters.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       mblen(), mbtowc(), wctomb(), wcstombs()

       The Base Definitions volume of POSIX.1‐2017, <stdlib.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                       MBSTOWCS(3P)
