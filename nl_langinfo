nl_langinfo(3)                                                                           Library Functions Manual                                                                           nl_langinfo(3)

NAME
       nl_langinfo, nl_langinfo_l - query language and locale information

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <langinfo.h>

       char *nl_langinfo(nl_item item);
       char *nl_langinfo_l(nl_item item, locale_t locale);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       nl_langinfo_l():
           Since glibc 2.24:
               _POSIX_C_SOURCE >= 200809L
           glibc 2.23 and earlier:
               _POSIX_C_SOURCE >= 200112L

DESCRIPTION
       The nl_langinfo() and nl_langinfo_l() functions provide access to locale information in a more flexible way than localeconv(3).  nl_langinfo() returns a string which is the value corresponding to
       item in the program's current global locale.  nl_langinfo_l() returns a string which is the value corresponding to item for the locale identified by the locale object locale, which was previously
       created by newlocale(3).  Individual and additional elements of the locale categories can be queried.

       Examples for the locale elements that can be specified in item using the constants defined in <langinfo.h> are:

       CODESET (LC_CTYPE)
              Return a string with the name of the character encoding used in the selected locale, such as "UTF-8", "ISO-8859-1", or "ANSI_X3.4-1968" (better known as US-ASCII).  This is the same string
              that you get with "locale charmap".  For a list of character encoding names, try "locale -m" (see locale(1)).

       D_T_FMT (LC_TIME)
              Return a string that can be used as a format string for strftime(3) to represent time and date in a locale-specific way (%c conversion specification).

       D_FMT (LC_TIME)
              Return a string that can be used as a format string for strftime(3) to represent a date in a locale-specific way (%x conversion specification).

       T_FMT (LC_TIME)
              Return a string that can be used as a format string for strftime(3) to represent a time in a locale-specific way (%X conversion specification).

       AM_STR (LC_TIME)
              Return a string that represents affix for ante meridiem (before noon, "AM") time.  (Used in %p strftime(3) conversion specification.)

       PM_STR (LC_TIME)
              Return a string that represents affix for post meridiem (before midnight, "PM") time.  (Used in %p strftime(3) conversion specification.)

       T_FMT_AMPM (LC_TIME)
              Return a string that can be used as a format string for strftime(3) to represent a time in a.m. or p.m. notation in a locale-specific way (%r conversion specification).

       ERA (LC_TIME)
              Return era description, which contains information about how years are counted and displayed for each era in a locale.  Each era description segment shall have the format:

                     direction:offset:start_date:end_date:era_name:era_format

              according to the definitions below:

              direction   Either a "+" or a "-" character.  The "+" means that years increase from the start_date towards the end_date, "-" means the opposite.

              offset      The epoch year of the start_date.

              start_date  A date in the form yyyy/mm/dd, where yyyy, mm, and dd are the year, month, and day numbers respectively of the start of the era.

              end_date    The ending date of the era, in the same format as the start_date, or one of the two special values "-*" (minus infinity) or "+*" (plus infinity).

              era_name    The name of the era, corresponding to the %EC strftime(3) conversion specification.

              era_format  The format of the year in the era, corresponding to the %EY strftime(3) conversion specification.

              Era description segments are separated by semicolons.  Most locales do not define this value.  Examples of locales that do define this value are the Japanese and Thai locales.

       ERA_D_T_FMT (LC_TIME)
              Return a string that can be used as a format string for strftime(3) for alternative representation of time and date in a locale-specific way (%Ec conversion specification).

       ERA_D_FMT (LC_TIME)
              Return a string that can be used as a format string for strftime(3) for alternative representation of a date in a locale-specific way (%Ex conversion specification).

       ERA_T_FMT (LC_TIME)
              Return a string that can be used as a format string for strftime(3) for alternative representation of a time in a locale-specific way (%EX conversion specification).

       DAY_{1–7} (LC_TIME)
              Return name of the n-th day of the week.  [Warning: this follows the US convention DAY_1 = Sunday, not the international convention (ISO 8601) that Monday is the first day  of  the  week.]
              (Used in %A strftime(3) conversion specification.)

       ABDAY_{1–7} (LC_TIME)
              Return abbreviated name of the n-th day of the week.  (Used in %a strftime(3) conversion specification.)

       MON_{1–12} (LC_TIME)
              Return name of the n-th month.  (Used in %B strftime(3) conversion specification.)

       ABMON_{1–12} (LC_TIME)
              Return abbreviated name of the n-th month.  (Used in %b strftime(3) conversion specification.)

       RADIXCHAR (LC_NUMERIC)
              Return radix character (decimal dot, decimal comma, etc.).

       THOUSEP (LC_NUMERIC)
              Return separator character for thousands (groups of three digits).

       YESEXPR (LC_MESSAGES)
              Return a regular expression that can be used with the regex(3) function to recognize a positive response to a yes/no question.

       NOEXPR (LC_MESSAGES)
              Return a regular expression that can be used with the regex(3) function to recognize a negative response to a yes/no question.

       CRNCYSTR (LC_MONETARY)
              Return  the  currency  symbol,  preceded by "-" if the symbol should appear before the value, "+" if the symbol should appear after the value, or "." if the symbol should replace the radix
              character.

       The above list covers just some examples of items that can be requested.  For a more detailed list, consult The GNU C Library Reference Manual.

RETURN VALUE
       On success, these functions return a pointer to a string which is the value corresponding to item in the specified locale.

       If no locale has been selected by setlocale(3) for the appropriate category, nl_langinfo() return a pointer to the corresponding string in the "C" locale.  The same is true of nl_langinfo_l()  if
       locale specifies a locale where langinfo data is not defined.

       If item is not valid, a pointer to an empty string is returned.

       The pointer returned by these functions may point to static data that may be overwritten, or the pointer itself may be invalidated, by a subsequent call to nl_langinfo(), nl_langinfo_l(), or set‐
       locale(3).  The same statements apply to nl_langinfo_l() if the locale object referred to by locale is freed or modified by freelocale(3) or newlocale(3).

       POSIX specifies that the application may not modify the string returned by these functions.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬────────────────┐
       │Interface                                                                                                                                                        │ Attribute     │ Value          │
       ├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼────────────────┤
       │nl_langinfo()                                                                                                                                                    │ Thread safety │ MT-Safe locale │
       └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴────────────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, SUSv2.

NOTES
       The behavior of nl_langinfo_l() is undefined if locale is the special locale object LC_GLOBAL_LOCALE or is not a valid locale object handle.

EXAMPLES
       The following program sets the character type and the numeric locale according to the environment and queries the terminal character set and the radix character.

       #include <langinfo.h>
       #include <locale.h>
       #include <stdio.h>
       #include <stdlib.h>

       int
       main(void)
       {
           setlocale(LC_CTYPE, "");
           setlocale(LC_NUMERIC, "");

           printf("%s\n", nl_langinfo(CODESET));
           printf("%s\n", nl_langinfo(RADIXCHAR));

           exit(EXIT_SUCCESS);
       }

SEE ALSO
       locale(1), localeconv(3), setlocale(3), charsets(7), locale(7)

       The GNU C Library Reference Manual

Linux man-pages 6.04                                                                            2023-03-30                                                                                  nl_langinfo(3)
NL_LANGINFO(3P)                                                                          POSIX Programmer's Manual                                                                         NL_LANGINFO(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       nl_langinfo, nl_langinfo_l — language information

SYNOPSIS
       #include <langinfo.h>

       char *nl_langinfo(nl_item item);
       char *nl_langinfo_l(nl_item item, locale_t locale);

DESCRIPTION
       The nl_langinfo() and nl_langinfo_l() functions shall return a pointer to a string containing information relevant to the particular language or cultural area defined in the current locale, or in
       the locale represented by locale, respectively (see <langinfo.h>).  The manifest constant names and values of item are defined in <langinfo.h>.  For example:

           nl_langinfo(ABDAY_1)

       would return a pointer to the string "Dom" if the identified language was Portuguese, and "Sun" if the identified language was English.

           nl_langinfo_l(ABDAY_1, loc)

       would  return  a  pointer to the string "Dom" if the identified language of the locale represented by loc was Portuguese, and "Sun" if the identified language of the locale represented by loc was
       English.

       The nl_langinfo() function need not be thread-safe.

       The behavior is undefined if the locale argument to nl_langinfo_l() is the special locale object LC_GLOBAL_LOCALE or is not a valid locale object handle.

RETURN VALUE
       In a locale where langinfo data is not defined, these functions shall return a pointer to the corresponding string in the POSIX locale. In all locales, these functions shall return a  pointer  to
       an empty string if item contains an invalid setting.

       The  application  shall not modify the string returned. The pointer returned by nl_langinfo() might be invalidated or the string content might be overwritten by a subsequent call to nl_langinfo()
       in any thread or to nl_langinfo_l() in the same thread or the initial thread, by subsequent calls to setlocale() with a category corresponding to the category of item (see  <langinfo.h>)  or  the
       category LC_ALL, or by subsequent calls to uselocale() which change the category corresponding to the category of item.  The pointer returned by nl_langinfo_l() might be invalidated or the string
       content might be overwritten by a subsequent call to nl_langinfo_l() in the same thread or to nl_langinfo() in any thread, or by subsequent calls to freelocale() or newlocale() which free or mod‐
       ify the locale object that was passed to nl_langinfo_l().  The returned pointer and the string content might also be invalidated if the calling thread is terminated.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
   Getting Date and Time Formatting Information
       The following example returns a pointer to a string containing date and time formatting information, as defined in the LC_TIME category of the current locale.

           #include <time.h>
           #include <langinfo.h>
           ...
           strftime(datestring, sizeof(datestring), nl_langinfo(D_T_FMT), tm);
           ...

APPLICATION USAGE
       The array pointed to by the return value should not be modified by the program, but may be modified by further calls to these functions.

RATIONALE
       The  possible  interactions between internal data used by nl_langinfo() and nl_langinfo_l() are complicated by the fact that nl_langinfo_l() must be thread-safe but nl_langinfo() need not be. The
       various implementation choices are:

        1. nl_langinfo_l() and nl_langinfo() use separate buffers, or at least one of them does not use an internal string buffer. In this case there are no interactions.

        2. nl_langinfo_l() and nl_langinfo() share an internal per-thread buffer. There can be interactions, but only in the same thread.

        3. nl_langinfo_l() uses an internal per-thread buffer, and nl_langinfo() uses (in all threads) the same buffer that nl_langinfo_l() uses in the initial thread. There  can  be  interactions,  but
           only when nl_langinfo_l() is called in the initial thread.

FUTURE DIRECTIONS
       None.

SEE ALSO
       setlocale(), uselocale()

       The Base Definitions volume of POSIX.1‐2017, Chapter 7, Locale, <langinfo.h>, <locale.h>, <nl_types.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                    NL_LANGINFO(3P)
