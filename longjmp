setjmp(3)                                                                                Library Functions Manual                                                                                setjmp(3)

NAME
       setjmp, sigsetjmp, longjmp, siglongjmp  - performing a nonlocal goto

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <setjmp.h>

       int setjmp(jmp_buf env);
       int sigsetjmp(sigjmp_buf env, int savesigs);

       [[noreturn]] void longjmp(jmp_buf env, int val);
       [[noreturn]] void siglongjmp(sigjmp_buf env, int val);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       setjmp(): see NOTES.

       sigsetjmp():
           _POSIX_C_SOURCE

DESCRIPTION
       The functions described on this page are used for performing "nonlocal gotos": transferring execution from one function to a predetermined location in another function.  The setjmp() function dy‐
       namically establishes the target to which control will later be transferred, and longjmp() performs the transfer of execution.

       The setjmp() function saves various information about the calling environment (typically, the stack pointer, the instruction pointer, possibly the values of other registers and the  signal  mask)
       in the buffer env for later use by longjmp().  In this case, setjmp() returns 0.

       The  longjmp()  function  uses  the  information  saved  in env to transfer control back to the point where setjmp() was called and to restore ("rewind") the stack to its state at the time of the
       setjmp() call.  In addition, and depending on the implementation (see NOTES), the values of some other registers and the process signal mask may be restored to their state  at  the  time  of  the
       setjmp() call.

       Following  a  successful longjmp(), execution continues as if setjmp() had returned for a second time.  This "fake" return can be distinguished from a true setjmp() call because the "fake" return
       returns the value provided in val.  If the programmer mistakenly passes the value 0 in val, the "fake" return will instead return 1.

   sigsetjmp() and siglongjmp()
       sigsetjmp() and siglongjmp() also perform nonlocal gotos, but provide predictable handling of the process signal mask.

       If, and only if, the savesigs argument provided to sigsetjmp() is nonzero, the process's current signal mask is saved in env and will be restored if a siglongjmp() is later  performed  with  this
       env.

RETURN VALUE
       setjmp() and sigsetjmp() return 0 when called directly; on the "fake" return that occurs after longjmp() or siglongjmp(), the nonzero value specified in val is returned.

       The longjmp() or siglongjmp() functions do not return.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │setjmp(), sigsetjmp()                                                                                                                                                   │ Thread safety │ MT-Safe │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │longjmp(), siglongjmp()                                                                                                                                                 │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       setjmp()
       longjmp()
              C11, POSIX.1-2008.

       sigsetjmp()
       siglongjmp()
              POSIX.1-2008.

HISTORY
       setjmp()
       longjmp()
              POSIX.1-2001, C89.

       sigsetjmp()
       siglongjmp()
              POSIX.1-2001.

       POSIX  does  not  specify  whether setjmp() will save the signal mask (to be later restored during longjmp()).  In System V it will not.  In 4.3BSD it will, and there is a function _setjmp() that
       will not.  The behavior under Linux depends on the glibc version and the setting of feature test macros.  Before glibc 2.19, setjmp() follows the System V behavior by default, but the BSD  behav‐
       ior  is provided if the _BSD_SOURCE feature test macro is explicitly defined and none of _POSIX_SOURCE, _POSIX_C_SOURCE, _XOPEN_SOURCE, _GNU_SOURCE, or _SVID_SOURCE is defined.  Since glibc 2.19,
       <setjmp.h> exposes only the System V version of setjmp().  Programs that need the BSD semantics should replace calls to setjmp() with calls to sigsetjmp() with a nonzero savesigs argument.

NOTES
       setjmp() and longjmp() can be useful for dealing with errors inside deeply nested function calls or to allow a signal handler to pass control to a specific point in the program, rather  than  re‐
       turning  to  the  point where the handler interrupted the main program.  In the latter case, if you want to portably save and restore signal masks, use sigsetjmp() and siglongjmp().  See also the
       discussion of program readability below.

CAVEATS
       The compiler may optimize variables into registers, and longjmp() may restore the values of other registers in addition to the stack pointer and program counter.  Consequently, the values of  au‐
       tomatic variables are unspecified after a call to longjmp() if they meet all the following criteria:

       •  they are local to the function that made the corresponding setjmp() call;

       •  their values are changed between the calls to setjmp() and longjmp(); and

       •  they are not declared as volatile.

       Analogous remarks apply for siglongjmp().

   Nonlocal gotos and program readability
       While it can be abused, the traditional C "goto" statement at least has the benefit that lexical cues (the goto statement and the target label) allow the programmer to easily perceive the flow of
       control.  Nonlocal gotos provide no such cues: multiple setjmp() calls might employ the same jmp_buf variable so that the content of the variable may change over the lifetime of the  application.
       Consequently,  the  programmer  may  be forced to perform detailed reading of the code to determine the dynamic target of a particular longjmp() call.  (To make the programmer's life easier, each
       setjmp() call should employ a unique jmp_buf variable.)

       Adding further difficulty, the setjmp() and longjmp() calls may not even be in the same source code module.

       In summary, nonlocal gotos can make programs harder to understand and maintain, and an alternative should be used if possible.

   Undefined Behavior
       If the function which called setjmp() returns before longjmp() is called, the behavior is undefined.  Some kind of subtle or unsubtle chaos is sure to result.

       If, in a multithreaded program, a longjmp() call employs an env buffer that was initialized by a call to setjmp() in a different thread, the behavior is undefined.

       POSIX.1-2008 Technical Corrigendum 2 adds longjmp() and siglongjmp() to the list of async-signal-safe functions.  However, the standard recommends avoiding the use of these functions from  signal
       handlers  and  goes  on  to  point  out that if these functions are called from a signal handler that interrupted a call to a non-async-signal-safe function (or some equivalent, such as the steps
       equivalent to exit(3) that occur upon a return from the initial call to main()), the behavior is undefined if the program subsequently makes a call to a non-async-signal-safe function.  The  only
       way of avoiding undefined behavior is to ensure one of the following:

       •  After long jumping from the signal handler, the program does not call any non-async-signal-safe functions and does not return from the initial call to main().

       •  Any  signal  whose handler performs a long jump must be blocked during every call to a non-async-signal-safe function and no non-async-signal-safe functions are called after returning from the
          initial call to main().

SEE ALSO
       signal(7), signal-safety(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                       setjmp(3)
LONGJMP(3P)                                                                              POSIX Programmer's Manual                                                                             LONGJMP(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       longjmp — non-local goto

SYNOPSIS
       #include <setjmp.h>

       void longjmp(jmp_buf env, int val);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       The longjmp() function shall restore the environment saved by the most recent invocation of setjmp() in the same process, with the corresponding jmp_buf argument. If the most recent invocation of
       setjmp() with the corresponding jmp_buf occurred in another thread, or if there is no such invocation, or if the function containing the invocation of setjmp() has terminated execution in the in‐
       terim,  or  if the invocation of setjmp() was within the scope of an identifier with variably modified type and execution has left that scope in the interim, the behavior is undefined.  It is un‐
       specified whether longjmp() restores the signal mask, leaves the signal mask unchanged, or restores it to its value at the time setjmp() was called.

       All accessible objects have values, and all other components of the abstract machine have state (for example, floating-point status flags and open files), as of the time longjmp() was called, ex‐
       cept that the values of objects of automatic storage duration are unspecified if they meet all the following conditions:

        *  They are local to the function containing the corresponding setjmp() invocation.

        *  They do not have volatile-qualified type.

        *  They are changed between the setjmp() invocation and longjmp() call.

       Although  longjmp() is an async-signal-safe function, if it is invoked from a signal handler which interrupted a non-async-signal-safe function or equivalent (such as the processing equivalent to
       exit() performed after a return from the initial call to main()), the behavior of any subsequent call to a non-async-signal-safe function or equivalent is undefined.

       The effect of a call to longjmp() where initialization of the jmp_buf structure was not performed in the calling thread is undefined.

RETURN VALUE
       After longjmp() is completed, program execution continues as if the corresponding invocation of setjmp() had just returned the value specified by val.  The  longjmp()  function  shall  not  cause
       setjmp() to return 0; if val is 0, setjmp() shall return 1.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       Applications  whose  behavior  depends on the value of the signal mask should not use longjmp() and setjmp(), since their effect on the signal mask is unspecified, but should instead use the sig‐
       longjmp() and sigsetjmp() functions (which can save and restore the signal mask under application control).

       It is recommended that applications do not call longjmp() or siglongjmp() from signal handlers. To avoid undefined behavior when calling these functions from a  signal  handler,  the  application
       needs to ensure one of the following two things:

        1. After the call to longjmp() or siglongjmp() the process only calls async-signal-safe functions and does not return from the initial call to main().

        2. Any  signal whose handler calls longjmp() or siglongjmp() is blocked during every call to a non-async-signal-safe function, and no such calls are made after returning from the initial call to
           main().

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       setjmp(), sigaction(), siglongjmp(), sigsetjmp()

       The Base Definitions volume of POSIX.1‐2017, <setjmp.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                        LONGJMP(3P)
