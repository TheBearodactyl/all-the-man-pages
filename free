FREE(1)                                                                                        User Commands                                                                                       FREE(1)

NAME
       free - Display amount of free and used memory in the system

SYNOPSIS
       free [options]

DESCRIPTION
       free displays the total amount of free and used physical and swap memory in the system, as well as the buffers and caches used by the kernel. The information is gathered by parsing /proc/meminfo.
       The displayed columns are:

       total  Total installed memory (MemTotal and SwapTotal in /proc/meminfo)

       used   Used memory (calculated as total - free - buffers - cache)

       free   Unused memory (MemFree and SwapFree in /proc/meminfo)

       shared Memory used (mostly) by tmpfs (Shmem in /proc/meminfo)

       buffers
              Memory used by kernel buffers (Buffers in /proc/meminfo)

       cache  Memory used by the page cache and slabs (Cached and SReclaimable in /proc/meminfo)

       buff/cache
              Sum of buffers and cache

       available
              Estimation of how much memory is available for starting new applications, without swapping. Unlike the data provided by the cache or free fields, this field takes into account  page  cache
              and also that not all reclaimable memory slabs will be reclaimed due to items being in use (MemAvailable in /proc/meminfo, available on kernels 3.14, emulated on kernels 2.6.27+, otherwise
              the same as free)

OPTIONS
       -b, --bytes
              Display the amount of memory in bytes.

       -k, --kibi
              Display the amount of memory in kibibytes.  This is the default.

       -m, --mebi
              Display the amount of memory in mebibytes.

       -g, --gibi
              Display the amount of memory in gibibytes.

       --tebi Display the amount of memory in tebibytes.

       --pebi Display the amount of memory in pebibytes.

       --kilo Display the amount of memory in kilobytes. Implies --si.

       --mega Display the amount of memory in megabytes. Implies --si.

       --giga Display the amount of memory in gigabytes. Implies --si.

       --tera Display the amount of memory in terabytes. Implies --si.

       --peta Display the amount of memory in petabytes. Implies --si.

       -h, --human
              Show all output fields automatically scaled to shortest three digit unit and display the units of print out.  Following units are used.

                B = bytes
                Ki = kibibyte
                Mi = mebibyte
                Gi = gibibyte
                Ti = tebibyte
                Pi = pebibyte

              If unit is missing, and you have exbibyte of RAM or swap, the number is in tebibytes and columns might not be aligned with header.

       -w, --wide
              Switch to the wide mode. The wide mode produces lines longer than 80 characters. In this mode buffers and cache are reported in two separate columns.

       -c, --count count
              Display the result count times.  Requires the -s option.

       -l, --lohi
              Show detailed low and high memory statistics.

       -s, --seconds delay
              Continuously display the result delay  seconds apart.  You may actually specify any floating point number for delay using either . or , for decimal point.  usleep(3) is used for  microsec‐
              ond resolution delay times.

       --si   Use kilo, mega, giga etc (power of 1000) instead of kibi, mebi, gibi (power of 1024).

       -t, --total
              Display a line showing the column totals.

       --help Print help.

       -V, --version
              Display version information.

FILES
       /proc/meminfo
              memory information

BUGS
       The value for the shared column is not available from kernels before 2.6.32 and is displayed as zero.

       Please send bug reports to
              ⟨procps@freelists.org⟩

SEE ALSO
       ps(1), slabtop(1), top(1), vmstat(8).

procps-ng                                                                                       2018-05-31                                                                                         FREE(1)
malloc(3)                                                                                Library Functions Manual                                                                                malloc(3)

NAME
       malloc, free, calloc, realloc, reallocarray - allocate and free dynamic memory

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdlib.h>

       void *malloc(size_t size);
       void free(void *ptr);
       void *calloc(size_t nmemb, size_t size);
       void *realloc(void *ptr, size_t size);
       void *reallocarray(void *ptr, size_t nmemb, size_t size);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       reallocarray():
           Since glibc 2.29:
               _DEFAULT_SOURCE
           glibc 2.28 and earlier:
               _GNU_SOURCE

DESCRIPTION
   malloc()
       The  malloc()  function  allocates  size  bytes and returns a pointer to the allocated memory.  The memory is not initialized.  If size is 0, then malloc() returns a unique pointer value that can
       later be successfully passed to free().  (See "Nonportable behavior" for portability issues.)

   free()
       The free() function frees the memory space pointed to by ptr, which must have been returned by a previous call to malloc() or related functions.  Otherwise, or if ptr has already been freed,  un‐
       defined behavior occurs.  If ptr is NULL, no operation is performed.

   calloc()
       The  calloc()  function  allocates memory for an array of nmemb elements of size bytes each and returns a pointer to the allocated memory.  The memory is set to zero.  If nmemb or size is 0, then
       calloc() returns a unique pointer value that can later be successfully passed to free().

       If the multiplication of nmemb and size would result in integer overflow, then calloc() returns an error.  By contrast, an integer overflow would not be detected in the  following  call  to  mal‐
       loc(), with the result that an incorrectly sized block of memory would be allocated:

           malloc(nmemb * size);

   realloc()
       The realloc() function changes the size of the memory block pointed to by ptr to size bytes.  The contents of the memory will be unchanged in the range from the start of the region up to the min‐
       imum of the old and new sizes.  If the new size is larger than the old size, the added memory will not be initialized.

       If ptr is NULL, then the call is equivalent to malloc(size), for all values of size.

       If size is equal to zero, and ptr is not NULL, then the call is equivalent to free(ptr) (but see "Nonportable behavior" for portability issues).

       Unless ptr is NULL, it must have been returned by an earlier call to malloc or related functions.  If the area pointed to was moved, a free(ptr) is done.

   reallocarray()
       The reallocarray() function changes the size of (and possibly moves) the memory block pointed to by ptr to be large enough for an array of nmemb elements, each of which  is  size  bytes.   It  is
       equivalent to the call

           realloc(ptr, nmemb * size);

       However, unlike that realloc() call, reallocarray() fails safely in the case where the multiplication would overflow.  If such an overflow occurs, reallocarray() returns an error.

RETURN VALUE
       The malloc(), calloc(), realloc(), and reallocarray() functions return a pointer to the allocated memory, which is suitably aligned for any type that fits into the requested size or less.  On er‐
       ror, these functions return NULL and set errno.  Attempting to allocate more than PTRDIFF_MAX bytes is considered an error, as an object that large could cause later pointer subtraction to  over‐
       flow.

       The free() function returns no value, and preserves errno.

       The  realloc()  and  reallocarray() functions return NULL if ptr is not NULL and the requested size is zero; this is not considered an error.  (See "Nonportable behavior" for portability issues.)
       Otherwise, the returned pointer may be the same as ptr if the allocation was not moved (e.g., there was room to expand the allocation in-place), or different from ptr if the allocation was  moved
       to a new address.  If these functions fail, the original block is left untouched; it is not freed or moved.

ERRORS
       calloc(), malloc(), realloc(), and reallocarray() can fail with the following error:

       ENOMEM Out of memory.  Possibly, the application hit the RLIMIT_AS or RLIMIT_DATA limit described in getrlimit(2).

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │malloc(), free(), calloc(), realloc()                                                                                                                                   │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       malloc()
       free()
       calloc()
       realloc()
              C11, POSIX.1-2008.

       reallocarray()
              None.

HISTORY
       malloc()
       free()
       calloc()
       realloc()
              POSIX.1-2001, C89.

       reallocarray()
              glibc 2.26.  OpenBSD 5.6, FreeBSD 11.0.

       malloc() and related functions rejected sizes greater than PTRDIFF_MAX starting in glibc 2.30.

       free() preserved errno starting in glibc 2.33.

NOTES
       By  default,  Linux  follows an optimistic memory allocation strategy.  This means that when malloc() returns non-NULL there is no guarantee that the memory really is available.  In case it turns
       out that the system is out of memory, one or more processes will be killed by the OOM killer.  For more information, see the description of /proc/sys/vm/overcommit_memory and /proc/sys/vm/oom_adj
       in proc(5), and the Linux kernel source file Documentation/vm/overcommit-accounting.rst.

       Normally,  malloc() allocates memory from the heap, and adjusts the size of the heap as required, using sbrk(2).  When allocating blocks of memory larger than MMAP_THRESHOLD bytes, the glibc mal‐
       loc() implementation allocates the memory as a private anonymous mapping using mmap(2).  MMAP_THRESHOLD is 128 kB by default, but is adjustable using mallopt(3).  Prior to Linux  4.7  allocations
       performed using mmap(2) were unaffected by the RLIMIT_DATA resource limit; since Linux 4.7, this limit is also enforced for allocations performed using mmap(2).

       To  avoid  corruption  in  multithreaded applications, mutexes are used internally to protect the memory-management data structures employed by these functions.  In a multithreaded application in
       which threads simultaneously allocate and free memory, there could be contention for these mutexes.  To scalably handle memory allocation in multithreaded applications, glibc  creates  additional
       memory  allocation  arenas  if mutex contention is detected.  Each arena is a large region of memory that is internally allocated by the system (using brk(2) or mmap(2)), and managed with its own
       mutexes.

       If your program uses a private memory allocator, it should do so by replacing malloc(), free(), calloc(), and realloc().  The replacement functions must implement the documented glibc  behaviors,
       including  errno  handling, size-zero allocations, and overflow checking; otherwise, other library routines may crash or operate incorrectly.  For example, if the replacement free() does not pre‐
       serve errno, then seemingly unrelated library routines may fail without having a valid reason in errno.  Private memory allocators may also need to replace other glibc functions;  see  "Replacing
       malloc" in the glibc manual for details.

       Crashes in memory allocators are almost always related to heap corruption, such as overflowing an allocated chunk or freeing the same pointer twice.

       The malloc() implementation is tunable via environment variables; see mallopt(3) for details.

   Nonportable behavior
       The  behavior  of  these functions when the requested size is zero is glibc specific; other implementations may return NULL without setting errno, and portable POSIX programs should tolerate such
       behavior.  See realloc(3p).

       POSIX requires memory allocators to set errno upon failure.  However, the C standard does not require this, and applications portable to non-POSIX platforms should not assume this.

       Portable programs should not use private memory allocators, as POSIX and the C standard do not allow replacement of malloc(), free(), calloc(), and realloc().

EXAMPLES
       #include <err.h>
       #include <stddef.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <string.h>

       #define MALLOCARRAY(n, type)  ((type *) my_mallocarray(n, sizeof(type)))
       #define MALLOC(type)          MALLOCARRAY(1, type)

       static inline void *my_mallocarray(size_t nmemb, size_t size);

       int
       main(void)
       {
           char  *p;

           p = MALLOCARRAY(32, char);
           if (p == NULL)
               err(EXIT_FAILURE, "malloc");

           strlcpy(p, "foo", 32);
           puts(p);
       }

       static inline void *
       my_mallocarray(size_t nmemb, size_t size)
       {
           return reallocarray(NULL, nmemb, size);
       }

SEE ALSO
       valgrind(1), brk(2), mmap(2), alloca(3), malloc_get_state(3), malloc_info(3), malloc_trim(3), malloc_usable_size(3), mallopt(3), mcheck(3), mtrace(3), posix_memalign(3)

       For details of the GNU C library implementation, see ⟨https://sourceware.org/glibc/wiki/MallocInternals⟩.

Linux man-pages 6.04                                                                            2023-03-30                                                                                       malloc(3)
FREE(3P)                                                                                 POSIX Programmer's Manual                                                                                FREE(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       free — free allocated memory

SYNOPSIS
       #include <stdlib.h>

       void free(void *ptr);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       The  free()  function shall cause the space pointed to by ptr to be deallocated; that is, made available for further allocation. If ptr is a null pointer, no action shall occur. Otherwise, if the
       argument does not match a pointer earlier returned by a function in POSIX.1‐2008 that allocates memory as if by malloc(), or if the space has been deallocated by a call to  free()  or  realloc(),
       the behavior is undefined.

       Any use of a pointer that refers to freed space results in undefined behavior.

RETURN VALUE
       The free() function shall not return a value.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       There is now no requirement for the implementation to support the inclusion of <malloc.h>.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       calloc(), malloc(), posix_memalign(), realloc()

       The Base Definitions volume of POSIX.1‐2017, <stdlib.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                           FREE(3P)
