FORK(3am)                                                                                GNU Awk Extension Modules                                                                               FORK(3am)

NAME
       fork, wait, waitpid - basic process management

SYNOPSIS
       @load "fork"

       pid = fork()

       ret = waitpid(pid)

       ret = wait();

DESCRIPTION
       The fork extension adds three functions, as follows.

       fork() This  function  creates a new process. The return value is the zero in the child and the process-id number of the child in the parent, or -1 upon error. In the latter case, ERRNO indicates
              the problem.  In the child, PROCINFO["pid"] and PROCINFO["ppid"] are updated to reflect the correct values.

       waitpid()
              This function takes a numeric argument, which is the process-id to wait for. The return value is that of the waitpid(2) system call.

       wait() This function waits for the first child to die.  The return value is that of the wait(2) system call.

BUGS
       There is no corresponding exec() function.

       The interfaces could be enhanced to provide more facilities, including pulling out the various bits of the return status.

EXAMPLE
       @load "fork"
       ...
       if ((pid = fork()) == 0)
           print "hello from the child"
       else
           print "hello from the parent"

SEE ALSO
       GAWK: Effective AWK Programming, filefuncs(3am), fnmatch(3am), inplace(3am), ordchr(3am), readdir(3am), readfile(3am), revoutput(3am), rwarray(3am), time(3am).

       fork(2), wait(2), waitpid(2).

AUTHOR
       Arnold Robbins, arnold@skeeve.com.

COPYING PERMISSIONS
       Copyright © 2012, 2013, 2018, Free Software Foundation, Inc.

       Permission is granted to make and distribute verbatim copies of this manual page provided the copyright notice and this permission notice are preserved on all copies.

       Permission is granted to copy and distribute modified versions of this manual page under the conditions for verbatim copying, provided that the entire resulting derived work is distributed  under
       the terms of a permission notice identical to this one.

       Permission  is  granted  to copy and distribute translations of this manual page into another language, under the above conditions for modified versions, except that this permission notice may be
       stated in a translation approved by the Foundation.

Free Software Foundation                                                                        Feb 02 2018                                                                                      FORK(3am)
FORK(3P)                                                                                 POSIX Programmer's Manual                                                                                FORK(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       fork — create a new process

SYNOPSIS
       #include <unistd.h>

       pid_t fork(void);

DESCRIPTION
       The fork() function shall create a new process. The new process (child process) shall be an exact copy of the calling process (parent process) except as detailed below:

        *  The child process shall have a unique process ID.

        *  The child process ID also shall not match any active process group ID.

        *  The child process shall have a different parent process ID, which shall be the process ID of the calling process.

        *  The child process shall have its own copy of the parent's file descriptors. Each of the child's file descriptors shall refer to the same open file description with the corresponding file  de‐
           scriptor of the parent.

        *  The child process shall have its own copy of the parent's open directory streams. Each open directory stream in the child process may share directory stream positioning with the corresponding
           directory stream of the parent.

        *  The child process shall have its own copy of the parent's message catalog descriptors.

        *  The child process values of tms_utime, tms_stime, tms_cutime, and tms_cstime shall be set to 0.

        *  The time left until an alarm clock signal shall be reset to zero, and the alarm, if any, shall be canceled; see alarm().

        *  All semadj values shall be cleared.

        *  File locks set by the parent process shall not be inherited by the child process.

        *  The set of signals pending for the child process shall be initialized to the empty set.

        *  Interval timers shall be reset in the child process.

        *  Any semaphores that are open in the parent process shall also be open in the child process.

        *  The child process shall not inherit any address space memory locks established by the parent process via calls to mlockall() or mlock().

        *  Memory mappings created in the parent shall be retained in the child process. MAP_PRIVATE mappings inherited from the parent shall also be MAP_PRIVATE mappings in the child, and any modifica‐
           tions  to  the  data in these mappings made by the parent prior to calling fork() shall be visible to the child. Any modifications to the data in MAP_PRIVATE mappings made by the parent after
           fork() returns shall be visible only to the parent. Modifications to the data in MAP_PRIVATE mappings made by the child shall be visible only to the child.

        *  For the SCHED_FIFO and SCHED_RR scheduling policies, the child process shall inherit the policy and priority settings of the parent process during a  fork()  function.  For  other  scheduling
           policies, the policy and priority settings on fork() are implementation-defined.

        *  Per-process timers created by the parent shall not be inherited by the child process.

        *  The  child  process shall have its own copy of the message queue descriptors of the parent. Each of the message descriptors of the child shall refer to the same open message queue description
           as the corresponding message descriptor of the parent.

        *  No asynchronous input or asynchronous output operations shall be inherited by the child process. Any use of asynchronous control blocks created by the parent produces undefined behavior.

        *  A process shall be created with a single thread. If a multi-threaded process calls fork(), the new process shall contain a replica of the calling thread and its entire address space, possibly
           including  the  states  of mutexes and other resources. Consequently, to avoid errors, the child process may only execute async-signal-safe operations until such time as one of the exec func‐
           tions is called.

           When the application calls fork() from a signal handler and any of the fork handlers registered by pthread_atfork() calls a function that is not async-signal-safe, the behavior is undefined.

        *  If the Trace option and the Trace Inherit option are both supported:

           If the calling process was being traced in a trace stream that had its inheritance policy set to POSIX_TRACE_INHERITED, the child process shall be traced into that trace stream, and the child
           process  shall  inherit the parent's mapping of trace event names to trace event type identifiers. If the trace stream in which the calling process was being traced had its inheritance policy
           set to POSIX_TRACE_CLOSE_FOR_CHILD, the child process shall not be traced into that trace stream. The inheritance policy is set by a call to the posix_trace_attr_setinherited() function.

        *  If the Trace option is supported, but the Trace Inherit option is not supported:

           The child process shall not be traced into any of the trace streams of its parent process.

        *  If the Trace option is supported, the child process of a trace controller process shall not control the trace streams controlled by its parent process.

        *  The initial value of the CPU-time clock of the child process shall be set to zero.

        *  The initial value of the CPU-time clock of the single thread of the child process shall be set to zero.

       All other process characteristics defined by POSIX.1‐2008 shall be the same in the parent and child processes. The inheritance of process characteristics not defined by POSIX.1‐2008  is  unspeci‐
       fied by POSIX.1‐2008.

       After fork(), both the parent and the child processes shall be capable of executing independently before either one terminates.

RETURN VALUE
       Upon  successful  completion,  fork() shall return 0 to the child process and shall return the process ID of the child process to the parent process. Both processes shall continue to execute from
       the fork() function. Otherwise, -1 shall be returned to the parent process, no child process shall be created, and errno shall be set to indicate the error.

ERRORS
       The fork() function shall fail if:

       EAGAIN The system lacked the necessary resources to create another process, or the system-imposed limit on the total  number  of  processes  under  execution  system-wide  or  by  a  single  user
              {CHILD_MAX} would be exceeded.

       The fork() function may fail if:

       ENOMEM Insufficient storage space is available.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       Many  historical  implementations  have  timing windows where a signal sent to a process group (for example, an interactive SIGINT) just prior to or during execution of fork() is delivered to the
       parent following the fork() but not to the child because the fork() code clears the child's set of pending signals. This volume of POSIX.1‐2017 does not require, or even  permit,  this  behavior.
       However,  it  is  pragmatic  to  expect that problems of this nature may continue to exist in implementations that appear to conform to this volume of POSIX.1‐2017 and pass available verification
       suites. This behavior is only a consequence of the implementation failing to make the interval between signal generation and delivery totally invisible.  From  the  application's  perspective,  a
       fork()  call should appear atomic. A signal that is generated prior to the fork() should be delivered prior to the fork().  A signal sent to the process group after the fork() should be delivered
       to both parent and child. The implementation may actually initialize internal data structures corresponding to the child's set of pending signals to include signals sent to the process group dur‐
       ing  the fork().  Since the fork() call can be considered as atomic from the application's perspective, the set would be initialized as empty and such signals would have arrived after the fork();
       see also <signal.h>.

       One approach that has been suggested to address the problem of signal inheritance across fork() is to add an [EINTR] error, which would be returned when a signal  is  detected  during  the  call.
       While this is preferable to losing signals, it was not considered an optimal solution. Although it is not recommended for this purpose, such an error would be an allowable extension for an imple‐
       mentation.

       The [ENOMEM] error value is reserved for those implementations that detect and distinguish such a condition. This condition occurs when an implementation detects that there is not  enough  memory
       to  create  the  process.  This  is intended to be returned when [EAGAIN] is inappropriate because there can never be enough memory (either primary or secondary storage) to perform the operation.
       Since fork() duplicates an existing process, this must be a condition where there is sufficient memory for one such process, but not for  two.  Many  historical  implementations  actually  return
       [ENOMEM] due to temporary lack of memory, a case that is not generally distinct from [EAGAIN] from the perspective of a conforming application.

       Part of the reason for including the optional error [ENOMEM] is because the SVID specifies it and it should be reserved for the error condition specified there. The condition is not applicable on
       many implementations.

       IEEE Std 1003.1‐1988 neglected to require concurrent execution of the parent and child of fork().  A system that single-threads processes was clearly not intended and is considered  an  unaccept‐
       able  ``toy implementation'' of this volume of POSIX.1‐2017.  The only objection anticipated to the phrase ``executing independently'' is testability, but this assertion should be testable.  Such
       tests require that both the parent and child can block on a detectable action of the other, such as a write to a pipe or a signal.  An interactive exchange of such actions should be possible  for
       the system to conform to the intent of this volume of POSIX.1‐2017.

       The  [EAGAIN]  error exists to warn applications that such a condition might occur.  Whether it occurs or not is not in any practical sense under the control of the application because the condi‐
       tion is usually a consequence of the user's use of the system, not of the application's code. Thus, no application can or should rely upon its occurrence under any circumstances, nor  should  the
       exact semantics of what concept of ``user'' is used be of concern to the application developer.  Validation writers should be cognizant of this limitation.

       There  are  two  reasons why POSIX programmers call fork().  One reason is to create a new thread of control within the same program (which was originally only possible in POSIX by creating a new
       process); the other is to create a new process running a different program. In the latter case, the call to fork() is soon followed by a call to one of the exec functions.

       The general problem with making fork() work in a multi-threaded world is what to do with all of the threads.  There are two alternatives. One is to copy all of the threads into the  new  process.
       This causes the programmer or implementation to deal with threads that are suspended on system calls or that might be about to execute system calls that should not be executed in the new process.
       The other alternative is to copy only the thread that calls fork().  This creates the difficulty that the state of process-local resources is usually held in process memory. If a thread  that  is
       not calling fork() holds a resource, that resource is never released in the child process because the thread whose job it is to release the resource does not exist in the child process.

       When  a programmer is writing a multi-threaded program, the first described use of fork(), creating new threads in the same program, is provided by the pthread_create() function. The fork() func‐
       tion is thus used only to run new programs, and the effects of calling functions that require certain resources between the call to fork() and the call to an exec function are undefined.

       The addition of the forkall() function to the standard was considered and rejected. The forkall() function lets all the threads in the parent be duplicated in the child. This  essentially  dupli‐
       cates  the  state  of  the  parent in the child. This allows threads in the child to continue processing and allows locks and the state to be preserved without explicit pthread_atfork() code. The
       calling process has to ensure that the threads processing state that is shared between the parent and child (that is, file descriptors or MAP_SHARED memory) behaves properly after forkall().  For
       example,  if  a  thread  is  reading  a file descriptor in the parent when forkall() is called, then two threads (one in the parent and one in the child) are reading the file descriptor after the
       forkall().  If this is not desired behavior, the parent process has to synchronize with such threads before calling forkall().

       While the fork() function is async-signal-safe, there is no way for an implementation to determine whether the fork handlers established by pthread_atfork() are async-signal-safe. The  fork  han‐
       dlers  may  attempt  to execute portions of the implementation that are not async-signal-safe, such as those that are protected by mutexes, leading to a deadlock condition.  It is therefore unde‐
       fined for the fork handlers to execute functions that are not async-signal-safe when fork() is called from a signal handler.

       When forkall() is called, threads, other than the calling thread, that are in functions that can return with an [EINTR] error may have those functions return [EINTR] if the implementation  cannot
       ensure  that  the  function behaves correctly in the parent and child. In particular, pthread_cond_wait() and pthread_cond_timedwait() need to return in order to ensure that the condition has not
       changed.  These functions can be awakened by a spurious condition wakeup rather than returning [EINTR].

FUTURE DIRECTIONS
       None.

SEE ALSO
       alarm(), exec, fcntl(), posix_trace_attr_getinherited(), posix_trace_eventid_equal(), pthread_atfork(), semop(), signal(), times()

       The Base Definitions volume of POSIX.1‐2017, Section 4.12, Memory Synchronization, <sys_types.h>, <unistd.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                           FORK(3P)
fork(2)                                                                                     System Calls Manual                                                                                    fork(2)

NAME
       fork - create a child process

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       pid_t fork(void);

DESCRIPTION
       fork() creates a new process by duplicating the calling process.  The new process is referred to as the child process.  The calling process is referred to as the parent process.

       The  child  process  and the parent process run in separate memory spaces.  At the time of fork() both memory spaces have the same content.  Memory writes, file mappings (mmap(2)), and unmappings
       (munmap(2)) performed by one of the processes do not affect the other.

       The child process is an exact duplicate of the parent process except for the following points:

       •  The child has its own unique process ID, and this PID does not match the ID of any existing process group (setpgid(2)) or session.

       •  The child's parent process ID is the same as the parent's process ID.

       •  The child does not inherit its parent's memory locks (mlock(2), mlockall(2)).

       •  Process resource utilizations (getrusage(2)) and CPU time counters (times(2)) are reset to zero in the child.

       •  The child's set of pending signals is initially empty (sigpending(2)).

       •  The child does not inherit semaphore adjustments from its parent (semop(2)).

       •  The child does not inherit process-associated record locks from its parent (fcntl(2)).  (On the other hand, it does inherit fcntl(2) open file description locks and  flock(2)  locks  from  its
          parent.)

       •  The child does not inherit timers from its parent (setitimer(2), alarm(2), timer_create(2)).

       •  The  child  does  not  inherit  outstanding  asynchronous  I/O  operations  from  its parent (aio_read(3), aio_write(3)), nor does it inherit any asynchronous I/O contexts from its parent (see
          io_setup(2)).

       The process attributes in the preceding list are all specified in POSIX.1.  The parent and child also differ with respect to the following Linux-specific process attributes:

       •  The child does not inherit directory change notifications (dnotify) from its parent (see the description of F_NOTIFY in fcntl(2)).

       •  The prctl(2) PR_SET_PDEATHSIG setting is reset so that the child does not receive a signal when its parent terminates.

       •  The default timer slack value is set to the parent's current timer slack value.  See the description of PR_SET_TIMERSLACK in prctl(2).

       •  Memory mappings that have been marked with the madvise(2) MADV_DONTFORK flag are not inherited across a fork().

       •  Memory in address ranges that have been marked with the madvise(2) MADV_WIPEONFORK flag is zeroed in the child after a fork().  (The MADV_WIPEONFORK setting remains in place for those  address
          ranges in the child.)

       •  The termination signal of the child is always SIGCHLD (see clone(2)).

       •  The port access permission bits set by ioperm(2) are not inherited by the child; the child must turn on any bits that it requires using ioperm(2).

       Note the following further points:

       •  The  child process is created with a single thread—the one that called fork().  The entire virtual address space of the parent is replicated in the child, including the states of mutexes, con‐
          dition variables, and other pthreads objects; the use of pthread_atfork(3) may be helpful for dealing with problems that this can cause.

       •  After a fork() in a multithreaded program, the child can safely call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2).

       •  The child inherits copies of the parent's set of open file descriptors.  Each file descriptor in the child refers to the same open file description (see open(2)) as the corresponding file  de‐
          scriptor  in  the parent.  This means that the two file descriptors share open file status flags, file offset, and signal-driven I/O attributes (see the description of F_SETOWN and F_SETSIG in
          fcntl(2)).

       •  The child inherits copies of the parent's set of open message queue descriptors (see mq_overview(7)).  Each file descriptor in the child refers to the same open message  queue  description  as
          the corresponding file descriptor in the parent.  This means that the two file descriptors share the same flags (mq_flags).

       •  The child inherits copies of the parent's set of open directory streams (see opendir(3)).  POSIX.1 says that the corresponding directory streams in the parent and child may share the directory
          stream positioning; on Linux/glibc they do not.

RETURN VALUE
       On success, the PID of the child process is returned in the parent, and 0 is returned in the child.  On failure, -1 is returned in the parent, no child process is created, and errno is set to in‐
       dicate the error.

ERRORS
       EAGAIN A system-imposed limit on the number of threads was encountered.  There are a number of limits that may trigger this error:

              •  the RLIMIT_NPROC soft resource limit (set via setrlimit(2)), which limits the number of processes and threads for a real user ID, was reached;

              •  the kernel's system-wide limit on the number of processes and threads, /proc/sys/kernel/threads-max, was reached (see proc(5));

              •  the maximum number of PIDs, /proc/sys/kernel/pid_max, was reached (see proc(5)); or

              •  the PID limit (pids.max) imposed by the cgroup "process number" (PIDs) controller was reached.

       EAGAIN The caller is operating under the SCHED_DEADLINE scheduling policy and does not have the reset-on-fork flag set.  See sched(7).

       ENOMEM fork() failed to allocate the necessary kernel structures because memory is tight.

       ENOMEM An attempt was made to create a child process in a PID namespace whose "init" process has terminated.  See pid_namespaces(7).

       ENOSYS fork() is not supported on this platform (for example, hardware without a Memory-Management Unit).

       ERESTARTNOINTR (since Linux 2.6.17)
              System call was interrupted by a signal and will be restarted.  (This can be seen only during a trace.)

VERSIONS
   C library/kernel differences
       Since  glibc  2.3.3,  rather than invoking the kernel's fork() system call, the glibc fork() wrapper that is provided as part of the NPTL threading implementation invokes clone(2) with flags that
       provide the same effect as the traditional system call.  (A call to fork() is equivalent to a call to clone(2) specifying flags as just SIGCHLD.)  The glibc wrapper invokes any fork handlers that
       have been established using pthread_atfork(3).

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, SVr4, 4.3BSD.

NOTES
       Under Linux, fork() is implemented using copy-on-write pages, so the only penalty that it incurs is the time and memory required to duplicate the parent's page tables, and to create a unique task
       structure for the child.

EXAMPLES
       See pipe(2) and wait(2) for more examples.

       #include <signal.h>
       #include <stdint.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>

       int
       main(void)
       {
           pid_t pid;

           if (signal(SIGCHLD, SIG_IGN) == SIG_ERR) {
               perror("signal");
               exit(EXIT_FAILURE);
           }
           pid = fork();
           switch (pid) {
           case -1:
               perror("fork");
               exit(EXIT_FAILURE);
           case 0:
               puts("Child exiting.");
               exit(EXIT_SUCCESS);
           default:
               printf("Child is PID %jd\n", (intmax_t) pid);
               puts("Parent exiting.");
               exit(EXIT_SUCCESS);
           }
       }

SEE ALSO
       clone(2), execve(2), exit(2), setrlimit(2), unshare(2), vfork(2), wait(2), daemon(3), pthread_atfork(3), capabilities(7), credentials(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                         fork(2)
