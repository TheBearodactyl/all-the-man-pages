pthread_spin_lock(3)       Library Functions Manual       pthread_spin_lock(3)

NAME
       pthread_spin_lock, pthread_spin_trylock, pthread_spin_unlock - lock and
       unlock a spin lock

LIBRARY
       POSIX threads library (libpthread, -lpthread)

SYNOPSIS
       #include <pthread.h>

       int pthread_spin_lock(pthread_spinlock_t *lock);
       int pthread_spin_trylock(pthread_spinlock_t *lock);
       int pthread_spin_unlock(pthread_spinlock_t *lock);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       pthread_spin_lock(), pthread_spin_trylock():
           _POSIX_C_SOURCE >= 200112L

DESCRIPTION
       The pthread_spin_lock() function locks the spin  lock  referred  to  by
       lock.   If  the spin lock is currently unlocked, the calling thread ac‐
       quires the lock immediately.  If the spin lock is currently  locked  by
       another thread, the calling thread spins, testing the lock until it be‐
       comes available, at which point the calling thread acquires the lock.

       Calling pthread_spin_lock() on a lock  that  is  already  held  by  the
       caller    or    a   lock   that   has   not   been   initialized   with
       pthread_spin_init(3) results in undefined behavior.

       The pthread_spin_trylock() function is like pthread_spin_lock(), except
       that  if  the  spin lock referred to by lock is currently locked, then,
       instead of spinning, the call returns immediately with the error EBUSY.

       The pthread_spin_unlock() function unlocks the spin  lock  referred  to
       lock.   If  any  threads are spinning on the lock, one of those threads
       will then acquire the lock.

       Calling pthread_spin_unlock() on a lock that is not held by the  caller
       results in undefined behavior.

RETURN VALUE
       On  success,  these  functions return zero.  On failure, they return an
       error number.

ERRORS
       pthread_spin_lock() may fail with the following errors:

       EDEADLOCK
              The system detected a deadlock condition.

       pthread_spin_trylock() fails with the following errors:

       EBUSY  The spin lock is currently locked by another thread.

STANDARDS
       POSIX.1-2008.

HISTORY
       glibc 2.2.  POSIX.1-2001.

CAVEATS
       Applying any of the functions described on this page to  an  uninitial‐
       ized spin lock results in undefined behavior.

       Carefully read NOTES in pthread_spin_init(3).

SEE ALSO
       pthread_spin_destroy(3), pthread_spin_init(3), pthreads(7)

Linux man-pages 6.04              2023-03-30              pthread_spin_lock(3)
PTHREAD_SPIN_UNLOCK(3P)    POSIX Programmer's Manual   PTHREAD_SPIN_UNLOCK(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       pthread_spin_unlock — unlock a spin lock object

SYNOPSIS
       #include <pthread.h>

       int pthread_spin_unlock(pthread_spinlock_t *lock);

DESCRIPTION
       The pthread_spin_unlock() function shall release the spin  lock  refer‐
       enced   by  lock  which  was  locked  via  the  pthread_spin_lock()  or
       pthread_spin_trylock() functions.

       The results are undefined if the  lock  is  not  held  by  the  calling
       thread.

       If there are threads spinning on the lock when pthread_spin_unlock() is
       called, the lock becomes available and an unspecified  spinning  thread
       shall acquire the lock.

       The results are undefined if this function is called with an uninitial‐
       ized thread spin lock.

RETURN VALUE
       Upon successful completion, the  pthread_spin_unlock()  function  shall
       return  zero;  otherwise, an error number shall be returned to indicate
       the error.

ERRORS
       This function shall not return an error code of [EINTR].

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       If an implementation detects that the value specified by the lock argu‐
       ment  to  pthread_spin_unlock()  does  not refer to an initialized spin
       lock object, it is recommended that the function should fail and report
       an [EINVAL] error.

       If an implementation detects that the value specified by the lock argu‐
       ment to pthread_spin_unlock() refers to a spin lock  object  for  which
       the  current  thread does not hold the lock, it is recommended that the
       function should fail and report an [EPERM] error.

FUTURE DIRECTIONS
       None.

SEE ALSO
       pthread_spin_destroy(), pthread_spin_lock()

       The Base Definitions volume of POSIX.1‐2017, Section 4.12, Memory  Syn‐
       chronization, <pthread.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017              PTHREAD_SPIN_UNLOCK(3P)
