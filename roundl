round(3)                   Library Functions Manual                   round(3)

NAME
       round, roundf, roundl - round to nearest integer, away from zero

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       double round(double x);
       float roundf(float x);
       long double roundl(long double x);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       round(), roundf(), roundl():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L

DESCRIPTION
       These functions round x to the nearest integer, but round halfway cases
       away from zero (regardless  of  the  current  rounding  direction,  see
       fenv(3)), instead of to the nearest even integer like rint(3).

       For example, round(0.5) is 1.0, and round(-0.5) is -1.0.

RETURN VALUE
       These functions return the rounded integer value.

       If x is integral, +0, -0, NaN, or infinite, x itself is returned.

ERRORS
       No  errors  occur.  POSIX.1-2001 documents a range error for overflows,
       but see NOTES.

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │round(), roundf(), roundl()                 │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       glibc 2.1.  C99, POSIX.1-2001.

NOTES
       POSIX.1-2001  contains  text  about  overflow (which might set errno to
       ERANGE, or raise an FE_OVERFLOW exception).  In  practice,  the  result
       cannot overflow on any current machine, so this error-handling stuff is
       just nonsense.  (More precisely, overflow can happen only when the max‐
       imum value of the exponent is smaller than the number of mantissa bits.
       For the IEEE-754 standard 32-bit and 64-bit floating-point numbers  the
       maximum value of the exponent is 127 (respectively, 1023), and the num‐
       ber of mantissa bits including the implicit bit  is  24  (respectively,
       53).)

       If you want to store the rounded value in an integer type, you probably
       want to use one of the functions described in lround(3) instead.

SEE ALSO
       ceil(3), floor(3), lround(3), nearbyint(3), rint(3), trunc(3)

Linux man-pages 6.04              2023-03-30                          round(3)
ROUND(3P)                  POSIX Programmer's Manual                 ROUND(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       round, roundf, roundl — round to the nearest integer value in a  float‐
       ing-point format

SYNOPSIS
       #include <math.h>

       double round(double x);
       float roundf(float x);
       long double roundl(long double x);

DESCRIPTION
       The  functionality described on this reference page is aligned with the
       ISO C standard. Any conflict between the  requirements  described  here
       and  the  ISO C  standard is unintentional. This volume of POSIX.1‐2017
       defers to the ISO C standard.

       These functions shall round their argument to the nearest integer value
       in  floating-point  format,  rounding halfway cases away from zero, re‐
       gardless of the current rounding direction.

RETURN VALUE
       Upon successful completion, these functions shall  return  the  rounded
       integer value.  The result shall have the same sign as x.

       If x is NaN, a NaN shall be returned.

       If x is ±0 or ±Inf, x shall be returned.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       The  integral value returned by these functions need not be expressible
       as an intmax_t.  The return value should be tested before assigning  it
       to  an  integer type to avoid the undefined results of an integer over‐
       flow.

       These functions may raise the inexact floating-point exception  if  the
       result differs in value from the argument.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       feclearexcept(), fetestexcept()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of
       Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                            ROUND(3P)
