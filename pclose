popen(3)                   Library Functions Manual                   popen(3)

NAME
       popen, pclose - pipe stream to or from a process

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdio.h>

       FILE *popen(const char *command, const char *type);
       int pclose(FILE *stream);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       popen(), pclose():
           _POSIX_C_SOURCE >= 2
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       The  popen()  function opens a process by creating a pipe, forking, and
       invoking the shell.  Since a pipe is by definition unidirectional,  the
       type  argument  may  specify only reading or writing, not both; the re‐
       sulting stream is correspondingly read-only or write-only.

       The command argument is a pointer to a null-terminated string  contain‐
       ing  a shell command line.  This command is passed to /bin/sh using the
       -c flag; interpretation, if any, is performed by the shell.

       The type argument is a pointer to a null-terminated string  which  must
       contain  either  the letter 'r' for reading or the letter 'w' for writ‐
       ing.  Since glibc 2.9, this argument can additionally include the  let‐
       ter  'e', which causes the close-on-exec flag (FD_CLOEXEC) to be set on
       the underlying file descriptor; see the description  of  the  O_CLOEXEC
       flag in open(2) for reasons why this may be useful.

       The  return  value  from popen() is a normal standard I/O stream in all
       respects save  that  it  must  be  closed  with  pclose()  rather  than
       fclose(3).   Writing  to  such a stream writes to the standard input of
       the command; the command's standard output is the same as that  of  the
       process  that called popen(), unless this is altered by the command it‐
       self.  Conversely, reading from the stream reads the command's standard
       output,  and  the  command's  standard input is the same as that of the
       process that called popen().

       Note that output popen() streams are block buffered by default.

       The pclose() function waits for the associated process to terminate and
       returns the exit status of the command as returned by wait4(2).

RETURN VALUE
       popen():  on  success,  returns a pointer to an open stream that can be
       used to read or write to the pipe; if  the  fork(2)  or  pipe(2)  calls
       fail, or if the function cannot allocate memory, NULL is returned.

       pclose():  on  success,  returns  the  exit  status  of the command; if
       wait4(2) returns an error, or some other error is detected, -1  is  re‐
       turned.

       On failure, both functions set errno to indicate the error.

ERRORS
       The popen() function does not set errno if memory allocation fails.  If
       the underlying fork(2) or pipe(2) fails, errno is set to  indicate  the
       error.   If  the  type  argument  is invalid, and this condition is de‐
       tected, errno is set to EINVAL.

       If pclose() cannot obtain the child status, errno is set to ECHILD.

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │popen(), pclose()                           │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
       The 'e' value for type is a Linux extension.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

CAVEATS
       Carefully read Caveats in system(3).

BUGS
       Since  the  standard  input  of a command opened for reading shares its
       seek offset with the process  that  called  popen(),  if  the  original
       process  has done a buffered read, the command's input position may not
       be as expected.  Similarly, the output from a command opened for  writ‐
       ing  may  become  intermingled  with that of the original process.  The
       latter can be avoided by calling fflush(3) before popen().

       Failure to execute the shell  is  indistinguishable  from  the  shell's
       failure  to  execute command, or an immediate exit of the command.  The
       only hint is an exit status of 127.

SEE ALSO
       sh(1), fork(2),  pipe(2),  wait4(2),  fclose(3),  fflush(3),  fopen(3),
       stdio(3), system(3)

Linux man-pages 6.04              2023-03-30                          popen(3)
PCLOSE(3P)                 POSIX Programmer's Manual                PCLOSE(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       pclose — close a pipe stream to or from a process

SYNOPSIS
       #include <stdio.h>

       int pclose(FILE *stream);

DESCRIPTION
       The pclose() function shall close a stream that was opened by  popen(),
       wait for the command to terminate, and return the termination status of
       the process that was running the command  language  interpreter.   How‐
       ever,  if  a  call  caused  the termination status to be unavailable to
       pclose(), then pclose() shall return -1 with errno set to  [ECHILD]  to
       report  this situation. This can happen if the application calls one of
       the following functions:

        *  wait()

        *  waitpid() with a pid argument less than or equal to 0 or  equal  to
           the process ID of the command line interpreter

        *  Any  other function not defined in this volume of POSIX.1‐2017 that
           could do one of the above

       In any case, pclose() shall not return before the child process created
       by popen() has terminated.

       If  the command language interpreter cannot be executed, the child ter‐
       mination status returned by pclose() shall be as if  the  command  lan‐
       guage interpreter terminated using exit(127) or _exit(127).

       The  pclose()  function  shall not affect the termination status of any
       child of the calling process other than the one created by popen()  for
       the associated stream.

       If the argument stream to pclose() is not a pointer to a stream created
       by popen(), the result of pclose() is undefined.

       If a thread is canceled during execution of pclose(), the  behavior  is
       undefined.

RETURN VALUE
       Upon successful return, pclose() shall return the termination status of
       the command language interpreter. Otherwise, pclose() shall  return  -1
       and set errno to indicate the error.

ERRORS
       The pclose() function shall fail if:

       ECHILD The  status  of  the child process could not be obtained, as de‐
              scribed above.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       There is a requirement  that  pclose()  not  return  before  the  child
       process  terminates.  This is intended to disallow implementations that
       return [EINTR] if a signal is received while waiting. If  pclose()  re‐
       turned  before  the child terminated, there would be no way for the ap‐
       plication to discover which  child  used  to  be  associated  with  the
       stream, and it could not do the cleanup itself.

       If the stream pointed to by stream was not created by popen(), histori‐
       cal implementations of pclose() return -1 without  setting  errno.   To
       avoid  requiring pclose() to set errno in this case, POSIX.1‐2008 makes
       the behavior unspecified. An application should  not  use  pclose()  to
       close any stream that was not created by popen().

       Some  historical implementations of pclose() either block or ignore the
       signals SIGINT, SIGQUIT, and SIGHUP while waiting for the child process
       to  terminate.  Since  this  behavior is not described for the pclose()
       function in POSIX.1‐2008,  such  implementations  are  not  conforming.
       Also, some historical implementations return [EINTR] if a signal is re‐
       ceived, even though the child process has not terminated.  Such  imple‐
       mentations are also considered non-conforming.

       Consider, for example, an application that uses:

           popen("command", "r")

       to  start  command,  which  is part of the same application. The parent
       writes a prompt to its standard output (presumably  the  terminal)  and
       then reads from the popen()ed stream. The child reads the response from
       the user, does some transformation on the response (pathname expansion,
       perhaps)  and  writes  the  result  to  its standard output. The parent
       process reads the result from the pipe, does  something  with  it,  and
       prints  another prompt. The cycle repeats. Assuming that both processes
       do appropriate buffer flushing, this would be expected to work.

       To conform to POSIX.1‐2008, pclose() must use waitpid(), or some  simi‐
       lar function, instead of wait().

       The  code  sample  below illustrates how the pclose() function might be
       implemented on a system conforming to POSIX.1‐2008.

           int pclose(FILE *stream)
           {
               int stat;
               pid_t pid;

               pid = <pid for process created for stream by popen()>
               (void) fclose(stream);
               while (waitpid(pid, &stat, 0) == -1) {
                   if (errno != EINTR){
                       stat = -1;
                       break;
                   }
               }
               return(stat);
           }

FUTURE DIRECTIONS
       None.

SEE ALSO
       fork(), popen(), wait()

       The Base Definitions volume of POSIX.1‐2017, <stdio.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                           PCLOSE(3P)
