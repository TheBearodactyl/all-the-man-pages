__gnu_cxx::stdio_filebuf< _CharT, _Traits >(3)                                           Library Functions Manual                                           __gnu_cxx::stdio_filebuf< _CharT, _Traits >(3)

NAME
       __gnu_cxx::stdio_filebuf< _CharT, _Traits > - Provides a layer of compatibility for C/POSIX.

SYNOPSIS
       #include <stdio_filebuf.h>

       Inherits std::basic_filebuf< _CharT, _Traits >.

   Public Types
       typedef codecvt< char_type, char, __state_type > __codecvt_type
       typedef __basic_file< char > __file_type
       typedef basic_filebuf< char_type, traits_type > __filebuf_type
       typedef traits_type::state_type __state_type
       typedef basic_streambuf< char_type, traits_type > __streambuf_type
       typedef _CharT char_type
       typedef traits_type::int_type int_type
       typedef traits_type::off_type off_type
       typedef traits_type::pos_type pos_type
       typedef std::size_t size_t
       typedef _Traits traits_type

   Public Member Functions
       stdio_filebuf ()
       stdio_filebuf (int __fd, std::ios_base::openmode __mode, size_t __size=static_cast< size_t >(BUFSIZ))
       stdio_filebuf (std::__c_file *__f, std::ios_base::openmode __mode, size_t __size=static_cast< size_t >(BUFSIZ))
       stdio_filebuf (stdio_filebuf &&)=default
       virtual ~stdio_filebuf ()
       __filebuf_type * close ()
           Closes the currently associated file.
       int fd ()
       std::__c_file * file ()
       locale getloc () const
           Locale access.
       streamsize in_avail ()
           Looking ahead into the stream.
       bool is_open () const  throw ()
           Returns true if the external file is open.
       template<typename _Path > _If_fs_path< _Path, __filebuf_type * > open (const _Path &__s, ios_base::openmode __mode)
           Opens an external file.
       __filebuf_type * open (const char *__s, ios_base::openmode __mode)
           Opens an external file.
       __filebuf_type * open (const std::string &__s, ios_base::openmode __mode)
           Opens an external file.
       stdio_filebuf & operator= (stdio_filebuf &&)=default
       locale pubimbue (const locale &__loc)
           Entry point for imbue().
       int_type sbumpc ()
           Getting the next character.
       int_type sgetc ()
           Getting the next character.
       streamsize sgetn (char_type *__s, streamsize __n)
           Entry point for xsgetn.
       int_type snextc ()
           Getting the next character.
       int_type sputbackc (char_type __c)
           Pushing characters back into the input stream.
       int_type sputc (char_type __c)
           Entry point for all single-character output functions.
       streamsize sputn (const char_type *__s, streamsize __n)
           Entry point for all single-character output functions.
       int_type sungetc ()
           Moving backwards in the input stream.
       void swap (basic_filebuf &)
       void swap (stdio_filebuf &__fb)

           basic_streambuf * pubsetbuf (char_type *__s, streamsize __n)
               Entry points for derived buffer functions.
           pos_type pubseekoff (off_type __off, ios_base::seekdir __way, ios_base::openmode __mode=ios_base::in|ios_base::out)
               Alters the stream position.
           pos_type pubseekpos (pos_type __sp, ios_base::openmode __mode=ios_base::in|ios_base::out)
               Alters the stream position.
           int pubsync ()
               Calls virtual sync function.

   Protected Member Functions
       void __safe_gbump (streamsize __n)
       void __safe_pbump (streamsize __n)
       void _M_allocate_internal_buffer ()
       bool _M_convert_to_external (char_type *, streamsize)
       void _M_create_pback ()
       void _M_destroy_internal_buffer ()  throw ()
       void _M_destroy_pback ()  throw ()
       int _M_get_ext_pos (__state_type &__state)
       pos_type _M_seek (off_type __off, ios_base::seekdir __way, __state_type __state)
       void _M_set_buffer (streamsize __off)
       bool _M_terminate_output ()
       void gbump (int __n)
           Moving the read position.
       virtual void imbue (const locale &__loc)
           Changes translations.
       virtual int_type overflow (int_type __c=_Traits::eof())
           Consumes data from the buffer; writes to the controlled sequence.
       virtual int_type pbackfail (int_type __c=_Traits::eof())
           Tries to back up the input sequence.
       void pbump (int __n)
           Moving the write position.
       virtual pos_type seekoff (off_type __off, ios_base::seekdir __way, ios_base::openmode __mode=ios_base::in|ios_base::out)
           Alters the stream positions.
       virtual pos_type seekpos (pos_type __pos, ios_base::openmode __mode=ios_base::in|ios_base::out)
           Alters the stream positions.
       virtual __streambuf_type * setbuf (char_type *__s, streamsize __n)
           Manipulates the buffer.
       void setg (char_type *__gbeg, char_type *__gnext, char_type *__gend)
           Setting the three read area pointers.
       void setp (char_type *__pbeg, char_type *__pend)
           Setting the three write area pointers.
       virtual streamsize showmanyc ()
           Investigating the data available.
       void swap (basic_streambuf &__sb)
       virtual int sync ()
           Synchronizes the buffer arrays with the controlled sequences.
       virtual int_type uflow ()
           Fetches more data from the controlled sequence.
       virtual int_type underflow ()
           Fetches more data from the controlled sequence.
       virtual streamsize xsgetn (char_type *__s, streamsize __n)
           Multiple character extraction.
       virtual streamsize xsputn (const char_type *__s, streamsize __n)
           Multiple character insertion.

           char_type * eback () const
               Access to the get area.
           char_type * gptr () const
               Access to the get area.
           char_type * egptr () const
               Access to the get area.

           char_type * pbase () const
               Access to the put area.
           char_type * pptr () const
               Access to the put area.
           char_type * epptr () const
               Access to the put area.

   Protected Attributes
       char_type * _M_buf
           Pointer to the beginning of internal buffer.
       bool _M_buf_allocated
       locale _M_buf_locale
           Current locale setting.
       size_t _M_buf_size
       const __codecvt_type * _M_codecvt
       char * _M_ext_buf
       streamsize _M_ext_buf_size
       char * _M_ext_end
       const char * _M_ext_next
       __file_type _M_file
       char_type * _M_in_beg
           Start of get area.
       char_type * _M_in_cur
           Current read area.
       char_type * _M_in_end
           End of get area.
       __c_lock _M_lock
       ios_base::openmode _M_mode
           Place to stash in || out || in | out settings for current filebuf.
       char_type * _M_out_beg
           Start of put area.
       char_type * _M_out_cur
           Current put area.
       char_type * _M_out_end
           End of put area.
       bool _M_reading
       __state_type _M_state_beg
       __state_type _M_state_cur
       __state_type _M_state_last
       bool _M_writing

           char_type _M_pback
           char_type * _M_pback_cur_save
           char_type * _M_pback_end_save
           bool _M_pback_init

Detailed Description
   template<typename _CharT, typename _Traits = std::char_traits<_CharT>>
       class __gnu_cxx::stdio_filebuf< _CharT, _Traits >"Provides a layer of compatibility for C/POSIX.

       This GNU extension provides extensions for working with standard C FILE*'s and POSIX file descriptors. It must be instantiated by the user with the type of character used in the file stream,
       e.g., stdio_filebuf<char>.

       Definition at line 50 of file stdio_filebuf.h.

Member Typedef Documentation
   template<typename _CharT , typename _Traits > typedef codecvt<char_type, char, __state_type> std::basic_filebuf< _CharT, _Traits >::__codecvt_type [inherited]
       Definition at line 113 of file fstream.

   template<typename _CharT , typename _Traits > typedef __basic_file<char> std::basic_filebuf< _CharT, _Traits >::__file_type [inherited]
       Definition at line 111 of file fstream.

   template<typename _CharT , typename _Traits > typedef basic_filebuf<char_type, traits_type> std::basic_filebuf< _CharT, _Traits >::__filebuf_type [inherited]
       Definition at line 110 of file fstream.

   template<typename _CharT , typename _Traits > typedef traits_type::state_type std::basic_filebuf< _CharT, _Traits >::__state_type [inherited]
       Definition at line 112 of file fstream.

   template<typename _CharT , typename _Traits > typedef basic_streambuf<char_type, traits_type> std::basic_filebuf< _CharT, _Traits >::__streambuf_type [inherited]
       Definition at line 109 of file fstream.

   template<typename _CharT , typename _Traits  = std::char_traits<_CharT>> typedef _CharT __gnu_cxx::stdio_filebuf< _CharT, _Traits >::char_type
       Definition at line 54 of file stdio_filebuf.h.

   template<typename _CharT , typename _Traits  = std::char_traits<_CharT>> typedef traits_type::int_type __gnu_cxx::stdio_filebuf< _CharT, _Traits >::int_type
       Definition at line 56 of file stdio_filebuf.h.

   template<typename _CharT , typename _Traits  = std::char_traits<_CharT>> typedef traits_type::off_type __gnu_cxx::stdio_filebuf< _CharT, _Traits >::off_type
       Definition at line 58 of file stdio_filebuf.h.

   template<typename _CharT , typename _Traits  = std::char_traits<_CharT>> typedef traits_type::pos_type __gnu_cxx::stdio_filebuf< _CharT, _Traits >::pos_type
       Definition at line 57 of file stdio_filebuf.h.

   template<typename _CharT , typename _Traits  = std::char_traits<_CharT>> typedef std::size_t __gnu_cxx::stdio_filebuf< _CharT, _Traits >::size_t
       Definition at line 59 of file stdio_filebuf.h.

   template<typename _CharT , typename _Traits  = std::char_traits<_CharT>> typedef _Traits __gnu_cxx::stdio_filebuf< _CharT, _Traits >::traits_type
       Definition at line 55 of file stdio_filebuf.h.

Constructor & Destructor Documentation
   template<typename _CharT , typename _Traits  = std::char_traits<_CharT>> __gnu_cxx::stdio_filebuf< _CharT, _Traits >::stdio_filebuf () [inline]
       deferred initialization

       Definition at line 65 of file stdio_filebuf.h.

   template<typename _CharT , typename _Traits > __gnu_cxx::stdio_filebuf< _CharT, _Traits >::stdio_filebuf (int __fd, std::ios_base::openmode __mode, size_t __size = static_cast<size_t>( BUFSIZ ))
       Parameters
           __fd An open file descriptor.
           __mode Same meaning as in a standard filebuf.
           __size Optimal or preferred size of internal buffer, in chars.

       This constructor associates a file stream buffer with an open POSIX file descriptor. The file descriptor will be automatically closed when the stdio_filebuf is closed/destroyed.

       Definition at line 136 of file stdio_filebuf.h.

   template<typename _CharT , typename _Traits > __gnu_cxx::stdio_filebuf< _CharT, _Traits >::stdio_filebuf (std::__c_file * __f, std::ios_base::openmode __mode, size_t __size = static_cast<size_t>(
       BUFSIZ ))
       Parameters
           __f An open FILE*.
           __mode Same meaning as in a standard filebuf.
           __size Optimal or preferred size of internal buffer, in chars. Defaults to system's BUFSIZ.

       This constructor associates a file stream buffer with an open C FILE*. The FILE* will not be automatically closed when the stdio_filebuf is closed/destroyed.

       Definition at line 152 of file stdio_filebuf.h.

   template<typename _CharT , typename _Traits > __gnu_cxx::stdio_filebuf< _CharT, _Traits >::~stdio_filebuf [virtual]
       Closes the external data stream if the file descriptor constructor was used.

       Definition at line 132 of file stdio_filebuf.h.

Member Function Documentation
   template<typename _CharT , typename _Traits > void std::basic_streambuf< _CharT, _Traits >::__safe_gbump (streamsize __n) [inline],  [protected],  [inherited]
       Definition at line 800 of file streambuf.

   template<typename _CharT , typename _Traits > void std::basic_streambuf< _CharT, _Traits >::__safe_pbump (streamsize __n) [inline],  [protected],  [inherited]
       Definition at line 803 of file streambuf.

   template<typename _CharT , typename _Traits > void std::basic_filebuf< _CharT, _Traits >::_M_allocate_internal_buffer [protected],  [inherited]
       Definition at line 49 of file fstream.tcc.

   template<typename _CharT , typename _Traits > bool std::basic_filebuf< _CharT, _Traits >::_M_convert_to_external (char_type * __ibuf, streamsize __ilen) [protected],  [inherited]
       Definition at line 606 of file fstream.tcc.

   template<typename _CharT , typename _Traits > void std::basic_filebuf< _CharT, _Traits >::_M_create_pback () [inline],  [protected],  [inherited]
       Initializes pback buffers, and moves normal buffers to safety. Assumptions: _M_in_cur has already been moved back

       Definition at line 204 of file fstream.

   template<typename _CharT , typename _Traits > void std::basic_filebuf< _CharT, _Traits >::_M_destroy_internal_buffer [protected],  [inherited]
       Definition at line 63 of file fstream.tcc.

   template<typename _CharT , typename _Traits > void std::basic_filebuf< _CharT, _Traits >::_M_destroy_pback () [inline],  [protected],  [inherited]
       Deactivates pback buffer contents, and restores normal buffer. Assumptions: The pback buffer has only moved forward.

       Definition at line 221 of file fstream.

   template<typename _CharT , typename _Traits > int std::basic_filebuf< _CharT, _Traits >::_M_get_ext_pos (__state_type & __state) [protected],  [inherited]
       Definition at line 932 of file fstream.tcc.

   template<typename _CharT , typename _Traits > basic_filebuf< _CharT, _Traits >::pos_type std::basic_filebuf< _CharT, _Traits >::_M_seek (off_type __off, ios_base::seekdir __way, __state_type __state)
       [protected],  [inherited]
       Definition at line 907 of file fstream.tcc.

   template<typename _CharT , typename _Traits > void std::basic_filebuf< _CharT, _Traits >::_M_set_buffer (streamsize __off) [inline],  [protected],  [inherited]
       This function sets the pointers of the internal buffer, both get and put areas. Typically:

       __off == egptr() - eback() upon underflow/uflow (read mode); __off == 0 upon overflow (write mode); __off == -1 upon open, setbuf, seekoff/pos (uncommitted mode).

       NB: epptr() - pbase() == _M_buf_size - 1, since _M_buf_size reflects the actual allocated memory and the last cell is reserved for the overflow char of a full put area.

       Definition at line 464 of file fstream.

       References std::ios_base::app, std::ios_base::in, and std::ios_base::out.

       Referenced by std::basic_filebuf< _CharT, _Traits >::close().

   template<typename _CharT , typename _Traits > bool std::basic_filebuf< _CharT, _Traits >::_M_terminate_output [protected],  [inherited]
       Definition at line 951 of file fstream.tcc.

   template<typename _CharT , typename _Traits > basic_filebuf< _CharT, _Traits >::__filebuf_type * std::basic_filebuf< _CharT, _Traits >::close [inherited]
       Closes the currently associated file.

       Returns
           this on success, NULL on failure

       If no file is currently open, this function immediately fails.

       If a put buffer area exists, overflow(eof) is called to flush all the characters. The file is then closed.

       If any operations fail, this function also fails.

       Definition at line 249 of file fstream.tcc.

       References std::basic_filebuf< _CharT, _Traits >::_M_mode, std::basic_filebuf< _CharT, _Traits >::_M_pback_init, std::basic_filebuf< _CharT, _Traits >::_M_reading, and std::basic_filebuf< _CharT,
       _Traits >::_M_set_buffer().

       Referenced by std::basic_ifstream< _CharT, _Traits >::close(), std::basic_ofstream< _CharT, _Traits >::close(), and std::basic_fstream< _CharT, _Traits >::close().

   template<typename _CharT , typename _Traits > char_type * std::basic_streambuf< _CharT, _Traits >::eback () const [inline],  [protected],  [inherited]
       Access to the get area. These functions are only available to other protected functions, including derived classes.

       • eback() returns the beginning pointer for the input sequence

       • gptr() returns the next pointer for the input sequence

       • egptr() returns the end pointer for the input sequence

       Definition at line 487 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_beg.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputbackc(), and std::basic_streambuf< _CharT, _Traits >::sungetc().

   template<typename _CharT , typename _Traits > char_type * std::basic_streambuf< _CharT, _Traits >::egptr () const [inline],  [protected],  [inherited]
       Access to the get area. These functions are only available to other protected functions, including derived classes.

       • eback() returns the beginning pointer for the input sequence

       • gptr() returns the next pointer for the input sequence

       • egptr() returns the end pointer for the input sequence

       Definition at line 493 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_end.

       Referenced by std::basic_streambuf< _CharT, _Traits >::in_avail(), std::basic_streambuf< _CharT, _Traits >::sbumpc(), std::basic_streambuf< _CharT, _Traits >::sgetc(), std::basic_stringbuf<
       _CharT, _Traits, _Alloc >::showmanyc(), and std::wbuffer_convert< _Codecvt, _Elem, _Tr >::underflow().

   template<typename _CharT , typename _Traits > char_type * std::basic_streambuf< _CharT, _Traits >::epptr () const [inline],  [protected],  [inherited]
       Access to the put area. These functions are only available to other protected functions, including derived classes.

       • pbase() returns the beginning pointer for the output sequence

       • pptr() returns the next pointer for the output sequence

       • epptr() returns the end pointer for the output sequence

       Definition at line 540 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_end.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputc().

   template<typename _CharT , typename _Traits  = std::char_traits<_CharT>> int __gnu_cxx::stdio_filebuf< _CharT, _Traits >::fd () [inline]
       Returns
           The underlying file descriptor.

       Once associated with an external data stream, this function can be used to access the underlying POSIX file descriptor. Note that there is no way for the library to track what you do with the
       descriptor, so be careful.

       Definition at line 118 of file stdio_filebuf.h.

   template<typename _CharT , typename _Traits  = std::char_traits<_CharT>> std::__c_file * __gnu_cxx::stdio_filebuf< _CharT, _Traits >::file () [inline]
       Returns
           The underlying FILE*.

       This function can be used to access the underlying 'C' file pointer. Note that there is no way for the library to track what you do with the file, so be careful.

       Definition at line 128 of file stdio_filebuf.h.

   template<typename _CharT , typename _Traits > void std::basic_streambuf< _CharT, _Traits >::gbump (int __n) [inline],  [protected],  [inherited]
       Moving the read position.

       Parameters
           __n The delta by which to move.

       This just advances the read position without returning any data.

       Definition at line 503 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_cur.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sbumpc(), std::basic_streambuf< _CharT, _Traits >::sputbackc(), std::basic_streambuf< _CharT, _Traits >::sungetc(), and
       std::basic_streambuf< _CharT, _Traits >::uflow().

   template<typename _CharT , typename _Traits > locale std::basic_streambuf< _CharT, _Traits >::getloc () const [inline],  [inherited]
       Locale access.

       Returns
           The current locale in effect.

       If pubimbue(loc) has been called, then the most recent loc is returned. Otherwise the global locale in effect at the time of construction is returned.

       Definition at line 231 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_buf_locale.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pubimbue().

   template<typename _CharT , typename _Traits > char_type * std::basic_streambuf< _CharT, _Traits >::gptr () const [inline],  [protected],  [inherited]
       Access to the get area. These functions are only available to other protected functions, including derived classes.

       • eback() returns the beginning pointer for the input sequence

       • gptr() returns the next pointer for the input sequence

       • egptr() returns the end pointer for the input sequence

       Definition at line 490 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_cur.

       Referenced by std::basic_streambuf< _CharT, _Traits >::in_avail(), std::basic_streambuf< _CharT, _Traits >::sbumpc(), std::basic_streambuf< _CharT, _Traits >::sgetc(), std::basic_stringbuf<
       _CharT, _Traits, _Alloc >::showmanyc(), std::basic_streambuf< _CharT, _Traits >::sputbackc(), std::basic_streambuf< _CharT, _Traits >::sungetc(), std::basic_streambuf< _CharT, _Traits >::uflow(),
       and std::wbuffer_convert< _Codecvt, _Elem, _Tr >::underflow().

   template<typename _CharT , typename _Traits > void std::basic_filebuf< _CharT, _Traits >::imbue (const locale & __loc) [protected],  [virtual],  [inherited]
       Changes translations.

       Parameters
           __loc A new locale.

       Translations done during I/O which depend on the current locale are changed by this call. The standard adds, Between invocations of this function a class derived from streambuf can safely cache
       results of calls to locale functions and to members of facets so obtained.

       Note
           Base class version does nothing.

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 1029 of file fstream.tcc.

       References std::ios_base::cur.

   template<typename _CharT , typename _Traits > streamsize std::basic_streambuf< _CharT, _Traits >::in_avail () [inline],  [inherited]
       Looking ahead into the stream.

       Returns
           The number of characters available.

       If a read position is available, returns the number of characters available for reading before the buffer must be refilled. Otherwise returns the derived showmanyc().

       Definition at line 289 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::egptr(), std::basic_streambuf< _CharT, _Traits >::gptr(), and std::basic_streambuf< _CharT, _Traits >::showmanyc().

   template<typename _CharT , typename _Traits > bool std::basic_filebuf< _CharT, _Traits >::is_open () const [inline],  [inherited]
       Returns true if the external file is open.

       Definition at line 270 of file fstream.

       Referenced by std::basic_ifstream< _CharT, _Traits >::is_open(), std::basic_ofstream< _CharT, _Traits >::is_open(), and std::basic_fstream< _CharT, _Traits >::is_open().

   template<typename _CharT , typename _Traits > template<typename _Path > _If_fs_path< _Path, __filebuf_type * > std::basic_filebuf< _CharT, _Traits >::open (const _Path & __s, ios_base::openmode
       __mode) [inline],  [inherited]
       Opens an external file.

       Parameters
           __s The name of the file, as a filesystem::path.
           __mode The open mode flags.

       Returns
           this on success, NULL on failure

       Definition at line 348 of file fstream.

   template<typename _CharT , typename _Traits > basic_filebuf< _CharT, _Traits >::__filebuf_type * std::basic_filebuf< _CharT, _Traits >::open (const char * __s, ios_base::openmode __mode) [inherited]
       Opens an external file.

       Parameters
           __s The name of the file.
           __mode The open mode flags.

       Returns
           this on success, NULL on failure

       If a file is already open, this function immediately fails. Otherwise it tries to open the file named __s using the flags given in __mode.

       Table 92, adapted here, gives the relation between openmode combinations and the equivalent fopen() flags. (NB: lines app, in|out|app, in|app, binary|app, binary|in|out|app, and binary|in|app per
       DR 596)

       +---------------------------------------------------------+
       | ios_base Flag combination            stdio equivalent   |
       |binary  in  out  trunc  app                              |
       +---------------------------------------------------------+
       |             +                        w                  |
       |             +           +            a                  |
       |                         +            a                  |
       |             +     +                  w                  |
       |         +                            r                  |
       |         +   +                        r+                 |
       |         +   +     +                  w+                 |
       |         +   +           +            a+                 |
       |         +               +            a+                 |
       +---------------------------------------------------------+
       |   +         +                        wb                 |
       |   +         +           +            ab                 |
       |   +                     +            ab                 |
       |   +         +     +                  wb                 |
       |   +     +                            rb                 |
       |   +     +   +                        r+b                |
       |   +     +   +     +                  w+b                |
       |   +     +   +           +            a+b                |
       |   +     +               +            a+b                |
       +---------------------------------------------------------+

       Definition at line 179 of file fstream.tcc.

       References std::ios_base::ate, std::ios_base::end, and std::basic_filebuf< _CharT, _Traits >::open().

       Referenced by std::basic_filebuf< _CharT, _Traits >::open(), std::basic_ifstream< _CharT, _Traits >::open(), std::basic_fstream< _CharT, _Traits >::open(), and std::basic_ofstream< _CharT,
       _Traits >::open().

   template<typename _CharT , typename _Traits > __filebuf_type * std::basic_filebuf< _CharT, _Traits >::open (const std::string & __s, ios_base::openmode __mode) [inline],  [inherited]
       Opens an external file.

       Parameters
           __s The name of the file.
           __mode The open mode flags.

       Returns
           this on success, NULL on failure

       Definition at line 336 of file fstream.

       References std::basic_string< _CharT, _Traits, _Alloc >::c_str().

   template<typename _CharT , typename _Traits > basic_filebuf< _CharT, _Traits >::int_type std::basic_filebuf< _CharT, _Traits >::overflow (int_type __c = _Traits::eof()) [protected],  [virtual],
       [inherited]
       Consumes data from the buffer; writes to the controlled sequence.

       Parameters
           __c An additional character to consume.

       Returns
           eof() to indicate failure, something else (usually __c, or not_eof())

       Informally, this function is called when the output buffer is full (or does not exist, as buffering need not actually be done). If a buffer exists, it is consumed, with some effect on the
       controlled sequence. (Typically, the buffer is written out to the sequence verbatim.) In either case, the character c is also written out, if __c is not eof().

       For a formal definition of this function, see a good text such as Langer & Kreft, or [27.5.2.4.5]/3-7.

       A functioning output streambuf can be created by overriding only this function (no buffer area will be used).

       Note
           Base class version does nothing, returns eof().

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 541 of file fstream.tcc.

       References std::ios_base::app, std::ios_base::cur, and std::ios_base::out.

   template<typename _CharT , typename _Traits > basic_filebuf< _CharT, _Traits >::int_type std::basic_filebuf< _CharT, _Traits >::pbackfail (int_type __c = _Traits::eof()) [protected],  [virtual],
       [inherited]
       Tries to back up the input sequence.

       Parameters
           __c The character to be inserted back into the sequence.

       Returns
           eof() on failure, some other value on success

       Postcondition
           The constraints of gptr(), eback(), and pptr() are the same as for underflow().

       Note
           Base class version does nothing, returns eof().

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 482 of file fstream.tcc.

       References std::ios_base::cur, and std::ios_base::in.

   template<typename _CharT , typename _Traits > char_type * std::basic_streambuf< _CharT, _Traits >::pbase () const [inline],  [protected],  [inherited]
       Access to the put area. These functions are only available to other protected functions, including derived classes.

       • pbase() returns the beginning pointer for the output sequence

       • pptr() returns the next pointer for the output sequence

       • epptr() returns the end pointer for the output sequence

       Definition at line 534 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_beg.

       Referenced by std::basic_stringbuf< _CharT, _Traits, _Alloc >::str().

   template<typename _CharT , typename _Traits > void std::basic_streambuf< _CharT, _Traits >::pbump (int __n) [inline],  [protected],  [inherited]
       Moving the write position.

       Parameters
           __n The delta by which to move.

       This just advances the write position without returning any data.

       Definition at line 550 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_cur.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputc().

   template<typename _CharT , typename _Traits > char_type * std::basic_streambuf< _CharT, _Traits >::pptr () const [inline],  [protected],  [inherited]
       Access to the put area. These functions are only available to other protected functions, including derived classes.

       • pbase() returns the beginning pointer for the output sequence

       • pptr() returns the next pointer for the output sequence

       • epptr() returns the end pointer for the output sequence

       Definition at line 537 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_cur.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputc().

   template<typename _CharT , typename _Traits > locale std::basic_streambuf< _CharT, _Traits >::pubimbue (const locale & __loc) [inline],  [inherited]
       Entry point for imbue().

       Parameters
           __loc The new locale.

       Returns
           The previous locale.

       Calls the derived imbue(__loc).

       Definition at line 214 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_buf_locale, std::basic_streambuf< _CharT, _Traits >::getloc(), and std::basic_streambuf< _CharT, _Traits >::imbue().

   template<typename _CharT , typename _Traits > pos_type std::basic_streambuf< _CharT, _Traits >::pubseekoff (off_type __off, ios_base::seekdir __way, ios_base::openmode __mode = ios_base::in |
       ios_base::out) [inline],  [inherited]
       Alters the stream position.

       Parameters
           __off Offset.
           __way Value for ios_base::seekdir.
           __mode Value for ios_base::openmode.

       Calls virtual seekoff function.

       Definition at line 256 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::seekoff().

   template<typename _CharT , typename _Traits > pos_type std::basic_streambuf< _CharT, _Traits >::pubseekpos (pos_type __sp, ios_base::openmode __mode = ios_base::in | ios_base::out) [inline],
       [inherited]
       Alters the stream position.

       Parameters
           __sp Position
           __mode Value for ios_base::openmode.

       Calls virtual seekpos function.

       Definition at line 268 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::seekpos().

   template<typename _CharT , typename _Traits > basic_streambuf * std::basic_streambuf< _CharT, _Traits >::pubsetbuf (char_type * __s, streamsize __n) [inline],  [inherited]
       Entry points for derived buffer functions. The public versions of pubfoo dispatch to the protected derived foo member functions, passing the arguments (if any) and returning the result unchanged.

       Definition at line 244 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::setbuf().

   template<typename _CharT , typename _Traits > int std::basic_streambuf< _CharT, _Traits >::pubsync () [inline],  [inherited]
       Calls virtual sync function.

       Definition at line 276 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::sync().

       Referenced by std::wbuffer_convert< _Codecvt, _Elem, _Tr >::sync(), and std::basic_istream< _CharT, _Traits >::sync().

   template<typename _CharT , typename _Traits > int_type std::basic_streambuf< _CharT, _Traits >::sbumpc () [inline],  [inherited]
       Getting the next character.

       Returns
           The next character, or eof.

       If the input read position is available, returns that character and increments the read pointer, otherwise calls and returns uflow().

       Definition at line 321 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::egptr(), std::basic_streambuf< _CharT, _Traits >::gbump(), std::basic_streambuf< _CharT, _Traits >::gptr(), and std::basic_streambuf< _CharT,
       _Traits >::uflow().

       Referenced by std::basic_istream< _CharT, _Traits >::getline(), std::istreambuf_iterator< _CharT, _Traits >::operator++(), and std::basic_streambuf< _CharT, _Traits >::snextc().

   template<typename _CharT , typename _Traits > basic_filebuf< _CharT, _Traits >::pos_type std::basic_filebuf< _CharT, _Traits >::seekoff (off_type, ios_base::seekdir, ios_base::openmode = ios_base::in
       | ios_base::out) [protected],  [virtual],  [inherited]
       Alters the stream positions. Each derived class provides its own appropriate behavior.

       Note
           Base class version does nothing, returns a pos_type that represents an invalid stream position.

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 832 of file fstream.tcc.

       References std::ios_base::cur.

   template<typename _CharT , typename _Traits > basic_filebuf< _CharT, _Traits >::pos_type std::basic_filebuf< _CharT, _Traits >::seekpos (pos_type, ios_base::openmode = ios_base::in | ios_base::out)
       [protected],  [virtual],  [inherited]
       Alters the stream positions. Each derived class provides its own appropriate behavior.

       Note
           Base class version does nothing, returns a pos_type that represents an invalid stream position.

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 892 of file fstream.tcc.

       References std::ios_base::beg.

   template<typename _CharT , typename _Traits > basic_filebuf< _CharT, _Traits >::__streambuf_type * std::basic_filebuf< _CharT, _Traits >::setbuf (char_type * __s, streamsize __n) [protected],
       [virtual],  [inherited]
       Manipulates the buffer.

       Parameters
           __s Pointer to a buffer area.
           __n Size of __s.

       Returns
           this

       If no file has been opened, and both __s and __n are zero, then the stream becomes unbuffered. Otherwise, __s is used as a buffer; see
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering for more.

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 803 of file fstream.tcc.

   template<typename _CharT , typename _Traits > void std::basic_streambuf< _CharT, _Traits >::setg (char_type * __gbeg, char_type * __gnext, char_type * __gend) [inline],  [protected],  [inherited]
       Setting the three read area pointers.

       Parameters
           __gbeg A pointer.
           __gnext A pointer.
           __gend A pointer.

       Postcondition
           __gbeg == eback(), __gnext == gptr(), and __gend == egptr()

       Definition at line 514 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_beg, std::basic_streambuf< _CharT, _Traits >::_M_in_cur, and std::basic_streambuf< _CharT, _Traits >::_M_in_end.

       Referenced by std::wbuffer_convert< _Codecvt, _Elem, _Tr >::wbuffer_convert().

   template<typename _CharT , typename _Traits > void std::basic_streambuf< _CharT, _Traits >::setp (char_type * __pbeg, char_type * __pend) [inline],  [protected],  [inherited]
       Setting the three write area pointers.

       Parameters
           __pbeg A pointer.
           __pend A pointer.

       Postcondition
           __pbeg == pbase(), __pbeg == pptr(), and __pend == epptr()

       Definition at line 560 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_beg, std::basic_streambuf< _CharT, _Traits >::_M_out_cur, and std::basic_streambuf< _CharT, _Traits >::_M_out_end.

       Referenced by std::wbuffer_convert< _Codecvt, _Elem, _Tr >::wbuffer_convert().

   template<typename _CharT , typename _Traits > int_type std::basic_streambuf< _CharT, _Traits >::sgetc () [inline],  [inherited]
       Getting the next character.

       Returns
           The next character, or eof.

       If the input read position is available, returns that character, otherwise calls and returns underflow(). Does not move the read position after fetching the character.

       Definition at line 343 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::egptr(), std::basic_streambuf< _CharT, _Traits >::gptr(), and std::basic_streambuf< _CharT, _Traits >::underflow().

       Referenced by std::basic_istream< _CharT, _Traits >::sentry::sentry(), std::basic_istream< _CharT, _Traits >::get(), std::basic_istream< _CharT, _Traits >::getline(), std::basic_istream< _CharT,
       _Traits >::ignore(), std::istreambuf_iterator< _CharT, _Traits >::operator++(), std::basic_istream< char >::seekg(), and std::basic_streambuf< _CharT, _Traits >::snextc().

   template<typename _CharT , typename _Traits > streamsize std::basic_streambuf< _CharT, _Traits >::sgetn (char_type * __s, streamsize __n) [inline],  [inherited]
       Entry point for xsgetn.

       Parameters
           __s A buffer area.
           __n A count.

       Returns xsgetn(__s,__n). The effect is to fill __s[0] through __s[__n-1] with characters from the input sequence, if possible.

       Definition at line 362 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::xsgetn().

   template<typename _CharT , typename _Traits > streamsize std::basic_filebuf< _CharT, _Traits >::showmanyc [protected],  [virtual],  [inherited]
       Investigating the data available.

       Returns
           An estimate of the number of characters available in the input sequence, or -1.

       If it returns a positive value, then successive calls to underflow() will not return traits::eof() until at least that number of characters have been supplied. If showmanyc() returns -1, then
       calls to underflow() or uflow() will fail. [27.5.2.4.3]/1

       Note
           Base class version does nothing, returns zero.

           The standard adds that the intention is not only that the calls [to underflow or uflow] will not return eof() but that they will return immediately.

           The standard adds that the morphemes of showmanyc are es-how-many-see, not show-manic.

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 297 of file fstream.tcc.

       References std::ios_base::binary, and std::ios_base::in.

   template<typename _CharT , typename _Traits > int_type std::basic_streambuf< _CharT, _Traits >::snextc () [inline],  [inherited]
       Getting the next character.

       Returns
           The next character, or eof.

       Calls sbumpc(), and if that function returns traits::eof(), so does this function. Otherwise, sgetc().

       Definition at line 303 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::sbumpc(), and std::basic_streambuf< _CharT, _Traits >::sgetc().

       Referenced by std::basic_istream< _CharT, _Traits >::sentry::sentry(), std::basic_istream< _CharT, _Traits >::get(), std::basic_istream< _CharT, _Traits >::getline(), and std::basic_istream< char
       >::putback().

   template<typename _CharT , typename _Traits > int_type std::basic_streambuf< _CharT, _Traits >::sputbackc (char_type __c) [inline],  [inherited]
       Pushing characters back into the input stream.

       Parameters
           __c The character to push back.

       Returns
           The previous character, if possible.

       Similar to sungetc(), but __c is pushed onto the stream instead of the previous character. If successful, the next character fetched from the input stream will be __c.

       Definition at line 377 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::eback(), std::basic_streambuf< _CharT, _Traits >::gbump(), std::basic_streambuf< _CharT, _Traits >::gptr(), and std::basic_streambuf< _CharT,
       _Traits >::pbackfail().

       Referenced by std::basic_istream< _CharT, _Traits >::putback().

   template<typename _CharT , typename _Traits > int_type std::basic_streambuf< _CharT, _Traits >::sputc (char_type __c) [inline],  [inherited]
       Entry point for all single-character output functions.

       Parameters
           __c A character to output.

       Returns
           __c, if possible.

       One of two public output functions.

       If a write position is available for the output sequence (i.e., the buffer is not full), stores __c in that position, increments the position, and returns traits::to_int_type(__c). If a write
       position is not available, returns overflow(__c).

       Definition at line 429 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::epptr(), std::basic_streambuf< _CharT, _Traits >::overflow(), std::basic_streambuf< _CharT, _Traits >::pbump(), and std::basic_streambuf<
       _CharT, _Traits >::pptr().

       Referenced by std::ostreambuf_iterator< _CharT, _Traits >::operator=(), and std::wbuffer_convert< _Codecvt, _Elem, _Tr >::overflow().

   template<typename _CharT , typename _Traits > streamsize std::basic_streambuf< _CharT, _Traits >::sputn (const char_type * __s, streamsize __n) [inline],  [inherited]
       Entry point for all single-character output functions.

       Parameters
           __s A buffer read area.
           __n A count.

       One of two public output functions.

       Returns xsputn(__s,__n). The effect is to write __s[0] through __s[__n-1] to the output sequence, if possible.

       Definition at line 455 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::xsputn().

   template<typename _CharT , typename _Traits > int_type std::basic_streambuf< _CharT, _Traits >::sungetc () [inline],  [inherited]
       Moving backwards in the input stream.

       Returns
           The previous character, if possible.

       If a putback position is available, this function decrements the input pointer and returns that character. Otherwise, calls and returns pbackfail(). The effect is to unget the last character
       gotten.

       Definition at line 402 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::eback(), std::basic_streambuf< _CharT, _Traits >::gbump(), std::basic_streambuf< _CharT, _Traits >::gptr(), and std::basic_streambuf< _CharT,
       _Traits >::pbackfail().

       Referenced by std::basic_istream< _CharT, _Traits >::unget().

   template<typename _CharT , typename _Traits > void std::basic_filebuf< _CharT, _Traits >::swap (basic_filebuf< _CharT, _Traits > & __rhs) [inherited]
       Definition at line 153 of file fstream.tcc.

   template<typename _CharT , typename _Traits > void std::basic_streambuf< _CharT, _Traits >::swap (basic_streambuf< _CharT, _Traits > & __sb) [inline],  [protected],  [inherited]
       Definition at line 817 of file streambuf.

   template<typename _CharT , typename _Traits  = std::char_traits<_CharT>> void __gnu_cxx::stdio_filebuf< _CharT, _Traits >::swap (stdio_filebuf< _CharT, _Traits > & __fb) [inline]
       Definition at line 105 of file stdio_filebuf.h.

   template<typename _CharT , typename _Traits > int std::basic_filebuf< _CharT, _Traits >::sync [protected],  [virtual],  [inherited]
       Synchronizes the buffer arrays with the controlled sequences.

       Returns
           -1 on failure.

       Each derived class provides its own appropriate behavior, including the definition of failure.

       Note
           Base class version does nothing, returns zero.

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 1012 of file fstream.tcc.

   template<typename _CharT , typename _Traits > virtual int_type std::basic_streambuf< _CharT, _Traits >::uflow () [inline],  [protected],  [virtual],  [inherited]
       Fetches more data from the controlled sequence.

       Returns
           The first character from the pending sequence.

       Informally, this function does the same thing as underflow(), and in fact is required to call that function. It also returns the new character, like underflow() does. However, this function also
       moves the read position forward by one.

       Reimplemented in __gnu_cxx::stdio_sync_filebuf< _CharT, _Traits >.

       Definition at line 705 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::gbump(), std::basic_streambuf< _CharT, _Traits >::gptr(), and std::basic_streambuf< _CharT, _Traits >::underflow().

       Referenced by std::basic_streambuf< _CharT, _Traits >::sbumpc().

   template<typename _CharT , typename _Traits > basic_filebuf< _CharT, _Traits >::int_type std::basic_filebuf< _CharT, _Traits >::underflow [protected],  [virtual],  [inherited]
       Fetches more data from the controlled sequence.

       Returns
           The first character from the pending sequence.

       Informally, this function is called when the input buffer is exhausted (or does not exist, as buffering need not actually be done). If a buffer exists, it is refilled. In either case, the next
       available character is returned, or traits::eof() to indicate a null pending sequence.

       For a formal definition of the pending sequence, see a good text such as Langer & Kreft, or [27.5.2.4.3]/7-14.

       A functioning input streambuf can be created by overriding only this function (no buffer area will be used). For an example, see https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html

       Note
           Base class version does nothing, returns eof().

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 323 of file fstream.tcc.

       References std::ios_base::in.

   template<typename _CharT , typename _Traits > streamsize std::basic_filebuf< _CharT, _Traits >::xsgetn (char_type * __s, streamsize __n) [protected],  [virtual],  [inherited]
       Multiple character extraction.

       Parameters
           __s A buffer area.
           __n Maximum number of characters to assign.

       Returns
           The number of characters assigned.

       Fills __s[0] through __s[__n-1] with characters from the input sequence, as if by sbumpc(). Stops when either __n characters have been copied, or when traits::eof() would be copied.

       It is expected that derived classes provide a more efficient implementation by overriding this definition.

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 669 of file fstream.tcc.

       References std::ios_base::in.

   template<typename _CharT , typename _Traits > streamsize std::basic_filebuf< _CharT, _Traits >::xsputn (const char_type * __s, streamsize __n) [protected],  [virtual],  [inherited]
       Multiple character insertion.

       Parameters
           __s A buffer area.
           __n Maximum number of characters to write.

       Returns
           The number of characters written.

       Writes __s[0] through __s[__n-1] to the output sequence, as if by sputc(). Stops when either n characters have been copied, or when sputc() would return traits::eof().

       It is expected that derived classes provide a more efficient implementation by overriding this definition.

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 755 of file fstream.tcc.

       References std::ios_base::app, std::min(), and std::ios_base::out.

Member Data Documentation
   template<typename _CharT , typename _Traits > char_type* std::basic_filebuf< _CharT, _Traits >::_M_buf [protected],  [inherited]
       Pointer to the beginning of internal buffer.

       Definition at line 141 of file fstream.

   template<typename _CharT , typename _Traits > bool std::basic_filebuf< _CharT, _Traits >::_M_buf_allocated [protected],  [inherited]
       Definition at line 151 of file fstream.

   template<typename _CharT , typename _Traits > locale std::basic_streambuf< _CharT, _Traits >::_M_buf_locale [protected],  [inherited]
       Current locale setting.

       Definition at line 197 of file streambuf.

       Referenced by std::basic_filebuf< _CharT, _Traits >::basic_filebuf(), std::basic_streambuf< _CharT, _Traits >::getloc(), and std::basic_streambuf< _CharT, _Traits >::pubimbue().

   template<typename _CharT , typename _Traits > size_t std::basic_filebuf< _CharT, _Traits >::_M_buf_size [protected],  [inherited]
       Actual size of internal buffer. This number is equal to the size of the put area + 1 position, reserved for the overflow char of a full area.

       Definition at line 148 of file fstream.

   template<typename _CharT , typename _Traits > const __codecvt_type* std::basic_filebuf< _CharT, _Traits >::_M_codecvt [protected],  [inherited]
       Definition at line 176 of file fstream.

   template<typename _CharT , typename _Traits > char* std::basic_filebuf< _CharT, _Traits >::_M_ext_buf [protected],  [inherited]
       Buffer for external characters. Used for input when codecvt::always_noconv() == false. When valid, this corresponds to eback().

       Definition at line 183 of file fstream.

   template<typename _CharT , typename _Traits > streamsize std::basic_filebuf< _CharT, _Traits >::_M_ext_buf_size [protected],  [inherited]
       Size of buffer held by _M_ext_buf.

       Definition at line 188 of file fstream.

   template<typename _CharT , typename _Traits > char* std::basic_filebuf< _CharT, _Traits >::_M_ext_end [protected],  [inherited]
       Definition at line 196 of file fstream.

   template<typename _CharT , typename _Traits > const char* std::basic_filebuf< _CharT, _Traits >::_M_ext_next [protected],  [inherited]
       Pointers into the buffer held by _M_ext_buf that delimit a subsequence of bytes that have been read but not yet converted. When valid, _M_ext_next corresponds to egptr().

       Definition at line 195 of file fstream.

   template<typename _CharT , typename _Traits > __file_type std::basic_filebuf< _CharT, _Traits >::_M_file [protected],  [inherited]
       Definition at line 123 of file fstream.

   template<typename _CharT , typename _Traits > char_type* std::basic_streambuf< _CharT, _Traits >::_M_in_beg [protected],  [inherited]
       Start of get area.

       Definition at line 189 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::eback(), and std::basic_streambuf< _CharT, _Traits >::setg().

   template<typename _CharT , typename _Traits > char_type* std::basic_streambuf< _CharT, _Traits >::_M_in_cur [protected],  [inherited]
       Current read area.

       Definition at line 190 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::gbump(), std::basic_streambuf< _CharT, _Traits >::gptr(), and std::basic_streambuf< _CharT, _Traits >::setg().

   template<typename _CharT , typename _Traits > char_type* std::basic_streambuf< _CharT, _Traits >::_M_in_end [protected],  [inherited]
       End of get area.

       Definition at line 191 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::egptr(), and std::basic_streambuf< _CharT, _Traits >::setg().

   template<typename _CharT , typename _Traits > __c_lock std::basic_filebuf< _CharT, _Traits >::_M_lock [protected],  [inherited]
       Definition at line 120 of file fstream.

   template<typename _CharT , typename _Traits > ios_base::openmode std::basic_filebuf< _CharT, _Traits >::_M_mode [protected],  [inherited]
       Place to stash in || out || in | out settings for current filebuf.

       Definition at line 126 of file fstream.

       Referenced by std::basic_filebuf< _CharT, _Traits >::close().

   template<typename _CharT , typename _Traits > char_type* std::basic_streambuf< _CharT, _Traits >::_M_out_beg [protected],  [inherited]
       Start of put area.

       Definition at line 192 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pbase(), and std::basic_streambuf< _CharT, _Traits >::setp().

   template<typename _CharT , typename _Traits > char_type* std::basic_streambuf< _CharT, _Traits >::_M_out_cur [protected],  [inherited]
       Current put area.

       Definition at line 193 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pbump(), std::basic_streambuf< _CharT, _Traits >::pptr(), and std::basic_streambuf< _CharT, _Traits >::setp().

   template<typename _CharT , typename _Traits > char_type* std::basic_streambuf< _CharT, _Traits >::_M_out_end [protected],  [inherited]
       End of put area.

       Definition at line 194 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::epptr(), and std::basic_streambuf< _CharT, _Traits >::setp().

   template<typename _CharT , typename _Traits > char_type std::basic_filebuf< _CharT, _Traits >::_M_pback [protected],  [inherited]
       Necessary bits for putback buffer management.

       Note
           pbacks of over one character are not currently supported.

       Definition at line 169 of file fstream.

   template<typename _CharT , typename _Traits > char_type* std::basic_filebuf< _CharT, _Traits >::_M_pback_cur_save [protected],  [inherited]
       Necessary bits for putback buffer management.

       Note
           pbacks of over one character are not currently supported.

       Definition at line 170 of file fstream.

   template<typename _CharT , typename _Traits > char_type* std::basic_filebuf< _CharT, _Traits >::_M_pback_end_save [protected],  [inherited]
       Necessary bits for putback buffer management.

       Note
           pbacks of over one character are not currently supported.

       Definition at line 171 of file fstream.

   template<typename _CharT , typename _Traits > bool std::basic_filebuf< _CharT, _Traits >::_M_pback_init [protected],  [inherited]
       Necessary bits for putback buffer management.

       Note
           pbacks of over one character are not currently supported.

       Definition at line 172 of file fstream.

       Referenced by std::basic_filebuf< _CharT, _Traits >::close().

   template<typename _CharT , typename _Traits > bool std::basic_filebuf< _CharT, _Traits >::_M_reading [protected],  [inherited]
       _M_reading == false && _M_writing == false for uncommitted mode; _M_reading == true for read mode; _M_writing == true for write mode;

       NB: _M_reading == true && _M_writing == true is unused.

       Definition at line 160 of file fstream.

       Referenced by std::basic_filebuf< _CharT, _Traits >::close().

   template<typename _CharT , typename _Traits > __state_type std::basic_filebuf< _CharT, _Traits >::_M_state_beg [protected],  [inherited]
       Definition at line 129 of file fstream.

   template<typename _CharT , typename _Traits > __state_type std::basic_filebuf< _CharT, _Traits >::_M_state_cur [protected],  [inherited]
       Definition at line 134 of file fstream.

   template<typename _CharT , typename _Traits > __state_type std::basic_filebuf< _CharT, _Traits >::_M_state_last [protected],  [inherited]
       Definition at line 138 of file fstream.

   template<typename _CharT , typename _Traits > bool std::basic_filebuf< _CharT, _Traits >::_M_writing [protected],  [inherited]
       Definition at line 161 of file fstream.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                                                                                     Wed Feb 1 2023                                                __gnu_cxx::stdio_filebuf< _CharT, _Traits >(3)
