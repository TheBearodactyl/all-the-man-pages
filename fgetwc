fgetwc(3)                                                                                Library Functions Manual                                                                                fgetwc(3)

NAME
       fgetwc, getwc - read a wide character from a FILE stream

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdio.h>
       #include <wchar.h>

       wint_t fgetwc(FILE *stream);
       wint_t getwc(FILE *stream);

DESCRIPTION
       The  fgetwc() function is the wide-character equivalent of the fgetc(3) function.  It reads a wide character from stream and returns it.  If the end of stream is reached, or if ferror(stream) be‐
       comes true, it returns WEOF.  If a wide-character conversion error occurs, it sets errno to EILSEQ and returns WEOF.

       The getwc() function or macro functions identically to fgetwc().  It may be implemented as a macro, and may evaluate its argument more than once.  There is no reason ever to use it.

       For nonlocking counterparts, see unlocked_stdio(3).

RETURN VALUE
       On success, fgetwc() returns the next wide-character from the stream.  Otherwise, WEOF is returned, and errno is set to indicate the error.

ERRORS
       Apart from the usual ones, there is

       EILSEQ The data obtained from the input stream does not form a valid character.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │fgetwc(), getwc()                                                                                                                                                       │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       POSIX.1-2001, C99.

NOTES
       The behavior of fgetwc() depends on the LC_CTYPE category of the current locale.

       In the absence of additional information passed to the fopen(3) call, it is reasonable to expect that fgetwc() will actually read a multibyte sequence from the stream and then  convert  it  to  a
       wide character.

SEE ALSO
       fgetws(3), fputwc(3), ungetwc(3), unlocked_stdio(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                       fgetwc(3)
FGETWC(3P)                                                                               POSIX Programmer's Manual                                                                              FGETWC(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       fgetwc — get a wide-character code from a stream

SYNOPSIS
       #include <stdio.h>
       #include <wchar.h>

       wint_t fgetwc(FILE *stream);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       The  fgetwc()  function  shall obtain the next character (if present) from the input stream pointed to by stream, convert that to the corresponding wide-character code, and advance the associated
       file position indicator for the stream (if defined).

       If an error occurs, the resulting value of the file position indicator for the stream is unspecified.

       The fgetwc() function may mark the last data access timestamp of the file associated with stream for update. The last data access timestamp shall be marked for update by the first successful exe‐
       cution of fgetwc(), fgetws(), fwscanf(), getwc(), getwchar(), vfwscanf(), vwscanf(), or wscanf() using stream that returns data not supplied by a prior call to ungetwc().

       The fgetwc() function shall not change the setting of errno if successful.

RETURN VALUE
       Upon successful completion, the fgetwc() function shall return the wide-character code of the character read from the input stream pointed to by stream converted to a type wint_t.  If the end-of-
       file indicator for the stream is set, or if the stream is at end-of-file, the end-of-file indicator for the stream shall be set and fgetwc() shall return WEOF. If a read error occurs,  the  error
       indicator  for  the  stream  shall  be  set,  fgetwc() shall return WEOF, and shall set errno to indicate the error.  If an encoding error occurs, the error indicator for the stream shall be set,
       fgetwc() shall return WEOF, and shall set errno to indicate the error.

ERRORS
       The fgetwc() function shall fail if data needs to be read and:

       EAGAIN The O_NONBLOCK flag is set for the file descriptor underlying stream and the thread would be delayed in the fgetwc() operation.

       EBADF  The file descriptor underlying stream is not a valid file descriptor open for reading.

       EILSEQ The data obtained from the input stream does not form a valid character.

       EINTR  The read operation was terminated due to the receipt of a signal, and no data was transferred.

       EIO    A physical I/O error has occurred, or the process is in a background process group attempting to read from its controlling terminal, and either the calling thread is  blocking  SIGTTIN  or
              the process is ignoring SIGTTIN or the process group of the process is orphaned.  This error may also be generated for implementation-defined reasons.

       EOVERFLOW
              The file is a regular file and an attempt was made to read at or beyond the offset maximum associated with the corresponding stream.

       The fgetwc() function may fail if:

       ENOMEM Insufficient storage space is available.

       ENXIO  A request was made of a nonexistent device, or the request was outside the capabilities of the device.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       The ferror() or feof() functions must be used to distinguish between an error condition and an end-of-file condition.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.5, Standard I/O Streams, feof(), ferror(), fopen()

       The Base Definitions volume of POSIX.1‐2017, <stdio.h>, <wchar.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                         FGETWC(3P)
