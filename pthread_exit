pthread_exit(3)            Library Functions Manual            pthread_exit(3)

NAME
       pthread_exit - terminate calling thread

LIBRARY
       POSIX threads library (libpthread, -lpthread)

SYNOPSIS
       #include <pthread.h>

       [[noreturn]] void pthread_exit(void *retval);

DESCRIPTION
       The pthread_exit() function terminates the calling thread and returns a
       value via retval that (if the thread is joinable) is available  to  an‐
       other thread in the same process that calls pthread_join(3).

       Any  clean-up handlers established by pthread_cleanup_push(3) that have
       not yet been popped, are popped (in the reverse of the order  in  which
       they  were pushed) and executed.  If the thread has any thread-specific
       data, then, after the clean-up handlers have been executed, the  corre‐
       sponding destructor functions are called, in an unspecified order.

       When a thread terminates, process-shared resources (e.g., mutexes, con‐
       dition variables, semaphores, and file descriptors) are  not  released,
       and functions registered using atexit(3) are not called.

       After  the  last thread in a process terminates, the process terminates
       as by calling exit(3) with an exit status of zero; thus, process-shared
       resources  are  released  and  functions registered using atexit(3) are
       called.

RETURN VALUE
       This function does not return to the caller.

ERRORS
       This function always succeeds.

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │pthread_exit()                              │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

NOTES
       Performing  a  return  from the start function of any thread other than
       the main thread results in an implicit call  to  pthread_exit(),  using
       the function's return value as the thread's exit status.

       To  allow  other  threads to continue execution, the main thread should
       terminate by calling pthread_exit() rather than exit(3).

       The value pointed to by retval should not be  located  on  the  calling
       thread's  stack,  since  the contents of that stack are undefined after
       the thread terminates.

BUGS
       Currently, there are limitations in the kernel implementation logic for
       wait(2)ing  on  a stopped thread group with a dead thread group leader.
       This can manifest in problems such as a locked terminal if a stop  sig‐
       nal  is  sent to a foreground process whose thread group leader has al‐
       ready called pthread_exit().

SEE ALSO
       pthread_create(3), pthread_join(3), pthreads(7)

Linux man-pages 6.04              2023-03-30                   pthread_exit(3)
PTHREAD_EXIT(3P)           POSIX Programmer's Manual          PTHREAD_EXIT(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       pthread_exit — thread termination

SYNOPSIS
       #include <pthread.h>

       void pthread_exit(void *value_ptr);

DESCRIPTION
       The pthread_exit() function shall terminate the calling thread and make
       the value value_ptr available to any successful join with the terminat‐
       ing thread. Any cancellation cleanup handlers that have been pushed and
       not  yet  popped  shall  be  popped in the reverse order that they were
       pushed and then executed. After all cancellation cleanup handlers  have
       been  executed, if the thread has any thread-specific data, appropriate
       destructor functions shall be called in an  unspecified  order.  Thread
       termination does not release any application visible process resources,
       including, but not limited to, mutexes and file descriptors,  nor  does
       it  perform  any process-level cleanup actions, including, but not lim‐
       ited to, calling any atexit() routines that may exist.

       An implicit call to pthread_exit() is made when a thread other than the
       thread in which main() was first invoked returns from the start routine
       that was used to create it. The function's return value shall serve  as
       the thread's exit status.

       The  behavior of pthread_exit() is undefined if called from a cancella‐
       tion cleanup handler or destructor function that was invoked as  a  re‐
       sult of either an implicit or explicit call to pthread_exit().

       After  a  thread  has  terminated, the result of access to local (auto)
       variables of the thread is undefined. Thus, references to  local  vari‐
       ables  of  the exiting thread should not be used for the pthread_exit()
       value_ptr parameter value.

       The process shall exit with an exit status of 0 after the  last  thread
       has  been  terminated.  The  behavior shall be as if the implementation
       called exit() with a zero argument at thread termination time.

RETURN VALUE
       The pthread_exit() function cannot return to its caller.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       The normal mechanism by which a thread terminates is to return from the
       routine  that  was  specified in the pthread_create() call that started
       it. The pthread_exit() function provides the capability for a thread to
       terminate  without  requiring  a  return from the start routine of that
       thread, thereby providing a function analogous to exit().

       Regardless of  the  method  of  thread  termination,  any  cancellation
       cleanup handlers that have been pushed and not yet popped are executed,
       and the destructors for any existing thread-specific data are executed.
       This volume of POSIX.1‐2017 requires that cancellation cleanup handlers
       be popped and called in order. After all cancellation cleanup  handlers
       have  been executed, thread-specific data destructors are called, in an
       unspecified order, for each item of thread-specific data that exists in
       the  thread.  This  ordering  is necessary because cancellation cleanup
       handlers may rely on thread-specific data.

       As the meaning of the status is determined by the  application  (except
       when  the  thread  has  been canceled, in which case it is PTHREAD_CAN‐
       CELED), the implementation has no idea what an illegal status value is,
       which is why no address error checking is done.

FUTURE DIRECTIONS
       None.

SEE ALSO
       exit(), pthread_create(), pthread_join()

       The Base Definitions volume of POSIX.1‐2017, <pthread.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                     PTHREAD_EXIT(3P)
