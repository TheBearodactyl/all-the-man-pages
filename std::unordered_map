std::unordered_map< _Kstd::unordered_map<o_Key,n_Tp,>_Hash, _Pred, _Alloc >(3)

NAME
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc > - A standard
       container composed of unique keys (containing at most one of each key
       value) that associates values of another type with the keys.

SYNOPSIS
       #include <unordered_map>

   Public Types
       using insert_return_type = typename _Hashtable::insert_return_type
       using node_type = typename _Hashtable::node_type

           typedef _Hashtable::key_type key_type
               Public typedefs.
           typedef _Hashtable::value_type value_type
               Public typedefs.
           typedef _Hashtable::mapped_type mapped_type
               Public typedefs.
           typedef _Hashtable::hasher hasher
               Public typedefs.
           typedef _Hashtable::key_equal key_equal
               Public typedefs.
           typedef _Hashtable::allocator_type allocator_type
               Public typedefs.

           typedef _Hashtable::pointer pointer
               Iterator-related typedefs.
           typedef _Hashtable::const_pointer const_pointer
               Iterator-related typedefs.
           typedef _Hashtable::reference reference
               Iterator-related typedefs.
           typedef _Hashtable::const_reference const_reference
               Iterator-related typedefs.
           typedef _Hashtable::iterator iterator
               Iterator-related typedefs.
           typedef _Hashtable::const_iterator const_iterator
               Iterator-related typedefs.
           typedef _Hashtable::local_iterator local_iterator
               Iterator-related typedefs.
           typedef _Hashtable::const_local_iterator const_local_iterator
               Iterator-related typedefs.
           typedef _Hashtable::size_type size_type
               Iterator-related typedefs.
           typedef _Hashtable::difference_type difference_type
               Iterator-related typedefs.

   Public Member Functions
       unordered_map ()=default
           Default constructor.
       template<typename _InputIterator > unordered_map (_InputIterator
           __first, _InputIterator __last, size_type __n, const allocator_type
           &__a)
       template<typename _InputIterator > unordered_map (_InputIterator
           __first, _InputIterator __last, size_type __n, const hasher &__hf,
           const allocator_type &__a)
       template<typename _InputIterator > unordered_map (_InputIterator
           __first, _InputIterator __last, size_type __n=0, const hasher
           &__hf=hasher(), const key_equal &__eql=key_equal(), const
           allocator_type &__a=allocator_type())
           Builds an unordered_map from a range.
       unordered_map (const allocator_type &__a)
           Creates an unordered_map with no elements.
       unordered_map (const unordered_map &)=default
           Copy constructor.
       unordered_map (const unordered_map &__umap, const allocator_type &__a)
       unordered_map (initializer_list< value_type > __l, size_type __n, const
           allocator_type &__a)
       unordered_map (initializer_list< value_type > __l, size_type __n, const
           hasher &__hf, const allocator_type &__a)
       unordered_map (initializer_list< value_type > __l, size_type __n=0,
           const hasher &__hf=hasher(), const key_equal &__eql=key_equal(),
           const allocator_type &__a=allocator_type())
           Builds an unordered_map from an initializer_list.
       unordered_map (size_type __n, const allocator_type &__a)
       unordered_map (size_type __n, const hasher &__hf, const allocator_type
           &__a)
       unordered_map (size_type __n, const hasher &__hf=hasher(), const
           key_equal &__eql=key_equal(), const allocator_type
           &__a=allocator_type())
           Default constructor creates no elements.
       unordered_map (unordered_map &&)=default
           Move constructor.
       unordered_map (unordered_map &&__umap, const allocator_type &__a)
           noexcept(noexcept(_Hashtable(std::move(__umap._M_h), __a)))
       iterator begin () noexcept
       local_iterator begin (size_type __n)
           Returns a read/write iterator pointing to the first bucket element.
       size_type bucket (const key_type &__key) const
       size_type bucket_count () const noexcept
           Returns the number of buckets of the unordered_map.
       size_type bucket_size (size_type __n) const
       void clear () noexcept
       template<typename... _Args> std::pair< iterator, bool > emplace (_Args
           &&... __args)
           Attempts to build and insert a std::pair into the unordered_map.
       template<typename... _Args> iterator emplace_hint (const_iterator
           __pos, _Args &&... __args)
           Attempts to build and insert a std::pair into the unordered_map.
       bool empty () const noexcept
           Returns true if the unordered_map is empty.
       iterator end () noexcept
       local_iterator end (size_type __n)
           Returns a read/write iterator pointing to one past the last bucket
           elements.
       size_type erase (const key_type &__x)
           Erases elements according to the provided key.
       iterator erase (const_iterator __first, const_iterator __last)
           Erases a [__first,__last) range of elements from an unordered_map.
       node_type extract (const key_type &__key)
           Extract a node.
       node_type extract (const_iterator __pos)
           Extract a node.
       allocator_type get_allocator () const noexcept
           Returns the allocator object used by the unordered_map.
       hasher hash_function () const
           Returns the hash functor object with which the unordered_map was
           constructed.
       template<typename _InputIterator > void insert (_InputIterator __first,
           _InputIterator __last)
           A template function that attempts to insert a range of elements.
       iterator insert (const_iterator, node_type &&__nh)
           Re-insert an extracted node.
       void insert (initializer_list< value_type > __l)
           Attempts to insert a list of elements into the unordered_map.
       insert_return_type insert (node_type &&__nh)
           Re-insert an extracted node.
       template<typename _Obj > pair< iterator, bool > insert_or_assign (const
           key_type &__k, _Obj &&__obj)
           Attempts to insert a std::pair into the unordered_map.
       template<typename _Obj > iterator insert_or_assign (const_iterator
           __hint, const key_type &__k, _Obj &&__obj)
           Attempts to insert a std::pair into the unordered_map.
       template<typename _Obj > iterator insert_or_assign (const_iterator
           __hint, key_type &&__k, _Obj &&__obj)
       template<typename _Obj > pair< iterator, bool > insert_or_assign
           (key_type &&__k, _Obj &&__obj)
       key_equal key_eq () const
           Returns the key comparison object with which the unordered_map was
           constructed.
       float load_factor () const noexcept
           Returns the average number of elements per bucket.
       size_type max_bucket_count () const noexcept
           Returns the maximum number of buckets of the unordered_map.
       float max_load_factor () const noexcept
           Returns a positive number that the unordered_map tries to keep the
           load factor less than or equal to.
       void max_load_factor (float __z)
           Change the unordered_map maximum load factor.
       size_type max_size () const noexcept
           Returns the maximum size of the unordered_map.
       template<typename _H2 , typename _P2 > void merge (unordered_map< _Key,
           _Tp, _H2, _P2, _Alloc > &&__source)
       template<typename _H2 , typename _P2 > void merge (unordered_map< _Key,
           _Tp, _H2, _P2, _Alloc > &__source)
       template<typename _H2 , typename _P2 > void merge (unordered_multimap<
           _Key, _Tp, _H2, _P2, _Alloc > &&__source)
       template<typename _H2 , typename _P2 > void merge (unordered_multimap<
           _Key, _Tp, _H2, _P2, _Alloc > &__source)
       unordered_map & operator= (const unordered_map &)=default
           Copy assignment operator.
       unordered_map & operator= (initializer_list< value_type > __l)
           Unordered_map list assignment operator.
       unordered_map & operator= (unordered_map &&)=default
           Move assignment operator.
       void rehash (size_type __n)
           May rehash the unordered_map.
       void reserve (size_type __n)
           Prepare the unordered_map for a specified number of elements.
       size_type size () const noexcept
           Returns the size of the unordered_map.
       void swap (unordered_map &__x) noexcept(noexcept(_M_h.swap(__x._M_h)))
           Swaps data with another unordered_map.
       template<typename... _Args> pair< iterator, bool > try_emplace (const
           key_type &__k, _Args &&... __args)
           Attempts to build and insert a std::pair into the unordered_map.
       template<typename... _Args> iterator try_emplace (const_iterator
           __hint, const key_type &__k, _Args &&... __args)
           Attempts to build and insert a std::pair into the unordered_map.
       template<typename... _Args> iterator try_emplace (const_iterator
           __hint, key_type &&__k, _Args &&... __args)
       template<typename... _Args> pair< iterator, bool > try_emplace
           (key_type &&__k, _Args &&... __args)

           const_iterator begin () const noexcept
           const_iterator cbegin () const noexcept

           const_iterator end () const noexcept
           const_iterator cend () const noexcept

           std::pair< iterator, bool > insert (const value_type &__x)
               Attempts to insert a std::pair into the unordered_map.
           std::pair< iterator, bool > insert (value_type &&__x)
               Attempts to insert a std::pair into the unordered_map.
           template<typename _Pair > __enable_if_t< is_constructible<
               value_type, _Pair && >::value, pair< iterator, bool > > insert
               (_Pair &&__x)
               Attempts to insert a std::pair into the unordered_map.

           iterator insert (const_iterator __hint, const value_type &__x)
               Attempts to insert a std::pair into the unordered_map.
           iterator insert (const_iterator __hint, value_type &&__x)
               Attempts to insert a std::pair into the unordered_map.
           template<typename _Pair > __enable_if_t< is_constructible<
               value_type, _Pair && >::value, iterator > insert
               (const_iterator __hint, _Pair &&__x)
               Attempts to insert a std::pair into the unordered_map.

           iterator erase (const_iterator __position)
               Erases an element from an unordered_map.
           iterator erase (iterator __position)
               Erases an element from an unordered_map.

           iterator find (const key_type &__x)
               Tries to locate an element in an unordered_map.
           template<typename _Kt > auto find (const _Kt &__x) ->
               decltype(_M_h._M_find_tr(__x))
               Tries to locate an element in an unordered_map.
           const_iterator find (const key_type &__x) const
               Tries to locate an element in an unordered_map.
           template<typename _Kt > auto find (const _Kt &__x) const ->
               decltype(_M_h._M_find_tr(__x))
               Tries to locate an element in an unordered_map.

           size_type count (const key_type &__x) const
               Finds the number of elements.
           template<typename _Kt > auto count (const _Kt &__x) const ->
               decltype(_M_h._M_count_tr(__x))
               Finds the number of elements.

           bool contains (const key_type &__x) const
               Finds whether an element with the given key exists.
           template<typename _Kt > auto contains (const _Kt &__x) const ->
               decltype(_M_h._M_find_tr(__x), void(), true)
               Finds whether an element with the given key exists.

           std::pair< iterator, iterator > equal_range (const key_type &__x)
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) ->
               decltype(_M_h._M_equal_range_tr(__x))
               Finds a subsequence matching given key.
           std::pair< const_iterator, const_iterator > equal_range (const
               key_type &__x) const
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) const ->
               decltype(_M_h._M_equal_range_tr(__x))
               Finds a subsequence matching given key.

           mapped_type & operator[] (const key_type &__k)
               Subscript ( [] ) access to unordered_map data.
           mapped_type & operator[] (key_type &&__k)
               Subscript ( [] ) access to unordered_map data.

           mapped_type & at (const key_type &__k)
               Access to unordered_map data.
           const mapped_type & at (const key_type &__k) const
               Access to unordered_map data.

           const_local_iterator begin (size_type __n) const
               Returns a read-only (constant) iterator pointing to the first
               bucket element.
           const_local_iterator cbegin (size_type __n) const
               Returns a read-only (constant) iterator pointing to the first
               bucket element.

           const_local_iterator end (size_type __n) const
               Returns a read-only (constant) iterator pointing to one past
               the last bucket elements.
           const_local_iterator cend (size_type __n) const
               Returns a read-only (constant) iterator pointing to one past
               the last bucket elements.

   Friends
       template<typename _Key1 , typename _Tp1 , typename _Hash1 , typename
           _Pred1 , typename _Alloc1 > bool operator== (const unordered_map<
           _Key1, _Tp1, _Hash1, _Pred1, _Alloc1 > &, const unordered_map<
           _Key1, _Tp1, _Hash1, _Pred1, _Alloc1 > &)
       template<typename , typename , typename > class std::_Hash_merge_helper

Detailed Description
   template<typename _Key, typename _Tp, typename _Hash = hash<_Key>, typename
       _Pred = equal_to<_Key>, typename _Alloc = allocator<std::pair<const
       _Key, _Tp>>>
       class std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >"A standard
       container composed of unique keys (containing at most one of each key
       value) that associates values of another type with the keys.

       Template Parameters
           _Key Type of key objects.
           _Tp Type of mapped objects.
           _Hash Hashing function object type, defaults to hash<_Value>.
           _Pred Predicate function object type, defaults to equal_to<_Value>.
           _Alloc Allocator type, defaults to std::allocator<std::pair<const
           _Key, _Tp>>.

       Meets the requirements of a container, and unordered associative
       container

       The resulting value type of the container is std::pair<const _Key,
       _Tp>.

       Base is _Hashtable, dispatched at compile time via template alias
       __umap_hashtable.

       Definition at line 102 of file unordered_map.

Member Typedef Documentation
   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::allocator_type std::unordered_map< _Key, _Tp, _Hash, _Pred,
       _Alloc >::allocator_type
       Public typedefs.

       Definition at line 116 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::const_iterator std::unordered_map< _Key, _Tp, _Hash, _Pred,
       _Alloc >::const_iterator
       Iterator-related typedefs.

       Definition at line 126 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::const_local_iterator std::unordered_map< _Key, _Tp, _Hash,
       _Pred, _Alloc >::const_local_iterator
       Iterator-related typedefs.

       Definition at line 128 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::const_pointer std::unordered_map< _Key, _Tp, _Hash, _Pred,
       _Alloc >::const_pointer
       Iterator-related typedefs.

       Definition at line 122 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::const_reference std::unordered_map< _Key, _Tp, _Hash,
       _Pred, _Alloc >::const_reference
       Iterator-related typedefs.

       Definition at line 124 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::difference_type std::unordered_map< _Key, _Tp, _Hash,
       _Pred, _Alloc >::difference_type
       Iterator-related typedefs.

       Definition at line 130 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::hasher
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::hasher
       Public typedefs.

       Definition at line 114 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> using std::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::insert_return_type =  typename
       _Hashtable::insert_return_type
       Definition at line 135 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::iterator
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::iterator
       Iterator-related typedefs.

       Definition at line 125 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::key_equal
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::key_equal
       Public typedefs.

       Definition at line 115 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::key_type
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::key_type
       Public typedefs.

       Definition at line 111 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef
       _Hashtable::local_iterator std::unordered_map< _Key, _Tp, _Hash, _Pred,
       _Alloc >::local_iterator
       Iterator-related typedefs.

       Definition at line 127 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::mapped_type
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::mapped_type
       Public typedefs.

       Definition at line 113 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> using std::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::node_type =  typename
       _Hashtable::node_type
       Definition at line 134 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::pointer
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::pointer
       Iterator-related typedefs.

       Definition at line 121 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::reference
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::reference
       Iterator-related typedefs.

       Definition at line 123 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::size_type
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::size_type
       Iterator-related typedefs.

       Definition at line 129 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> typedef _Hashtable::value_type
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::value_type
       Public typedefs.

       Definition at line 112 of file unordered_map.

Constructor & Destructor Documentation
   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc >::unordered_map () [default]
       Default constructor.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc >::unordered_map (size_type __n, const hasher &
       __hf = hasher(), const key_equal & __eql = key_equal(), const
       allocator_type & __a = allocator_type()) [inline],  [explicit]
       Default constructor creates no elements.

       Parameters
           __n Minimal initial number of buckets.
           __hf A hash functor.
           __eql A key equality functor.
           __a An allocator object.

       Definition at line 151 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _InputIterator
       > std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map
       (_InputIterator __first, _InputIterator __last, size_type __n = 0,
       const hasher & __hf = hasher(), const key_equal & __eql = key_equal(),
       const allocator_type & __a = allocator_type()) [inline]
       Builds an unordered_map from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.
           __n Minimal initial number of buckets.
           __hf A hash functor.
           __eql A key equality functor.
           __a An allocator object.

       Create an unordered_map consisting of copies of the elements from
       [__first,__last). This is linear in N (where N is
       distance(__first,__last)).

       Definition at line 172 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc >::unordered_map (const unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc > &) [default]
       Copy constructor.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc >::unordered_map (unordered_map< _Key, _Tp, _Hash,
       _Pred, _Alloc > &&) [default]
       Move constructor.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc >::unordered_map (const allocator_type & __a)
       [inline],  [explicit]
       Creates an unordered_map with no elements.

       Parameters
           __a An allocator object.

       Definition at line 191 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc >::unordered_map (const unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc > & __umap, const allocator_type & __a) [inline]
       Definition at line 200 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc >::unordered_map (unordered_map< _Key, _Tp, _Hash,
       _Pred, _Alloc > && __umap, const allocator_type & __a) [inline],
       [noexcept]
       Definition at line 210 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc >::unordered_map (initializer_list< value_type >
       __l, size_type __n = 0, const hasher & __hf = hasher(), const key_equal
       & __eql = key_equal(), const allocator_type & __a = allocator_type())
       [inline]
       Builds an unordered_map from an initializer_list.

       Parameters
           __l An initializer_list.
           __n Minimal initial number of buckets.
           __hf A hash functor.
           __eql A key equality functor.
           __a An allocator object.

       Create an unordered_map consisting of copies of the elements in the
       list. This is linear in N (where N is __l.size()).

       Definition at line 227 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc >::unordered_map (size_type __n, const
       allocator_type & __a) [inline]
       Definition at line 235 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc >::unordered_map (size_type __n, const hasher &
       __hf, const allocator_type & __a) [inline]
       Definition at line 239 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _InputIterator
       > std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map
       (_InputIterator __first, _InputIterator __last, size_type __n, const
       allocator_type & __a) [inline]
       Definition at line 245 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _InputIterator
       > std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::unordered_map
       (_InputIterator __first, _InputIterator __last, size_type __n, const
       hasher & __hf, const allocator_type & __a) [inline]
       Definition at line 252 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc >::unordered_map (initializer_list< value_type >
       __l, size_type __n, const allocator_type & __a) [inline]
       Definition at line 258 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::unordered_map< _Key, _Tp,
       _Hash, _Pred, _Alloc >::unordered_map (initializer_list< value_type >
       __l, size_type __n, const hasher & __hf, const allocator_type & __a)
       [inline]
       Definition at line 264 of file unordered_map.

Member Function Documentation
   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> mapped_type &
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::at (const
       key_type & __k) [inline]
       Access to unordered_map data.

       Parameters
           __k The key for which data should be retrieved.

       Returns
           A reference to the data whose key is equal to __k, if such a data
           is present in the unordered_map.

       Exceptions
           std::out_of_range If no such data is present.

       Definition at line 996 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const mapped_type &
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::at (const
       key_type & __k) const [inline]
       Access to unordered_map data.

       Parameters
           __k The key for which data should be retrieved.

       Returns
           A reference to the data whose key is equal to __k, if such a data
           is present in the unordered_map.

       Exceptions
           std::out_of_range If no such data is present.

       Definition at line 1000 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_iterator
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::begin () const
       [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the unordered_map.

       Definition at line 334 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::begin () [inline],  [noexcept]
       Returns a read/write iterator that points to the first element in the
       unordered_map.

       Definition at line 325 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> local_iterator
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::begin (size_type
       __n) [inline]
       Returns a read/write iterator pointing to the first bucket element.

       Parameters
           __n The bucket index.

       Returns
           A read/write local iterator.

       Definition at line 1041 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_local_iterator
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::begin (size_type
       __n) const [inline]
       Returns a read-only (constant) iterator pointing to the first bucket
       element.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1052 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::bucket (const key_type & __key)
       const [inline]
       Definition at line 1031 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::bucket_count () const [inline],
       [noexcept]
       Returns the number of buckets of the unordered_map.

       Definition at line 1008 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::bucket_size (size_type __n) const
       [inline]
       Definition at line 1022 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_iterator
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::cbegin () const
       [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the unordered_map.

       Definition at line 338 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_local_iterator
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::cbegin
       (size_type __n) const [inline]
       Returns a read-only (constant) iterator pointing to the first bucket
       element.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1056 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_iterator
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::cend () const
       [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the unordered_map.

       Definition at line 360 of file unordered_map.

       Referenced by std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::insert_or_assign(), and std::unordered_map< _Key, _Tp, _Hash, _Pred,
       _Alloc >::try_emplace().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_local_iterator
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::cend (size_type
       __n) const [inline]
       Returns a read-only (constant) iterator pointing to one past the last
       bucket elements.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1082 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> void std::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::clear () [inline],  [noexcept]
       Erases all elements in an unordered_map. Note that this function only
       erases the elements, and that if the elements themselves are pointers,
       the pointed-to memory is not touched in any way. Managing the pointer
       is the user's responsibility.

       Definition at line 790 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Kt > auto
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::contains (const
       _Kt & __x) const -> decltype(_M_h._M_find_tr(__x), void(), true)
             [inline]"

       Finds whether an element with the given key exists.

       Parameters
           __x Key of elements to be located.

       Returns
           True if there is any element with the specified key.

       Definition at line 925 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> bool std::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::contains (const key_type & __x) const
       [inline]
       Finds whether an element with the given key exists.

       Parameters
           __x Key of elements to be located.

       Returns
           True if there is any element with the specified key.

       Definition at line 920 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Kt > auto
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::count (const _Kt
       & __x) const -> decltype(_M_h._M_count_tr(__x))
             [inline]"

       Finds the number of elements.

       Parameters
           __x Key to count.

       Returns
           Number of elements with specified key.

       This function only makes sense for unordered_multimap; for
       unordered_map the result will either be 0 (not present) or 1 (present).

       Definition at line 907 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::count (const key_type & __x) const
       [inline]
       Finds the number of elements.

       Parameters
           __x Key to count.

       Returns
           Number of elements with specified key.

       This function only makes sense for unordered_multimap; for
       unordered_map the result will either be 0 (not present) or 1 (present).

       Definition at line 901 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename... _Args>
       std::pair< iterator, bool > std::unordered_map< _Key, _Tp, _Hash,
       _Pred, _Alloc >::emplace (_Args &&... __args) [inline]
       Attempts to build and insert a std::pair into the unordered_map.

       Parameters
           __args Arguments used to generate a new pair instance (see
           std::piecewise_contruct for passing arguments to each part of the
           pair constructor).

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted pair, and the second is a bool that is true
           if the pair was actually inserted.

       This function attempts to build and insert a (key, value) pair into the
       unordered_map. An unordered_map relies on unique keys and thus a pair
       is only inserted if its first element (the key) is not already present
       in the unordered_map.

       Insertion requires amortized constant time.

       Definition at line 388 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename... _Args>
       iterator std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::emplace_hint (const_iterator __pos, _Args &&... __args) [inline]
       Attempts to build and insert a std::pair into the unordered_map.

       Parameters
           __pos An iterator that serves as a hint as to where the pair should
           be inserted.
           __args Arguments used to generate a new pair instance (see
           std::piecewise_contruct for passing arguments to each part of the
           pair constructor).

       Returns
           An iterator that points to the element with key of the std::pair
           built from __args (may or may not be that std::pair).

       This function is not concerned about whether the insertion took place,
       and thus does not return a boolean like the single-argument emplace()
       does. Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires amortized constant time.

       Definition at line 419 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> bool std::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::empty () const [inline],  [noexcept]
       Returns true if the unordered_map is empty.

       Definition at line 305 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_iterator
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::end () const
       [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the unordered_map.

       Definition at line 356 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::end () [inline],  [noexcept]
       Returns a read/write iterator that points one past the last element in
       the unordered_map.

       Definition at line 347 of file unordered_map.

       Referenced by std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::extract().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> local_iterator
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::end (size_type
       __n) [inline]
       Returns a read/write iterator pointing to one past the last bucket
       elements.

       Parameters
           __n The bucket index.

       Returns
           A read/write local iterator.

       Definition at line 1067 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_local_iterator
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::end (size_type
       __n) const [inline]
       Returns a read-only (constant) iterator pointing to one past the last
       bucket elements.

       Parameters
           __n The bucket index.

       Returns
           A read-only local iterator.

       Definition at line 1078 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Kt > auto
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::equal_range
       (const _Kt & __x) -> decltype(_M_h._M_equal_range_tr(__x))
             [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function probably only makes sense for unordered_multimap.

       Definition at line 947 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Kt > auto
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::equal_range
       (const _Kt & __x) const -> decltype(_M_h._M_equal_range_tr(__x))
             [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function probably only makes sense for unordered_multimap.

       Definition at line 959 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::pair< iterator, iterator >
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::equal_range
       (const key_type & __x) [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function probably only makes sense for unordered_multimap.

       Definition at line 941 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::pair< const_iterator,
       const_iterator > std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::equal_range (const key_type & __x) const [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function probably only makes sense for unordered_multimap.

       Definition at line 953 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::erase (const key_type & __x)
       [inline]
       Erases elements according to the provided key.

       Parameters
           __x Key of element to be erased.

       Returns
           The number of elements erased.

       This function erases all the elements located by the given key from an
       unordered_map. For an unordered_map the result of this function can
       only be 0 (not present) or 1 (present). Note that this function only
       erases the element, and that if the element is itself a pointer, the
       pointed-to memory is not touched in any way. Managing the pointer is
       the user's responsibility.

       Definition at line 762 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::erase (const_iterator __first,
       const_iterator __last) [inline]
       Erases a [__first,__last) range of elements from an unordered_map.

       Parameters
           __first Iterator pointing to the start of the range to be erased.
           __last Iterator pointing to the end of the range to be erased.

       Returns
           The iterator __last.

       This function erases a sequence of elements from an unordered_map. Note
       that this function only erases the elements, and that if the element is
       itself a pointer, the pointed-to memory is not touched in any way.
       Managing the pointer is the user's responsibility.

       Definition at line 780 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::erase (const_iterator __position)
       [inline]
       Erases an element from an unordered_map.

       Parameters
           __position An iterator pointing to the element to be erased.

       Returns
           An iterator pointing to the element immediately following
           __position prior to the element being erased. If no such element
           exists, end() is returned.

       This function erases an element, pointed to by the given iterator, from
       an unordered_map. Note that this function only erases the element, and
       that if the element is itself a pointer, the pointed-to memory is not
       touched in any way. Managing the pointer is the user's responsibility.

       Definition at line 740 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::erase (iterator __position) [inline]
       Erases an element from an unordered_map.

       Parameters
           __position An iterator pointing to the element to be erased.

       Returns
           An iterator pointing to the element immediately following
           __position prior to the element being erased. If no such element
           exists, end() is returned.

       This function erases an element, pointed to by the given iterator, from
       an unordered_map. Note that this function only erases the element, and
       that if the element is itself a pointer, the pointed-to memory is not
       touched in any way. Managing the pointer is the user's responsibility.

       Definition at line 745 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> node_type std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::extract (const key_type & __key)
       [inline]
       Extract a node.

       Definition at line 433 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> node_type std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::extract (const_iterator __pos)
       [inline]
       Extract a node.

       Definition at line 425 of file unordered_map.

       References std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::end().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Kt > auto
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::find (const _Kt
       & __x) -> decltype(_M_h._M_find_tr(__x))
             [inline]"

       Tries to locate an element in an unordered_map.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 874 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Kt > auto
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::find (const _Kt
       & __x) const -> decltype(_M_h._M_find_tr(__x))
             [inline]"

       Tries to locate an element in an unordered_map.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 885 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::find (const key_type & __x) [inline]
       Tries to locate an element in an unordered_map.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 868 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> const_iterator
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::find (const
       key_type & __x) const [inline]
       Tries to locate an element in an unordered_map.

       Parameters
           __x Key to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after element. If unsuccessful it returns the
       past-the-end ( end() ) iterator.

       Definition at line 879 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> allocator_type
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::get_allocator ()
       const [inline],  [noexcept]
       Returns the allocator object used by the unordered_map.

       Definition at line 298 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> hasher std::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::hash_function () const [inline]
       Returns the hash functor object with which the unordered_map was
       constructed.

       Definition at line 844 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _InputIterator
       > void std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert
       (_InputIterator __first, _InputIterator __last) [inline]
       A template function that attempts to insert a range of elements.

       Parameters
           __first Iterator pointing to the start of the range to be inserted.
           __last Iterator pointing to the end of the range.

       Complexity similar to that of the range constructor.

       Definition at line 616 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Pair >
       __enable_if_t< is_constructible< value_type, _Pair && >::value, pair<
       iterator, bool > > std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::insert (_Pair && __x) [inline]
       Attempts to insert a std::pair into the unordered_map.

       Parameters
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted pair, and the second is a bool that is true
           if the pair was actually inserted.

       This function attempts to insert a (key, value) pair into the
       unordered_map. An unordered_map relies on unique keys and thus a pair
       is only inserted if its first element (the key) is not already present
       in the unordered_map.

       Insertion requires amortized constant time.

       Definition at line 563 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::pair< iterator, bool >
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert (const
       value_type & __x) [inline]
       Attempts to insert a std::pair into the unordered_map.

       Parameters
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted pair, and the second is a bool that is true
           if the pair was actually inserted.

       This function attempts to insert a (key, value) pair into the
       unordered_map. An unordered_map relies on unique keys and thus a pair
       is only inserted if its first element (the key) is not already present
       in the unordered_map.

       Insertion requires amortized constant time.

       Definition at line 551 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Pair >
       __enable_if_t< is_constructible< value_type, _Pair && >::value,
       iterator > std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::insert (const_iterator __hint, _Pair && __x) [inline]
       Attempts to insert a std::pair into the unordered_map.

       Parameters
           __hint An iterator that serves as a hint as to where the pair
           should be inserted.
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the element with key of __x (may or may
           not be the pair passed in).

       This function is not concerned about whether the insertion took place,
       and thus does not return a boolean like the single-argument insert()
       does. Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires amortized constant time.

       Definition at line 601 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::insert (const_iterator __hint, const
       value_type & __x) [inline]
       Attempts to insert a std::pair into the unordered_map.

       Parameters
           __hint An iterator that serves as a hint as to where the pair
           should be inserted.
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the element with key of __x (may or may
           not be the pair passed in).

       This function is not concerned about whether the insertion took place,
       and thus does not return a boolean like the single-argument insert()
       does. Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires amortized constant time.

       Definition at line 590 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::insert (const_iterator __hint,
       value_type && __x) [inline]
       Attempts to insert a std::pair into the unordered_map.

       Parameters
           __hint An iterator that serves as a hint as to where the pair
           should be inserted.
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the element with key of __x (may or may
           not be the pair passed in).

       This function is not concerned about whether the insertion took place,
       and thus does not return a boolean like the single-argument insert()
       does. Note that the first parameter is only a hint and can potentially
       improve the performance of the insertion process. A bad hint would
       cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires amortized constant time.

       Definition at line 596 of file unordered_map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> iterator std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::insert (const_iterator, node_type &&
       __nh) [inline]
       Re-insert an extracted node.

       Definition at line 443 of file unordered_map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> void std::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::insert (initializer_list< value_type >
       __l) [inline]
       Attempts to insert a list of elements into the unordered_map.

       Parameters
           __l A std::initializer_list<value_type> of elements to be inserted.

       Complexity similar to that of the range constructor.

       Definition at line 627 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> insert_return_type
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert
       (node_type && __nh) [inline]
       Re-insert an extracted node.

       Definition at line 438 of file unordered_map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> std::pair< iterator, bool >
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::insert
       (value_type && __x) [inline]
       Attempts to insert a std::pair into the unordered_map.

       Parameters
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted pair, and the second is a bool that is true
           if the pair was actually inserted.

       This function attempts to insert a (key, value) pair into the
       unordered_map. An unordered_map relies on unique keys and thus a pair
       is only inserted if its first element (the key) is not already present
       in the unordered_map.

       Insertion requires amortized constant time.

       Definition at line 557 of file unordered_map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Obj > pair<
       iterator, bool > std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::insert_or_assign (const key_type & __k, _Obj && __obj) [inline]
       Attempts to insert a std::pair into the unordered_map.

       Parameters
           __k Key to use for finding a possibly existing pair in the map.
           __obj Argument used to generate the .second for a pair instance.

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted pair, and the second is a bool that is true
           if the pair was actually inserted.

       This function attempts to insert a (key, value) pair into the
       unordered_map. An unordered_map relies on unique keys and thus a pair
       is only inserted if its first element (the key) is not already present
       in the unordered_map. If the pair was already in the unordered_map, the
       .second of the pair is assigned from __obj.

       Insertion requires amortized constant time.

       Definition at line 654 of file unordered_map.

       References std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::cend().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Obj >
       iterator std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::insert_or_assign (const_iterator __hint, const key_type & __k, _Obj
       && __obj) [inline]
       Attempts to insert a std::pair into the unordered_map.

       Parameters
           __hint An iterator that serves as a hint as to where the pair
           should be inserted.
           __k Key to use for finding a possibly existing pair in the
           unordered_map.
           __obj Argument used to generate the .second for a pair instance.

       Returns
           An iterator that points to the element with key of __x (may or may
           not be the pair passed in).

       This function is not concerned about whether the insertion took place,
       and thus does not return a boolean like the single-argument insert()
       does.
        If the pair was already in the unordered map, the .second of the pair
       is assigned from __obj. Note that the first parameter is only a hint
       and can potentially improve the performance of the insertion process. A
       bad hint would cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires amortized constant time.

       Definition at line 703 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Obj >
       iterator std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::insert_or_assign (const_iterator __hint, key_type && __k, _Obj &&
       __obj) [inline]
       Definition at line 715 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _Obj > pair<
       iterator, bool > std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::insert_or_assign (key_type && __k, _Obj && __obj) [inline]
       Definition at line 666 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> key_equal std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::key_eq () const [inline]
       Returns the key comparison object with which the unordered_map was
       constructed.

       Definition at line 850 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> float std::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::load_factor () const [inline],  [noexcept]
       Returns the average number of elements per bucket.

       Definition at line 1090 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::max_bucket_count () const [inline],
       [noexcept]
       Returns the maximum number of buckets of the unordered_map.

       Definition at line 1013 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> float std::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::max_load_factor () const [inline],
       [noexcept]
       Returns a positive number that the unordered_map tries to keep the load
       factor less than or equal to.

       Definition at line 1096 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> void std::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::max_load_factor (float __z) [inline]
       Change the unordered_map maximum load factor.

       Parameters
           __z The new maximum load factor.

       Definition at line 1104 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::max_size () const [inline],
       [noexcept]
       Returns the maximum size of the unordered_map.

       Definition at line 315 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _H2 , typename
       _P2 > void std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::merge
       (unordered_map< _Key, _Tp, _H2, _P2, _Alloc > && __source) [inline]
       Definition at line 822 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _H2 , typename
       _P2 > void std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::merge
       (unordered_map< _Key, _Tp, _H2, _P2, _Alloc > & __source) [inline]
       Definition at line 814 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _H2 , typename
       _P2 > void std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::merge
       (unordered_multimap< _Key, _Tp, _H2, _P2, _Alloc > && __source)
       [inline]
       Definition at line 835 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename _H2 , typename
       _P2 > void std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::merge
       (unordered_multimap< _Key, _Tp, _H2, _P2, _Alloc > & __source) [inline]
       Definition at line 827 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> unordered_map &
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::operator= (const
       unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc > &) [default]
       Copy assignment operator.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> unordered_map &
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::operator=
       (initializer_list< value_type > __l) [inline]
       Unordered_map list assignment operator.

       Parameters
           __l An initializer_list.

       This function fills an unordered_map with copies of the elements in the
       initializer list __l.

       Note that the assignment completely changes the unordered_map and that
       the resulting unordered_map's size is the same as the number of
       elements assigned.

       Definition at line 290 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> unordered_map &
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::operator=
       (unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc > &&) [default]
       Move assignment operator.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> mapped_type &
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::operator[]
       (const key_type & __k) [inline]
       Subscript ( [] ) access to unordered_map data.

       Parameters
           __k The key for which data should be retrieved.

       Returns
           A reference to the data of the (key,data) pair.

       Allows for easy lookup with the subscript ( [] )operator. Returns data
       associated with the key specified in subscript. If the key does not
       exist, a pair with that key is created using default values, which is
       then returned.

       Lookup requires constant time.

       Definition at line 979 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> mapped_type &
       std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >::operator[]
       (key_type && __k) [inline]
       Subscript ( [] ) access to unordered_map data.

       Parameters
           __k The key for which data should be retrieved.

       Returns
           A reference to the data of the (key,data) pair.

       Allows for easy lookup with the subscript ( [] )operator. Returns data
       associated with the key specified in subscript. If the key does not
       exist, a pair with that key is created using default values, which is
       then returned.

       Lookup requires constant time.

       Definition at line 983 of file unordered_map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> void std::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::rehash (size_type __n) [inline]
       May rehash the unordered_map.

       Parameters
           __n The new number of buckets.

       Rehash will occur only if the new number of buckets respect the
       unordered_map maximum load factor.

       Definition at line 1115 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> void std::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::reserve (size_type __n) [inline]
       Prepare the unordered_map for a specified number of elements.

       Parameters
           __n Number of elements required.

       Same as rehash(ceil(n / max_load_factor())).

       Definition at line 1126 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> size_type std::unordered_map<
       _Key, _Tp, _Hash, _Pred, _Alloc >::size () const [inline],  [noexcept]
       Returns the size of the unordered_map.

       Definition at line 310 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> void std::unordered_map< _Key,
       _Tp, _Hash, _Pred, _Alloc >::swap (unordered_map< _Key, _Tp, _Hash,
       _Pred, _Alloc > & __x) [inline],  [noexcept]
       Swaps data with another unordered_map.

       Parameters
           __x An unordered_map of the same element and allocator types.

       This exchanges the elements between two unordered_map in constant time.
       Note that the global std::swap() function is specialized such that
       std::swap(m1,m2) will feed to this function.

       Definition at line 804 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename... _Args>
       pair< iterator, bool > std::unordered_map< _Key, _Tp, _Hash, _Pred,
       _Alloc >::try_emplace (const key_type & __k, _Args &&... __args)
       [inline]
       Attempts to build and insert a std::pair into the unordered_map.

       Parameters
           __k Key to use for finding a possibly existing pair in the
           unordered_map.
           __args Arguments used to generate the .second for a new pair
           instance.

       Returns
           A pair, of which the first element is an iterator that points to
           the possibly inserted pair, and the second is a bool that is true
           if the pair was actually inserted.

       This function attempts to build and insert a (key, value) pair into the
       unordered_map. An unordered_map relies on unique keys and thus a pair
       is only inserted if its first element (the key) is not already present
       in the unordered_map. If a pair is not inserted, this function has no
       effect.

       Insertion requires amortized constant time.

       Definition at line 471 of file unordered_map.

       References std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::cend().

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename... _Args>
       iterator std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::try_emplace (const_iterator __hint, const key_type & __k, _Args
       &&... __args) [inline]
       Attempts to build and insert a std::pair into the unordered_map.

       Parameters
           __hint An iterator that serves as a hint as to where the pair
           should be inserted.
           __k Key to use for finding a possibly existing pair in the
           unordered_map.
           __args Arguments used to generate the .second for a new pair
           instance.

       Returns
           An iterator that points to the element with key of the std::pair
           built from __args (may or may not be that std::pair).

       This function is not concerned about whether the insertion took place,
       and thus does not return a boolean like the single-argument emplace()
       does. However, if insertion did not take place, this function has no
       effect. Note that the first parameter is only a hint and can
       potentially improve the performance of the insertion process. A bad
       hint would cause no gains in efficiency.

       See
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints
       for more on hinting.

       Insertion requires amortized constant time.

       Definition at line 515 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename... _Args>
       iterator std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc
       >::try_emplace (const_iterator __hint, key_type && __k, _Args &&...
       __args) [inline]
       Definition at line 525 of file unordered_map.

   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename... _Args>
       pair< iterator, bool > std::unordered_map< _Key, _Tp, _Hash, _Pred,
       _Alloc >::try_emplace (key_type && __k, _Args &&... __args) [inline]
       Definition at line 479 of file unordered_map.

Friends And Related Function Documentation
   template<typename _Key , typename _Tp , typename _Hash  = hash<_Key>,
       typename _Pred  = equal_to<_Key>, typename _Alloc  =
       allocator<std::pair<const _Key, _Tp>>> template<typename , typename ,
       typename > friend class std::_Hash_merge_helper [friend]
       Definition at line 810 of file unordered_map.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++             std::unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc >(3)
