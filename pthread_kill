pthread_kill(3)            Library Functions Manual            pthread_kill(3)

NAME
       pthread_kill - send a signal to a thread

LIBRARY
       POSIX threads library (libpthread, -lpthread)

SYNOPSIS
       #include <signal.h>

       int pthread_kill(pthread_t thread, int sig);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       pthread_kill():
           _POSIX_C_SOURCE >= 199506L || _XOPEN_SOURCE >= 500

DESCRIPTION
       The pthread_kill() function sends the signal sig to thread, a thread in
       the same process as the caller.  The signal is asynchronously  directed
       to thread.

       If  sig  is 0, then no signal is sent, but error checking is still per‐
       formed.

RETURN VALUE
       On success, pthread_kill() returns 0; on error,  it  returns  an  error
       number, and no signal is sent.

ERRORS
       EINVAL An invalid signal was specified.

ATTRIBUTES
       For  an  explanation  of  the  terms  used  in  this  section,  see at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │pthread_kill()                              │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
       The glibc implementation of pthread_kill() gives an error  (EINVAL)  on
       attempts to send either of the real-time signals used internally by the
       NPTL threading implementation.  See nptl(7) for details.

       POSIX.1-2008 recommends that if an implementation detects the use of  a
       thread  ID  after the end of its lifetime, pthread_kill() should return
       the error ESRCH.  The glibc implementation returns this  error  in  the
       cases  where  an invalid thread ID can be detected.  But note also that
       POSIX says that an attempt to use a thread ID whose lifetime has  ended
       produces undefined behavior, and an attempt to use an invalid thread ID
       in a call to pthread_kill() can,  for  example,  cause  a  segmentation
       fault.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

NOTES
       Signal dispositions are process-wide: if a signal handler is installed,
       the handler will be invoked in the thread thread, but if  the  disposi‐
       tion  of  the signal is "stop", "continue", or "terminate", this action
       will affect the whole process.

SEE ALSO
       kill(2),  sigaction(2),  sigpending(2),  pthread_self(3),  pthread_sig‐
       mask(3), raise(3), pthreads(7), signal(7)

Linux man-pages 6.04              2023-03-30                   pthread_kill(3)
PTHREAD_KILL(3P)           POSIX Programmer's Manual          PTHREAD_KILL(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       pthread_kill — send a signal to a thread

SYNOPSIS
       #include <signal.h>

       int pthread_kill(pthread_t thread, int sig);

DESCRIPTION
       The pthread_kill() function shall request that a signal be delivered to
       the specified thread.

       As  in kill(), if sig is zero, error checking shall be performed but no
       signal shall actually be sent.

RETURN VALUE
       Upon successful completion, the function shall return a value of  zero.
       Otherwise,   the   function  shall  return  an  error  number.  If  the
       pthread_kill() function fails, no signal shall be sent.

ERRORS
       The pthread_kill() function shall fail if:

       EINVAL The value of the sig argument is an invalid or unsupported  sig‐
              nal number.

       The pthread_kill() function shall not return an error code of [EINTR].

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       The pthread_kill() function provides a mechanism for asynchronously di‐
       recting a signal at a thread in the  calling  process.  This  could  be
       used, for example, by one thread to affect broadcast delivery of a sig‐
       nal to a set of threads.

       Note that pthread_kill() only causes the signal to be  handled  in  the
       context  of  the  given thread; the signal action (termination or stop‐
       ping) affects the process as a whole.

RATIONALE
       If an implementation detects use of a thread ID after the  end  of  its
       lifetime, it is recommended that the function should fail and report an
       [ESRCH] error.

       Existing implementations vary on the result of a pthread_kill() with  a
       thread  ID  indicating an inactive thread (a terminated thread that has
       not been detached or joined). Some indicate success  on  such  a  call,
       while  others give an error of [ESRCH].  Since the definition of thread
       lifetime in this volume of POSIX.1‐2017 covers  inactive  threads,  the
       [ESRCH]  error  as described is inappropriate in this case. In particu‐
       lar, this means that an application cannot have one  thread  check  for
       termination of another with pthread_kill().

FUTURE DIRECTIONS
       A  future  version of this standard may require that pthread_kill() not
       fail with [ESRCH] in the case of sending signals to an inactive  thread
       (a terminated thread not yet detached or joined), even though no signal
       will be delivered because the thread is no longer running.

SEE ALSO
       kill(), pthread_self(), raise()

       The Base Definitions volume of POSIX.1‐2017, <signal.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                     PTHREAD_KILL(3P)
