pthread_mutexattr_setrobustLibrary Functions Manpthread_mutexattr_setrobust(3)

NAME
       pthread_mutexattr_getrobust,  pthread_mutexattr_setrobust - get and set
       the robustness attribute of a mutex attributes object

LIBRARY
       POSIX threads library (libpthread, -lpthread)

SYNOPSIS
       #include <pthread.h>

       int pthread_mutexattr_getrobust(const pthread_mutexattr_t *attr,
                                       int *robustness);
       int pthread_mutexattr_setrobust(pthread_mutexattr_t *attr,
                                       int robustness);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       pthread_mutexattr_getrobust(), pthread_mutexattr_setrobust():
           _POSIX_C_SOURCE >= 200809L

DESCRIPTION
       The pthread_mutexattr_getrobust() function places the value of the  ro‐
       bustness  attribute  of the mutex attributes object referred to by attr
       in *robustness.  The pthread_mutexattr_setrobust()  function  sets  the
       value  of  the  robustness attribute of the mutex attributes object re‐
       ferred to by attr to the value specified in *robustness.

       The robustness attribute specifies the behavior of the mutex  when  the
       owning  thread  dies without unlocking the mutex.  The following values
       are valid for robustness:

       PTHREAD_MUTEX_STALLED
              This is the default value for a mutex attributes object.   If  a
              mutex  is  initialized  with the PTHREAD_MUTEX_STALLED attribute
              and its owner dies  without  unlocking  it,  the  mutex  remains
              locked  afterwards  and  any future attempts to call pthread_mu‐
              tex_lock(3) on the mutex will block indefinitely.

       PTHREAD_MUTEX_ROBUST
              If a mutex is initialized with the  PTHREAD_MUTEX_ROBUST  attri‐
              bute  and  its  owner  dies without unlocking it, any future at‐
              tempts to call pthread_mutex_lock(3) on this mutex will  succeed
              and  return  EOWNERDEAD  to  indicate that the original owner no
              longer exists and the mutex is in an inconsistent  state.   Usu‐
              ally  after  EOWNERDEAD  is returned, the next owner should call
              pthread_mutex_consistent(3) on the acquired  mutex  to  make  it
              consistent again before using it any further.

              If  the  next  owner  unlocks  the mutex using pthread_mutex_un‐
              lock(3) before making it consistent, the mutex  will  be  perma‐
              nently  unusable  and  any  subsequent attempts to lock it using
              pthread_mutex_lock(3) will fail with the error  ENOTRECOVERABLE.
              The  only  permitted  operation  on  such a mutex is pthread_mu‐
              tex_destroy(3).

              If the next owner terminates before  calling  pthread_mutex_con‐
              sistent(3), further pthread_mutex_lock(3) operations on this mu‐
              tex will still return EOWNERDEAD.

       Note  that  the  attr  argument  of  pthread_mutexattr_getrobust()  and
       pthread_mutexattr_setrobust() should refer to a mutex attributes object
       that was initialized by pthread_mutexattr_init(3), otherwise the behav‐
       ior is undefined.

RETURN VALUE
       On success, these functions return 0.  On error, they return a positive
       error number.

       In the glibc implementation, pthread_mutexattr_getrobust()  always  re‐
       turn zero.

ERRORS
       EINVAL A value other than PTHREAD_MUTEX_STALLED or PTHREAD_MUTEX_ROBUST
              was passed to pthread_mutexattr_setrobust().

VERSIONS
       In the Linux implementation, when using process-shared robust  mutexes,
       a waiting thread also receives the EOWNERDEAD notification if the owner
       of a robust mutex performs an execve(2) without first unlocking the mu‐
       tex.   POSIX.1 does not specify this detail, but the same behavior also
       occurs in at least some other implementations.

STANDARDS
       POSIX.1-2008.

HISTORY
       glibc 2.12.  POSIX.1-2008.

       Before the addition of pthread_mutexattr_getrobust() and pthread_mutex‐
       attr_setrobust()  to POSIX, glibc defined the following equivalent non‐
       standard functions if _GNU_SOURCE was defined:

       [[deprecated]]
       int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t *attr,
                                          int *robustness);
       [[deprecated]]
       int pthread_mutexattr_setrobust_np(const pthread_mutexattr_t *attr,
                                          int robustness);

       Correspondingly, the constants PTHREAD_MUTEX_STALLED_NP and PTHREAD_MU‐
       TEX_ROBUST_NP were also defined.

       These  GNU-specific  APIs, which first appeared in glibc 2.4, are nowa‐
       days obsolete and should not be used in new programs; since glibc  2.34
       these APIs are marked as deprecated.

EXAMPLES
       The program below demonstrates the use of the robustness attribute of a
       mutex attributes object.  In this program, a thread holding  the  mutex
       dies  prematurely  without unlocking the mutex.  The main thread subse‐
       quently acquires the mutex successfully and gets the error  EOWNERDEAD,
       after which it makes the mutex consistent.

       The  following  shell  session shows what we see when running this pro‐
       gram:

           $ ./a.out
           [original owner] Setting lock...
           [original owner] Locked. Now exiting without unlocking.
           [main] Attempting to lock the robust mutex.
           [main] pthread_mutex_lock() returned EOWNERDEAD
           [main] Now make the mutex consistent
           [main] Mutex is now consistent; unlocking

   Program source
       #include <errno.h>
       #include <pthread.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>

       #define handle_error_en(en, msg) \
               do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

       static pthread_mutex_t mtx;

       static void *
       original_owner_thread(void *ptr)
       {
           printf("[original owner] Setting lock...\n");
           pthread_mutex_lock(&mtx);
           printf("[original owner] Locked. Now exiting without unlocking.\n");
           pthread_exit(NULL);
       }

       int
       main(void)
       {
           pthread_t thr;
           pthread_mutexattr_t attr;
           int s;

           pthread_mutexattr_init(&attr);

           pthread_mutexattr_setrobust(&attr, PTHREAD_MUTEX_ROBUST);

           pthread_mutex_init(&mtx, &attr);

           pthread_create(&thr, NULL, original_owner_thread, NULL);

           sleep(2);

           /* "original_owner_thread" should have exited by now. */

           printf("[main] Attempting to lock the robust mutex.\n");
           s = pthread_mutex_lock(&mtx);
           if (s == EOWNERDEAD) {
               printf("[main] pthread_mutex_lock() returned EOWNERDEAD\n");
               printf("[main] Now make the mutex consistent\n");
               s = pthread_mutex_consistent(&mtx);
               if (s != 0)
                   handle_error_en(s, "pthread_mutex_consistent");
               printf("[main] Mutex is now consistent; unlocking\n");
               s = pthread_mutex_unlock(&mtx);
               if (s != 0)
                   handle_error_en(s, "pthread_mutex_unlock");

               exit(EXIT_SUCCESS);
           } else if (s == 0) {
               printf("[main] pthread_mutex_lock() unexpectedly succeeded\n");
               exit(EXIT_FAILURE);
           } else {
               printf("[main] pthread_mutex_lock() unexpectedly failed\n");
               handle_error_en(s, "pthread_mutex_lock");
           }
       }

SEE ALSO
       get_robust_list(2), set_robust_list(2), pthread_mutex_consistent(3),
       pthread_mutex_init(3), pthread_mutex_lock(3), pthreads(7)

Linux man-pages 6.04              2023-03-30    pthread_mutexattr_setrobust(3)
PTHREAD_MUTEXATTR_GETROBUSTPOSIX Programmer's MPTHREAD_MUTEXATTR_GETROBUST(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       pthread_mutexattr_getrobust, pthread_mutexattr_setrobust — get and  set
       the mutex robust attribute

SYNOPSIS
       #include <pthread.h>

       int pthread_mutexattr_getrobust(const pthread_mutexattr_t *restrict
           attr, int *restrict robust);
       int pthread_mutexattr_setrobust(pthread_mutexattr_t *attr,
           int robust);

DESCRIPTION
       The   pthread_mutexattr_getrobust()  and  pthread_mutexattr_setrobust()
       functions, respectively, shall get and set the mutex robust  attribute.
       This  attribute is set in the robust parameter. Valid values for robust
       include:

       PTHREAD_MUTEX_STALLED
             No special actions are taken if the owner of the mutex is  termi‐
             nated while holding the mutex lock. This can lead to deadlocks if
             no other thread can unlock the mutex.
             This is the default value.

       PTHREAD_MUTEX_ROBUST
             If the process containing the owning thread  of  a  robust  mutex
             terminates while holding the mutex lock, the next thread that ac‐
             quires the mutex shall be notified about the termination  by  the
             return  value [EOWNERDEAD] from the locking function. If the own‐
             ing thread of a robust mutex terminates while holding  the  mutex
             lock,  the  next thread that attempts to acquire the mutex may be
             notified about the termination by the return value  [EOWNERDEAD].
             The  notified thread can then attempt to make the state protected
             by the mutex consistent again, and if successful can mark the mu‐
             tex  state  as  consistent by calling pthread_mutex_consistent().
             After a subsequent successful call to pthread_mutex_unlock(), the
             mutex  lock  shall  be released and can be used normally by other
             threads. If the mutex is unlocked without a call  to  pthread_mu‐
             tex_consistent(), it shall be in a permanently unusable state and
             all attempts to lock the mutex shall fail with the error [ENOTRE‐
             COVERABLE].   The  only  permissible operation on such a mutex is
             pthread_mutex_destroy().

       The behavior is undefined if the value specified by the  attr  argument
       to  pthread_mutexattr_getrobust() or pthread_mutexattr_setrobust() does
       not refer to an initialized mutex attributes object.

RETURN VALUE
       Upon successful completion, the pthread_mutexattr_getrobust()  function
       shall  return  zero and store the value of the robust attribute of attr
       into the object referenced by the robust parameter. Otherwise, an error
       value  shall  be  returned  to  indicate  the error. If successful, the
       pthread_mutexattr_setrobust() function shall return zero; otherwise, an
       error number shall be returned to indicate the error.

ERRORS
       The pthread_mutexattr_setrobust() function shall fail if:

       EINVAL The value of robust is invalid.

       These functions shall not return an error code of [EINTR].

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       The  actions  required to make the state protected by the mutex consis‐
       tent again are solely dependent on the application. If it is not possi‐
       ble to make the state of a mutex consistent, robust mutexes can be used
       to notify this situation by calling  pthread_mutex_unlock()  without  a
       prior call to pthread_mutex_consistent().

       If the state is declared inconsistent by calling pthread_mutex_unlock()
       without a prior call to pthread_mutex_consistent(), a possible approach
       could  be  to  destroy  the mutex and then reinitialize it. However, it
       should be noted that this is possible only in certain situations  where
       the  state protected by the mutex has to be reinitialized and coordina‐
       tion achieved with other threads blocked on the mutex,  because  other‐
       wise  a  call  to a locking function with a reference to a mutex object
       invalidated by a call to pthread_mutex_destroy() results  in  undefined
       behavior.

RATIONALE
       If an implementation detects that the value specified by the attr argu‐
       ment to pthread_mutexattr_getrobust() or  pthread_mutexattr_setrobust()
       does  not refer to an initialized mutex attributes object, it is recom‐
       mended that the function should fail and report an [EINVAL] error.

FUTURE DIRECTIONS
       None.

SEE ALSO
       pthread_mutex_consistent(),    pthread_mutex_destroy(),     pthread_mu‐
       tex_lock()

       The Base Definitions volume of POSIX.1‐2017, <pthread.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017      PTHREAD_MUTEXATTR_GETROBUST(3P)
