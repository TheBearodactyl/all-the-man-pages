CURLOPT_UNIX_SOCKET_PATH(3)                                                              curl_easy_setopt options                                                              CURLOPT_UNIX_SOCKET_PATH(3)

NAME
       CURLOPT_UNIX_SOCKET_PATH - Unix domain socket

SYNOPSIS
       #include <curl/curl.h>

       CURLcode curl_easy_setopt(CURL *handle, CURLOPT_UNIX_SOCKET_PATH, char *path);

DESCRIPTION
       Enables  the  use  of Unix domain sockets as connection endpoint and sets the path to path. If path is NULL, then Unix domain sockets are disabled. An empty string will result in an error at some
       point, it will not disable use of Unix domain sockets.

       When enabled, curl will connect to the Unix domain socket instead of establishing a TCP connection to a host. Since no TCP connection is created, curl does not need to resolve the DNS hostname in
       the URL.

       The maximum path length on Cygwin, Linux and Solaris is 107. On other platforms it might be even less.

       Proxy  and  TCP options such as CURLOPT_TCP_NODELAY(3) are not supported. Proxy options such as CURLOPT_PROXY(3) have no effect either as these are TCP-oriented, and asking a proxy server to con‚Äê
       nect to a certain Unix domain socket is not possible.

       The application does not have to keep the string around after setting this option.

DEFAULT
       Default is NULL, meaning that no Unix domain sockets are used.

PROTOCOLS
       All protocols except for FILE and FTP are supported in theory. HTTP, IMAP, POP3 and SMTP should in particular work (including their SSL/TLS variants).

EXAMPLE
       Given that you have an HTTP server running listening on /tmp/httpd.sock, you can request an HTTP resource with:

         curl_easy_setopt(curl_handle, CURLOPT_UNIX_SOCKET_PATH, "/tmp/httpd.sock");
         curl_easy_setopt(curl_handle, CURLOPT_URL, "http://localhost/");

       If you are on Linux and somehow have a need for paths larger than 107 bytes, you could use the proc filesystem to bypass the limitation:

         int dirfd = open(long_directory_path_to_socket, O_DIRECTORY | O_RDONLY);
         char path[108];
         snprintf(path, sizeof(path), "/proc/self/fd/%d/httpd.sock", dirfd);
         curl_easy_setopt(curl_handle, CURLOPT_UNIX_SOCKET_PATH, path);
         /* Be sure to keep dirfd valid until you discard the handle */

AVAILABILITY
       Added in 7.40.0.

RETURN VALUE
       Returns CURLE_OK if the option is supported, and CURLE_UNKNOWN_OPTION if not.

SEE ALSO
       CURLOPT_ABSTRACT_UNIX_SOCKET(3), CURLOPT_OPENSOCKETFUNCTION(3), unix(7),

libcurl 7.40.0                                                                                  09 Oct 2014                                                                    CURLOPT_UNIX_SOCKET_PATH(3)
