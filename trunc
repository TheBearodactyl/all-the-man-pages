trunc(3)                                                                                 Library Functions Manual                                                                                 trunc(3)

NAME
       trunc, truncf, truncl - round to integer, toward zero

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       double trunc(double x);
       float truncf(float x);
       long double truncl(long double x);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       trunc(), truncf(), truncl():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L

DESCRIPTION
       These functions round x to the nearest integer value that is not larger in magnitude than x.

RETURN VALUE
       These functions return the rounded integer value, in floating format.

       If x is integral, infinite, or NaN, x itself is returned.

ERRORS
       No errors occur.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │trunc(), truncf(), truncl()                                                                                                                                             │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       glibc 2.1.  C99, POSIX.1-2001.

NOTES
       The  integral  value returned by these functions may be too large to store in an integer type (int, long, etc.).  To avoid an overflow, which will produce undefined results, an application should
       perform a range check on the returned value before assigning it to an integer type.

SEE ALSO
       ceil(3), floor(3), lrint(3), nearbyint(3), rint(3), round(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        trunc(3)
TRUNC(3P)                                                                                POSIX Programmer's Manual                                                                               TRUNC(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       trunc, truncf, truncl — round to truncated integer value

SYNOPSIS
       #include <math.h>

       double trunc(double x);
       float truncf(float x);
       long double truncl(long double x);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       These functions shall round their argument to the integer value, in floating format, nearest to but no larger in magnitude than the argument.

RETURN VALUE
       Upon successful completion, these functions shall return the truncated integer value.
       The result shall have the same sign as x.

       If x is NaN, a NaN shall be returned.

       If x is ±0 or ±Inf, x shall be returned.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       The  integral value returned by these functions need not be expressible as an intmax_t.  The return value should be tested before assigning it to an integer type to avoid the undefined results of
       an integer overflow.

       These functions may raise the inexact floating-point exception if the result differs in value from the argument.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       The Base Definitions volume of POSIX.1‐2017, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          TRUNC(3P)
