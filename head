HEAD(1)                                                                                        User Commands                                                                                       HEAD(1)

NAME
       head - output the first part of files

SYNOPSIS
       head [OPTION]... [FILE]...

DESCRIPTION
       Print the first 10 lines of each FILE to standard output.  With more than one FILE, precede each with a header giving the file name.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory for short options too.

       -c, --bytes=[-]NUM
              print the first NUM bytes of each file; with the leading '-', print all but the last NUM bytes of each file

       -n, --lines=[-]NUM
              print the first NUM lines instead of the first 10; with the leading '-', print all but the last NUM lines of each file

       -q, --quiet, --silent
              never print headers giving file names

       -v, --verbose
              always print headers giving file names

       -z, --zero-terminated
              line delimiter is NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

       NUM  may  have  a  multiplier suffix: b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024, GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y, R, Q.  Binary prefixes can be used, too:
       KiB=K, MiB=M, and so on.

AUTHOR
       Written by David MacKenzie and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2023 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       tail(1)

       Full documentation <https://www.gnu.org/software/coreutils/head>
       or available locally via: info '(coreutils) head invocation'

GNU coreutils 9.2                                                                               April 2023                                                                                         HEAD(1)
HEAD(1P)                                                                                 POSIX Programmer's Manual                                                                                HEAD(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       head — copy the first part of files

SYNOPSIS
       head [-n number] [file...]

DESCRIPTION
       The head utility shall copy its input files to the standard output, ending the output for each file at a designated point.

       Copying shall end at the point in each input file indicated by the -n number option. The option-argument number shall be counted in units of lines.

OPTIONS
       The head utility shall conform to the Base Definitions volume of POSIX.1‐2017, Section 12.2, Utility Syntax Guidelines.

       The following option shall be supported:

       -n number The first number lines of each input file shall be copied to standard output. The application shall ensure that the number option-argument is a positive decimal integer.

       When a file contains less than number lines, it shall be copied to standard output in its entirety. This shall not be an error.

       If no options are specified, head shall act as if -n 10 had been specified.

OPERANDS
       The following operand shall be supported:

       file      A pathname of an input file. If no file operands are specified, the standard input shall be used.

STDIN
       The standard input shall be used if no file operands are specified, and shall be used if a file operand is '-' and the implementation treats the '-' as meaning  standard  input.   Otherwise,  the
       standard input shall not be used.  See the INPUT FILES section.

INPUT FILES
       Input files shall be text files, but the line length is not restricted to {LINE_MAX} bytes.

ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of head:

       LANG      Provide  a default value for the internationalization variables that are unset or null. (See the Base Definitions volume of POSIX.1‐2017, Section 8.2, Internationalization Variables for
                 the precedence of internationalization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as opposed to multi-byte characters in arguments and input files).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       The standard output shall contain designated portions of the input files.

       If multiple file operands are specified, head shall precede the output for each with the header:

           "\n==> %s <==\n", <pathname>

       except that the first header written shall not include the initial <newline>.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       >0    An error occurred.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       When using head to process pathnames, it is recommended that LC_ALL, or at least LC_CTYPE and LC_COLLATE, are set to POSIX or C in the environment, since pathnames can contain byte sequences that
       do  not  form valid characters in some locales, in which case the utility's behavior would be undefined. In the POSIX locale each byte is a valid single-byte character, and therefore this problem
       is avoided.

EXAMPLES
       To write the first ten lines of all files (except those with a leading period) in the directory:

           head -- *

RATIONALE
       Although it is possible to simulate head with sed 10q for a single file, the standard developers decided that the popularity of head on historical BSD systems warranted  its  inclusion  alongside
       tail.

       POSIX.1‐2008  version  of head follows the Utility Syntax Guidelines. The -n option was added to this new interface so that head and tail would be more logically related. Earlier versions of this
       standard allowed a -number option. This form is no longer specified by POSIX.1‐2008 but may be present in some implementations.

       There is no -c option (as there is in tail) because it is not historical practice and because other utilities in this volume of POSIX.1‐2017 provide similar functionality.

FUTURE DIRECTIONS
       None.

SEE ALSO
       sed, tail

       The Base Definitions volume of POSIX.1‐2017, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                           HEAD(1P)
__gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator >Library Functions Man__gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator >(3)

NAME
       __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator > - Const iterator.

SYNOPSIS
       #include <pat_trie_base.hpp>

       Inherited by __gnu_pbds::detail::pat_trie_base::_Iter< Node, Leaf, Head, Inode, Is_Forward_Iterator >.

   Public Types
       typedef allocator_type _Alloc
       typedef Node::allocator_type allocator_type
       typedef type_traits::const_pointer const_pointer
       typedef type_traits::const_reference const_reference
       typedef allocator_type::difference_type difference_type
       typedef rebind_traits< _Alloc, Head >::pointer head_pointer
       typedef Inode::iterator inode_iterator
       typedef rebind_traits< _Alloc, Inode >::pointer inode_pointer
       typedef std::bidirectional_iterator_tag iterator_category
       typedef rebind_traits< _Alloc, Leaf >::const_pointer leaf_const_pointer
       typedef rebind_traits< _Alloc, Leaf >::pointer leaf_pointer
       typedef rebind_traits< _Alloc, Node >::pointer node_pointer
       typedef type_traits::pointer pointer
       typedef type_traits::reference reference
       typedef Node::type_traits type_traits
       typedef type_traits::value_type value_type

   Public Member Functions
       _CIter (const _CIter< Node, Leaf, Head, Inode, !Is_Forward_Iterator > &other)
       _CIter (node_pointer p_nd=0)
       bool operator!= (const _CIter &other) const
       bool operator!= (const _CIter< Node, Leaf, Head, Inode, !Is_Forward_Iterator > &other) const
       const_reference operator* () const
       _CIter & operator++ ()
       _CIter operator++ (int)
       _CIter & operator-- ()
       _CIter operator-- (int)
       const_pointer operator-> () const
       _CIter & operator= (const _CIter &other)
       _CIter & operator= (const _CIter< Node, Leaf, Head, Inode, !Is_Forward_Iterator > &other)
       bool operator== (const _CIter &other) const
       bool operator== (const _CIter< Node, Leaf, Head, Inode, !Is_Forward_Iterator > &other) const

   Public Attributes
       node_pointer m_p_nd

   Protected Member Functions
       void dec (false_type)
       void dec (true_type)
       void inc (false_type)
       void inc (true_type)

   Static Protected Member Functions
       static node_pointer get_larger_sibling (node_pointer p_nd)
       static node_pointer get_smaller_sibling (node_pointer p_nd)
       static leaf_pointer leftmost_descendant (node_pointer p_nd)
       static leaf_pointer rightmost_descendant (node_pointer p_nd)

Detailed Description
   template<typename Node, typename Leaf, typename Head, typename Inode, bool Is_Forward_Iterator>
       class __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator >"Const iterator.

       Definition at line 487 of file pat_trie_base.hpp.

Member Typedef Documentation
   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef allocator_type __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::_Alloc
       Definition at line 502 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef Node::allocator_type __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::allocator_type
       Definition at line 491 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef type_traits::const_pointer __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head,
       Inode, Is_Forward_Iterator >::const_pointer
       Definition at line 499 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef type_traits::const_reference __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head,
       Inode, Is_Forward_Iterator >::const_reference
       Definition at line 500 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef allocator_type::difference_type __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf,
       Head, Inode, Is_Forward_Iterator >::difference_type
       Definition at line 495 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef rebind_traits<_Alloc,Head>::pointer __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf,
       Head, Inode, Is_Forward_Iterator >::head_pointer
       Definition at line 506 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef Inode::iterator __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::inode_iterator
       Definition at line 509 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef rebind_traits<_Alloc,Inode>::pointer __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf,
       Head, Inode, Is_Forward_Iterator >::inode_pointer
       Definition at line 508 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef std::bidirectional_iterator_tag __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf,
       Head, Inode, Is_Forward_Iterator >::iterator_category
       Definition at line 494 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef rebind_traits<_Alloc,Leaf>::const_pointer __gnu_pbds::detail::pat_trie_base::_CIter< Node,
       Leaf, Head, Inode, Is_Forward_Iterator >::leaf_const_pointer
       Definition at line 505 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef rebind_traits<_Alloc,Leaf>::pointer __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf,
       Head, Inode, Is_Forward_Iterator >::leaf_pointer
       Definition at line 504 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef rebind_traits<_Alloc,Node>::pointer __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf,
       Head, Inode, Is_Forward_Iterator >::node_pointer
       Definition at line 503 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef type_traits::pointer __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::pointer
       Definition at line 497 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef type_traits::reference __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::reference
       Definition at line 498 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef Node::type_traits __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::type_traits
       Definition at line 492 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> typedef type_traits::value_type __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::value_type
       Definition at line 496 of file pat_trie_base.hpp.

Constructor & Destructor Documentation
   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator >::_CIter
       (node_pointer p_nd = 0) [inline]
       Definition at line 513 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator >::_CIter
       (const _CIter< Node, Leaf, Head, Inode, !Is_Forward_Iterator > & other) [inline]
       Definition at line 516 of file pat_trie_base.hpp.

Member Function Documentation
   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> void __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator >::dec
       (false_type) [inline],  [protected]
       Definition at line 624 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> void __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator >::dec
       (true_type) [inline],  [protected]
       Definition at line 628 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> static node_pointer __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::get_larger_sibling (node_pointer p_nd) [inline],  [static],  [protected]
       Definition at line 652 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> static node_pointer __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::get_smaller_sibling (node_pointer p_nd) [inline],  [static],  [protected]
       Definition at line 666 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> void __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator >::inc
       (false_type) [inline],  [protected]
       Definition at line 596 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> void __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator >::inc
       (true_type) [inline],  [protected]
       Definition at line 600 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> static leaf_pointer __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::leftmost_descendant (node_pointer p_nd) [inline],  [static],  [protected]
       Definition at line 689 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> bool __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator
       >::operator!= (const _CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator > & other) const [inline]
       Definition at line 557 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> bool __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator
       >::operator!= (const _CIter< Node, Leaf, Head, Inode, !Is_Forward_Iterator > & other) const [inline]
       Definition at line 561 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> const_reference __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::operator* () const [inline]
       Definition at line 542 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> _CIter & __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator
       >::operator++ () [inline]
       Definition at line 565 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> _CIter __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator
       >::operator++ (int) [inline]
       Definition at line 572 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> _CIter & __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator
       >::operator-- () [inline]
       Definition at line 580 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> _CIter __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator
       >::operator-- (int) [inline]
       Definition at line 587 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> const_pointer __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::operator-> () const [inline]
       Definition at line 535 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> _CIter & __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator
       >::operator= (const _CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator > & other) [inline]
       Definition at line 521 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> _CIter & __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator
       >::operator= (const _CIter< Node, Leaf, Head, Inode, !Is_Forward_Iterator > & other) [inline]
       Definition at line 528 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> bool __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator
       >::operator== (const _CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator > & other) const [inline]
       Definition at line 549 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> bool __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator
       >::operator== (const _CIter< Node, Leaf, Head, Inode, !Is_Forward_Iterator > & other) const [inline]
       Definition at line 553 of file pat_trie_base.hpp.

   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> static leaf_pointer __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::rightmost_descendant (node_pointer p_nd) [inline],  [static],  [protected]
       Definition at line 697 of file pat_trie_base.hpp.

Member Data Documentation
   template<typename Node , typename Leaf , typename Head , typename Inode , bool Is_Forward_Iterator> node_pointer __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode,
       Is_Forward_Iterator >::m_p_nd
       Definition at line 511 of file pat_trie_base.hpp.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                                                                                     Wed Feb 1 2023  __gnu_pbds::detail::pat_trie_base::_CIter< Node, Leaf, Head, Inode, Is_Forward_Iterator >(3)
