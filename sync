SYNC(1)                          User Commands                         SYNC(1)

NAME
       sync - Synchronize cached writes to persistent storage

SYNOPSIS
       sync [OPTION] [FILE]...

DESCRIPTION
       Synchronize cached writes to persistent storage

       If one or more files are specified, sync only them, or their containing
       file systems.

       -d, --data
              sync only file data, no unneeded metadata

       -f, --file-system
              sync the file systems that contain the files

       --help display this help and exit

       --version
              output version information and exit

BUGS
       Persistence guarantees vary per system.  See the system calls below for
       more details.

AUTHOR
       Written by Jim Meyering and Giuseppe Scrivano.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright  ©  2023  Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free  to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       fdatasync(2), fsync(2), sync(2), syncfs(2)

       Full documentation <https://www.gnu.org/software/coreutils/sync>
       or available locally via: info '(coreutils) sync invocation'

GNU coreutils 9.2                 April 2023                           SYNC(1)
SYNC(3P)                   POSIX Programmer's Manual                  SYNC(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       sync — schedule file system updates

SYNOPSIS
       #include <unistd.h>

       void sync(void);

DESCRIPTION
       The sync() function shall cause all information in memory that  updates
       file systems to be scheduled for writing out to all file systems.

       The  writing,  although scheduled, is not necessarily complete upon re‐
       turn from sync().

RETURN VALUE
       The sync() function shall not return a value.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       fsync()

       The Base Definitions volume of POSIX.1‐2017, <unistd.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                             SYNC(3P)
sync(2)                       System Calls Manual                      sync(2)

NAME
       sync, syncfs - commit filesystem caches to disk

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       void sync(void);

       int syncfs(int fd);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       sync():
           _XOPEN_SOURCE >= 500
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE

       syncfs():
           _GNU_SOURCE

DESCRIPTION
       sync()  causes  all  pending  modifications  to filesystem metadata and
       cached file data to be written to the underlying filesystems.

       syncfs() is like sync(), but synchronizes just the filesystem  contain‐
       ing file referred to by the open file descriptor fd.

RETURN VALUE
       syncfs()  returns  0 on success; on error, it returns -1 and sets errno
       to indicate the error.

ERRORS
       sync() is always successful.

       syncfs() can fail for at least the following reasons:

       EBADF  fd is not a valid file descriptor.

       EIO    An error occurred during synchronization.  This error may relate
              to  data  written  to any file on the filesystem, or on metadata
              related to the filesystem itself.

       ENOSPC Disk space was exhausted while synchronizing.

       ENOSPC, EDQUOT
              Data was written to a file on NFS or  another  filesystem  which
              does  not  allocate space at the time of a write(2) system call,
              and some previous  write  failed  due  to  insufficient  storage
              space.

VERSIONS
       According  to  the  standard specification (e.g., POSIX.1-2001), sync()
       schedules the writes, but may return before the actual writing is done.
       However  Linux  waits  for I/O completions, and thus sync() or syncfs()
       provide the same guarantees as fsync() called on every file in the sys‐
       tem or filesystem respectively.

STANDARDS
       sync() POSIX.1-2008.

       syncfs()
              Linux.

HISTORY
       sync() POSIX.1-2001, SVr4, 4.3BSD.

       syncfs()
              Linux 2.6.39, glibc 2.14.

       Since  glibc  2.2.2, the Linux prototype for sync() is as listed above,
       following the various standards.  In glibc 2.2.1 and  earlier,  it  was
       "int sync(void)", and sync() always returned 0.

       In mainline kernel versions prior to Linux 5.8, syncfs() will fail only
       when passed a bad file descriptor (EBADF).  Since Linux  5.8,  syncfs()
       will  also  report  an error if one or more inodes failed to be written
       back since the last syncfs() call.

BUGS
       Before Linux 1.3.20, Linux did not wait for I/O to complete before  re‐
       turning.

SEE ALSO
       sync(1), fdatasync(2), fsync(2)

Linux man-pages 6.04              2023-03-30                           sync(2)
