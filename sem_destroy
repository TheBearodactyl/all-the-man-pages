sem_destroy(3)             Library Functions Manual             sem_destroy(3)

NAME
       sem_destroy - destroy an unnamed semaphore

LIBRARY
       POSIX threads library (libpthread, -lpthread)

SYNOPSIS
       #include <semaphore.h>

       int sem_destroy(sem_t *sem);

DESCRIPTION
       sem_destroy()  destroys the unnamed semaphore at the address pointed to
       by sem.

       Only a semaphore that has been initialized by sem_init(3) should be de‐
       stroyed using sem_destroy().

       Destroying  a  semaphore  that other processes or threads are currently
       blocked on (in sem_wait(3)) produces undefined behavior.

       Using a semaphore that has been destroyed produces  undefined  results,
       until the semaphore has been reinitialized using sem_init(3).

RETURN VALUE
       sem_destroy() returns 0 on success; on error, -1 is returned, and errno
       is set to indicate the error.

ERRORS
       EINVAL sem is not a valid semaphore.

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │sem_destroy()                               │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

NOTES
       An  unnamed semaphore should be destroyed with sem_destroy() before the
       memory in which it is located is deallocated.  Failure to do  this  can
       result in resource leaks on some implementations.

SEE ALSO
       sem_init(3), sem_post(3), sem_wait(3), sem_overview(7)

Linux man-pages 6.04              2023-03-30                    sem_destroy(3)
SEM_DESTROY(3P)            POSIX Programmer's Manual           SEM_DESTROY(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       sem_destroy — destroy an unnamed semaphore

SYNOPSIS
       #include <semaphore.h>

       int sem_destroy(sem_t *sem);

DESCRIPTION
       The sem_destroy() function shall destroy the  unnamed  semaphore  indi‐
       cated  by  sem.  Only a semaphore that was created using sem_init() may
       be destroyed using sem_destroy(); the effect of  calling  sem_destroy()
       with  a  named  semaphore is undefined. The effect of subsequent use of
       the semaphore sem is undefined until sem is  reinitialized  by  another
       call to sem_init().

       It  is  safe  to destroy an initialized semaphore upon which no threads
       are currently blocked. The effect of destroying a semaphore upon  which
       other threads are currently blocked is undefined.

RETURN VALUE
       Upon  successful  completion, a value of zero shall be returned. Other‐
       wise, a value of -1 shall be returned and errno set to indicate the er‐
       ror.

ERRORS
       The sem_destroy() function may fail if:

       EINVAL The sem argument is not a valid semaphore.

       EBUSY  There are currently processes blocked on the semaphore.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       semctl(), semget(), semop(), sem_init(), sem_open()

       The Base Definitions volume of POSIX.1‐2017, <semaphore.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                      SEM_DESTROY(3P)
