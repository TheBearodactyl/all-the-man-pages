mbsnrtowcs(3)                                                                            Library Functions Manual                                                                            mbsnrtowcs(3)

NAME
       mbsnrtowcs - convert a multibyte string to a wide-character string

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <wchar.h>

       size_t mbsnrtowcs(wchar_t dest[restrict .len], const char **restrict src,
                         size_t nms, size_t len, mbstate_t *restrict ps);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       mbsnrtowcs():
           Since glibc 2.10:
               _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _GNU_SOURCE

DESCRIPTION
       The mbsnrtowcs() function is like the mbsrtowcs(3) function, except that the number of bytes to be converted, starting at *src, is limited to at most nms bytes.

       If  dest  is not NULL, the mbsnrtowcs() function converts at most nms bytes from the multibyte string *src to a wide-character string starting at dest.  At most len wide characters are written to
       dest.  The shift state *ps is updated.  The conversion is effectively performed by repeatedly calling mbrtowc(dest, *src, n, ps) where n is some positive number, as long as  this  call  succeeds,
       and then incrementing dest by one and *src by the number of bytes consumed.  The conversion can stop for three reasons:

       •  An invalid multibyte sequence has been encountered.  In this case, *src is left pointing to the invalid multibyte sequence, (size_t) -1 is returned, and errno is set to EILSEQ.

       •  The  nms  limit forces a stop, or len non-L'\0' wide characters have been stored at dest.  In this case, *src is left pointing to the next multibyte sequence to be converted, and the number of
          wide characters written to dest is returned.

       •  The multibyte string has been completely converted, including the terminating null wide character ('\0') (which has the side effect of bringing back *ps to the initial state).  In  this  case,
          *src is set to NULL, and the number of wide characters written to dest, excluding the terminating null wide character, is returned.

       According  to  POSIX.1, if the input buffer ends with an incomplete character, it is unspecified whether conversion stops at the end of the previous character (if any), or at the end of the input
       buffer.  The glibc implementation adopts the former behavior.

       If dest is NULL, len is ignored, and the conversion proceeds as above, except that the converted wide characters are not written out to memory, and that no destination length limit exists.

       In both of the above cases, if ps is NULL, a static anonymous state known only to the mbsnrtowcs() function is used instead.

       The programmer must ensure that there is room for at least len wide characters at dest.

RETURN VALUE
       The mbsnrtowcs() function returns the number of wide characters that make up the converted part of the wide-character string, not including the terminating null wide  character.   If  an  invalid
       multibyte sequence was encountered, (size_t) -1 is returned, and errno set to EILSEQ.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌─────────────┬───────────────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
       │Interface    │ Attribute     │ Value                                                                                                                                                              │
       ├─────────────┼───────────────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤
       │mbsnrtowcs() │ Thread safety │ MT-Unsafe race:mbsnrtowcs/!ps                                                                                                                                      │
       └─────────────┴───────────────┴────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

STANDARDS
       POSIX.1-2008.

NOTES
       The behavior of mbsnrtowcs() depends on the LC_CTYPE category of the current locale.

       Passing NULL as ps is not multithread safe.

SEE ALSO
       iconv(3), mbrtowc(3), mbsinit(3), mbsrtowcs(3)

Linux man-pages 6.04                                                                            2023-02-05                                                                                   mbsnrtowcs(3)
MBSRTOWCS(3P)                                                                            POSIX Programmer's Manual                                                                           MBSRTOWCS(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       mbsnrtowcs, mbsrtowcs — convert a character string to a wide-character string (restartable)

SYNOPSIS
       #include <wchar.h>

       size_t mbsnrtowcs(wchar_t *restrict dst, const char **restrict src,
           size_t nmc, size_t len, mbstate_t *restrict ps);
       size_t mbsrtowcs(wchar_t *restrict dst, const char **restrict src,
           size_t len, mbstate_t *restrict ps);

DESCRIPTION
       For mbsrtowcs(): The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the  ISO C  standard  is  uninten‐
       tional. This volume of POSIX.1‐2017 defers to the ISO C standard.

       The mbsrtowcs() function shall convert a sequence of characters, beginning in the conversion state described by the object pointed to by ps, from the array indirectly pointed to by src into a se‐
       quence of corresponding wide characters. If dst is not a null pointer, the converted characters shall be stored into the array pointed to by dst.  Conversion continues up to and including a  ter‐
       minating null character, which shall also be stored. Conversion shall stop early in either of the following cases:

        *  A sequence of bytes is encountered that does not form a valid character.

        *  len codes have been stored into the array pointed to by dst (and dst is not a null pointer).

       Each conversion shall take place as if by a call to the mbrtowc() function.

       If dst is not a null pointer, the pointer object pointed to by src shall be assigned either a null pointer (if conversion stopped due to reaching a terminating null character) or the address just
       past the last character converted (if any). If conversion stopped due to reaching a terminating null character, and if dst is not a null pointer, the resulting state described shall be  the  ini‐
       tial conversion state.

       If  ps  is a null pointer, the mbsrtowcs() function shall use its own internal mbstate_t object, which is initialized at program start-up to the initial conversion state. Otherwise, the mbstate_t
       object pointed to by ps shall be used to completely describe the current conversion state of the associated character sequence.

       The mbsnrtowcs() function shall be equivalent to the mbsrtowcs() function, except that the conversion of characters indirectly pointed to by src is limited to at most nmc bytes (the size  of  the
       input  buffer), and under conditions where mbsrtowcs() would assign the address just past the last character converted (if any) to the pointer object pointed to by src, mbsnrtowcs() shall instead
       assign the address just past the last byte processed (if any) to that pointer object. If the input buffer ends with an incomplete character, it is unspecified whether conversion stops at the  end
       of  the previous character (if any), or at the end of the input buffer. In the latter case, a subsequent call to mbsnrtowcs() with an input buffer that starts with the remainder of the incomplete
       character shall correctly complete the conversion of that character.

       The behavior of these functions shall be affected by the LC_CTYPE category of the current locale.

       The implementation shall behave as if no function defined in this volume of POSIX.1‐2017 calls these functions.

       The mbsnrtowcs() and mbsrtowcs() functions need not be thread-safe if called with a NULL ps argument.

       The mbsrtowcs() function shall not change the setting of errno if successful.

RETURN VALUE
       If the input conversion encounters a sequence of bytes that do not form a valid character, an encoding error occurs. In this case, these functions shall store the value of the macro  [EILSEQ]  in
       errno  and shall return (size_t)-1; the conversion state is undefined.  Otherwise, these functions shall return the number of characters successfully converted, not including the terminating null
       (if any).

ERRORS
       These functions shall fail if:

       EILSEQ An invalid character sequence is detected.  In the POSIX locale an [EILSEQ] error cannot occur since all byte values are valid characters.

       These functions may fail if:

       EINVAL ps points to an object that contains an invalid conversion state.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       A future version may require that when the input buffer ends with an incomplete character, conversion stops at the end of the input buffer.

SEE ALSO
       iconv(), mbrtowc(), mbsinit()

       The Base Definitions volume of POSIX.1‐2017, <wchar.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                      MBSRTOWCS(3P)
