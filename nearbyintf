rint(3)                                                                                  Library Functions Manual                                                                                  rint(3)

NAME
       nearbyint, nearbyintf, nearbyintl, rint, rintf, rintl - round to nearest integer

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       double nearbyint(double x);
       float nearbyintf(float x);
       long double nearbyintl(long double x);

       double rint(double x);
       float rintf(float x);
       long double rintl(long double x);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       nearbyint(), nearbyintf(), nearbyintl():
           _POSIX_C_SOURCE >= 200112L || _ISOC99_SOURCE

       rint():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || _XOPEN_SOURCE >= 500
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

       rintf(), rintl():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       The  nearbyint(),  nearbyintf(), and nearbyintl() functions round their argument to an integer value in floating-point format, using the current rounding direction (see fesetround(3)) and without
       raising the inexact exception.  When the current rounding direction is to nearest, these functions round halfway cases to the even integer in accordance with IEEE-754.

       The rint(), rintf(), and rintl() functions do the same, but will raise the inexact exception (FE_INEXACT, checkable via fetestexcept(3)) when the result differs in value from the argument.

RETURN VALUE
       These functions return the rounded integer value.

       If x is integral, +0, -0, NaN, or infinite, x itself is returned.

ERRORS
       No errors occur.  POSIX.1-2001 documents a range error for overflows, but see NOTES.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │nearbyint(), nearbyintf(), nearbyintl(), rint(), rintf(), rintl()                                                                                                       │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       C99, POSIX.1-2001.

NOTES
       SUSv2 and POSIX.1-2001 contain text about overflow (which might set errno to ERANGE, or raise an FE_OVERFLOW exception).  In practice, the result cannot overflow on any current machine,  so  this
       error-handling  stuff  is  just nonsense.  (More precisely, overflow can happen only when the maximum value of the exponent is smaller than the number of mantissa bits.  For the IEEE-754 standard
       32-bit and 64-bit floating-point numbers the maximum value of the exponent is 127 (respectively, 1023), and the number of mantissa bits including the implicit bit is 24 (respectively, 53).)

       If you want to store the rounded value in an integer type, you probably want to use one of the functions described in lrint(3) instead.

SEE ALSO
       ceil(3), floor(3), lrint(3), round(3), trunc(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                         rint(3)
NEARBYINT(3P)                                                                            POSIX Programmer's Manual                                                                           NEARBYINT(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       nearbyint, nearbyintf, nearbyintl — floating-point rounding functions

SYNOPSIS
       #include <math.h>

       double nearbyint(double x);
       float nearbyintf(float x);
       long double nearbyintl(long double x);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       These functions shall round their argument to an integer value in floating-point format, using the current rounding direction and without raising the inexact floating-point exception.

RETURN VALUE
       Upon successful completion, these functions shall return the rounded integer value.  The result shall have the same sign as x.

       If x is NaN, a NaN shall be returned.

       If x is ±0, ±0 shall be returned.

       If x is ±Inf, x shall be returned.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       The  integral value returned by these functions need not be expressible as an intmax_t.  The return value should be tested before assigning it to an integer type to avoid the undefined results of
       an integer overflow.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       feclearexcept(), fetestexcept()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                      NEARBYINT(3P)
