fpclassify(3)                                                                            Library Functions Manual                                                                            fpclassify(3)

NAME
       fpclassify, isfinite, isnormal, isnan, isinf - floating-point classification macros

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       int fpclassify(x);
       int isfinite(x);
       int isnormal(x);
       int isnan(x);
       int isinf(x);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       fpclassify(), isfinite(), isnormal():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L

       isnan():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || _XOPEN_SOURCE
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

       isinf():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       Floating point numbers can have special values, such as infinite or NaN.  With the macro fpclassify(x) you can find out what type x is.  The macro takes any floating-point expression as argument.
       The result is one of the following values:

       FP_NAN        x is "Not a Number".

       FP_INFINITE   x is either positive infinity or negative infinity.

       FP_ZERO       x is zero.

       FP_SUBNORMAL  x is too small to be represented in normalized format.

       FP_NORMAL     if nothing of the above is correct then it must be a normal floating-point number.

       The other macros provide a short answer to some standard questions.

       isfinite(x)   returns a nonzero value if
                     (fpclassify(x) != FP_NAN && fpclassify(x) != FP_INFINITE)

       isnormal(x)   returns a nonzero value if (fpclassify(x) == FP_NORMAL)

       isnan(x)      returns a nonzero value if (fpclassify(x) == FP_NAN)

       isinf(x)      returns 1 if x is positive infinity, and -1 if x is negative infinity.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │fpclassify(), isfinite(), isnormal(), isnan(), isinf()                                                                                                                  │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       POSIX.1-2001, C99.

       In glibc 2.01 and earlier, isinf() returns a nonzero value (actually: 1) if x is positive infinity or negative infinity.  (This is all that C99 requires.)

NOTES
       For isinf(), the standards merely say that the return value is nonzero if and only if the argument has an infinite value.

SEE ALSO
       finite(3), INFINITY(3), isgreater(3), signbit(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                   fpclassify(3)
ISNAN(3P)                                                                                POSIX Programmer's Manual                                                                               ISNAN(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       isnan — test for a NaN

SYNOPSIS
       #include <math.h>

       int isnan(real-floating x);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       The  isnan()  macro shall determine whether its argument value is a NaN. First, an argument represented in a format wider than its semantic type is converted to its semantic type. Then determina‐
       tion is based on the type of the argument.

RETURN VALUE
       The isnan() macro shall return a non-zero value if and only if its argument has a NaN value.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       fpclassify(), isfinite(), isinf(), isnormal(), signbit()

       The Base Definitions volume of POSIX.1‐2017, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          ISNAN(3P)
