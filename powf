pow(3)                     Library Functions Manual                     pow(3)

NAME
       pow, powf, powl - power functions

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       double pow(double x, double y);
       float powf(float x, float y);
       long double powl(long double x, long double y);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       powf(), powl():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       These functions return the value of x raised to the power of y.

RETURN VALUE
       On success, these functions return the value of x to the power of y.

       If the result overflows, a range error occurs, and the functions return
       HUGE_VAL, HUGE_VALF, or HUGE_VALL, respectively,  with  the  mathemati‐
       cally correct sign.

       If  result  underflows, and is not representable, a range error occurs,
       and 0.0 with the appropriate sign is returned.

       If x is +0 or -0, and y is an odd integer less than 0, a pole error oc‐
       curs  and HUGE_VAL, HUGE_VALF, or HUGE_VALL, is returned, with the same
       sign as x.

       If x is +0 or -0, and y is less than 0 and not an odd integer,  a  pole
       error occurs and +HUGE_VAL, +HUGE_VALF, or +HUGE_VALL, is returned.

       If  x is +0 (-0), and y is an odd integer greater than 0, the result is
       +0 (-0).

       If x is 0, and y greater than 0 and not an odd integer, the  result  is
       +0.

       If x is -1, and y is positive infinity or negative infinity, the result
       is 1.0.

       If x is +1, the result is 1.0 (even if y is a NaN).

       If y is 0, the result is 1.0 (even if x is a NaN).

       If x is a finite value less than 0, and y is a finite noninteger, a do‐
       main error occurs, and a NaN is returned.

       If  the absolute value of x is less than 1, and y is negative infinity,
       the result is positive infinity.

       If the absolute value of x is greater than 1, and y is negative  infin‐
       ity, the result is +0.

       If  the absolute value of x is less than 1, and y is positive infinity,
       the result is +0.

       If the absolute value of x is greater than 1, and y is positive  infin‐
       ity, the result is positive infinity.

       If x is negative infinity, and y is an odd integer less than 0, the re‐
       sult is -0.

       If x is negative infinity, and y less than 0 and not  an  odd  integer,
       the result is +0.

       If  x is negative infinity, and y is an odd integer greater than 0, the
       result is negative infinity.

       If x is negative infinity, and y greater than 0 and not an odd integer,
       the result is positive infinity.

       If x is positive infinity, and y less than 0, the result is +0.

       If x is positive infinity, and y greater than 0, the result is positive
       infinity.

       Except as specified above, if x or y is a NaN, the result is a NaN.

ERRORS
       See math_error(7) for information on how to determine whether an  error
       has occurred when calling these functions.

       The following errors can occur:

       Domain error: x is negative, and y is a finite noninteger
              errno  is  set  to  EDOM.   An  invalid floating-point exception
              (FE_INVALID) is raised.

       Pole error: x is zero, and y is negative
              errno is set to ERANGE (but see BUGS).  A divide-by-zero  float‐
              ing-point exception (FE_DIVBYZERO) is raised.

       Range error: the result overflows
              errno  is  set  to ERANGE.  An overflow floating-point exception
              (FE_OVERFLOW) is raised.

       Range error: the result underflows
              errno is set to ERANGE.  An underflow  floating-point  exception
              (FE_UNDERFLOW) is raised.

ATTRIBUTES
       For  an  explanation  of  the  terms  used  in  this  section,  see at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │pow(), powf(), powl()                       │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       C99, POSIX.1-2001.

       The variant returning double also conforms to SVr4, 4.3BSD, C89.

BUGS
   Historical bugs (now fixed)
       Before glibc 2.28, on some architectures (e.g., x86-64)  pow()  may  be
       more than 10,000 times slower for some inputs than for other nearby in‐
       puts.  This affects only pow(), and not powf() nor powl().  This  prob‐
       lem was fixed in glibc 2.28.

       A  number  of  bugs  in the glibc implementation of pow() were fixed in
       glibc 2.16.

       In glibc 2.9 and earlier, when a pole error occurs,  errno  is  set  to
       EDOM  instead  of  the  POSIX-mandated ERANGE.  Since glibc 2.10, glibc
       does the right thing.

       In glibc 2.3.2 and earlier, when an overflow or underflow error occurs,
       glibc's  pow()  generates  a  bogus  invalid  floating-point  exception
       (FE_INVALID) in addition to the overflow or underflow exception.

SEE ALSO
       cbrt(3), cpow(3), sqrt(3)

Linux man-pages 6.04              2023-03-30                            pow(3)
POW(3P)                    POSIX Programmer's Manual                   POW(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       pow, powf, powl — power function

SYNOPSIS
       #include <math.h>

       double pow(double x, double y);
       float powf(float x, float y);
       long double powl(long double x, long double y);

DESCRIPTION
       The functionality described on this reference page is aligned with  the
       ISO C  standard.  Any  conflict between the requirements described here
       and the ISO C standard is unintentional. This  volume  of  POSIX.1‐2017
       defers to the ISO C standard.

       These functions shall compute the value of x raised to the power y, xy.
       If x is negative, the application shall ensure that  y  is  an  integer
       value.

       An  application  wishing to check for error situations should set errno
       to zero and  call  feclearexcept(FE_ALL_EXCEPT)  before  calling  these
       functions. On return, if errno is non-zero or fetestexcept(FE_INVALID |
       FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW) is non-zero,  an  error  has
       occurred.

RETURN VALUE
       Upon successful completion, these functions shall return the value of x
       raised to the power y.

       For finite values of x < 0, and finite non-integer values of y,  a  do‐
       main  error  shall occur and either a NaN (if representable), or an im‐
       plementation-defined value shall be returned.

       If the correct value would cause overflow, a range  error  shall  occur
       and  pow(),  powf(), and powl() shall return ±HUGE_VAL, ±HUGE_VALF, and
       ±HUGE_VALL, respectively, with the same sign as the  correct  value  of
       the function.

       If the correct value would cause underflow, and is not representable, a
       range error may occur, and pow(), powf(), and powl() shall return  0.0,
       or (if IEC 60559 Floating-Point is not supported) an implementation-de‐
       fined  value  no  greater  in  magnitude  than  DBL_MIN,  FLT_MIN,  and
       LDBL_MIN, respectively.

       For  y < 0, if x is zero, a pole error may occur and pow(), powf(), and
       powl() shall return  ±HUGE_VAL,  ±HUGE_VALF,  and  ±HUGE_VALL,  respec‐
       tively.   On  systems that support the IEC 60559 Floating-Point option,
       if x is ±0, a pole error shall occur  and  pow(),  powf(),  and  powl()
       shall  return  ±HUGE_VAL, ±HUGE_VALF, and ±HUGE_VALL, respectively if y
       is an odd integer, or HUGE_VAL, HUGE_VALF, and HUGE_VALL,  respectively
       if y is not an odd integer.

       If x or y is a NaN, a NaN shall be returned (unless specified elsewhere
       in this description).

       For any value of y (including NaN), if x is +1, 1.0 shall be returned.

       For any value of x (including NaN), if y is ±0, 1.0 shall be returned.

       For any odd integer value of y > 0, if x is ±0, ±0 shall be returned.

       For y > 0 and not an odd integer, if x is ±0, +0 shall be returned.

       If x is -1, and y is ±Inf, 1.0 shall be returned.

       For |x| < 1, if y is -Inf, +Inf shall be returned.

       For |x| > 1, if y is -Inf, +0 shall be returned.

       For |x| < 1, if y is +Inf, +0 shall be returned.

       For |x| > 1, if y is +Inf, +Inf shall be returned.

       For y an odd integer < 0, if x is -Inf, -0 shall be returned.

       For y < 0 and not an odd integer, if x is -Inf, +0 shall be returned.

       For y an odd integer > 0, if x is -Inf, -Inf shall be returned.

       For y > 0 and not an odd integer, if x is -Inf, +Inf shall be returned.

       For y < 0, if x is +Inf, +0 shall be returned.

       For y > 0, if x is +Inf, +Inf shall be returned.

       If the correct value would cause underflow,  and  is  representable,  a
       range error may occur and the correct value shall be returned.

ERRORS
       These functions shall fail if:

       Domain Error
                   The value of x is negative and y is a finite non-integer.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [EDOM].  If the in‐
                   teger  expression  (math_errhandling  &  MATH_ERREXCEPT) is
                   non-zero, then the invalid floating-point  exception  shall
                   be raised.

       Pole Error  The value of x is zero and y is negative.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [ERANGE].   If  the
                   integer  expression  (math_errhandling & MATH_ERREXCEPT) is
                   non-zero, then the divide-by-zero floating-point  exception
                   shall be raised.

       Range Error The result overflows.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [ERANGE].   If  the
                   integer  expression  (math_errhandling & MATH_ERREXCEPT) is
                   non-zero, then the overflow floating-point exception  shall
                   be raised.

       These functions may fail if:

       Pole Error  The value of x is zero and y is negative.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [ERANGE].   If  the
                   integer  expression  (math_errhandling & MATH_ERREXCEPT) is
                   non-zero, then the divide-by-zero floating-point  exception
                   shall be raised.

       Range Error The result underflows.

                   If  the  integer expression (math_errhandling & MATH_ERRNO)
                   is non-zero, then errno shall be set to [ERANGE].   If  the
                   integer  expression  (math_errhandling & MATH_ERREXCEPT) is
                   non-zero, then the underflow floating-point exception shall
                   be raised.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_er‐
       rhandling & MATH_ERREXCEPT) are independent of each other, but at least
       one of them must be non-zero.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       exp(), feclearexcept(), fetestexcept(), isnan()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of
       Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                              POW(3P)
