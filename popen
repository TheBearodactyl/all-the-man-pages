popen(3)                   Library Functions Manual                   popen(3)

NAME
       popen, pclose - pipe stream to or from a process

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdio.h>

       FILE *popen(const char *command, const char *type);
       int pclose(FILE *stream);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       popen(), pclose():
           _POSIX_C_SOURCE >= 2
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       The  popen()  function opens a process by creating a pipe, forking, and
       invoking the shell.  Since a pipe is by definition unidirectional,  the
       type  argument  may  specify only reading or writing, not both; the re‐
       sulting stream is correspondingly read-only or write-only.

       The command argument is a pointer to a null-terminated string  contain‐
       ing  a shell command line.  This command is passed to /bin/sh using the
       -c flag; interpretation, if any, is performed by the shell.

       The type argument is a pointer to a null-terminated string  which  must
       contain  either  the letter 'r' for reading or the letter 'w' for writ‐
       ing.  Since glibc 2.9, this argument can additionally include the  let‐
       ter  'e', which causes the close-on-exec flag (FD_CLOEXEC) to be set on
       the underlying file descriptor; see the description  of  the  O_CLOEXEC
       flag in open(2) for reasons why this may be useful.

       The  return  value  from popen() is a normal standard I/O stream in all
       respects save  that  it  must  be  closed  with  pclose()  rather  than
       fclose(3).   Writing  to  such a stream writes to the standard input of
       the command; the command's standard output is the same as that  of  the
       process  that called popen(), unless this is altered by the command it‐
       self.  Conversely, reading from the stream reads the command's standard
       output,  and  the  command's  standard input is the same as that of the
       process that called popen().

       Note that output popen() streams are block buffered by default.

       The pclose() function waits for the associated process to terminate and
       returns the exit status of the command as returned by wait4(2).

RETURN VALUE
       popen():  on  success,  returns a pointer to an open stream that can be
       used to read or write to the pipe; if  the  fork(2)  or  pipe(2)  calls
       fail, or if the function cannot allocate memory, NULL is returned.

       pclose():  on  success,  returns  the  exit  status  of the command; if
       wait4(2) returns an error, or some other error is detected, -1  is  re‐
       turned.

       On failure, both functions set errno to indicate the error.

ERRORS
       The popen() function does not set errno if memory allocation fails.  If
       the underlying fork(2) or pipe(2) fails, errno is set to  indicate  the
       error.   If  the  type  argument  is invalid, and this condition is de‐
       tected, errno is set to EINVAL.

       If pclose() cannot obtain the child status, errno is set to ECHILD.

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │popen(), pclose()                           │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
       The 'e' value for type is a Linux extension.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

CAVEATS
       Carefully read Caveats in system(3).

BUGS
       Since  the  standard  input  of a command opened for reading shares its
       seek offset with the process  that  called  popen(),  if  the  original
       process  has done a buffered read, the command's input position may not
       be as expected.  Similarly, the output from a command opened for  writ‐
       ing  may  become  intermingled  with that of the original process.  The
       latter can be avoided by calling fflush(3) before popen().

       Failure to execute the shell  is  indistinguishable  from  the  shell's
       failure  to  execute command, or an immediate exit of the command.  The
       only hint is an exit status of 127.

SEE ALSO
       sh(1), fork(2),  pipe(2),  wait4(2),  fclose(3),  fflush(3),  fopen(3),
       stdio(3), system(3)

Linux man-pages 6.04              2023-03-30                          popen(3)
POPEN(3P)                  POSIX Programmer's Manual                 POPEN(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       popen — initiate pipe streams to or from a process

SYNOPSIS
       #include <stdio.h>

       FILE *popen(const char *command, const char *mode);

DESCRIPTION
       The popen() function shall execute the command specified by the  string
       command.   It  shall  create a pipe between the calling program and the
       executed command, and shall return a pointer to a stream  that  can  be
       used to either read from or write to the pipe.

       The  environment of the executed command shall be as if a child process
       were created within the popen() call using the fork() function, and the
       child invoked the sh utility using the call:

           execl(shell path, "sh", "-c", command, (char *)0);

       where shell path is an unspecified pathname for the sh utility.

       The  popen()  function  shall  ensure  that  any  streams from previous
       popen() calls that remain open in the parent process are closed in  the
       new child process.

       The mode argument to popen() is a string that specifies I/O mode:

        1. If  mode is r, when the child process is started, its file descrip‐
           tor STDOUT_FILENO shall be the writable end of the  pipe,  and  the
           file descriptor fileno(stream) in the calling process, where stream
           is the stream pointer returned by popen(), shall  be  the  readable
           end of the pipe.

        2. If mode is w, when the child process is started its file descriptor
           STDIN_FILENO shall be the readable end of the pipe,  and  the  file
           descriptor  fileno(stream)  in the calling process, where stream is
           the stream pointer returned by popen(), shall be the  writable  end
           of the pipe.

        3. If mode is any other value, the result is unspecified.

       After  popen(),  both the parent and the child process shall be capable
       of executing independently before either terminates.

       Pipe streams are byte-oriented.

RETURN VALUE
       Upon successful completion, popen() shall return a pointer to  an  open
       stream  that  can  be  used to read or write to the pipe. Otherwise, it
       shall return a null pointer and may set errno to indicate the error.

ERRORS
       The popen() function shall fail if:

       EMFILE {STREAM_MAX} streams are currently open in the calling process.

       The popen() function may fail if:

       EMFILE {FOPEN_MAX} streams are currently open in the calling process.

       EINVAL The mode argument is invalid.

       The popen() function may also set errno values as described  by  fork()
       or pipe().

       The following sections are informative.

EXAMPLES
   Using popen() to Obtain a List of Files from the ls Utility
       The  following  example demonstrates the use of popen() and pclose() to
       execute the command ls* in order to obtain a list of files in the  cur‐
       rent directory:

           #include <stdio.h>
           ...

           FILE *fp;
           int status;
           char path[PATH_MAX];

           fp = popen("ls *", "r");
           if (fp == NULL)
               /* Handle error */;

           while (fgets(path, PATH_MAX, fp) != NULL)
               printf("%s", path);

           status = pclose(fp);
           if (status == -1) {
               /* Error reported by pclose() */
               ...
           } else {
               /* Use macros described under wait() to inspect `status' in order
                  to determine success/failure of command executed by popen() */
               ...
           }

APPLICATION USAGE
       Since  open  files are shared, a mode r command can be used as an input
       filter and a mode w command as an output filter.

       Buffered reading before opening an input filter may leave the  standard
       input  of  that  filter  mispositioned. Similar problems with an output
       filter may be prevented by careful buffer flushing; for  example,  with
       fflush().

       A stream opened by popen() should be closed by pclose().

       The  behavior  of  popen()  is specified for values of mode of r and w.
       Other modes such as rb and wb might be supported by specific  implemen‐
       tations, but these would not be portable features. Note that historical
       implementations of popen() only check to see if the first character  of
       mode  is  r.  Thus, a mode of robert the robot would be treated as mode
       r, and a mode of anything else would be treated as mode w.

       If the application calls waitpid() or  waitid()  with  a  pid  argument
       greater  than 0, and it still has a stream that was called with popen()
       open, it must ensure that pid does not refer to the process started  by
       popen().

       To  determine whether or not the environment specified in the Shell and
       Utilities volume of POSIX.1‐2017 is present, use the function call:

           sysconf(_SC_2_VERSION)

       (See sysconf()).

RATIONALE
       The popen() function should not be used by programs that have set  user
       (or  group) ID privileges. The fork() and exec family of functions (ex‐
       cept execlp() and execvp()), should be used instead. This prevents  any
       unforeseen manipulation of the environment of the user that could cause
       execution of commands not anticipated by the calling program.

       If the original and popen()ed processes both intend to read or write or
       read  and  write  a  common  file, and either will be using FILE-type C
       functions (fread(), fwrite(), and so on), the rules  for  sharing  file
       handles  must  be  observed (see Section 2.5.1, Interaction of File De‐
       scriptors and Standard I/O Streams).

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.5, Standard I/O Streams, fork(), pclose(), pipe(), sysconf(),
       system(), wait(), waitid()

       The Base Definitions volume of POSIX.1‐2017, <stdio.h>

       The Shell and Utilities volume of POSIX.1‐2017, sh

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                            POPEN(3P)
