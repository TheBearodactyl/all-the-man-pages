assert(3)                                                                                Library Functions Manual                                                                                assert(3)

NAME
       assert - abort the program if assertion is false

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <assert.h>

       void assert(scalar expression);

DESCRIPTION
       This macro can help programmers find bugs in their programs, or handle exceptional cases via a crash that will produce limited debugging output.

       If  expression  is false (i.e., compares equal to zero), assert() prints an error message to standard error and terminates the program by calling abort(3).  The error message includes the name of
       the file and function containing the assert() call, the source code line number of the call, and the text of the argument; something like:

           prog: some_file.c:16: some_func: Assertion `val == 0' failed.

       If the macro NDEBUG is defined at the moment <assert.h> was last included, the macro assert() generates no code, and hence does nothing at all.  It is not recommended to define  NDEBUG  if  using
       assert() to detect error conditions since the software may behave non-deterministically.

RETURN VALUE
       No value is returned.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │assert()                                                                                                                                                                │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       C89, C99, POSIX.1-2001.

       In C89, expression is required to be of type int and undefined behavior results if it is not, but in C99 it may have any scalar type.

BUGS
       assert() is implemented as a macro; if the expression tested has side-effects, program behavior will be different depending on whether NDEBUG is defined.  This may create Heisenbugs which go away
       when debugging is turned on.

SEE ALSO
       abort(3), assert_perror(3), exit(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                       assert(3)
ASSERT(3P)                                                                               POSIX Programmer's Manual                                                                              ASSERT(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       assert — insert program diagnostics

SYNOPSIS
       #include <assert.h>

       void assert(scalar expression);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       The  assert()  macro  shall insert diagnostics into programs; it shall expand to a void expression. When it is executed, if expression (which shall have a scalar type) is false (that is, compares
       equal to 0), assert() shall write information about the particular call that failed on stderr and shall call abort().

       The information written about the call that failed shall include the text of the argument, the name of the source file, the source file line number, and the name of the  enclosing  function;  the
       latter are, respectively, the values of the preprocessing macros __FILE__ and __LINE__ and of the identifier __func__.

       Forcing a definition of the name NDEBUG, either from the compiler command line or with the preprocessor control statement #define NDEBUG ahead of the #include <assert.h> statement, shall stop as‐
       sertions from being compiled into the program.

RETURN VALUE
       The assert() macro shall not return a value.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       abort(), stdin

       The Base Definitions volume of POSIX.1‐2017, <assert.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                         ASSERT(3P)
