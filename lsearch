lsearch(n)                                                                                 Tcl Built-In Commands                                                                                lsearch(n)

__________________________________________________________________________________________________________________________________________________________________________________________________________

NAME
       lsearch - See if a list contains a particular element

SYNOPSIS
       lsearch ?options? list pattern
__________________________________________________________________________________________________________________________________________________________________________________________________________

DESCRIPTION
       This command searches the elements of list to see if one of them matches pattern.  If so, the command returns the index of the first matching element (unless the options -all or -inline are spec‐
       ified.)  If not, the command returns -1 or (if options -all or -inline are specified) the empty string.  The option arguments indicates how the elements of the list are to be matched against pat‐
       tern and must have one of the values below:

   MATCHING STYLE OPTIONS
       If all matching style options are omitted, the default matching style is -glob.  If more than one matching style is specified, the last matching style given takes precedence.

       -exact Pattern is a literal string that is compared for exact equality against each list element.

       -glob  Pattern is a glob-style pattern which is matched against each list element using the same rules as the string match command.

       -regexp
              Pattern is treated as a regular expression and matched against each list element using the rules described in the re_syntax reference page.

       -sorted
              The  list  elements are in sorted order.  If this option is specified, lsearch will use a more efficient searching algorithm to search list.  If no other options are specified, list is as‐
              sumed to be sorted in increasing order, and to contain ASCII strings.  This option is mutually exclusive with -glob and -regexp, and is treated exactly like -exact when either -all or -not
              are specified.

   GENERAL MODIFIER OPTIONS
       These options may be given with all matching styles.

       -all   Changes the result to be the list of all matching indices (or all matching values if -inline is specified as well.) If indices are returned, the indices will be in numeric order. If values
              are returned, the order of the values will be the order of those values within the input list.

       -inline
              The matching value is returned instead of its index (or an empty string if no value matches.)  If -all is also specified, then the result of the command is the  list  of  all  values  that
              matched.

       -not   This negates the sense of the match, returning the index of the first non-matching value in the list.

       -start index
              The list is searched starting at position index.  The interpretation of the index value is the same as for the command string index, supporting simple index arithmetic and indices relative
              to the end of the list.

   CONTENTS DESCRIPTION OPTIONS
       These options describe how to interpret the items in the list being searched.  They are only meaningful when used with the -exact and -sorted options.  If more than one is specified, the last one
       takes precedence.  The default is -ascii.

       -ascii The list elements are to be examined as Unicode strings (the name is for backward-compatibility reasons.)

       -dictionary
              The  list elements are to be compared using dictionary-style comparisons (see lsort for a fuller description). Note that this only makes a meaningful difference from the -ascii option when
              the -sorted option is given, because values are only dictionary-equal when exactly equal.

       -integer
              The list elements are to be compared as integers.

       -nocase
              Causes comparisons to be handled in a case-insensitive manner.  Has no effect if combined with the -dictionary, -integer, or -real options.

       -real  The list elements are to be compared as floating-point values.

   SORTED LIST OPTIONS
       These options (only meaningful with the -sorted option) specify how the list is sorted.  If more than one is given, the last one takes precedence.  The default option is -increasing.

       -decreasing
              The list elements are sorted in decreasing order.  This option is only meaningful when used with -sorted.

       -increasing
              The list elements are sorted in increasing order.  This option is only meaningful when used with -sorted.

       -bisect
              Inexact search when the list elements are in sorted order. For an increasing list the last index where the element is less than or equal to the pattern is returned. For a  decreasing  list │
              the  last index where the element is greater than or equal to the pattern is returned. If the pattern is before the first element or the list is empty, -1 is returned.  This option implies │
              -sorted and cannot be used with either -all or -not.

   NESTED LIST OPTIONS
       These options are used to search lists of lists.  They may be used with any other options.

       -index indexList
              This option is designed for use when searching within nested lists.  The indexList argument gives a path of indices (much as might be used with the lindex or lset commands) within each el‐
              ement to allow the location of the term being matched against.

       -subindices
              If  this  option  is given, the index result from this command (or every index result when -all is also specified) will be a complete path (suitable for use with lindex or lset) within the
              overall list to the term found.  This option has no effect unless the -index is also specified, and is just a convenience short-cut.

EXAMPLES
       Basic searching:

              lsearch {a b c d e} c
                    → 2
              lsearch -all {a b c a b c} c
                    → 2 5

       Using lsearch to filter lists:

              lsearch -inline {a20 b35 c47} b*
                    → b35
              lsearch -inline -not {a20 b35 c47} b*
                    → a20
              lsearch -all -inline -not {a20 b35 c47} b*
                    → a20 c47
              lsearch -all -not {a20 b35 c47} b*
                    → 0 2

       This can even do a “set-like” removal operation:

              lsearch -all -inline -not -exact {a b c a d e a f g a} a
                    → b c d e f g

       Searching may start part-way through the list:

              lsearch -start 3 {a b c a b c} c
                    → 5

       It is also possible to search inside elements:

              lsearch -index 1 -all -inline {{a abc} {b bcd} {c cde}} *bc*
                    → {a abc} {b bcd}

SEE ALSO
       foreach(n), list(n), lappend(n), lindex(n), linsert(n), llength(n), lset(n), lsort(n), lrange(n), lreplace(n), string(n)

KEYWORDS
       binary search, linear search, list, match, pattern, regular expression, search, string

Tcl                                                                                                 8.6                                                                                         lsearch(n)
lsearch(3)                                                                               Library Functions Manual                                                                               lsearch(3)

NAME
       lfind, lsearch - linear search of an array

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <search.h>

       void *lfind(const void key[.size], const void base[.size * .nmemb],
                   size_t *nmemb, size_t size,
                   int(*compar)(const void [.size], const void [.size]));
       void *lsearch(const void key[.size], void base[.size * .nmemb],
                   size_t *nmemb, size_t size,
                   int(*compar)(const void [.size], const void [.size]));

DESCRIPTION
       lfind()  and  lsearch() perform a linear search for key in the array base which has *nmemb elements of size bytes each.  The comparison function referenced by compar is expected to have two argu‐
       ments which point to the key object and to an array member, in that order, and which returns zero if the key object matches the array member, and nonzero otherwise.

       If lsearch() does not find a matching element, then the key object is inserted at the end of the table, and *nmemb is incremented.  In particular, one should know that a matching element  exists,
       or that more room is available.

RETURN VALUE
       lfind() returns a pointer to a matching member of the array, or NULL if no match is found.  lsearch() returns a pointer to a matching member of the array, or to the newly added member if no match
       is found.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │lfind(), lsearch()                                                                                                                                                      │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, SVr4, 4.3BSD.  libc-4.6.27.

BUGS
       The naming is unfortunate.

SEE ALSO
       bsearch(3), hsearch(3), tsearch(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                      lsearch(3)
LSEARCH(3P)                                                                              POSIX Programmer's Manual                                                                             LSEARCH(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       lsearch, lfind — linear search and update

SYNOPSIS
       #include <search.h>

       void *lsearch(const void *key, void *base, size_t *nelp, size_t width,
           int (*compar)(const void *, const void *));
       void *lfind(const void *key, const void *base, size_t *nelp,
           size_t width, int (*compar)(const void *, const void *));

DESCRIPTION
       The lsearch() function shall linearly search the table and return a pointer into the table for the matching entry. If the entry does not occur, it shall be added at the end of the table. The  key
       argument points to the entry to be sought in the table. The base argument points to the first element in the table. The width argument is the size of an element in bytes. The nelp argument points
       to an integer containing the current number of elements in the table. The integer to which nelp points shall be incremented if the entry is added to the table. The compar  argument  points  to  a
       comparison  function  which the application shall supply (for example, strcmp()).  It is called with two arguments that point to the elements being compared. The application shall ensure that the
       function returns 0 if the elements are equal, and non-zero otherwise.

       The lfind() function shall be equivalent to lsearch(), except that if the entry is not found, it is not added to the table.  Instead, a null pointer is returned.

RETURN VALUE
       If the searched for entry is found, both lsearch() and lfind() shall return a pointer to it. Otherwise, lfind() shall return a null pointer and lsearch() shall return a pointer to the newly added
       element.

       Both functions shall return a null pointer in case of error.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
   Storing Strings in a Table
       This fragment reads in less than or equal to TABSIZE strings of length less than or equal to ELSIZE and stores them in a table, eliminating duplicates.

           #include <stdio.h>
           #include <string.h>
           #include <search.h>

           #define TABSIZE 50
           #define ELSIZE 120

           ...
               char line[ELSIZE], tab[TABSIZE][ELSIZE];
               size_t nel = 0;
               ...
               while (fgets(line, ELSIZE, stdin) != NULL && nel < TABSIZE)
                   (void) lsearch(line, tab, &nel,
                       ELSIZE, (int (*)(const void *, const void *)) strcmp);
               ...

   Finding a Matching Entry
       The following example finds any line that reads "Thisisatest.".

           #include <search.h>
           #include <string.h>
           ...
           char line[ELSIZE], tab[TABSIZE][ELSIZE];
           size_t nel = 0;
           char *findline;
           void *entry;

           findline = "This is a test.\n";

           entry = lfind(findline, tab, &nel, ELSIZE, (
               int (*)(const void *, const void *)) strcmp);

APPLICATION USAGE
       The comparison function need not compare every byte, so arbitrary data may be contained in the elements in addition to the values being compared.

       Undefined results can occur if there is not enough room in the table to add a new item.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       hcreate(), tdelete()

       The Base Definitions volume of POSIX.1‐2017, <search.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                        LSEARCH(3P)
