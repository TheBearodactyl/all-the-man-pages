SCHED_GETSCHEDULER(3P)     POSIX Programmer's Manual    SCHED_GETSCHEDULER(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       sched_getscheduler — get scheduling policy (REALTIME)

SYNOPSIS
       #include <sched.h>

       int sched_getscheduler(pid_t pid);

DESCRIPTION
       The sched_getscheduler() function shall return the scheduling policy of
       the process specified by pid.  If the value of pid is negative, the be‐
       havior of the sched_getscheduler() function is unspecified.

       The values that can be returned by sched_getscheduler() are defined  in
       the <sched.h> header.

       If  a  process  specified by pid exists, and if the calling process has
       permission, the scheduling policy shall be  returned  for  the  process
       whose process ID is equal to pid.

       If pid is zero, the scheduling policy shall be returned for the calling
       process.

RETURN VALUE
       Upon successful completion, the sched_getscheduler() function shall re‐
       turn  the scheduling policy of the specified process.  If unsuccessful,
       the function shall return -1 and set errno to indicate the error.

ERRORS
       The sched_getscheduler() function shall fail if:

       EPERM  The requesting process does not have permission to determine the
              scheduling policy of the specified process.

       ESRCH  No process can be found corresponding to that specified by pid.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       sched_getparam(), sched_setparam(), sched_setscheduler()

       The Base Definitions volume of POSIX.1‐2017, <sched.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017               SCHED_GETSCHEDULER(3P)
sched_setscheduler(2)         System Calls Manual        sched_setscheduler(2)

NAME
       sched_setscheduler,  sched_getscheduler  -  set and get scheduling pol‐
       icy/parameters

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <sched.h>

       int sched_setscheduler(pid_t pid, int policy,
                              const struct sched_param *param);
       int sched_getscheduler(pid_t pid);

DESCRIPTION
       The sched_setscheduler() system call sets both  the  scheduling  policy
       and  parameters  for  the  thread whose ID is specified in pid.  If pid
       equals zero, the scheduling policy and parameters of the calling thread
       will be set.

       The scheduling parameters are specified in the param argument, which is
       a pointer to a structure of the following form:

           struct sched_param {
               ...
               int sched_priority;
               ...
           };

       In the current implementation, the structure contains only  one  field,
       sched_priority.   The  interpretation  of param depends on the selected
       policy.

       Currently, Linux supports the following "normal" (i.e.,  non-real-time)
       scheduling policies as values that may be specified in policy:

       SCHED_OTHER   the standard round-robin time-sharing policy;

       SCHED_BATCH   for "batch" style execution of processes; and

       SCHED_IDLE    for running very low priority background jobs.

       For each of the above policies, param->sched_priority must be 0.

       Various "real-time" policies are also supported, for special time-crit‐
       ical applications that need precise  control  over  the  way  in  which
       runnable  threads  are selected for execution.  For the rules governing
       when a process may use these policies,  see  sched(7).   The  real-time
       policies that may be specified in policy are:

       SCHED_FIFO    a first-in, first-out policy; and

       SCHED_RR      a round-robin policy.

       For  each  of  the  above  policies,  param->sched_priority specifies a
       scheduling priority for the thread.  This is a number in the range  re‐
       turned   by   calling  sched_get_priority_min(2)  and  sched_get_prior‐
       ity_max(2) with the specified policy.  On Linux, these system calls re‐
       turn, respectively, 1 and 99.

       Since  Linux 2.6.32, the SCHED_RESET_ON_FORK flag can be ORed in policy
       when calling sched_setscheduler().  As a result of including this flag,
       children  created by fork(2) do not inherit privileged scheduling poli‐
       cies.  See sched(7) for details.

       sched_getscheduler() returns  the  current  scheduling  policy  of  the
       thread  identified by pid.  If pid equals zero, the policy of the call‐
       ing thread will be retrieved.

RETURN VALUE
       On   success,   sched_setscheduler()   returns   zero.    On   success,
       sched_getscheduler()  returns  the policy for the thread (a nonnegative
       integer).  On error, both calls return -1, and errno is set to indicate
       the error.

ERRORS
       EINVAL Invalid arguments: pid is negative or param is NULL.

       EINVAL (sched_setscheduler()) policy is not one of the recognized poli‐
              cies.

       EINVAL (sched_setscheduler()) param does not make sense for the  speci‐
              fied policy.

       EPERM  The calling thread does not have appropriate privileges.

       ESRCH  The thread whose ID is pid could not be found.

VERSIONS
       POSIX.1 does not detail the permissions that an unprivileged thread re‐
       quires in order to call sched_setscheduler(), and details  vary  across
       systems.   For example, the Solaris 7 manual page says that the real or
       effective user ID of the caller must match the real user ID or the save
       set-user-ID of the target.

       The  scheduling policy and parameters are in fact per-thread attributes
       on Linux.  The value returned from a call to gettid(2) can be passed in
       the  argument  pid.  Specifying pid as 0 will operate on the attributes
       of the calling thread, and passing the value returned from  a  call  to
       getpid(2)  will  operate  on  the  attributes of the main thread of the
       thread group.  (If you are  using  the  POSIX  threads  API,  then  use
       pthread_setschedparam(3),         pthread_getschedparam(3),         and
       pthread_setschedprio(3), instead of the sched_*(2) system calls.)

STANDARDS
       POSIX.1-2008 (but see BUGS below).

       SCHED_BATCH and SCHED_IDLE are Linux-specific.

HISTORY
       POSIX.1-2001.

NOTES
       Further details of the semantics of  all  of  the  above  "normal"  and
       "real-time"  scheduling  policies  can  be found in the sched(7) manual
       page.  That page also describes an additional  policy,  SCHED_DEADLINE,
       which is settable only via sched_setattr(2).

       POSIX  systems  on  which sched_setscheduler() and sched_getscheduler()
       are available define _POSIX_PRIORITY_SCHEDULING in <unistd.h>.

BUGS
       POSIX.1 says that on success, sched_setscheduler()  should  return  the
       previous  scheduling  policy.  Linux sched_setscheduler() does not con‐
       form to this requirement, since it always returns 0 on success.

SEE ALSO
       chrt(1), nice(2), sched_get_priority_max(2), sched_get_priority_min(2),
       sched_getaffinity(2), sched_getattr(2), sched_getparam(2),
       sched_rr_get_interval(2), sched_setaffinity(2), sched_setattr(2),
       sched_setparam(2), sched_yield(2), setpriority(2), capabilities(7),
       cpuset(7), sched(7)

Linux man-pages 6.04              2023-03-30             sched_setscheduler(2)
