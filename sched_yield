SCHED_YIELD(3P)            POSIX Programmer's Manual           SCHED_YIELD(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       sched_yield — yield the processor

SYNOPSIS
       #include <sched.h>

       int sched_yield(void);

DESCRIPTION
       The sched_yield() function shall force the running thread to relinquish
       the  processor  until  it again becomes the head of its thread list. It
       takes no arguments.

RETURN VALUE
       The sched_yield() function shall return 0 if it completes successfully;
       otherwise,  it shall return a value of -1 and set errno to indicate the
       error.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       The conceptual model for scheduling semantics in POSIX.1‐2008 defines a
       set of thread lists. This set of thread lists is always present regard‐
       less of the scheduling options supported by the  system.  On  a  system
       where the Process Scheduling option is not supported, portable applica‐
       tions should not make any assumptions regarding  whether  threads  from
       other processes will be on the same thread list.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       The Base Definitions volume of POSIX.1‐2017, <sched.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                      SCHED_YIELD(3P)
sched_yield(2)                System Calls Manual               sched_yield(2)

NAME
       sched_yield - yield the processor

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <sched.h>

       int sched_yield(void);

DESCRIPTION
       sched_yield()  causes  the  calling  thread to relinquish the CPU.  The
       thread is moved to the end of the queue for its static priority  and  a
       new thread gets to run.

RETURN VALUE
       On success, sched_yield() returns 0.  On error, -1 is returned, and er‐
       rno is set to indicate the error.

ERRORS
       In the Linux implementation, sched_yield() always succeeds.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

NOTES
       If the calling thread is the only thread in the highest  priority  list
       at that time, it will continue to run after a call to sched_yield().

       POSIX  systems on which sched_yield() is available define _POSIX_PRIOR‐
       ITY_SCHEDULING in <unistd.h>.

       Strategic calls to sched_yield()  can  improve  performance  by  giving
       other threads or processes a chance to run when (heavily) contended re‐
       sources (e.g., mutexes) have been released by the caller.  Avoid  call‐
       ing  sched_yield()  unnecessarily  or  inappropriately  (e.g., when re‐
       sources needed by other schedulable  threads  are  still  held  by  the
       caller),  since  doing  so will result in unnecessary context switches,
       which will degrade system performance.

       sched_yield() is intended for use with  real-time  scheduling  policies
       (i.e., SCHED_FIFO or SCHED_RR).  Use of sched_yield() with nondetermin‐
       istic scheduling policies such as SCHED_OTHER is unspecified  and  very
       likely means your application design is broken.

SEE ALSO
       sched(7)

Linux man-pages 6.04              2023-03-30                    sched_yield(2)
