std::multimap< _Key, _Tp, _Librstd::multimap<M_Key, _Tp, _Compare, _Alloc >(3)

NAME
       std::multimap< _Key, _Tp, _Compare, _Alloc > - A standard container
       made up of (key,value) pairs, which can be retrieved based on a key, in
       logarithmic time.

SYNOPSIS
       #include <map>

   Public Types
       typedef _Alloc allocator_type
       typedef _Rep_type::const_iterator const_iterator
       typedef _Alloc_traits::const_pointer const_pointer
       typedef _Alloc_traits::const_reference const_reference
       typedef _Rep_type::const_reverse_iterator const_reverse_iterator
       typedef _Rep_type::difference_type difference_type
       typedef _Rep_type::iterator iterator
       typedef _Compare key_compare
       typedef _Key key_type
       typedef _Tp mapped_type
       using node_type = typename _Rep_type::node_type
       typedef _Alloc_traits::pointer pointer
       typedef _Alloc_traits::reference reference
       typedef _Rep_type::reverse_iterator reverse_iterator
       typedef _Rep_type::size_type size_type
       typedef std::pair< const _Key, _Tp > value_type

   Public Member Functions
       multimap ()=default
           Default constructor creates no elements.
       template<typename _InputIterator > multimap (_InputIterator __first,
           _InputIterator __last)
           Builds a multimap from a range.
       template<typename _InputIterator > multimap (_InputIterator __first,
           _InputIterator __last, const _Compare &__comp, const allocator_type
           &__a=allocator_type())
           Builds a multimap from a range.
       template<typename _InputIterator > multimap (_InputIterator __first,
           _InputIterator __last, const allocator_type &__a)
           Allocator-extended range constructor.
       multimap (const _Compare &__comp, const allocator_type
           &__a=allocator_type())
           Creates a multimap with no elements.
       multimap (const allocator_type &__a)
           Allocator-extended default constructor.
       multimap (const multimap &)=default
           Multimap copy constructor.
       multimap (const multimap &__m, const __type_identity_t< allocator_type
           > &__a)
           Allocator-extended copy constructor.
       multimap (initializer_list< value_type > __l, const _Compare
           &__comp=_Compare(), const allocator_type &__a=allocator_type())
           Builds a multimap from an initializer_list.
       multimap (initializer_list< value_type > __l, const allocator_type
           &__a)
           Allocator-extended initialier-list constructor.
       multimap (multimap &&)=default
           Multimap move constructor.
       multimap (multimap &&__m, const __type_identity_t< allocator_type >
           &__a) noexcept(is_nothrow_copy_constructible< _Compare >::value
           &&_Alloc_traits::_S_always_equal())
           Allocator-extended move constructor.
       ~multimap ()=default
       const_iterator begin () const noexcept
       iterator begin () noexcept
       const_iterator cbegin () const noexcept
       const_iterator cend () const noexcept
       void clear () noexcept
       const_reverse_iterator crbegin () const noexcept
       const_reverse_iterator crend () const noexcept
       template<typename... _Args> iterator emplace (_Args &&... __args)
           Build and insert a std::pair into the multimap.
       template<typename... _Args> iterator emplace_hint (const_iterator
           __pos, _Args &&... __args)
           Builds and inserts a std::pair into the multimap.
       bool empty () const noexcept
       const_iterator end () const noexcept
       iterator end () noexcept
       size_type erase (const key_type &__x)
           Erases elements according to the provided key.
       iterator erase (const_iterator __first, const_iterator __last)
           Erases a [first,last) range of elements from a multimap.
       node_type extract (const key_type &__x)
           Extract a node.
       node_type extract (const_iterator __pos)
           Extract a node.
       allocator_type get_allocator () const noexcept
           Get a copy of the memory allocation object.
       template<typename _InputIterator > void insert (_InputIterator __first,
           _InputIterator __last)
           A template function that attempts to insert a range of elements.
       iterator insert (const_iterator __hint, node_type &&__nh)
           Re-insert an extracted node.
       void insert (initializer_list< value_type > __l)
           Attempts to insert a list of std::pairs into the multimap.
       iterator insert (node_type &&__nh)
           Re-insert an extracted node.
       key_compare key_comp () const
       size_type max_size () const noexcept
       template<typename _Cmp2 > void merge (map< _Key, _Tp, _Cmp2, _Alloc >
           &&__source)
       template<typename _Cmp2 > void merge (map< _Key, _Tp, _Cmp2, _Alloc >
           &__source)
       template<typename _Cmp2 > void merge (multimap< _Key, _Tp, _Cmp2,
           _Alloc > &&__source)
       template<typename _Cmp2 > void merge (multimap< _Key, _Tp, _Cmp2,
           _Alloc > &__source)
       multimap & operator= (const multimap &)=default
           Multimap assignment operator.
       multimap & operator= (initializer_list< value_type > __l)
           Multimap list assignment operator.
       multimap & operator= (multimap &&)=default
           Move assignment operator.
       const_reverse_iterator rbegin () const noexcept
       reverse_iterator rbegin () noexcept
       const_reverse_iterator rend () const noexcept
       reverse_iterator rend () noexcept
       size_type size () const noexcept
       void swap (multimap &__x) noexcept(/*conditional */)
           Swaps data with another multimap.
       value_compare value_comp () const

           iterator insert (const value_type &__x)
               Inserts a std::pair into the multimap.
           iterator insert (value_type &&__x)
               Inserts a std::pair into the multimap.
           template<typename _Pair > __enable_if_t< is_constructible<
               value_type, _Pair >::value, iterator > insert (_Pair &&__x)
               Inserts a std::pair into the multimap.

           iterator insert (const_iterator __position, const value_type &__x)
               Inserts a std::pair into the multimap.
           iterator insert (const_iterator __position, value_type &&__x)
               Inserts a std::pair into the multimap.
           template<typename _Pair > __enable_if_t< is_constructible<
               value_type, _Pair && >::value, iterator > insert
               (const_iterator __position, _Pair &&__x)
               Inserts a std::pair into the multimap.

           iterator erase (const_iterator __position)
               Erases an element from a multimap.
           _GLIBCXX_ABI_TAG_CXX11 iterator erase (iterator __position)
               Erases an element from a multimap.

           iterator find (const key_type &__x)
               Tries to locate an element in a multimap.
           template<typename _Kt > auto find (const _Kt &__x) ->
               decltype(_M_t._M_find_tr(__x))
               Tries to locate an element in a multimap.

           const_iterator find (const key_type &__x) const
               Tries to locate an element in a multimap.
           template<typename _Kt > auto find (const _Kt &__x) const ->
               decltype(_M_t._M_find_tr(__x))
               Tries to locate an element in a multimap.

           size_type count (const key_type &__x) const
               Finds the number of elements with given key.
           template<typename _Kt > auto count (const _Kt &__x) const ->
               decltype(_M_t._M_count_tr(__x))
               Finds the number of elements with given key.

           bool contains (const key_type &__x) const
               Finds whether an element with the given key exists.
           template<typename _Kt > auto contains (const _Kt &__x) const ->
               decltype(_M_t._M_find_tr(__x), void(), true)
               Finds whether an element with the given key exists.

           iterator lower_bound (const key_type &__x)
               Finds the beginning of a subsequence matching given key.
           template<typename _Kt > auto lower_bound (const _Kt &__x) ->
               decltype(iterator(_M_t._M_lower_bound_tr(__x)))
               Finds the beginning of a subsequence matching given key.

           const_iterator lower_bound (const key_type &__x) const
               Finds the beginning of a subsequence matching given key.
           template<typename _Kt > auto lower_bound (const _Kt &__x) const ->
               decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
               Finds the beginning of a subsequence matching given key.

           iterator upper_bound (const key_type &__x)
               Finds the end of a subsequence matching given key.
           template<typename _Kt > auto upper_bound (const _Kt &__x) ->
               decltype(iterator(_M_t._M_upper_bound_tr(__x)))
               Finds the end of a subsequence matching given key.

           const_iterator upper_bound (const key_type &__x) const
               Finds the end of a subsequence matching given key.
           template<typename _Kt > auto upper_bound (const _Kt &__x) const ->
               decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))
               Finds the end of a subsequence matching given key.

           std::pair< iterator, iterator > equal_range (const key_type &__x)
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) ->
               decltype(pair< iterator, iterator
               >(_M_t._M_equal_range_tr(__x)))
               Finds a subsequence matching given key.

           std::pair< const_iterator, const_iterator > equal_range (const
               key_type &__x) const
               Finds a subsequence matching given key.
           template<typename _Kt > auto equal_range (const _Kt &__x) const ->
               decltype(pair< const_iterator, const_iterator
               >(_M_t._M_equal_range_tr(__x)))
               Finds a subsequence matching given key.

   Friends
       template<typename _K1 , typename _T1 , typename _C1 , typename _A1 >
           bool operator< (const multimap< _K1, _T1, _C1, _A1 > &, const
           multimap< _K1, _T1, _C1, _A1 > &)
       template<typename _K1 , typename _T1 , typename _C1 , typename _A1 >
           bool operator== (const multimap< _K1, _T1, _C1, _A1 > &, const
           multimap< _K1, _T1, _C1, _A1 > &)
       template<typename , typename > struct std::_Rb_tree_merge_helper

Detailed Description
   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
       typename _Alloc = std::allocator<std::pair<const _Key, _Tp> >>
       class std::multimap< _Key, _Tp, _Compare, _Alloc >"A standard container
       made up of (key,value) pairs, which can be retrieved based on a key, in
       logarithmic time.

       Template Parameters
           _Key Type of key objects.
           _Tp Type of mapped objects.
           _Compare Comparison function object type, defaults to less<_Key>.
           _Alloc Allocator type, defaults to allocator<pair<const _Key, _Tp>.

       Meets the requirements of a container, a reversible container, and an
       associative container (using equivalent keys). For a multimap<Key,T>
       the key_type is Key, the mapped_type is T, and the value_type is
       std::pair<const Key,T>.

       Multimaps support bidirectional iterators.

       The private tree data is declared exactly the same way for map and
       multimap; the distinction is made entirely in how the tree functions
       are called (*_unique versus *_equal, same as the standard).

       Definition at line 99 of file map.

Member Typedef Documentation
   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Alloc std::multimap< _Key, _Tp, _Compare, _Alloc
       >::allocator_type
       Definition at line 106 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Rep_type::const_iterator std::multimap< _Key,
       _Tp, _Compare, _Alloc >::const_iterator
       Definition at line 166 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Alloc_traits::const_pointer std::multimap< _Key,
       _Tp, _Compare, _Alloc >::const_pointer
       Definition at line 162 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Alloc_traits::const_reference std::multimap<
       _Key, _Tp, _Compare, _Alloc >::const_reference
       Definition at line 164 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Rep_type::const_reverse_iterator std::multimap<
       _Key, _Tp, _Compare, _Alloc >::const_reverse_iterator
       Definition at line 170 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Rep_type::difference_type std::multimap< _Key,
       _Tp, _Compare, _Alloc >::difference_type
       Definition at line 168 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Rep_type::iterator std::multimap< _Key, _Tp,
       _Compare, _Alloc >::iterator
       Definition at line 165 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Compare std::multimap< _Key, _Tp, _Compare,
       _Alloc >::key_compare
       Definition at line 105 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Key std::multimap< _Key, _Tp, _Compare, _Alloc
       >::key_type
       Definition at line 102 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Tp std::multimap< _Key, _Tp, _Compare, _Alloc
       >::mapped_type
       Definition at line 103 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> using std::multimap< _Key, _Tp, _Compare, _Alloc
       >::node_type =  typename _Rep_type::node_type
       Definition at line 173 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Alloc_traits::pointer std::multimap< _Key, _Tp,
       _Compare, _Alloc >::pointer
       Definition at line 161 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Alloc_traits::reference std::multimap< _Key,
       _Tp, _Compare, _Alloc >::reference
       Definition at line 163 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Rep_type::reverse_iterator std::multimap< _Key,
       _Tp, _Compare, _Alloc >::reverse_iterator
       Definition at line 169 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef _Rep_type::size_type std::multimap< _Key, _Tp,
       _Compare, _Alloc >::size_type
       Definition at line 167 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> typedef std::pair<const _Key, _Tp> std::multimap< _Key,
       _Tp, _Compare, _Alloc >::value_type
       Definition at line 104 of file map.

Constructor & Destructor Documentation
   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::multimap< _Key, _Tp, _Compare, _Alloc >::multimap ()
       [default]
       Default constructor creates no elements.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::multimap< _Key, _Tp, _Compare, _Alloc >::multimap
       (const _Compare & __comp, const allocator_type & __a =
       allocator_type()) [inline],  [explicit]
       Creates a multimap with no elements.

       Parameters
           __comp A comparison object.
           __a An allocator object.

       Definition at line 194 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::multimap< _Key, _Tp, _Compare, _Alloc >::multimap
       (const multimap< _Key, _Tp, _Compare, _Alloc > &) [default]
       Multimap copy constructor. Whether the allocator is copied depends on
       the allocator traits.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::multimap< _Key, _Tp, _Compare, _Alloc >::multimap
       (multimap< _Key, _Tp, _Compare, _Alloc > &&) [default]
       Multimap move constructor. The newly-created multimap contains the
       exact contents of the moved instance. The moved instance is a valid,
       but unspecified multimap.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::multimap< _Key, _Tp, _Compare, _Alloc >::multimap
       (initializer_list< value_type > __l, const _Compare & __comp =
       _Compare(), const allocator_type & __a = allocator_type()) [inline]
       Builds a multimap from an initializer_list.

       Parameters
           __l An initializer_list.
           __comp A comparison functor.
           __a An allocator object.

       Create a multimap consisting of copies of the elements from the
       initializer_list. This is linear in N if the list is already sorted,
       and NlogN otherwise (where N is __l.size()).

       Definition at line 228 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::multimap< _Key, _Tp, _Compare, _Alloc >::multimap
       (const allocator_type & __a) [inline],  [explicit]
       Allocator-extended default constructor.

       Definition at line 236 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::multimap< _Key, _Tp, _Compare, _Alloc >::multimap
       (const multimap< _Key, _Tp, _Compare, _Alloc > & __m, const
       __type_identity_t< allocator_type > & __a) [inline]
       Allocator-extended copy constructor.

       Definition at line 240 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::multimap< _Key, _Tp, _Compare, _Alloc >::multimap
       (multimap< _Key, _Tp, _Compare, _Alloc > && __m, const
       __type_identity_t< allocator_type > & __a) [inline],  [noexcept]
       Allocator-extended move constructor.

       Definition at line 245 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::multimap< _Key, _Tp, _Compare, _Alloc >::multimap
       (initializer_list< value_type > __l, const allocator_type & __a)
       [inline]
       Allocator-extended initialier-list constructor.

       Definition at line 251 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _InputIterator > std::multimap< _Key,
       _Tp, _Compare, _Alloc >::multimap (_InputIterator __first,
       _InputIterator __last, const allocator_type & __a) [inline]
       Allocator-extended range constructor.

       Definition at line 257 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _InputIterator > std::multimap< _Key,
       _Tp, _Compare, _Alloc >::multimap (_InputIterator __first,
       _InputIterator __last) [inline]
       Builds a multimap from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.

       Create a multimap consisting of copies of the elements from
       [__first,__last). This is linear in N if the range is already sorted,
       and NlogN otherwise (where N is distance(__first,__last)).

       Definition at line 273 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _InputIterator > std::multimap< _Key,
       _Tp, _Compare, _Alloc >::multimap (_InputIterator __first,
       _InputIterator __last, const _Compare & __comp, const allocator_type &
       __a = allocator_type()) [inline]
       Builds a multimap from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.
           __comp A comparison functor.
           __a An allocator object.

       Create a multimap consisting of copies of the elements from
       [__first,__last). This is linear in N if the range is already sorted,
       and NlogN otherwise (where N is distance(__first,__last)).

       Definition at line 289 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::multimap< _Key, _Tp, _Compare, _Alloc >::~multimap
       () [default]
       The dtor only erases the elements, and note that if the elements
       themselves are pointers, the pointed-to memory is not touched in any
       way. Managing the pointer is the user's responsibility.

Member Function Documentation
   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::begin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first pair
       in the multimap. Iteration is done in ascending order according to the
       keys.

       Definition at line 364 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::begin () [inline],  [noexcept]
       Returns a read/write iterator that points to the first pair in the
       multimap. Iteration is done in ascending order according to the keys.

       Definition at line 355 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::cbegin () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first pair
       in the multimap. Iteration is done in ascending order according to the
       keys.

       Definition at line 428 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::cend () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       pair in the multimap. Iteration is done in ascending order according to
       the keys.

       Definition at line 437 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> void std::multimap< _Key, _Tp, _Compare, _Alloc >::clear
       () [inline],  [noexcept]
       Erases all elements in a multimap. Note that this function only erases
       the elements, and that if the elements themselves are pointers, the
       pointed-to memory is not touched in any way. Managing the pointer is
       the user's responsibility.

       Definition at line 812 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::multimap< _Key, _Tp,
       _Compare, _Alloc >::contains (const _Kt & __x) const ->
       decltype(_M_t._M_find_tr(__x), void(), true)
             [inline]"

       Finds whether an element with the given key exists.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           True if there is any element with the specified key.

       Definition at line 913 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> bool std::multimap< _Key, _Tp, _Compare, _Alloc
       >::contains (const key_type & __x) const [inline]
       Finds whether an element with the given key exists.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           True if there is any element with the specified key.

       Definition at line 908 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::multimap< _Key, _Tp,
       _Compare, _Alloc >::count (const _Kt & __x) const ->
       decltype(_M_t._M_count_tr(__x))
             [inline]"

       Finds the number of elements with given key.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           Number of elements with specified key.

       Definition at line 895 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> size_type std::multimap< _Key, _Tp, _Compare, _Alloc
       >::count (const key_type & __x) const [inline]
       Finds the number of elements with given key.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           Number of elements with specified key.

       Definition at line 889 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_reverse_iterator std::multimap< _Key, _Tp,
       _Compare, _Alloc >::crbegin () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       pair in the multimap. Iteration is done in descending order according
       to the keys.

       Definition at line 446 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_reverse_iterator std::multimap< _Key, _Tp,
       _Compare, _Alloc >::crend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first pair in the multimap. Iteration is done in descending
       order according to the keys.

       Definition at line 455 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename... _Args> iterator std::multimap< _Key,
       _Tp, _Compare, _Alloc >::emplace (_Args &&... __args) [inline]
       Build and insert a std::pair into the multimap.

       Parameters
           __args Arguments used to generate a new pair instance (see
           std::piecewise_contruct for passing arguments to each part of the
           pair constructor).

       Returns
           An iterator that points to the inserted (key,value) pair.

       This function builds and inserts a (key, value) pair into the multimap.
       Contrary to a std::map the multimap does not rely on unique keys and
       thus multiple pairs with the same key can be inserted.

       Insertion requires logarithmic time.

       Definition at line 495 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename... _Args> iterator std::multimap< _Key,
       _Tp, _Compare, _Alloc >::emplace_hint (const_iterator __pos, _Args
       &&... __args) [inline]
       Builds and inserts a std::pair into the multimap.

       Parameters
           __pos An iterator that serves as a hint as to where the pair should
           be inserted.
           __args Arguments used to generate a new pair instance (see
           std::piecewise_contruct for passing arguments to each part of the
           pair constructor).

       Returns
           An iterator that points to the inserted (key,value) pair.

       This function inserts a (key, value) pair into the multimap. Contrary
       to a std::map the multimap does not rely on unique keys and thus
       multiple pairs with the same key can be inserted. Note that the first
       parameter is only a hint and can potentially improve the performance of
       the insertion process. A bad hint would cause no gains in efficiency.

       For more on hinting, see:
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints

       Insertion requires logarithmic time (if the hint is not taken).

       Definition at line 522 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> bool std::multimap< _Key, _Tp, _Compare, _Alloc >::empty
       () const [inline],  [noexcept]
       Returns true if the multimap is empty.

       Definition at line 462 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::end () const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       pair in the multimap. Iteration is done in ascending order according to
       the keys.

       Definition at line 382 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::end () [inline],  [noexcept]
       Returns a read/write iterator that points one past the last pair in the
       multimap. Iteration is done in ascending order according to the keys.

       Definition at line 373 of file map.

       Referenced by std::multimap< _Key, _Tp, _Compare, _Alloc >::extract().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::multimap< _Key, _Tp,
       _Compare, _Alloc >::equal_range (const _Kt & __x) ->
       decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
             [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       Definition at line 1030 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::multimap< _Key, _Tp,
       _Compare, _Alloc >::equal_range (const _Kt & __x) const ->
       decltype(pair<const_iterator, const_iterator>(
                  _M_t._M_equal_range_tr(__x)))       [inline]"

       Finds a subsequence matching given key.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           Pair of read-only (constant) iterators that possibly points to the
           subsequence matching given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       Definition at line 1057 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::pair< iterator, iterator > std::multimap< _Key, _Tp,
       _Compare, _Alloc >::equal_range (const key_type & __x) [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           Pair of iterators that possibly points to the subsequence matching
           given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       Definition at line 1024 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> std::pair< const_iterator, const_iterator >
       std::multimap< _Key, _Tp, _Compare, _Alloc >::equal_range (const
       key_type & __x) const [inline]
       Finds a subsequence matching given key.

       Parameters
           __x Key of (key, value) pairs to be located.

       Returns
           Pair of read-only (constant) iterators that possibly points to the
           subsequence matching given key.

       This function is equivalent to

       std::make_pair(c.lower_bound(val),
                      c.upper_bound(val))

        (but is faster than making the calls separately).

       Definition at line 1051 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> size_type std::multimap< _Key, _Tp, _Compare, _Alloc
       >::erase (const key_type & __x) [inline]
       Erases elements according to the provided key.

       Parameters
           __x Key of element to be erased.

       Returns
           The number of elements erased.

       This function erases all elements located by the given key from a
       multimap. Note that this function only erases the element, and that if
       the element is itself a pointer, the pointed-to memory is not touched
       in any way. Managing the pointer is the user's responsibility.

       Definition at line 743 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::erase (const_iterator __first, const_iterator __last) [inline]
       Erases a [first,last) range of elements from a multimap.

       Parameters
           __first Iterator pointing to the start of the range to be erased.
           __last Iterator pointing to the end of the range to be erased .

       Returns
           The iterator __last.

       This function erases a sequence of elements from a multimap. Note that
       this function only erases the elements, and that if the elements
       themselves are pointers, the pointed-to memory is not touched in any
       way. Managing the pointer is the user's responsibility.

       Definition at line 764 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::erase (const_iterator __position) [inline]
       Erases an element from a multimap.

       Parameters
           __position An iterator pointing to the element to be erased.

       Returns
           An iterator pointing to the element immediately following position
           prior to the element being erased. If no such element exists, end()
           is returned.

       This function erases an element, pointed to by the given iterator, from
       a multimap. Note that this function only erases the element, and that
       if the element is itself a pointer, the pointed-to memory is not
       touched in any way. Managing the pointer is the user's responsibility.

       Definition at line 706 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> _GLIBCXX_ABI_TAG_CXX11 iterator std::multimap< _Key, _Tp,
       _Compare, _Alloc >::erase (iterator __position) [inline]
       Erases an element from a multimap.

       Parameters
           __position An iterator pointing to the element to be erased.

       Returns
           An iterator pointing to the element immediately following position
           prior to the element being erased. If no such element exists, end()
           is returned.

       This function erases an element, pointed to by the given iterator, from
       a multimap. Note that this function only erases the element, and that
       if the element is itself a pointer, the pointed-to memory is not
       touched in any way. Managing the pointer is the user's responsibility.

       Definition at line 712 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> node_type std::multimap< _Key, _Tp, _Compare, _Alloc
       >::extract (const key_type & __x) [inline]
       Extract a node.

       Definition at line 644 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> node_type std::multimap< _Key, _Tp, _Compare, _Alloc
       >::extract (const_iterator __pos) [inline]
       Extract a node.

       Definition at line 636 of file map.

       References std::multimap< _Key, _Tp, _Compare, _Alloc >::end().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::multimap< _Key, _Tp,
       _Compare, _Alloc >::find (const _Kt & __x) ->
       decltype(_M_t._M_find_tr(__x))
             [inline]"

       Tries to locate an element in a multimap.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after pair. If unsuccessful it returns the past-
       the-end ( end() ) iterator.

       Definition at line 853 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::multimap< _Key, _Tp,
       _Compare, _Alloc >::find (const _Kt & __x) const ->
       decltype(_M_t._M_find_tr(__x))
             [inline]"

       Tries to locate an element in a multimap.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Read-only (constant) iterator pointing to sought-after element, or
           end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns a constant iterator
       pointing to the sought after pair. If unsuccessful it returns the past-
       the-end ( end() ) iterator.

       Definition at line 877 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::find (const key_type & __x) [inline]
       Tries to locate an element in a multimap.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Iterator pointing to sought-after element, or end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns an iterator
       pointing to the sought after pair. If unsuccessful it returns the past-
       the-end ( end() ) iterator.

       Definition at line 847 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::find (const key_type & __x) const [inline]
       Tries to locate an element in a multimap.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Read-only (constant) iterator pointing to sought-after element, or
           end() if not found.

       This function takes a key and tries to locate the element with which
       the key matches. If successful the function returns a constant iterator
       pointing to the sought after pair. If unsuccessful it returns the past-
       the-end ( end() ) iterator.

       Definition at line 871 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> allocator_type std::multimap< _Key, _Tp, _Compare, _Alloc
       >::get_allocator () const [inline],  [noexcept]
       Get a copy of the memory allocation object.

       Definition at line 345 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _InputIterator > void std::multimap<
       _Key, _Tp, _Compare, _Alloc >::insert (_InputIterator __first,
       _InputIterator __last) [inline]
       A template function that attempts to insert a range of elements.

       Parameters
           __first Iterator pointing to the start of the range to be inserted.
           __last Iterator pointing to the end of the range.

       Complexity similar to that of the range constructor.

       Definition at line 617 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Pair > __enable_if_t<
       is_constructible< value_type, _Pair >::value, iterator > std::multimap<
       _Key, _Tp, _Compare, _Alloc >::insert (_Pair && __x) [inline]
       Inserts a std::pair into the multimap.

       Parameters
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the inserted (key,value) pair.

       This function inserts a (key, value) pair into the multimap. Contrary
       to a std::map the multimap does not rely on unique keys and thus
       multiple pairs with the same key can be inserted.

       Insertion requires logarithmic time.

       Definition at line 555 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::insert (const value_type & __x) [inline]
       Inserts a std::pair into the multimap.

       Parameters
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the inserted (key,value) pair.

       This function inserts a (key, value) pair into the multimap. Contrary
       to a std::map the multimap does not rely on unique keys and thus
       multiple pairs with the same key can be inserted.

       Insertion requires logarithmic time.

       Definition at line 543 of file map.

       Referenced by std::multimap< _Key, _Tp, _Compare, _Alloc >::insert().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::insert (const_iterator __hint, node_type && __nh) [inline]
       Re-insert an extracted node.

       Definition at line 654 of file map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Pair > __enable_if_t<
       is_constructible< value_type, _Pair && >::value, iterator >
       std::multimap< _Key, _Tp, _Compare, _Alloc >::insert (const_iterator
       __position, _Pair && __x) [inline]
       Inserts a std::pair into the multimap.

       Parameters
           __position An iterator that serves as a hint as to where the pair
           should be inserted.
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the inserted (key,value) pair.

       This function inserts a (key, value) pair into the multimap. Contrary
       to a std::map the multimap does not rely on unique keys and thus
       multiple pairs with the same key can be inserted. Note that the first
       parameter is only a hint and can potentially improve the performance of
       the insertion process. A bad hint would cause no gains in efficiency.

       For more on hinting, see:
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints

       Insertion requires logarithmic time (if the hint is not taken).

       Definition at line 598 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::insert (const_iterator __position, const value_type & __x) [inline]
       Inserts a std::pair into the multimap.

       Parameters
           __position An iterator that serves as a hint as to where the pair
           should be inserted.
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the inserted (key,value) pair.

       This function inserts a (key, value) pair into the multimap. Contrary
       to a std::map the multimap does not rely on unique keys and thus
       multiple pairs with the same key can be inserted. Note that the first
       parameter is only a hint and can potentially improve the performance of
       the insertion process. A bad hint would cause no gains in efficiency.

       For more on hinting, see:
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints

       Insertion requires logarithmic time (if the hint is not taken).

       Definition at line 583 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::insert (const_iterator __position, value_type && __x) [inline]
       Inserts a std::pair into the multimap.

       Parameters
           __position An iterator that serves as a hint as to where the pair
           should be inserted.
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the inserted (key,value) pair.

       This function inserts a (key, value) pair into the multimap. Contrary
       to a std::map the multimap does not rely on unique keys and thus
       multiple pairs with the same key can be inserted. Note that the first
       parameter is only a hint and can potentially improve the performance of
       the insertion process. A bad hint would cause no gains in efficiency.

       For more on hinting, see:
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints

       Insertion requires logarithmic time (if the hint is not taken).

       Definition at line 593 of file map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> void std::multimap< _Key, _Tp, _Compare, _Alloc >::insert
       (initializer_list< value_type > __l) [inline]
       Attempts to insert a list of std::pairs into the multimap.

       Parameters
           __l A std::initializer_list<value_type> of pairs to be inserted.

       Complexity similar to that of the range constructor.

       Definition at line 629 of file map.

       References std::multimap< _Key, _Tp, _Compare, _Alloc >::insert().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::insert (node_type && __nh) [inline]
       Re-insert an extracted node.

       Definition at line 649 of file map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::insert (value_type && __x) [inline]
       Inserts a std::pair into the multimap.

       Parameters
           __x Pair to be inserted (see std::make_pair for easy creation of
           pairs).

       Returns
           An iterator that points to the inserted (key,value) pair.

       This function inserts a (key, value) pair into the multimap. Contrary
       to a std::map the multimap does not rely on unique keys and thus
       multiple pairs with the same key can be inserted.

       Insertion requires logarithmic time.

       Definition at line 550 of file map.

       References std::move().

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> key_compare std::multimap< _Key, _Tp, _Compare, _Alloc
       >::key_comp () const [inline]
       Returns the key comparison object out of which the multimap was
       constructed.

       Definition at line 821 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::multimap< _Key, _Tp,
       _Compare, _Alloc >::lower_bound (const _Kt & __x) ->
       decltype(iterator(_M_t._M_lower_bound_tr(__x)))
             [inline]"

       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Iterator pointing to first element equal to or greater than key, or
           end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 938 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::multimap< _Key, _Tp,
       _Compare, _Alloc >::lower_bound (const _Kt & __x) const ->
       decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
             [inline]"

       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Read-only (constant) iterator pointing to first element equal to or
           greater than key, or end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful the iterator will point to
       the next greatest element or, if no such greater element exists, to
       end().

       Definition at line 963 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::lower_bound (const key_type & __x) [inline]
       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Iterator pointing to first element equal to or greater than key, or
           end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful it returns an iterator
       pointing to the first element that has a greater value than given key
       or end() if no such element exists.

       Definition at line 932 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::lower_bound (const key_type & __x) const [inline]
       Finds the beginning of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Read-only (constant) iterator pointing to first element equal to or
           greater than key, or end().

       This function returns the first element of a subsequence of elements
       that matches the given key. If unsuccessful the iterator will point to
       the next greatest element or, if no such greater element exists, to
       end().

       Definition at line 957 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> size_type std::multimap< _Key, _Tp, _Compare, _Alloc
       >::max_size () const [inline],  [noexcept]
       Returns the maximum size of the multimap.

       Definition at line 472 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Cmp2 > void std::multimap< _Key, _Tp,
       _Compare, _Alloc >::merge (map< _Key, _Tp, _Cmp2, _Alloc > && __source)
       [inline]
       Definition at line 683 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Cmp2 > void std::multimap< _Key, _Tp,
       _Compare, _Alloc >::merge (map< _Key, _Tp, _Cmp2, _Alloc > & __source)
       [inline]
       Definition at line 675 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Cmp2 > void std::multimap< _Key, _Tp,
       _Compare, _Alloc >::merge (multimap< _Key, _Tp, _Cmp2, _Alloc > &&
       __source) [inline]
       Definition at line 670 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Cmp2 > void std::multimap< _Key, _Tp,
       _Compare, _Alloc >::merge (multimap< _Key, _Tp, _Cmp2, _Alloc > &
       __source) [inline]
       Definition at line 662 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> multimap & std::multimap< _Key, _Tp, _Compare, _Alloc
       >::operator= (const multimap< _Key, _Tp, _Compare, _Alloc > &)
       [default]
       Multimap assignment operator. Whether the allocator is copied depends
       on the allocator traits.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> multimap & std::multimap< _Key, _Tp, _Compare, _Alloc
       >::operator= (initializer_list< value_type > __l) [inline]
       Multimap list assignment operator.

       Parameters
           __l An initializer_list.

       This function fills a multimap with copies of the elements in the
       initializer list __l.

       Note that the assignment completely changes the multimap and that the
       resulting multimap's size is the same as the number of elements
       assigned.

       Definition at line 336 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> multimap & std::multimap< _Key, _Tp, _Compare, _Alloc
       >::operator= (multimap< _Key, _Tp, _Compare, _Alloc > &&) [default]
       Move assignment operator.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_reverse_iterator std::multimap< _Key, _Tp,
       _Compare, _Alloc >::rbegin () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       pair in the multimap. Iteration is done in descending order according
       to the keys.

       Definition at line 400 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> reverse_iterator std::multimap< _Key, _Tp, _Compare,
       _Alloc >::rbegin () [inline],  [noexcept]
       Returns a read/write reverse iterator that points to the last pair in
       the multimap. Iteration is done in descending order according to the
       keys.

       Definition at line 391 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_reverse_iterator std::multimap< _Key, _Tp,
       _Compare, _Alloc >::rend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first pair in the multimap. Iteration is done in descending
       order according to the keys.

       Definition at line 418 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> reverse_iterator std::multimap< _Key, _Tp, _Compare,
       _Alloc >::rend () [inline],  [noexcept]
       Returns a read/write reverse iterator that points to one before the
       first pair in the multimap. Iteration is done in descending order
       according to the keys.

       Definition at line 409 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> size_type std::multimap< _Key, _Tp, _Compare, _Alloc
       >::size () const [inline],  [noexcept]
       Returns the size of the multimap.

       Definition at line 467 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> void std::multimap< _Key, _Tp, _Compare, _Alloc >::swap
       (multimap< _Key, _Tp, _Compare, _Alloc > & __x) [inline],  [noexcept]
       Swaps data with another multimap.

       Parameters
           __x A multimap of the same element and allocator types.

       This exchanges the elements between two multimaps in constant time. (It
       is only swapping a pointer, an integer, and an instance of the Compare
       type (which itself is often stateless and empty), so it should be quite
       fast.) Note that the global std::swap() function is specialized such
       that std::swap(m1,m2) will feed to this function.

       Whether the allocators are swapped depends on the allocator traits.

       Definition at line 801 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::multimap< _Key, _Tp,
       _Compare, _Alloc >::upper_bound (const _Kt & __x) ->
       decltype(iterator(_M_t._M_upper_bound_tr(__x)))
             [inline]"

       Finds the end of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Iterator pointing to the first element greater than key, or end().

       Definition at line 983 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename _Kt > auto std::multimap< _Key, _Tp,
       _Compare, _Alloc >::upper_bound (const _Kt & __x) const ->
       decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))
             [inline]"

       Finds the end of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Read-only (constant) iterator pointing to first iterator greater
           than key, or end().

       Definition at line 1003 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::upper_bound (const key_type & __x) [inline]
       Finds the end of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Iterator pointing to the first element greater than key, or end().

       Definition at line 977 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> const_iterator std::multimap< _Key, _Tp, _Compare, _Alloc
       >::upper_bound (const key_type & __x) const [inline]
       Finds the end of a subsequence matching given key.

       Parameters
           __x Key of (key, value) pair to be located.

       Returns
           Read-only (constant) iterator pointing to first iterator greater
           than key, or end().

       Definition at line 997 of file map.

   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> value_compare std::multimap< _Key, _Tp, _Compare, _Alloc
       >::value_comp () const [inline]
       Returns a value comparison object, built from the key comparison object
       out of which the multimap was constructed.

       Definition at line 829 of file map.

Friends And Related Function Documentation
   template<typename _Key , typename _Tp , typename _Compare  =
       std::less<_Key>, typename _Alloc  = std::allocator<std::pair<const
       _Key, _Tp> >> template<typename , typename > friend struct
       std::_Rb_tree_merge_helper [friend]
       Definition at line 658 of file map.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                      std::multimap<3_Key, _Tp, _Compare, _Alloc >(3)
