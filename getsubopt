getsubopt(3)                                                                             Library Functions Manual                                                                             getsubopt(3)

NAME
       getsubopt - parse suboption arguments from a string

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdlib.h>

       int getsubopt(char **restrict optionp, char *const *restrict tokens,
                     char **restrict valuep);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       getsubopt():
           _XOPEN_SOURCE >= 500
               || /* Since glibc 2.12: */ _POSIX_C_SOURCE >= 200809L

DESCRIPTION
       getsubopt() parses the list of comma-separated suboptions provided in optionp.  (Such a suboption list is typically produced when getopt(3) is used to parse a command line; see for example the -o
       option of mount(8).)  Each suboption may include an associated value, which is separated from the suboption name by an equal sign.  The following is an example of the kind of string that might be
       passed in optionp:

           ro,name=xyz

       The tokens argument is a pointer to a NULL-terminated array of pointers to the tokens that getsubopt() will look for in optionp.  The tokens should be distinct, null-terminated strings containing
       at least one character, with no embedded equal signs or commas.

       Each call to getsubopt() returns information about the next unprocessed suboption in optionp.  The first equal sign in a suboption (if any) is interpreted as a separator between the name and  the
       value  of  that  suboption.  The value extends to the next comma, or (for the last suboption) to the end of the string.  If the name of the suboption matches a known name from tokens, and a value
       string was found, getsubopt() sets *valuep to the address of that string.  The first comma in optionp is overwritten with a null byte, so *valuep is precisely the "value string" for  that  subop‐
       tion.

       If the suboption is recognized, but no value string was found, *valuep is set to NULL.

       When getsubopt() returns, optionp points to the next suboption, or to the null byte ('\0') at the end of the string if the last suboption was just processed.

RETURN VALUE
       If  the  first  suboption  in  optionp  is recognized, getsubopt() returns the index of the matching suboption element in tokens.  Otherwise, -1 is returned and *valuep is the entire name[=value]
       string.

       Since *optionp is changed, the first suboption before the call to getsubopt() is not (necessarily) the same as the first suboption after getsubopt().

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │getsubopt()                                                                                                                                                             │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

NOTES
       Since getsubopt() overwrites any commas it finds in the string *optionp, that string must be writable; it cannot be a string constant.

EXAMPLES
       The following program expects suboptions following a "-o" option.

       #define _XOPEN_SOURCE 500
       #include <stdio.h>
       #include <stdlib.h>

       #include <assert.h>

       int
       main(int argc, char *argv[])
       {
           enum {
               RO_OPT = 0,
               RW_OPT,
               NAME_OPT
           };
           char *const token[] = {
               [RO_OPT]   = "ro",
               [RW_OPT]   = "rw",
               [NAME_OPT] = "name",
               NULL
           };
           char *subopts;
           char *value;
           int opt;

           int readonly = 0;
           int readwrite = 0;
           char *name = NULL;
           int errfnd = 0;

           while ((opt = getopt(argc, argv, "o:")) != -1) {
               switch (opt) {
               case 'o':
                   subopts = optarg;
                   while (*subopts != '\0' && !errfnd) {

                       switch (getsubopt(&subopts, token, &value)) {
                       case RO_OPT:
                           readonly = 1;
                           break;

                       case RW_OPT:
                           readwrite = 1;
                           break;

                       case NAME_OPT:
                           if (value == NULL) {
                               fprintf(stderr,
                                       "Missing value for suboption '%s'\n",
                                       token[NAME_OPT]);
                               errfnd = 1;
                               continue;
                           }

                           name = value;
                           break;

                       default:
                           fprintf(stderr,
                                   "No match found for token: /%s/\n", value);
                           errfnd = 1;
                           break;
                       }
                   }
                   if (readwrite && readonly) {
                       fprintf(stderr,
                               "Only one of '%s' and '%s' can be specified\n",
                               token[RO_OPT], token[RW_OPT]);
                       errfnd = 1;
                   }
                   break;

               default:
                   errfnd = 1;
               }
           }

           if (errfnd || argc == 1) {
               fprintf(stderr, "\nUsage: %s -o <suboptstring>\n", argv[0]);
               fprintf(stderr,
                       "suboptions are 'ro', 'rw', and 'name=<value>'\n");
               exit(EXIT_FAILURE);
           }

           /* Remainder of program... */

           exit(EXIT_SUCCESS);
       }

SEE ALSO
       getopt(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                    getsubopt(3)
GETSUBOPT(3P)                                                                            POSIX Programmer's Manual                                                                           GETSUBOPT(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       getsubopt — parse suboption arguments from a string

SYNOPSIS
       #include <stdlib.h>

       int getsubopt(char **optionp, char * const *keylistp, char **valuep);

DESCRIPTION
       The getsubopt() function shall parse suboption arguments in a flag argument. Such options often result from the use of getopt().

       The getsubopt() argument optionp is a pointer to a pointer to the option argument string. The suboption arguments shall be separated by <comma> characters and each may consist of either a  single
       token, or a token-value pair separated by an <equals-sign>.

       The  keylistp argument shall be a pointer to a vector of strings. The end of the vector is identified by a null pointer. Each entry in the vector is one of the possible tokens that might be found
       in *optionp. Since <comma> characters delimit suboption arguments in optionp, they should not appear in any of the strings pointed to by keylistp.  Similarly, because an <equals-sign> separates a
       token from its value, the application should not include an <equals-sign> in any of the strings pointed to by keylistp.  The getsubopt() function shall not modify the keylistp vector.

       The valuep argument is the address of a value string pointer.

       If  a  <comma> appears in optionp, it shall be interpreted as a suboption separator. After <comma> characters have been processed, if there are one or more <equals-sign> characters in a suboption
       string, the first <equals-sign> in any suboption string shall be interpreted as a separator between a token and a value. Subsequent <equals-sign> characters in a suboption string shall be  inter‐
       preted as part of the value.

       If  the  string  at *optionp contains only one suboption argument (equivalently, no <comma> characters), getsubopt() shall update *optionp to point to the null character at the end of the string.
       Otherwise, it shall isolate the suboption argument by replacing the <comma> separator with a null character, and shall update *optionp to point to the start of the next suboption argument. If the
       suboption argument has an associated value (equivalently, contains an <equals-sign>), getsubopt() shall update *valuep to point to the value's first character.  Otherwise, it shall set *valuep to
       a null pointer. The calling application may use this information to determine whether the presence or absence of a value for the suboption is an error.

       Additionally, when getsubopt() fails to match the suboption argument with a token in the keylistp array, the calling application should decide if this is an error, or if the  unrecognized  option
       should be processed in another way.

RETURN VALUE
       The getsubopt() function shall return the index of the matched token string, or -1 if no token strings were matched.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
   Parsing Suboptions
       The following example uses the getsubopt() function to parse a value argument in the optarg external variable returned by a call to getopt().

           #include <stdio.h>
           #include <stdlib.h>
           #include <unistd.h>

           int do_all;
           const char *type;
           int read_size;
           int write_size;
           int read_only;

           enum
           {
               RO_OPTION = 0,
               RW_OPTION,
               READ_SIZE_OPTION,
               WRITE_SIZE_OPTION
           };

           const char *mount_opts[] =
           {
               [RO_OPTION] = "ro",
               [RW_OPTION] = "rw",
               [READ_SIZE_OPTION] = "rsize",
               [WRITE_SIZE_OPTION] = "wsize",
               NULL
           };

           int
           main(int argc, char *argv[])
           {
               char *subopts, *value;
               int opt;

               while ((opt = getopt(argc, argv, "at:o:")) != -1)
                   switch(opt)
                       {
                       case 'a':
                           do_all = 1;
                           break;
                       case 't':
                           type = optarg;
                           break;
                       case 'o':
                           subopts = optarg;
                           while (*subopts != ' ')
                           {
                               char *saved = subopts;
                               switch(getsubopt(&subopts, (char **)mount_opts,
                                   &value))
                               {
                               case RO_OPTION:
                                   read_only = 1;
                                   break;
                               case RW_OPTION:
                                   read_only = 0;
                                   break;
                               case READ_SIZE_OPTION:
                                   if (value == NULL)
                                       abort();
                                   read_size = atoi(value);
                                   break;
                               case WRITE_SIZE_OPTION:
                                   if (value == NULL)
                                       abort();
                                   write_size = atoi(value);
                                   break;
                               default:
                                   /* Unknown suboption. */
                                   printf("Unknown suboption `%s'\n", saved);
                                   abort();
                               }
                           }
                           break;
                       default:
                           abort();
                       }

               /* Do the real work. */

               return 0;
           }

       If the above example is invoked with:

           program -o ro,rsize=512

       then after option parsing, the variable do_all will be 0, type will be a null pointer, read_size will be 512, write_size will be 0, and read_only will be 1. If it is invoked with:

           program -o oops

       it will print:

           "Unknown suboption `oops'"

       before aborting.

APPLICATION USAGE
       The  value  of *valuep when getsubopt() returns -1 is unspecified. Historical implementations provide various incompatible extensions to allow an application to access the suboption text that was
       not found in the keylistp array.

RATIONALE
       The keylistp argument of getsubopt() is typed as char * const * to match historical practice. However, the standard is clear that implementations will not modify either the array or  the  strings
       contained in the array, as if the argument had been typed const char * const *.

FUTURE DIRECTIONS
       None.

SEE ALSO
       getopt()

       The Base Definitions volume of POSIX.1‐2017, <stdlib.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                      GETSUBOPT(3P)
