SCHED_RR_GET_INTERVAL(3P)  POSIX Programmer's Manual SCHED_RR_GET_INTERVAL(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       sched_rr_get_interval — get execution time limits (REALTIME)

SYNOPSIS
       #include <sched.h>

       int sched_rr_get_interval(pid_t pid, struct timespec *interval);

DESCRIPTION
       The sched_rr_get_interval() function shall update the  timespec  struc‐
       ture  referenced by the interval argument to contain the current execu‐
       tion time limit (that is, time quantum) for the  process  specified  by
       pid.   If pid is zero, the current execution time limit for the calling
       process shall be returned.

RETURN VALUE
       If successful, the sched_rr_get_interval() function shall return  zero.
       Otherwise,  it shall return a value of -1 and set errno to indicate the
       error.

ERRORS
       The sched_rr_get_interval() function shall fail if:

       ESRCH  No process can be found corresponding to that specified by pid.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       sched_getparam(), sched_get_priority_max(), sched_getscheduler(),
       sched_setparam(), sched_setscheduler()

       The Base Definitions volume of POSIX.1‐2017, <sched.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017            SCHED_RR_GET_INTERVAL(3P)
sched_rr_get_interval(2)      System Calls Manual     sched_rr_get_interval(2)

NAME
       sched_rr_get_interval - get the SCHED_RR interval for the named process

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <sched.h>

       int sched_rr_get_interval(pid_t pid, struct timespec *tp);

DESCRIPTION
       sched_rr_get_interval()  writes  into the timespec(3) structure pointed
       to by tp the round-robin time quantum for  the  process  identified  by
       pid.  The specified process should be running under the SCHED_RR sched‐
       uling policy.

       If pid is zero, the time quantum for the  calling  process  is  written
       into *tp.

RETURN VALUE
       On  success,  sched_rr_get_interval()  returns  0.  On error, -1 is re‐
       turned, and errno is set to indicate the error.

ERRORS
       EFAULT Problem with copying information to user space.

       EINVAL Invalid pid.

       ENOSYS The system call is not yet implemented (only on rather old  ker‐
              nels).

       ESRCH  Could not find a process with the ID pid.

VERSIONS
   Linux
       Linux  3.9  added  a  new  mechanism  for  adjusting  (and viewing) the
       SCHED_RR quantum: the /proc/sys/kernel/sched_rr_timeslice_ms  file  ex‐
       poses  the quantum as a millisecond value, whose default is 100.  Writ‐
       ing 0 to this file resets the quantum to the default value.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

   Linux
       POSIX does not specify any mechanism for controlling the  size  of  the
       round-robin  time quantum.  Older Linux kernels provide a (nonportable)
       method of doing this.  The quantum can be controlled by  adjusting  the
       process's nice value (see setpriority(2)).  Assigning a negative (i.e.,
       high) nice value results in a  longer  quantum;  assigning  a  positive
       (i.e., low) nice value results in a shorter quantum.  The default quan‐
       tum is 0.1 seconds; the degree to which changing the nice value affects
       the quantum has varied somewhat across kernel versions.  This method of
       adjusting the quantum was removed starting with Linux 2.6.24.

NOTES
       POSIX systems on  which  sched_rr_get_interval()  is  available  define
       _POSIX_PRIORITY_SCHEDULING in <unistd.h>.

SEE ALSO
       timespec(3), sched(7)

Linux man-pages 6.04              2023-03-30          sched_rr_get_interval(2)
