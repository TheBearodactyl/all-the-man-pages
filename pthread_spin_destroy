pthread_spin_init(3)       Library Functions Manual       pthread_spin_init(3)

NAME
       pthread_spin_init,  pthread_spin_destroy - initialize or destroy a spin
       lock

LIBRARY
       POSIX threads library (libpthread, -lpthread)

SYNOPSIS
       #include <pthread.h>

       int pthread_spin_init(pthread_spinlock_t *lock, int pshared);
       int pthread_spin_destroy(pthread_spinlock_t *lock);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       pthread_spin_init(), pthread_spin_destroy():
           _POSIX_C_SOURCE >= 200112L

DESCRIPTION
       General note: Most programs should use mutexes instead of  spin  locks.
       Spin  locks are primarily useful in conjunction with real-time schedul‐
       ing policies.  See NOTES.

       The pthread_spin_init() function allocates any resources  required  for
       the  use  of the spin lock referred to by lock and initializes the lock
       to be in the unlocked state.  The pshared argument must have one of the
       following values:

       PTHREAD_PROCESS_PRIVATE
              The  spin  lock is to be operated on only by threads in the same
              process as the thread that calls pthread_spin_init().  (Attempt‐
              ing  to  share  the spin lock between processes results in unde‐
              fined behavior.)

       PTHREAD_PROCESS_SHARED
              The spin lock may be operated on by any thread  in  any  process
              that  has  access  to  the memory containing the lock (i.e., the
              lock may be in a shared memory object that is shared among  mul‐
              tiple processes).

       Calling  pthread_spin_init()  on a spin lock that has already been ini‐
       tialized results in undefined behavior.

       The pthread_spin_destroy() function destroys a  previously  initialized
       spin  lock,  freeing  any  resources that were allocated for that lock.
       Destroying a spin lock that has not been previously been initialized or
       destroying  a  spin lock while another thread holds the lock results in
       undefined behavior.

       Once a spin lock has been destroyed, performing any  operation  on  the
       lock  other than once more initializing it with pthread_spin_init() re‐
       sults in undefined behavior.

       The result  of  performing  operations  such  as  pthread_spin_lock(3),
       pthread_spin_unlock(3), and pthread_spin_destroy() on copies of the ob‐
       ject referred to by lock is undefined.

RETURN VALUE
       On success, there functions return zero.  On failure,  they  return  an
       error number.  In the event that pthread_spin_init() fails, the lock is
       not initialized.

ERRORS
       pthread_spin_init() may fail with the following errors:

       EAGAIN The system has insufficient resources to initialize a  new  spin
              lock.

       ENOMEM Insufficient memory to initialize the spin lock.

STANDARDS
       POSIX.1-2008.

HISTORY
       glibc 2.2.  POSIX.1-2001.

       Support for process-shared spin locks is a POSIX option.  The option is
       supported in the glibc implementation.

NOTES
       Spin locks should be employed in conjunction with real-time  scheduling
       policies  (SCHED_FIFO,  or  possibly SCHED_RR).  Use of spin locks with
       nondeterministic scheduling policies such as SCHED_OTHER probably indi‐
       cates  a design mistake.  The problem is that if a thread operating un‐
       der such a policy is scheduled off the CPU while it holds a spin  lock,
       then  other threads will waste time spinning on the lock until the lock
       holder is once more rescheduled and releases the lock.

       If threads create a deadlock  situation  while  employing  spin  locks,
       those threads will spin forever consuming CPU time.

       User-space spin locks are not applicable as a general locking solution.
       They are, by definition, prone to priority inversion and unbounded spin
       times.  A programmer using spin locks must be exceptionally careful not
       only in the code, but also in terms  of  system  configuration,  thread
       placement, and priority assignment.

SEE ALSO
       pthread_mutex_init(3), pthread_mutex_lock(3), pthread_spin_lock(3),
       pthread_spin_unlock(3), pthreads(7)

Linux man-pages 6.04              2023-03-30              pthread_spin_init(3)
PTHREAD_SPIN_DESTROY(3P)   POSIX Programmer's Manual  PTHREAD_SPIN_DESTROY(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       pthread_spin_destroy, pthread_spin_init — destroy or initialize a  spin
       lock object

SYNOPSIS
       #include <pthread.h>

       int pthread_spin_destroy(pthread_spinlock_t *lock);
       int pthread_spin_init(pthread_spinlock_t *lock, int pshared);

DESCRIPTION
       The  pthread_spin_destroy() function shall destroy the spin lock refer‐
       enced by lock and release any resources used by the lock. The effect of
       subsequent use of the lock is undefined until the lock is reinitialized
       by another call to pthread_spin_init().  The results are  undefined  if
       pthread_spin_destroy()  is  called  when a thread holds the lock, or if
       this function is called with an uninitialized thread spin lock.

       The pthread_spin_init() function shall allocate any resources  required
       to  use  the spin lock referenced by lock and initialize the lock to an
       unlocked state.

       If the Thread Process-Shared Synchronization option  is  supported  and
       the  value  of  pshared  is  PTHREAD_PROCESS_SHARED, the implementation
       shall permit the spin lock to be operated upon by any thread  that  has
       access  to  the  memory where the spin lock is allocated, even if it is
       allocated in memory that is shared by multiple processes.

       See Section 2.9.9, Synchronization Object Copies and  Alternative  Map‐
       pings for further requirements.

       The  results  are undefined if pthread_spin_init() is called specifying
       an already initialized spin lock. The results are undefined if  a  spin
       lock is used without first being initialized.

       If  the pthread_spin_init() function fails, the lock is not initialized
       and the contents of lock are undefined.

       Only the object referenced by lock may be used for performing  synchro‐
       nization.

       The  result  of  referring  to  copies  of  that  object  in  calls  to
       pthread_spin_destroy(), pthread_spin_lock(), pthread_spin_trylock(), or
       pthread_spin_unlock() is undefined.

RETURN VALUE
       Upon  successful  completion, these functions shall return zero; other‐
       wise, an error number shall be returned to indicate the error.

ERRORS
       The pthread_spin_init() function shall fail if:

       EAGAIN The system lacks the necessary resources to  initialize  another
              spin lock.

       ENOMEM Insufficient memory exists to initialize the lock.

       These functions shall not return an error code of [EINTR].

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       If an implementation detects that the value specified by the lock argu‐
       ment to pthread_spin_destroy() does not refer to  an  initialized  spin
       lock object, it is recommended that the function should fail and report
       an [EINVAL] error.

       If an implementation detects that the value specified by the lock argu‐
       ment  to  pthread_spin_destroy()  or  pthread_spin_init()  refers  to a
       locked spin lock object, or detects that the  value  specified  by  the
       lock  argument  to pthread_spin_init() refers to an already initialized
       spin lock object, it is recommended that the function should  fail  and
       report an [EBUSY] error.

FUTURE DIRECTIONS
       None.

SEE ALSO
       pthread_spin_lock(), pthread_spin_unlock()

       The Base Definitions volume of POSIX.1‐2017, <pthread.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017             PTHREAD_SPIN_DESTROY(3P)
