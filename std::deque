std::deque< _Tp, _Alloc >(3Library Functions Manuastd::deque< _Tp, _Alloc >(3)

NAME
       std::deque< _Tp, _Alloc > - A standard container using fixed-size
       memory allocation and constant-time manipulation of elements at either
       end.

SYNOPSIS
       #include <deque>

       Inherits std::_Deque_base< _Tp, _Alloc >.

   Public Types
       typedef _Alloc allocator_type
       typedef _Base::const_iterator const_iterator
       typedef _Alloc_traits::const_pointer const_pointer
       typedef _Alloc_traits::const_reference const_reference
       typedef std::reverse_iterator< const_iterator > const_reverse_iterator
       typedef ptrdiff_t difference_type
       typedef _Base::iterator iterator
       typedef _Alloc_traits::pointer pointer
       typedef _Alloc_traits::reference reference
       typedef std::reverse_iterator< iterator > reverse_iterator
       typedef size_t size_type
       typedef _Tp value_type

   Public Member Functions
       deque ()=default
           Creates a deque with no elements.
       template<typename _InputIterator , typename  =
           std::_RequireInputIter<_InputIterator>> deque (_InputIterator
           __first, _InputIterator __last, const allocator_type
           &__a=allocator_type())
           Builds a deque from a range.
       deque (const allocator_type &__a)
           Creates a deque with no elements.
       deque (const deque &__x)
           Deque copy constructor.
       deque (const deque &__x, const __type_identity_t< allocator_type >
           &__a)
           Copy constructor with alternative allocator.
       deque (deque &&)=default
           Deque move constructor.
       deque (deque &&__x, const __type_identity_t< allocator_type > &__a)
           Move constructor with alternative allocator.
       deque (initializer_list< value_type > __l, const allocator_type
           &__a=allocator_type())
           Builds a deque from an initializer list.
       deque (size_type __n, const allocator_type &__a=allocator_type())
           Creates a deque with default constructed elements.
       deque (size_type __n, const value_type &__value, const allocator_type
           &__a=allocator_type())
           Creates a deque with copies of an exemplar element.
       ~deque ()
       template<typename _InputIterator , typename  =
           std::_RequireInputIter<_InputIterator>> void assign (_InputIterator
           __first, _InputIterator __last)
           Assigns a range to a deque.
       void assign (initializer_list< value_type > __l)
           Assigns an initializer list to a deque.
       void assign (size_type __n, const value_type &__val)
           Assigns a given value to a deque.
       reference at (size_type __n)
           Provides access to the data contained in the deque.
       const_reference at (size_type __n) const
           Provides access to the data contained in the deque.
       const_reference back () const noexcept
       reference back () noexcept
       const_iterator begin () const noexcept
       iterator begin () noexcept
       const_iterator cbegin () const noexcept
       const_iterator cend () const noexcept
       void clear () noexcept
       const_reverse_iterator crbegin () const noexcept
       const_reverse_iterator crend () const noexcept
       template<typename... _Args> iterator emplace (const_iterator
           __position, _Args &&... __args)
           Inserts an object in deque before specified iterator.
       template<typename... _Args> reference emplace_back (_Args &&... __args)
       template<typename... _Args> reference emplace_front (_Args &&...
           __args)
       bool empty () const noexcept
       const_iterator end () const noexcept
       iterator end () noexcept
       iterator erase (const_iterator __first, const_iterator __last)
           Remove a range of elements.
       iterator erase (const_iterator __position)
           Remove element at given position.
       const_reference front () const noexcept
       reference front () noexcept
       allocator_type get_allocator () const noexcept
           Get a copy of the memory allocation object.
       iterator insert (const_iterator __p, initializer_list< value_type >
           __l)
           Inserts an initializer list into the deque.
       template<typename _InputIterator , typename  =
           std::_RequireInputIter<_InputIterator>> iterator insert
           (const_iterator __position, _InputIterator __first, _InputIterator
           __last)
           Inserts a range into the deque.
       iterator insert (const_iterator __position, const value_type &__x)
           Inserts given value into deque before specified iterator.
       iterator insert (const_iterator __position, size_type __n, const
           value_type &__x)
           Inserts a number of copies of given data into the deque.
       iterator insert (const_iterator __position, value_type &&__x)
           Inserts given rvalue into deque before specified iterator.
       size_type max_size () const noexcept
       deque & operator= (const deque &__x)
           Deque assignment operator.
       deque & operator= (deque &&__x)
           noexcept(_Alloc_traits::_S_always_equal())
           Deque move assignment operator.
       deque & operator= (initializer_list< value_type > __l)
           Assigns an initializer list to a deque.
       const_reference operator[] (size_type __n) const noexcept
           Subscript access to the data contained in the deque.
       reference operator[] (size_type __n) noexcept
           Subscript access to the data contained in the deque.
       void pop_back () noexcept
           Removes last element.
       void pop_front () noexcept
           Removes first element.
       void push_back (const value_type &__x)
           Add data to the end of the deque.
       void push_back (value_type &&__x)
       void push_front (const value_type &__x)
           Add data to the front of the deque.
       void push_front (value_type &&__x)
       const_reverse_iterator rbegin () const noexcept
       reverse_iterator rbegin () noexcept
       const_reverse_iterator rend () const noexcept
       reverse_iterator rend () noexcept
       void resize (size_type __new_size)
           Resizes the deque to the specified number of elements.
       void resize (size_type __new_size, const value_type &__x)
           Resizes the deque to the specified number of elements.
       void shrink_to_fit () noexcept
       size_type size () const noexcept
       void swap (deque &__x) noexcept
           Swaps data with another deque.

   Protected Types
       enum { _S_initial_map_size }
       typedef __gnu_cxx::__alloc_traits< _Map_alloc_type > _Map_alloc_traits
       typedef _Alloc_traits::template rebind< _Ptr >::other _Map_alloc_type
       typedef _Alloc_traits::pointer _Ptr
       typedef _Alloc_traits::const_pointer _Ptr_const

   Protected Member Functions
       template<typename _ForwardIterator > void _M_assign_aux
           (_ForwardIterator __first, _ForwardIterator __last,
           std::forward_iterator_tag)
       template<typename _InputIterator > void _M_assign_aux (_InputIterator
           __first, _InputIterator __last, std::input_iterator_tag)
       void _M_deallocate_map (_Map_pointer __p, size_t __n) noexcept
       void _M_default_append (size_type __n)
       void _M_default_initialize ()
       template<typename _Alloc1 > void _M_destroy_data (iterator __first,
           iterator __last, const _Alloc1 &)
       void _M_destroy_data (iterator __first, iterator __last, const
           std::allocator< _Tp > &)
       void _M_destroy_data_aux (iterator __first, iterator __last)
       iterator _M_erase (iterator __first, iterator __last)
       iterator _M_erase (iterator __pos)
       void _M_erase_at_begin (iterator __pos)
       void _M_erase_at_end (iterator __pos)
       void _M_fill_assign (size_type __n, const value_type &__val)
       void _M_fill_initialize (const value_type &__value)
           Fills the deque with copies of value.
       void _M_fill_insert (iterator __pos, size_type __n, const value_type
           &__x)
       _Map_alloc_type _M_get_map_allocator () const noexcept
       template<typename... _Args> iterator _M_insert_aux (iterator __pos,
           _Args &&... __args)
       template<typename _ForwardIterator > void _M_insert_aux (iterator
           __pos, _ForwardIterator __first, _ForwardIterator __last, size_type
           __n)
       void _M_insert_aux (iterator __pos, size_type __n, const value_type
           &__x)
       void _M_move_assign1 (deque &&__x, false_type)
       void _M_move_assign1 (deque &&__x, true_type) noexcept
       void _M_move_assign2 (deque &&__x, false_type)
       void _M_move_assign2 (deque &&__x, true_type)
       void _M_range_check (size_type __n) const
           Safety check used only from at().
       template<typename _ForwardIterator > void _M_range_insert_aux (iterator
           __pos, _ForwardIterator __first, _ForwardIterator __last,
           std::forward_iterator_tag)
       template<typename _InputIterator > void _M_range_insert_aux (iterator
           __pos, _InputIterator __first, _InputIterator __last,
           std::input_iterator_tag)
       template<typename... _Args> void _M_replace_map (_Args &&... __args)
       bool _M_shrink_to_fit ()

           template<typename _InputIterator > void _M_range_initialize
               (_InputIterator __first, _InputIterator __last,
               std::input_iterator_tag)
               Fills the deque with whatever is in [first,last).
           template<typename _ForwardIterator > void _M_range_initialize
               (_ForwardIterator __first, _ForwardIterator __last,
               std::forward_iterator_tag)
               Fills the deque with whatever is in [first,last).

           template<typename... _Args> void _M_push_back_aux (_Args &&...
               __args)
               Helper functions for push_* and pop_*.
           template<typename... _Args> void _M_push_front_aux (_Args &&...
               __args)
               Helper functions for push_* and pop_*.
           void _M_pop_back_aux ()
               Helper functions for push_* and pop_*.
           void _M_pop_front_aux ()
               Helper functions for push_* and pop_*.

           iterator _M_reserve_elements_at_front (size_type __n)
               Memory-handling helpers for the previous internal insert
               functions.
           iterator _M_reserve_elements_at_back (size_type __n)
               Memory-handling helpers for the previous internal insert
               functions.
           void _M_new_elements_at_front (size_type __new_elements)
               Memory-handling helpers for the previous internal insert
               functions.
           void _M_new_elements_at_back (size_type __new_elements)
               Memory-handling helpers for the previous internal insert
               functions.

           void _M_reserve_map_at_back (size_type __nodes_to_add=1)
               Memory-handling helpers for the major map.
           void _M_reserve_map_at_front (size_type __nodes_to_add=1)
               Memory-handling helpers for the major map.
           void _M_reallocate_map (size_type __nodes_to_add, bool
               __add_at_front)
               Memory-handling helpers for the major map.

   Static Protected Member Functions
       static size_t _S_check_init_len (size_t __n, const allocator_type &__a)
       static size_type _S_max_size (const _Tp_alloc_type &__a) noexcept

Detailed Description
   template<typename _Tp, typename _Alloc = std::allocator<_Tp>>
       class std::deque< _Tp, _Alloc >"A standard container using fixed-size
       memory allocation and constant-time manipulation of elements at either
       end.

       Template Parameters
           _Tp Type of element.
           _Alloc Allocator type, defaults to allocator<_Tp>.

       Meets the requirements of a container, a reversible container, and a
       sequence, including the optional sequence requirements.

       In previous HP/SGI versions of deque, there was an extra template
       parameter so users could control the node size. This extension turned
       out to violate the C++ standard (it can be detected using template
       template parameters), and it was removed.

       Here's how a deque<Tp> manages memory. Each deque has 4 members:

       • Tp** _M_map

       • size_t _M_map_size

       • iterator _M_start, _M_finish

       map_size is at least 8. map is an array of map_size pointers-to-nodes.
       (The name map has nothing to do with the std::map class, and nodes
       should not be confused with std::list's usage of node.)

       A node has no specific type name as such, but it is referred to as node
       in this file. It is a simple array-of-Tp. If Tp is very large, there
       will be one Tp element per node (i.e., an array of one). For non-huge
       Tp's, node size is inversely related to Tp size: the larger the Tp, the
       fewer Tp's will fit in a node. The goal here is to keep the total size
       of a node relatively small and constant over different Tp's, to improve
       allocator efficiency.

       Not every pointer in the map array will point to a node. If the initial
       number of elements in the deque is small, the /middle/ map pointers
       will be valid, and the ones at the edges will be unused. This same
       situation will arise as the map grows: available map pointers, if any,
       will be on the ends. As new nodes are created, only a subset of the
       map's pointers need to be copied outward.

       Class invariants:

       • For any nonsingular iterator i:

         • i.node points to a member of the map array. (Yes, you read that
           correctly: i.node does not actually point to a node.) The member of
           the map array is what actually points to the node.

         • i.first == *(i.node) (This points to the node (first Tp element).)

         • i.last == i.first + node_size

         • i.cur is a pointer in the range [i.first, i.last). NOTE: the
           implication of this is that i.cur is always a dereferenceable
           pointer, even if i is a past-the-end iterator.

       • Start and Finish are always nonsingular iterators. NOTE: this means
         that an empty deque must have one node, a deque with <N elements
         (where N is the node buffer size) must have one node, a deque with N
         through (2N-1) elements must have two nodes, etc.

       • For every node other than start.node and finish.node, every element
         in the node is an initialized object. If start.node == finish.node,
         then [start.cur, finish.cur) are initialized objects, and the
         elements outside that range are uninitialized storage. Otherwise,
         [start.cur, start.last) and [finish.first, finish.cur) are
         initialized objects, and [start.first, start.cur) and [finish.cur,
         finish.last) are uninitialized storage.

       • [map, map + map_size) is a valid, non-empty range.

       • [start.node, finish.node] is a valid range contained within [map, map
         + map_size).

       • A pointer in the range [map, map + map_size) points to an allocated
         node if and only if the pointer is in the range [start.node,
         finish.node].

       Here's the magic: nothing in deque is aware of the discontiguous
       storage!

       The memory setup and layout occurs in the parent, _Base, and the
       iterator class is entirely responsible for leaping from one node to the
       next. All the implementation routines for deque itself work only
       through the start and finish iterators. This keeps the routines simple
       and sane, and we can use other standard algorithms as well.

       Definition at line 788 of file deque.

Member Typedef Documentation
   template<typename _Tp , typename _Alloc > typedef
       __gnu_cxx::__alloc_traits<_Map_alloc_type> std::_Deque_base< _Tp,
       _Alloc >::_Map_alloc_traits [protected],  [inherited]
       Definition at line 447 of file deque.

   template<typename _Tp , typename _Alloc > typedef _Alloc_traits::template
       rebind<_Ptr>::other std::_Deque_base< _Tp, _Alloc >::_Map_alloc_type
       [protected],  [inherited]
       Definition at line 446 of file deque.

   template<typename _Tp , typename _Alloc > typedef _Alloc_traits::pointer
       std::_Deque_base< _Tp, _Alloc >::_Ptr [protected],  [inherited]
       Definition at line 441 of file deque.

   template<typename _Tp , typename _Alloc > typedef
       _Alloc_traits::const_pointer std::_Deque_base< _Tp, _Alloc
       >::_Ptr_const [protected],  [inherited]
       Definition at line 442 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Alloc std::deque< _Tp, _Alloc >::allocator_type
       Definition at line 825 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Base::const_iterator std::deque< _Tp, _Alloc >::const_iterator
       Definition at line 820 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Alloc_traits::const_pointer std::deque< _Tp, _Alloc >::const_pointer
       Definition at line 816 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Alloc_traits::const_reference std::deque< _Tp, _Alloc
       >::const_reference
       Definition at line 818 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       std::reverse_iterator<const_iterator> std::deque< _Tp, _Alloc
       >::const_reverse_iterator
       Definition at line 821 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       ptrdiff_t std::deque< _Tp, _Alloc >::difference_type
       Definition at line 824 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Base::iterator std::deque< _Tp, _Alloc >::iterator
       Definition at line 819 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Alloc_traits::pointer std::deque< _Tp, _Alloc >::pointer
       Definition at line 815 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       _Alloc_traits::reference std::deque< _Tp, _Alloc >::reference
       Definition at line 817 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       std::reverse_iterator<iterator> std::deque< _Tp, _Alloc
       >::reverse_iterator
       Definition at line 822 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef
       size_t std::deque< _Tp, _Alloc >::size_type
       Definition at line 823 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> typedef _Tp
       std::deque< _Tp, _Alloc >::value_type
       Definition at line 814 of file deque.

Member Enumeration Documentation
   template<typename _Tp , typename _Alloc > anonymous enum [protected],
       [inherited]
       Definition at line 611 of file deque.

Constructor & Destructor Documentation
   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::deque<
       _Tp, _Alloc >::deque () [default]
       Creates a deque with no elements.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::deque<
       _Tp, _Alloc >::deque (const allocator_type & __a) [inline],  [explicit]
       Creates a deque with no elements.

       Parameters
           __a An allocator object.

       Definition at line 865 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::deque<
       _Tp, _Alloc >::deque (size_type __n, const allocator_type & __a =
       allocator_type()) [inline],  [explicit]
       Creates a deque with default constructed elements.

       Parameters
           __n The number of elements to initially create.
           __a An allocator.

       This constructor fills the deque with n default constructed elements.

       Definition at line 878 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::deque<
       _Tp, _Alloc >::deque (size_type __n, const value_type & __value, const
       allocator_type & __a = allocator_type()) [inline]
       Creates a deque with copies of an exemplar element.

       Parameters
           __n The number of elements to initially create.
           __value An element to copy.
           __a An allocator.

       This constructor fills the deque with __n copies of __value.

       Definition at line 890 of file deque.

       References std::deque< _Tp, _Alloc >::_M_fill_initialize().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::deque<
       _Tp, _Alloc >::deque (const deque< _Tp, _Alloc > & __x) [inline]
       Deque copy constructor.

       Parameters
           __x A deque of identical element and allocator types.

       The newly-created deque uses a copy of the allocator object used by __x
       (unless the allocator traits dictate a different object).

       Definition at line 917 of file deque.

       References std::deque< _Tp, _Alloc >::begin(), and std::deque< _Tp,
       _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::deque<
       _Tp, _Alloc >::deque (deque< _Tp, _Alloc > &&) [default]
       Deque move constructor. The newly-created deque contains the exact
       contents of the moved instance. The contents of the moved instance are
       a valid, but unspecified deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::deque<
       _Tp, _Alloc >::deque (const deque< _Tp, _Alloc > & __x, const
       __type_identity_t< allocator_type > & __a) [inline]
       Copy constructor with alternative allocator.

       Definition at line 936 of file deque.

       References std::deque< _Tp, _Alloc >::begin(), and std::deque< _Tp,
       _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::deque<
       _Tp, _Alloc >::deque (deque< _Tp, _Alloc > && __x, const
       __type_identity_t< allocator_type > & __a) [inline]
       Move constructor with alternative allocator.

       Definition at line 943 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::deque<
       _Tp, _Alloc >::deque (initializer_list< value_type > __l, const
       allocator_type & __a = allocator_type()) [inline]
       Builds a deque from an initializer list.

       Parameters
           __l An initializer_list.
           __a An allocator object.

       Create a deque consisting of copies of the elements in the
       initializer_list __l.

       This will call the element type's copy constructor N times (where N is
       __l.size()) and do no memory reallocation.

       Definition at line 976 of file deque.

       References std::deque< _Tp, _Alloc >::_M_range_initialize().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> std::deque< _Tp, _Alloc
       >::deque (_InputIterator __first, _InputIterator __last, const
       allocator_type & __a = allocator_type()) [inline]
       Builds a deque from a range.

       Parameters
           __first An input iterator.
           __last An input iterator.
           __a An allocator object.

       Create a deque consisting of copies of the elements from [__first,
       __last).

       If the iterators are forward, bidirectional, or random-access, then
       this will call the elements' copy constructor N times (where N is
       distance(__first,__last)) and do no memory reallocation. But if only
       input iterators are used, then this will do at most 2N calls to the
       copy constructor, and logN memory reallocations.

       Definition at line 1003 of file deque.

       References std::__iterator_category(), and std::deque< _Tp, _Alloc
       >::_M_range_initialize().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> std::deque<
       _Tp, _Alloc >::~deque () [inline]
       The dtor only erases the elements, and note that if the elements
       themselves are pointers, the pointed-to memory is not touched in any
       way. Managing the pointer is the user's responsibility.

       Definition at line 1027 of file deque.

       References std::deque< _Tp, _Alloc >::begin(), and std::deque< _Tp,
       _Alloc >::end().

Member Function Documentation
   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _ForwardIterator > void std::deque< _Tp, _Alloc
       >::_M_assign_aux (_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag) [inline],  [protected]
       Definition at line 1956 of file deque.

   template<typename _Tp , class _Alloc > template<typename _InputIterator >
       void deque::_M_assign_aux (_InputIterator __first, _InputIterator
       __last, std::input_iterator_tag) [protected]
       Definition at line 291 of file deque.tcc.

   template<typename _Tp , typename _Alloc > void std::_Deque_base< _Tp,
       _Alloc >::_M_deallocate_map (_Map_pointer __p, size_t __n) [inline],
       [protected],  [noexcept],  [inherited]
       Definition at line 601 of file deque.

   template<typename _Tp , typename _Alloc > void deque::_M_default_append
       (size_type __n) [protected]
       Definition at line 350 of file deque.tcc.

   template<typename _Tp , typename _Alloc > void deque::_M_default_initialize
       [protected]
       Definition at line 69 of file deque.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _Alloc1 > void std::deque< _Tp, _Alloc
       >::_M_destroy_data (iterator __first, iterator __last, const _Alloc1 &)
       [inline],  [protected]
       Definition at line 2083 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::_M_destroy_data (iterator __first, iterator
       __last, const std::allocator< _Tp > &) [inline],  [protected]
       Definition at line 2087 of file deque.

   template<typename _Tp , typename _Alloc > void deque::_M_destroy_data_aux
       (iterator __first, iterator __last) [protected]
       Definition at line 859 of file deque.tcc.

   template<typename _Tp , typename _Alloc > deque< _Tp, _Alloc >::iterator
       deque::_M_erase (iterator __first, iterator __last) [protected]
       Definition at line 258 of file deque.tcc.

   template<typename _Tp , typename _Alloc > deque< _Tp, _Alloc >::iterator
       deque::_M_erase (iterator __pos) [protected]
       Definition at line 235 of file deque.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::_M_erase_at_begin (iterator __pos) [inline],
       [protected]
       Definition at line 2096 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::_M_erase_at_end (iterator __pos) [inline],
       [protected]
       Definition at line 2106 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::_M_fill_assign (size_type __n, const
       value_type & __val) [inline],  [protected]
       Definition at line 1975 of file deque.

   template<typename _Tp , typename _Alloc > void deque::_M_fill_initialize
       (const value_type & __value) [protected]
       Fills the deque with copies of value.

       Parameters
           __value Initial value.

       Returns
           Nothing.

       Precondition
           _M_start and _M_finish have already been initialized, but none of
           the deque's elements have yet been constructed.

       This function is called only when the user provides an explicit size
       (with or without an explicit exemplar value).

       Definition at line 393 of file deque.tcc.

       References std::_Destroy().

       Referenced by std::deque< _Tp, _Alloc >::deque().

   template<typename _Tp , typename _Alloc > void deque::_M_fill_insert
       (iterator __pos, size_type __n, const value_type & __x) [protected]
       Definition at line 307 of file deque.tcc.

   template<typename _Tp , typename _Alloc > _Map_alloc_type std::_Deque_base<
       _Tp, _Alloc >::_M_get_map_allocator () const [inline],  [protected],
       [noexcept],  [inherited]
       Definition at line 576 of file deque.

   template<typename _Tp , typename _Alloc > template<typename... _Args>
       deque< _Tp, _Alloc >::iterator deque::_M_insert_aux (iterator __pos,
       _Args &&... __args) [protected]
       Definition at line 645 of file deque.tcc.

   template<typename _Tp , typename _Alloc > template<typename
       _ForwardIterator > void deque::_M_insert_aux (iterator __pos,
       _ForwardIterator __first, _ForwardIterator __last, size_type __n)
       [protected]
       Definition at line 771 of file deque.tcc.

   template<typename _Tp , typename _Alloc > void deque::_M_insert_aux
       (iterator __pos, size_type __n, const value_type & __x) [protected]
       Definition at line 685 of file deque.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::_M_move_assign1 (deque< _Tp, _Alloc > &&
       __x, false_type) [inline],  [protected]
       Definition at line 2202 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::_M_move_assign1 (deque< _Tp, _Alloc > &&
       __x, true_type) [inline],  [protected],  [noexcept]
       Definition at line 2191 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::_M_move_assign2 (deque< _Tp, _Alloc > &&
       __x, false_type) [inline],  [protected]
       Definition at line 2246 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::_M_move_assign2 (deque< _Tp, _Alloc > &&
       __x, true_type) [inline],  [protected]
       Definition at line 2232 of file deque.

   template<typename _Tp , typename _Alloc > void
       deque::_M_new_elements_at_back (size_type __new_elements) [protected]
       Memory-handling helpers for the previous internal insert functions.

       Definition at line 906 of file deque.tcc.

       References std::size().

       Referenced by std::deque< _Tp, _Alloc >::_M_reserve_elements_at_back().

   template<typename _Tp , typename _Alloc > void
       deque::_M_new_elements_at_front (size_type __new_elements) [protected]
       Memory-handling helpers for the previous internal insert functions.

       Definition at line 881 of file deque.tcc.

       References std::size().

       Referenced by std::deque< _Tp, _Alloc
       >::_M_reserve_elements_at_front().

   template<typename _Tp , typename _Alloc > void deque::_M_pop_back_aux
       [protected]
       Helper functions for push_* and pop_*.

       Definition at line 560 of file deque.tcc.

       Referenced by std::deque< _Tp, _Alloc >::pop_back().

   template<typename _Tp , typename _Alloc > void deque::_M_pop_front_aux
       [protected]
       Helper functions for push_* and pop_*.

       Definition at line 576 of file deque.tcc.

       Referenced by std::deque< _Tp, _Alloc >::pop_front().

   template<typename _Tp , typename _Alloc > template<typename... _Args> void
       deque::_M_push_back_aux (_Args &&... __args) [protected]
       Helper functions for push_* and pop_*.

       Definition at line 484 of file deque.tcc.

       References std::size().

       Referenced by std::deque< _Tp, _Alloc >::push_back().

   template<typename _Tp , typename _Alloc > template<typename... _Args> void
       deque::_M_push_front_aux (_Args &&... __args) [protected]
       Helper functions for push_* and pop_*.

       Definition at line 523 of file deque.tcc.

       References std::size().

       Referenced by std::deque< _Tp, _Alloc >::push_front().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::_M_range_check (size_type __n) const
       [inline],  [protected]
       Safety check used only from at().

       Definition at line 1392 of file deque.

       References std::deque< _Tp, _Alloc >::size().

       Referenced by std::deque< _Tp, _Alloc >::at().

   template<typename _Tp , typename _Alloc > template<typename
       _ForwardIterator > void deque::_M_range_initialize (_ForwardIterator
       __first, _ForwardIterator __last, std::forward_iterator_tag)
       [protected]
       Fills the deque with whatever is in [first,last).

       Parameters
           __first An input iterator.
           __last An input iterator.

       Returns
           Nothing.

       If the iterators are actually forward iterators (or better), then the
       memory layout can be done all at once. Else we move forward using
       push_back on each value from the iterator.

       Definition at line 443 of file deque.tcc.

       References std::_Destroy(), std::advance(), and std::distance().

   template<typename _Tp , typename _Alloc > template<typename _InputIterator
       > void deque::_M_range_initialize (_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag) [protected]
       Fills the deque with whatever is in [first,last).

       Parameters
           __first An input iterator.
           __last An input iterator.

       Returns
           Nothing.

       If the iterators are actually forward iterators (or better), then the
       memory layout can be done all at once. Else we move forward using
       push_back on each value from the iterator.

       Definition at line 419 of file deque.tcc.

       Referenced by std::deque< _Tp, _Alloc >::deque().

   template<typename _Tp , typename _Alloc > template<typename
       _ForwardIterator > void deque::_M_range_insert_aux (iterator __pos,
       _ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag) [protected]
       Definition at line 598 of file deque.tcc.

   template<typename _Tp , typename _Alloc > template<typename _InputIterator
       > void deque::_M_range_insert_aux (iterator __pos, _InputIterator
       __first, _InputIterator __last, std::input_iterator_tag) [protected]
       Definition at line 589 of file deque.tcc.

   template<typename _Tp , typename _Alloc > void deque::_M_reallocate_map
       (size_type __nodes_to_add, bool __add_at_front) [protected]
       Memory-handling helpers for the major map. Makes sure the _M_map has
       space for new nodes. Does not actually add the nodes. Can invalidate
       _M_map pointers. (And consequently, deque iterators.)

       Definition at line 931 of file deque.tcc.

       References std::max().

       Referenced by std::deque< _Tp, _Alloc >::_M_reserve_map_at_back(), and
       std::deque< _Tp, _Alloc >::_M_reserve_map_at_front().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename... _Args> void std::deque< _Tp, _Alloc
       >::_M_replace_map (_Args &&... __args) [inline],  [protected]
       Definition at line 2216 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::deque< _Tp, _Alloc >::_M_reserve_elements_at_back (size_type __n)
       [inline],  [protected]
       Memory-handling helpers for the previous internal insert functions.

       Definition at line 2142 of file deque.

       References std::deque< _Tp, _Alloc >::_M_new_elements_at_back().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::deque< _Tp, _Alloc >::_M_reserve_elements_at_front (size_type __n)
       [inline],  [protected]
       Memory-handling helpers for the previous internal insert functions.

       Definition at line 2132 of file deque.

       References std::deque< _Tp, _Alloc >::_M_new_elements_at_front().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::_M_reserve_map_at_back (size_type
       __nodes_to_add = 1) [inline],  [protected]
       Memory-handling helpers for the major map. Makes sure the _M_map has
       space for new nodes. Does not actually add the nodes. Can invalidate
       _M_map pointers. (And consequently, deque iterators.)

       Definition at line 2168 of file deque.

       References std::deque< _Tp, _Alloc >::_M_reallocate_map().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::_M_reserve_map_at_front (size_type
       __nodes_to_add = 1) [inline],  [protected]
       Memory-handling helpers for the major map. Makes sure the _M_map has
       space for new nodes. Does not actually add the nodes. Can invalidate
       _M_map pointers. (And consequently, deque iterators.)

       Definition at line 2176 of file deque.

       References std::deque< _Tp, _Alloc >::_M_reallocate_map().

   template<typename _Tp , typename _Alloc > bool deque::_M_shrink_to_fit
       [protected]
       Definition at line 374 of file deque.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> static
       size_t std::deque< _Tp, _Alloc >::_S_check_init_len (size_t __n, const
       allocator_type & __a) [inline],  [static],  [protected]
       Definition at line 1867 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> static
       size_type std::deque< _Tp, _Alloc >::_S_max_size (const _Tp_alloc_type
       & __a) [inline],  [static],  [protected],  [noexcept]
       Definition at line 1876 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> void std::deque< _Tp, _Alloc
       >::assign (_InputIterator __first, _InputIterator __last) [inline]
       Assigns a range to a deque.

       Parameters
           __first An input iterator.
           __last An input iterator.

       This function fills a deque with copies of the elements in the range
       [__first,__last).

       Note that the assignment completely changes the deque and that the
       resulting deque's size is the same as the number of elements assigned.

       Definition at line 1109 of file deque.

       References std::__iterator_category().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::assign (initializer_list< value_type > __l)
       [inline]
       Assigns an initializer list to a deque.

       Parameters
           __l An initializer_list.

       This function fills a deque with copies of the elements in the
       initializer_list __l.

       Note that the assignment completely changes the deque and that the
       resulting deque's size is the same as the number of elements assigned.

       Definition at line 1134 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::assign (size_type __n, const value_type &
       __val) [inline]
       Assigns a given value to a deque.

       Parameters
           __n Number of elements to be assigned.
           __val Value to be assigned.

       This function fills a deque with n copies of the given value. Note that
       the assignment completely changes the deque and that the resulting
       deque's size is the same as the number of elements assigned.

       Definition at line 1090 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> reference
       std::deque< _Tp, _Alloc >::at (size_type __n) [inline]
       Provides access to the data contained in the deque.

       Parameters
           __n The index of the element for which data should be accessed.

       Returns
           Read/write reference to data.

       Exceptions
           std::out_of_range If __n is an invalid index.

       This function provides for safer data access. The parameter is first
       checked that it is in the range of the deque. The function throws
       out_of_range if the check fails.

       Definition at line 1414 of file deque.

       References std::deque< _Tp, _Alloc >::_M_range_check().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reference std::deque< _Tp, _Alloc >::at (size_type __n) const
       [inline]
       Provides access to the data contained in the deque.

       Parameters
           __n The index of the element for which data should be accessed.

       Returns
           Read-only (constant) reference to data.

       Exceptions
           std::out_of_range If __n is an invalid index.

       This function provides for safer data access. The parameter is first
       checked that it is in the range of the deque. The function throws
       out_of_range if the check fails.

       Definition at line 1432 of file deque.

       References std::deque< _Tp, _Alloc >::_M_range_check().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reference std::deque< _Tp, _Alloc >::back () const [inline],
       [noexcept]
       Returns a read-only (constant) reference to the data at the last
       element of the deque.

       Definition at line 1482 of file deque.

       References std::deque< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> reference
       std::deque< _Tp, _Alloc >::back () [inline],  [noexcept]
       Returns a read/write reference to the data at the last element of the
       deque.

       Definition at line 1468 of file deque.

       References std::deque< _Tp, _Alloc >::end().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_iterator std::deque< _Tp, _Alloc >::begin () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the deque. Iteration is done in ordinary element order.

       Definition at line 1160 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::deque< _Tp, _Alloc >::begin () [inline],  [noexcept]
       Returns a read/write iterator that points to the first element in the
       deque. Iteration is done in ordinary element order.

       Definition at line 1151 of file deque.

       Referenced by std::deque< _Tp, _Alloc >::deque(), std::deque< _Tp,
       _Alloc >::~deque(), std::deque< _Tp, _Alloc >::clear(), std::deque<
       _Tp, _Alloc >::front(), std::deque< _Tp, _Alloc >::insert(),
       std::operator<(), std::deque< _Tp, _Alloc >::operator=(), and
       std::operator==().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_iterator std::deque< _Tp, _Alloc >::cbegin () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points to the first
       element in the deque. Iteration is done in ordinary element order.

       Definition at line 1230 of file deque.

       Referenced by std::deque< _Tp, _Alloc >::insert().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_iterator std::deque< _Tp, _Alloc >::cend () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the deque. Iteration is done in ordinary element order.

       Definition at line 1240 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::clear () [inline],  [noexcept]
       Erases all the elements. Note that this function only erases the
       elements, and that if the elements themselves are pointers, the
       pointed-to memory is not touched in any way. Managing the pointer is
       the user's responsibility.

       Definition at line 1835 of file deque.

       References std::deque< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reverse_iterator std::deque< _Tp, _Alloc >::crbegin () const
       [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       element in the deque. Iteration is done in reverse element order.

       Definition at line 1250 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reverse_iterator std::deque< _Tp, _Alloc >::crend () const
       [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first element in the deque. Iteration is done in reverse
       element order.

       Definition at line 1260 of file deque.

   template<typename _Tp , typename _Alloc > template<typename... _Args>
       deque< _Tp, _Alloc >::iterator deque::emplace (const_iterator
       __position, _Args &&... __args)
       Inserts an object in deque before specified iterator.

       Parameters
           __position A const_iterator into the deque.
           __args Arguments.

       Returns
           An iterator that points to the inserted data.

       This function will insert an object of type T constructed with
       T(std::forward<Args>(args)...) before the specified location.

       Definition at line 187 of file deque.tcc.

       Referenced by std::deque< _Tp, _Alloc >::insert().

   template<typename _Tp , typename _Alloc > template<typename... _Args>
       deque< _Tp, _Alloc >::reference deque::emplace_back (_Args &&...
       __args)
       Definition at line 164 of file deque.tcc.

   template<typename _Tp , typename _Alloc > template<typename... _Args>
       deque< _Tp, _Alloc >::reference deque::emplace_front (_Args &&...
       __args)
       Definition at line 140 of file deque.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> bool
       std::deque< _Tp, _Alloc >::empty () const [inline],  [noexcept]
       Returns true if the deque is empty. (Thus begin() would equal end().)

       Definition at line 1347 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_iterator std::deque< _Tp, _Alloc >::end () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       element in the deque. Iteration is done in ordinary element order.

       Definition at line 1180 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::deque< _Tp, _Alloc >::end () [inline],  [noexcept]
       Returns a read/write iterator that points one past the last element in
       the deque. Iteration is done in ordinary element order.

       Definition at line 1170 of file deque.

       Referenced by std::deque< _Tp, _Alloc >::deque(), std::deque< _Tp,
       _Alloc >::~deque(), std::deque< _Tp, _Alloc >::back(),
       std::operator<(), std::deque< _Tp, _Alloc >::operator=(), and
       std::operator==().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::deque< _Tp, _Alloc >::erase (const_iterator __first,
       const_iterator __last) [inline]
       Remove a range of elements.

       Parameters
           __first Iterator pointing to the first element to be erased.
           __last Iterator pointing to one past the last element to be erased.

       Returns
           An iterator pointing to the element pointed to by last prior to
           erasing (or end()).

       This function will erase the elements in the range [__first,__last) and
       shorten the deque accordingly.

       The user is cautioned that this function only erases the elements, and
       that if the elements themselves are pointers, the pointed-to memory is
       not touched in any way. Managing the pointer is the user's
       responsibility.

       Definition at line 1799 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::deque< _Tp, _Alloc >::erase (const_iterator __position) [inline]
       Remove element at given position.

       Parameters
           __position Iterator pointing to element to be erased.

       Returns
           An iterator pointing to the next element (or end()).

       This function will erase the element at the given position and thus
       shorten the deque by one.

       The user is cautioned that this function only erases the element, and
       that if the element is itself a pointer, the pointed-to memory is not
       touched in any way. Managing the pointer is the user's responsibility.

       Definition at line 1775 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reference std::deque< _Tp, _Alloc >::front () const [inline],
       [noexcept]
       Returns a read-only (constant) reference to the data at the first
       element of the deque.

       Definition at line 1456 of file deque.

       References std::deque< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> reference
       std::deque< _Tp, _Alloc >::front () [inline],  [noexcept]
       Returns a read/write reference to the data at the first element of the
       deque.

       Definition at line 1444 of file deque.

       References std::deque< _Tp, _Alloc >::begin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       allocator_type std::deque< _Tp, _Alloc >::get_allocator () const
       [inline],  [noexcept]
       Get a copy of the memory allocation object.

       Definition at line 1141 of file deque.

       Referenced by std::deque< _Tp, _Alloc >::operator=().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::deque< _Tp, _Alloc >::insert (const_iterator __p,
       initializer_list< value_type > __l) [inline]
       Inserts an initializer list into the deque.

       Parameters
           __p An iterator into the deque.
           __l An initializer_list.

       Returns
           An iterator that points to the inserted data.

       This function will insert copies of the data in the initializer_list
       __l into the deque before the location specified by __p. This is known
       as list insert.

       Definition at line 1675 of file deque.

       References std::deque< _Tp, _Alloc >::begin(), and std::deque< _Tp,
       _Alloc >::cbegin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       template<typename _InputIterator , typename  =
       std::_RequireInputIter<_InputIterator>> iterator std::deque< _Tp,
       _Alloc >::insert (const_iterator __position, _InputIterator __first,
       _InputIterator __last) [inline]
       Inserts a range into the deque.

       Parameters
           __position A const_iterator into the deque.
           __first An input iterator.
           __last An input iterator.

       Returns
           An iterator that points to the inserted data.

       This function will insert copies of the data in the range
       [__first,__last) into the deque before the location specified by
       __position. This is known as range insert.

       Definition at line 1730 of file deque.

       References std::__iterator_category(), std::deque< _Tp, _Alloc
       >::begin(), and std::deque< _Tp, _Alloc >::cbegin().

   template<typename _Tp , typename _Alloc > deque< _Tp, _Alloc >::iterator
       deque::insert (const_iterator __position, const value_type & __x)
       Inserts given value into deque before specified iterator.

       Parameters
           __position A const_iterator into the deque.
           __x Data to be inserted.

       Returns
           An iterator that points to the inserted data.

       This function will insert a copy of the given value before the
       specified location.

       Definition at line 210 of file deque.tcc.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::deque< _Tp, _Alloc >::insert (const_iterator __position, size_type
       __n, const value_type & __x) [inline]
       Inserts a number of copies of given data into the deque.

       Parameters
           __position A const_iterator into the deque.
           __n Number of elements to be inserted.
           __x Data to be inserted.

       Returns
           An iterator that points to the inserted data.

       This function will insert a specified number of copies of the given
       data before the location specified by __position.

       Definition at line 1694 of file deque.

       References std::deque< _Tp, _Alloc >::begin(), and std::deque< _Tp,
       _Alloc >::cbegin().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> iterator
       std::deque< _Tp, _Alloc >::insert (const_iterator __position,
       value_type && __x) [inline]
       Inserts given rvalue into deque before specified iterator.

       Parameters
           __position A const_iterator into the deque.
           __x Data to be inserted.

       Returns
           An iterator that points to the inserted data.

       This function will insert a copy of the given rvalue before the
       specified location.

       Definition at line 1661 of file deque.

       References std::deque< _Tp, _Alloc >::emplace(), and std::move().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> size_type
       std::deque< _Tp, _Alloc >::max_size () const [inline],  [noexcept]
       Returns the size() of the largest possible deque.

       Definition at line 1274 of file deque.

   template<typename _Tp , typename _Alloc > deque< _Tp, _Alloc > &
       deque::operator= (const deque< _Tp, _Alloc > & __x)
       Deque assignment operator.

       Parameters
           __x A deque of identical element and allocator types.

       All the elements of x are copied.

       The newly-created deque uses a copy of the allocator object used by __x
       (unless the allocator traits dictate a different object).

       Definition at line 95 of file deque.tcc.

       References std::__addressof(), std::deque< _Tp, _Alloc >::begin(),
       std::deque< _Tp, _Alloc >::end(), std::deque< _Tp, _Alloc
       >::get_allocator(), std::deque< _Tp, _Alloc >::size(), and std::size().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> deque &
       std::deque< _Tp, _Alloc >::operator= (deque< _Tp, _Alloc > && __x)
       [inline],  [noexcept]
       Deque move assignment operator.

       Parameters
           __x A deque of identical element and allocator types.

       The contents of __x are moved into this deque (without copying, if the
       allocators permit it). __x is a valid, but unspecified deque.

       Definition at line 1052 of file deque.

       References std::move().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> deque &
       std::deque< _Tp, _Alloc >::operator= (initializer_list< value_type >
       __l) [inline]
       Assigns an initializer list to a deque.

       Parameters
           __l An initializer_list.

       This function fills a deque with copies of the elements in the
       initializer_list __l.

       Note that the assignment completely changes the deque and that the
       resulting deque's size is the same as the number of elements assigned.

       Definition at line 1071 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reference std::deque< _Tp, _Alloc >::operator[] (size_type __n)
       const [inline],  [noexcept]
       Subscript access to the data contained in the deque.

       Parameters
           __n The index of the element for which data should be accessed.

       Returns
           Read-only (constant) reference to data.

       This operator allows for easy, array-style, data access. Note that data
       access with this operator is unchecked and out_of_range lookups are not
       defined. (For checked lookups see at().)

       Definition at line 1383 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> reference
       std::deque< _Tp, _Alloc >::operator[] (size_type __n) [inline],
       [noexcept]
       Subscript access to the data contained in the deque.

       Parameters
           __n The index of the element for which data should be accessed.

       Returns
           Read/write reference to data.

       This operator allows for easy, array-style, data access. Note that data
       access with this operator is unchecked and out_of_range lookups are not
       defined. (For checked lookups see at().)

       Definition at line 1364 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::pop_back () [inline],  [noexcept]
       Removes last element. This is a typical stack operation. It shrinks the
       deque by one.

       Note that no data is returned, and if the last element's data is
       needed, it should be retrieved before pop_back() is called.

       Definition at line 1597 of file deque.

       References std::deque< _Tp, _Alloc >::_M_pop_back_aux().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::pop_front () [inline],  [noexcept]
       Removes first element. This is a typical stack operation. It shrinks
       the deque by one.

       Note that no data is returned, and if the first element's data is
       needed, it should be retrieved before pop_front() is called.

       Definition at line 1574 of file deque.

       References std::deque< _Tp, _Alloc >::_M_pop_front_aux().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::push_back (const value_type & __x) [inline]
       Add data to the end of the deque.

       Parameters
           __x Data to be added.

       This is a typical stack operation. The function creates an element at
       the end of the deque and assigns the given data to it. Due to the
       nature of a deque this operation can be done in constant time.

       Definition at line 1538 of file deque.

       References std::deque< _Tp, _Alloc >::_M_push_back_aux().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::push_back (value_type && __x) [inline]
       Definition at line 1553 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::push_front (const value_type & __x) [inline]
       Add data to the front of the deque.

       Parameters
           __x Data to be added.

       This is a typical stack operation. The function creates an element at
       the front of the deque and assigns the given data to it. Due to the
       nature of a deque this operation can be done in constant time.

       Definition at line 1501 of file deque.

       References std::deque< _Tp, _Alloc >::_M_push_front_aux().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::push_front (value_type && __x) [inline]
       Definition at line 1516 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reverse_iterator std::deque< _Tp, _Alloc >::rbegin () const
       [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       element in the deque. Iteration is done in reverse element order.

       Definition at line 1200 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       reverse_iterator std::deque< _Tp, _Alloc >::rbegin () [inline],
       [noexcept]
       Returns a read/write reverse iterator that points to the last element
       in the deque. Iteration is done in reverse element order.

       Definition at line 1190 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       const_reverse_iterator std::deque< _Tp, _Alloc >::rend () const
       [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first element in the deque. Iteration is done in reverse
       element order.

       Definition at line 1220 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>>
       reverse_iterator std::deque< _Tp, _Alloc >::rend () [inline],
       [noexcept]
       Returns a read/write reverse iterator that points to one before the
       first element in the deque. Iteration is done in reverse element order.

       Definition at line 1210 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::resize (size_type __new_size) [inline]
       Resizes the deque to the specified number of elements.

       Parameters
           __new_size Number of elements the deque should contain.

       This function will resize the deque to the specified number of
       elements. If the number is smaller than the deque's current size the
       deque is truncated, otherwise default constructed elements are
       appended.

       Definition at line 1288 of file deque.

       References std::deque< _Tp, _Alloc >::size().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::resize (size_type __new_size, const
       value_type & __x) [inline]
       Resizes the deque to the specified number of elements.

       Parameters
           __new_size Number of elements the deque should contain.
           __x Data with which new elements should be populated.

       This function will resize the deque to the specified number of
       elements. If the number is smaller than the deque's current size the
       deque is truncated, otherwise the deque is extended and new elements
       are populated with given data.

       Definition at line 1310 of file deque.

       References std::deque< _Tp, _Alloc >::size().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::shrink_to_fit () [inline],  [noexcept]
       A non-binding request to reduce memory use.

       Definition at line 1338 of file deque.

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> size_type
       std::deque< _Tp, _Alloc >::size () const [inline],  [noexcept]
       Returns the number of elements in the deque.

       Definition at line 1268 of file deque.

       Referenced by std::deque< _Tp, _Alloc >::_M_range_check(), std::deque<
       _Tp, _Alloc >::operator=(), std::operator==(), and std::deque< _Tp,
       _Alloc >::resize().

   template<typename _Tp , typename _Alloc  = std::allocator<_Tp>> void
       std::deque< _Tp, _Alloc >::swap (deque< _Tp, _Alloc > & __x) [inline],
       [noexcept]
       Swaps data with another deque.

       Parameters
           __x A deque of the same element and allocator types.

       This exchanges the elements between two deques in constant time. (Four
       pointers, so it should be quite fast.) Note that the global std::swap()
       function is specialized such that std::swap(d1,d2) will feed to this
       function.

       Whether the allocators are swapped depends on the allocator traits.

       Definition at line 1817 of file deque.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Feb 1 2023    std::deque< _Tp, _Alloc >(3)
