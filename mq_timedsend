mq_send(3)                                                                               Library Functions Manual                                                                               mq_send(3)

NAME
       mq_send, mq_timedsend - send a message to a message queue

LIBRARY
       Real-time library (librt, -lrt)

SYNOPSIS
       #include <mqueue.h>

       int mq_send(mqd_t mqdes, const char msg_ptr[.msg_len],
                     size_t msg_len, unsigned int msg_prio);

       #include <time.h>
       #include <mqueue.h>

       int mq_timedsend(mqd_t mqdes, const char msg_ptr[.msg_len],
                     size_t msg_len, unsigned int msg_prio,
                     const struct timespec *abs_timeout);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       mq_timedsend():
           _POSIX_C_SOURCE >= 200112L

DESCRIPTION
       mq_send() adds the message pointed to by msg_ptr to the message queue referred to by the message queue descriptor mqdes.  The msg_len argument specifies the length of the message pointed to by
       msg_ptr; this length must be less than or equal to the queue's mq_msgsize attribute.  Zero-length messages are allowed.

       The msg_prio argument is a nonnegative integer that specifies the priority of this message.  Messages are placed on the queue in decreasing order of priority, with newer messages of the same pri‐
       ority being placed after older messages with the same priority.  See mq_overview(7) for details on the range for the message priority.

       If the message queue is already full (i.e., the number of messages on the queue equals the queue's mq_maxmsg attribute), then, by default, mq_send() blocks until sufficient space becomes avail‐
       able to allow the message to be queued, or until the call is interrupted by a signal handler.  If the O_NONBLOCK flag is enabled for the message queue description, then the call instead fails im‐
       mediately with the error EAGAIN.

       mq_timedsend() behaves just like mq_send(), except that if the queue is full and the O_NONBLOCK flag is not enabled for the message queue description, then abs_timeout points to a structure which
       specifies how long the call will block.  This value is an absolute timeout in seconds and nanoseconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC), specified in a timespec(3) structure.

       If the message queue is full, and the timeout has already expired by the time of the call, mq_timedsend() returns immediately.

RETURN VALUE
       On success, mq_send() and mq_timedsend() return zero; on error, -1 is returned, with errno set to indicate the error.

ERRORS
       EAGAIN The queue was full, and the O_NONBLOCK flag was set for the message queue description referred to by mqdes.

       EBADF  The descriptor specified in mqdes was invalid or not opened for writing.

       EINTR  The call was interrupted by a signal handler; see signal(7).

       EINVAL The call would have blocked, and abs_timeout was invalid, either because tv_sec was less than zero, or because tv_nsec was less than zero or greater than 1000 million.

       EMSGSIZE
              msg_len was greater than the mq_msgsize attribute of the message queue.

       ETIMEDOUT
              The call timed out before a message could be transferred.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │mq_send(), mq_timedsend()                                                                                                                                               │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
       On Linux, mq_timedsend() is a system call, and mq_send() is a library function layered on top of that system call.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

SEE ALSO
       mq_close(3), mq_getattr(3), mq_notify(3), mq_open(3), mq_receive(3), mq_unlink(3), timespec(3), mq_overview(7), time(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                      mq_send(3)
MQ_TIMEDSEND(3P)                                                                         POSIX Programmer's Manual                                                                        MQ_TIMEDSEND(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       mq_timedsend — send a message to a message queue (ADVANCED REALTIME)

SYNOPSIS
       #include <mqueue.h>
       #include <time.h>

       int mq_timedsend(mqd_t mqdes, const char *msg_ptr, size_t msg_len,
           unsigned msg_prio, const struct timespec *abstime);

DESCRIPTION
       Refer to mq_send().

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                   MQ_TIMEDSEND(3P)
