strcmp(3)                  Library Functions Manual                  strcmp(3)

NAME
       strcmp, strncmp - compare two strings

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <string.h>

       int strcmp(const char *s1, const char *s2);
       int strncmp(const char s1[.n], const char s2[.n], size_t n);

DESCRIPTION
       The  strcmp()  function compares the two strings s1 and s2.  The locale
       is not taken into account (for  a  locale-aware  comparison,  see  str‐
       coll(3)).  The comparison is done using unsigned characters.

       strcmp() returns an integer indicating the result of the comparison, as
       follows:

       •  0, if the s1 and s2 are equal;

       •  a negative value if s1 is less than s2;

       •  a positive value if s1 is greater than s2.

       The strncmp() function is similar, except it compares  only  the  first
       (at most) n bytes of s1 and s2.

RETURN VALUE
       The strcmp() and strncmp() functions return an integer less than, equal
       to, or greater than zero if s1 (or the first n bytes thereof) is found,
       respectively, to be less than, to match, or be greater than s2.

ATTRIBUTES
       For  an  explanation  of  the  terms  used  in  this  section,  see at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │strcmp(), strncmp()                         │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
       POSIX.1 specifies only that:

              The sign of a nonzero return value shall be  determined  by  the
              sign  of  the difference between the values of the first pair of
              bytes (both interpreted as type unsigned char)  that  differ  in
              the strings being compared.

       In  glibc,  as  in  most other implementations, the return value is the
       arithmetic result of subtracting the last compared byte in s2 from  the
       last  compared byte in s1.  (If the two characters are equal, this dif‐
       ference is 0.)

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       POSIX.1-2001, C89, SVr4, 4.3BSD.

EXAMPLES
       The program below can be used to demonstrate the operation of  strcmp()
       (when  given two arguments) and strncmp() (when given three arguments).
       First, some examples using strcmp():

           $ ./string_comp ABC ABC
           <str1> and <str2> are equal
           $ ./string_comp ABC AB      # 'C' is ASCII 67; 'C' - '\0' = 67
           <str1> is greater than <str2> (67)
           $ ./string_comp ABA ABZ     # 'A' is ASCII 65; 'Z' is ASCII 90
           <str1> is less than <str2> (-25)
           $ ./string_comp ABJ ABC
           <str1> is greater than <str2> (7)
           $ ./string_comp $'\201' A   # 0201 - 0101 = 0100 (or 64 decimal)
           <str1> is greater than <str2> (64)

       The last example uses bash(1)-specific syntax to produce a string  con‐
       taining  an  8-bit  ASCII code; the result demonstrates that the string
       comparison uses unsigned characters.

       And then some examples using strncmp():

           $ ./string_comp ABC AB 3
           <str1> is greater than <str2> (67)
           $ ./string_comp ABC AB 2
           <str1> and <str2> are equal in the first 2 bytes

   Program source

       /* string_comp.c

          Licensed under GNU General Public License v2 or later.
       */
       #include <stdio.h>
       #include <stdlib.h>
       #include <string.h>

       int
       main(int argc, char *argv[])
       {
           int res;

           if (argc < 3) {
               fprintf(stderr, "Usage: %s <str1> <str2> [<len>]\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           if (argc == 3)
               res = strcmp(argv[1], argv[2]);
           else
               res = strncmp(argv[1], argv[2], atoi(argv[3]));

           if (res == 0) {
               printf("<str1> and <str2> are equal");
               if (argc > 3)
                   printf(" in the first %d bytes\n", atoi(argv[3]));
               printf("\n");
           } else if (res < 0) {
               printf("<str1> is less than <str2> (%d)\n", res);
           } else {
               printf("<str1> is greater than <str2> (%d)\n", res);
           }

           exit(EXIT_SUCCESS);
       }

SEE ALSO
       memcmp(3),  strcasecmp(3),   strcoll(3),   string(3),   strncasecmp(3),
       strverscmp(3), wcscmp(3), wcsncmp(3), ascii(7)

Linux man-pages 6.04              2023-03-30                         strcmp(3)
STRCMP(3P)                 POSIX Programmer's Manual                STRCMP(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       strcmp — compare two strings

SYNOPSIS
       #include <string.h>

       int strcmp(const char *s1, const char *s2);

DESCRIPTION
       The functionality described on this reference page is aligned with  the
       ISO C  standard.  Any  conflict between the requirements described here
       and the ISO C standard is unintentional. This  volume  of  POSIX.1‐2017
       defers to the ISO C standard.

       The  strcmp() function shall compare the string pointed to by s1 to the
       string pointed to by s2.

       The sign of a non-zero return value shall be determined by the sign  of
       the  difference between the values of the first pair of bytes (both in‐
       terpreted as type unsigned char) that differ in the strings being  com‐
       pared.

RETURN VALUE
       Upon  completion,  strcmp() shall return an integer greater than, equal
       to, or less than 0, if the string pointed to by  s1  is  greater  than,
       equal to, or less than the string pointed to by s2, respectively.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
   Checking a Password Entry
       The following example compares the information read from standard input
       to the value of the name of the user entry. If  the  strcmp()  function
       returns  0 (indicating a match), a further check will be made to see if
       the user entered the proper old password. The  crypt()  function  shall
       encrypt  the  old  password entered by the user, using the value of the
       encrypted password in the passwd structure as the salt. If  this  value
       matches the value of the encrypted passwd in the structure, the entered
       password oldpasswd is the correct user's password. Finally, the program
       encrypts  the  new password so that it can store the information in the
       passwd structure.

           #include <string.h>
           #include <unistd.h>
           #include <stdio.h>
           ...
           int valid_change;
           struct passwd *p;
           char user[100];
           char oldpasswd[100];
           char newpasswd[100];
           char savepasswd[100];
           ...
           if (strcmp(p->pw_name, user) == 0) {
               if (strcmp(p->pw_passwd, crypt(oldpasswd, p->pw_passwd)) == 0) {
                   strcpy(savepasswd, crypt(newpasswd, user));
                   p->pw_passwd = savepasswd;
                   valid_change = 1;
               }
               else {
                   fprintf(stderr, "Old password is not valid\n");
               }
           }
           ...

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       strncmp()

       The Base Definitions volume of POSIX.1‐2017, <string.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                           STRCMP(3P)
