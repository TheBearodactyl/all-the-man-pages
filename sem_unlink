sem_unlink(3)              Library Functions Manual              sem_unlink(3)

NAME
       sem_unlink - remove a named semaphore

LIBRARY
       POSIX threads library (libpthread, -lpthread)

SYNOPSIS
       #include <semaphore.h>

       int sem_unlink(const char *name);

DESCRIPTION
       sem_unlink() removes the named semaphore referred to by name.  The sem‐
       aphore name is removed immediately.  The semaphore  is  destroyed  once
       all other processes that have the semaphore open close it.

RETURN VALUE
       On success sem_unlink() returns 0; on error, -1 is returned, with errno
       set to indicate the error.

ERRORS
       EACCES The caller does not have permission to unlink this semaphore.

       ENAMETOOLONG
              name was too long.

       ENOENT There is no semaphore with the given name.

ATTRIBUTES
       For an  explanation  of  the  terms  used  in  this  section,  see  at‐
       tributes(7).

       ┌────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                   │ Attribute     │ Value   │
       ├────────────────────────────────────────────┼───────────────┼─────────┤
       │sem_unlink()                                │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

SEE ALSO
       sem_getvalue(3), sem_open(3), sem_post(3), sem_wait(3), sem_overview(7)

Linux man-pages 6.04              2023-03-30                     sem_unlink(3)
SEM_UNLINK(3P)             POSIX Programmer's Manual            SEM_UNLINK(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       sem_unlink — remove a named semaphore

SYNOPSIS
       #include <semaphore.h>

       int sem_unlink(const char *name);

DESCRIPTION
       The sem_unlink() function shall  remove  the  semaphore  named  by  the
       string name.  If the semaphore named by name is currently referenced by
       other processes, then sem_unlink() shall have no effect on the state of
       the  semaphore.  If  one or more processes have the semaphore open when
       sem_unlink() is called, destruction of the semaphore is postponed until
       all  references  to  the  semaphore  have  been  destroyed  by calls to
       sem_close(), _exit(), or exec.  Calls to sem_open() to recreate or  re‐
       connect to the semaphore refer to a new semaphore after sem_unlink() is
       called. The sem_unlink() call shall not block until all references have
       been destroyed; it shall return immediately.

RETURN VALUE
       Upon  successful  completion,  the sem_unlink() function shall return a
       value of 0. Otherwise, the semaphore shall not be changed and the func‐
       tion shall return a value of -1 and set errno to indicate the error.

ERRORS
       The sem_unlink() function shall fail if:

       EACCES Permission is denied to unlink the named semaphore.

       ENOENT The named semaphore does not exist.

       The sem_unlink() function may fail if:

       ENAMETOOLONG
              The  length  of  the  name argument exceeds {_POSIX_PATH_MAX} on
              systems  that  do  not  support  the  XSI  option   or   exceeds
              {_XOPEN_PATH_MAX}  on  XSI  systems, or has a pathname component
              that is longer than {_POSIX_NAME_MAX} on  systems  that  do  not
              support  the  XSI option or longer than {_XOPEN_NAME_MAX} on XSI
              systems.  A call to sem_unlink() with a name argument that  con‐
              tains  the  same semaphore name as was previously used in a suc‐
              cessful sem_open() call shall not give an [ENAMETOOLONG] error.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       A future version might require the sem_open()  and  sem_unlink()  func‐
       tions to have semantics similar to normal file system operations.

SEE ALSO
       semctl(), semget(), semop(), sem_close(), sem_open()

       The Base Definitions volume of POSIX.1‐2017, <semaphore.h>

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                       SEM_UNLINK(3P)
