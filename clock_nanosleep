CLOCK_NANOSLEEP(3P)                                                                      POSIX Programmer's Manual                                                                     CLOCK_NANOSLEEP(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       clock_nanosleep — high resolution sleep with specifiable clock

SYNOPSIS
       #include <time.h>

       int clock_nanosleep(clockid_t clock_id, int flags,
           const struct timespec *rqtp, struct timespec *rmtp);

DESCRIPTION
       If the flag TIMER_ABSTIME is not set in the flags argument, the clock_nanosleep() function shall cause the current thread to be suspended from execution until either the time  interval  specified
       by  the  rqtp  argument has elapsed, or a signal is delivered to the calling thread and its action is to invoke a signal-catching function, or the process is terminated. The clock used to measure
       the time shall be the clock specified by clock_id.

       If the flag TIMER_ABSTIME is set in the flags argument, the clock_nanosleep() function shall cause the current thread to be suspended from execution until either the time value of the clock spec‐
       ified  by  clock_id reaches the absolute time specified by the rqtp argument, or a signal is delivered to the calling thread and its action is to invoke a signal-catching function, or the process
       is terminated.  If, at the time of the call, the time value specified by rqtp is less than or equal to the time value of the specified clock, then clock_nanosleep() shall return  immediately  and
       the calling process shall not be suspended.

       The  suspension  time caused by this function may be longer than requested because the argument value is rounded up to an integer multiple of the sleep resolution, or because of the scheduling of
       other activity by the system. But, except for the case of being interrupted by a signal, the suspension time for the relative clock_nanosleep() function (that is, with the TIMER_ABSTIME flag  not
       set)  shall  not  be less than the time interval specified by rqtp, as measured by the corresponding clock. The suspension for the absolute clock_nanosleep() function (that is, with the TIMER_AB‐
       STIME flag set) shall be in effect at least until the value of the corresponding clock reaches the absolute time specified by rqtp, except for the case of being interrupted by a signal.

       The use of the clock_nanosleep() function shall have no effect on the action or blockage of any signal.

       The clock_nanosleep() function shall fail if the clock_id argument refers to the CPU-time clock of the calling thread. It is unspecified whether clock_id values of other CPU-time clocks  are  al‐
       lowed.

RETURN VALUE
       If the clock_nanosleep() function returns because the requested time has elapsed, its return value shall be zero.

       If  the clock_nanosleep() function returns because it has been interrupted by a signal, it shall return the corresponding error value. For the relative clock_nanosleep() function, if the rmtp ar‐
       gument is non-NULL, the timespec structure referenced by it shall be updated to contain the amount of time remaining in the interval (the requested time minus the time actually slept).  The  rqtp
       and  rmtp  arguments  can point to the same object. If the rmtp argument is NULL, the remaining time is not returned. The absolute clock_nanosleep() function has no effect on the structure refer‐
       enced by rmtp.

       If clock_nanosleep() fails, it shall return the corresponding error value.

ERRORS
       The clock_nanosleep() function shall fail if:

       EINTR  The clock_nanosleep() function was interrupted by a signal.

       EINVAL The rqtp argument specified a nanosecond value less than zero or greater than or equal to 1000 million; or the TIMER_ABSTIME flag was specified in flags and the rqtp  argument  is  outside
              the range for the clock specified by clock_id; or the clock_id argument does not specify a known clock, or specifies the CPU-time clock of the calling thread.

       ENOTSUP
              The clock_id argument specifies a clock for which clock_nanosleep() is not supported, such as a CPU-time clock.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       Calling  clock_nanosleep()  with the value TIMER_ABSTIME not set in the flags argument and with a clock_id of CLOCK_REALTIME is equivalent to calling nanosleep() with the same rqtp and rmtp argu‐
       ments.

RATIONALE
       The nanosleep() function specifies that the system-wide clock CLOCK_REALTIME is used to measure the elapsed time for this time service. However, with  the  introduction  of  the  monotonic  clock
       CLOCK_MONOTONIC a new relative sleep function is needed to allow an application to take advantage of the special characteristics of this clock.

       There  are  many  applications in which a process needs to be suspended and then activated multiple times in a periodic way; for example, to poll the status of a non-interrupting device or to re‐
       fresh a display device. For these cases, it is known that precise periodic activation cannot be achieved with a relative sleep() or nanosleep() function call. Suppose,  for  example,  a  periodic
       process  that  is activated at time T0, executes for a while, and then wants to suspend itself until time T0+T, the period being T.  If this process wants to use the nanosleep() function, it must
       first call clock_gettime() to get the current time, then calculate the difference between the current time and T0+T and, finally, call  nanosleep()  using  the  computed  interval.  However,  the
       process could be preempted by a different process between the two function calls, and in this case the interval computed would be wrong; the process would wake up later than desired. This problem
       would not occur with the absolute clock_nanosleep() function, since only one function call would be necessary to suspend the process until the desired time. In other cases,  however,  a  relative
       sleep is needed, and that is why both functionalities are required.

       Although  it  is possible to implement periodic processes using the timers interface, this implementation would require the use of signals, and the reservation of some signal numbers. In this re‐
       gard, the reasons for including an absolute version of the clock_nanosleep() function in POSIX.1‐2008 are the same as for the inclusion of the relative nanosleep().

       It is also possible to implement precise periodic processes using pthread_cond_timedwait(), in which an absolute timeout is specified that takes effect if the condition variable involved is never
       signaled.  However,  the  use  of  this  interface  is  unnatural,  and  involves  performing other operations on mutexes and condition variables that imply an unnecessary overhead.  Furthermore,
       pthread_cond_timedwait() is not available in implementations that do not support threads.

       Although the interface of the relative and absolute versions of the new high resolution sleep service is the same clock_nanosleep() function, the rmtp argument is only used in the relative sleep.
       This  argument  is needed in the relative clock_nanosleep() function to reissue the function call if it is interrupted by a signal, but it is not needed in the absolute clock_nanosleep() function
       call; if the call is interrupted by a signal, the absolute clock_nanosleep() function can be invoked again with the same rqtp argument used in the interrupted call.

FUTURE DIRECTIONS
       None.

SEE ALSO
       clock_getres(), nanosleep(), pthread_cond_timedwait(), sleep()

       The Base Definitions volume of POSIX.1‐2017, <time.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                CLOCK_NANOSLEEP(3P)
clock_nanosleep(2)                                                                          System Calls Manual                                                                         clock_nanosleep(2)

NAME
       clock_nanosleep - high-resolution sleep with specifiable clock

LIBRARY
       Standard C library (libc, -lc), since glibc 2.17

       Before glibc 2.17, Real-time library (librt, -lrt)

SYNOPSIS
       #include <time.h>

       int clock_nanosleep(clockid_t clockid, int flags,
                           const struct timespec *request,
                           struct timespec *_Nullable remain);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       clock_nanosleep():
           _POSIX_C_SOURCE >= 200112L

DESCRIPTION
       Like  nanosleep(2),  clock_nanosleep() allows the calling thread to sleep for an interval specified with nanosecond precision.  It differs in allowing the caller to select the clock against which
       the sleep interval is to be measured, and in allowing the sleep interval to be specified as either an absolute or a relative value.

       The time values passed to and returned by this call are specified using timespec(3) structures.

       The clockid argument specifies the clock against which the sleep interval is to be measured.  This argument can have one of the following values:

       CLOCK_REALTIME
              A settable system-wide real-time clock.

       CLOCK_TAI (since Linux 3.10)
              A system-wide clock derived from wall-clock time but ignoring leap seconds.

       CLOCK_MONOTONIC
              A nonsettable, monotonically increasing clock that measures time since some unspecified point in the past that does not change after system startup.

       CLOCK_BOOTTIME (since Linux 2.6.39)
              Identical to CLOCK_MONOTONIC, except that it also includes any time that the system is suspended.

       CLOCK_PROCESS_CPUTIME_ID
              A settable per-process clock that measures CPU time consumed by all threads in the process.

       See clock_getres(2) for further details on these clocks.  In addition, the CPU clock IDs returned by clock_getcpuclockid(3) and pthread_getcpuclockid(3) can also be passed in clockid.

       If flags is 0, then the value specified in request is interpreted as an interval relative to the current value of the clock specified by clockid.

       If flags is TIMER_ABSTIME, then request is interpreted as an absolute time as measured by the clock, clockid.  If request is  less  than  or  equal  to  the  current  value  of  the  clock,  then
       clock_nanosleep() returns immediately without suspending the calling thread.

       clock_nanosleep()  suspends the execution of the calling thread until either at least the time specified by request has elapsed, or a signal is delivered that causes a signal handler to be called
       or that terminates the process.

       If the call is interrupted by a signal handler, clock_nanosleep() fails with the error EINTR.  In addition, if remain is not NULL, and flags was not TIMER_ABSTIME, it returns  the  remaining  un‐
       slept time in remain.  This value can then be used to call clock_nanosleep() again and complete a (relative) sleep.

RETURN VALUE
       On successfully sleeping for the requested interval, clock_nanosleep() returns 0.  If the call is interrupted by a signal handler or encounters an error, then it returns one of the positive error
       number listed in ERRORS.

ERRORS
       EFAULT request or remain specified an invalid address.

       EINTR  The sleep was interrupted by a signal handler; see signal(7).

       EINVAL The value in the tv_nsec field was not in the range [0, 999999999] or tv_sec was negative.

       EINVAL clockid was invalid.  (CLOCK_THREAD_CPUTIME_ID is not a permitted value for clockid.)

       ENOTSUP
              The kernel does not support sleeping against this clockid.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.  Linux 2.6, glibc 2.1.

NOTES
       If the interval specified in request is not an exact multiple of the granularity underlying clock (see time(7)), then the interval will be rounded up to the next multiple.  Furthermore, after the
       sleep completes, there may still be a delay before the CPU becomes free to once again execute the calling thread.

       Using  an absolute timer is useful for preventing timer drift problems of the type described in nanosleep(2).  (Such problems are exacerbated in programs that try to restart a relative sleep that
       is repeatedly interrupted by signals.)  To perform a relative sleep that avoids these problems, call clock_gettime(2) for the desired clock, add the desired interval to the returned  time  value,
       and then call clock_nanosleep() with the TIMER_ABSTIME flag.

       clock_nanosleep() is never restarted after being interrupted by a signal handler, regardless of the use of the sigaction(2) SA_RESTART flag.

       The remain argument is unused, and unnecessary, when flags is TIMER_ABSTIME.  (An absolute sleep can be restarted using the same request argument.)

       POSIX.1 specifies that clock_nanosleep() has no effect on signals dispositions or the signal mask.

       POSIX.1  specifies that after changing the value of the CLOCK_REALTIME clock via clock_settime(2), the new clock value shall be used to determine the time at which a thread blocked on an absolute
       clock_nanosleep() will wake up; if the new clock value falls past the end of the sleep interval, then the clock_nanosleep() call will return immediately.

       POSIX.1 specifies that changing the value of the CLOCK_REALTIME clock via clock_settime(2) shall have no effect on a thread that is blocked on a relative clock_nanosleep().

SEE ALSO
       clock_getres(2), nanosleep(2), restart_syscall(2), timer_create(2), sleep(3), timespec(3), usleep(3), time(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                              clock_nanosleep(2)
