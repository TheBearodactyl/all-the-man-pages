std::basic_stringbuf< _CharLstd::basic_stringbuf<a_CharT, _Traits, _Alloc >(3)

NAME
       std::basic_stringbuf< _CharT, _Traits, _Alloc > - The actual work of
       input and output (for std::string).

SYNOPSIS
       Inherits std::basic_streambuf< _CharT, _Traits >.

   Public Types
       typedef __string_type::size_type __size_type
       typedef basic_streambuf< char_type, traits_type > __streambuf_type
       typedef basic_string< char_type, _Traits, _Alloc > __string_type
       typedef _Alloc allocator_type
       typedef _CharT char_type
       typedef traits_type::int_type int_type
       typedef traits_type::off_type off_type
       typedef traits_type::pos_type pos_type
       typedef _Traits traits_type

   Public Member Functions
       basic_stringbuf ()
           Starts with an empty string buffer.
       basic_stringbuf (basic_stringbuf &&__rhs)
       basic_stringbuf (const __string_type &__str, ios_base::openmode
           __mode=ios_base::in|ios_base::out)
           Starts with an existing string buffer.
       basic_stringbuf (const basic_stringbuf &)=delete
       basic_stringbuf (ios_base::openmode __mode)
           Starts with an empty string buffer.
       locale getloc () const
           Locale access.
       streamsize in_avail ()
           Looking ahead into the stream.
       basic_stringbuf & operator= (basic_stringbuf &&__rhs)
       basic_stringbuf & operator= (const basic_stringbuf &)=delete
       locale pubimbue (const locale &__loc)
           Entry point for imbue().
       int_type sbumpc ()
           Getting the next character.
       int_type sgetc ()
           Getting the next character.
       streamsize sgetn (char_type *__s, streamsize __n)
           Entry point for xsgetn.
       int_type snextc ()
           Getting the next character.
       int_type sputbackc (char_type __c)
           Pushing characters back into the input stream.
       int_type sputc (char_type __c)
           Entry point for all single-character output functions.
       streamsize sputn (const char_type *__s, streamsize __n)
           Entry point for all single-character output functions.
       __string_type str () const
           Copying out the string buffer.
       void str (const __string_type &__s)
           Setting a new buffer.
       int_type sungetc ()
           Moving backwards in the input stream.
       void swap (basic_stringbuf &__rhs) noexcept(_Noexcept_swap::value)

           basic_streambuf * pubsetbuf (char_type *__s, streamsize __n)
               Entry points for derived buffer functions.
           pos_type pubseekoff (off_type __off, ios_base::seekdir __way,
               ios_base::openmode __mode=ios_base::in|ios_base::out)
               Alters the stream position.
           pos_type pubseekpos (pos_type __sp, ios_base::openmode
               __mode=ios_base::in|ios_base::out)
               Alters the stream position.
           int pubsync ()
               Calls virtual sync function.

   Protected Member Functions
       void __safe_gbump (streamsize __n)
       void __safe_pbump (streamsize __n)
       void _M_pbump (char_type *__pbeg, char_type *__pend, off_type __off)
       void _M_stringbuf_init (ios_base::openmode __mode)
       void _M_sync (char_type *__base, __size_type __i, __size_type __o)
       void _M_update_egptr ()
       void gbump (int __n)
           Moving the read position.
       virtual void imbue (const locale &__loc)
           Changes translations.
       virtual int_type overflow (int_type __c=traits_type::eof())
           Consumes data from the buffer; writes to the controlled sequence.
       virtual int_type pbackfail (int_type __c=traits_type::eof())
           Tries to back up the input sequence.
       void pbump (int __n)
           Moving the write position.
       virtual pos_type seekoff (off_type __off, ios_base::seekdir __way,
           ios_base::openmode __mode=ios_base::in|ios_base::out)
           Alters the stream positions.
       virtual pos_type seekpos (pos_type __sp, ios_base::openmode
           __mode=ios_base::in|ios_base::out)
           Alters the stream positions.
       virtual __streambuf_type * setbuf (char_type *__s, streamsize __n)
           Manipulates the buffer.
       void setg (char_type *__gbeg, char_type *__gnext, char_type *__gend)
           Setting the three read area pointers.
       void setp (char_type *__pbeg, char_type *__pend)
           Setting the three write area pointers.
       virtual streamsize showmanyc ()
           Investigating the data available.
       void swap (basic_streambuf &__sb)
       virtual int sync ()
           Synchronizes the buffer arrays with the controlled sequences.
       virtual int_type uflow ()
           Fetches more data from the controlled sequence.
       virtual int_type underflow ()
           Fetches more data from the controlled sequence.
       virtual streamsize xsgetn (char_type *__s, streamsize __n)
           Multiple character extraction.
       virtual streamsize xsputn (const char_type *__s, streamsize __n)
           Multiple character insertion.

           char_type * eback () const
               Access to the get area.
           char_type * gptr () const
               Access to the get area.
           char_type * egptr () const
               Access to the get area.

           char_type * pbase () const
               Access to the put area.
           char_type * pptr () const
               Access to the put area.
           char_type * epptr () const
               Access to the put area.

   Protected Attributes
       locale _M_buf_locale
           Current locale setting.
       char_type * _M_in_beg
           Start of get area.
       char_type * _M_in_cur
           Current read area.
       char_type * _M_in_end
           End of get area.
       ios_base::openmode _M_mode
           Place to stash in || out || in | out settings for current
           stringbuf.
       char_type * _M_out_beg
           Start of put area.
       char_type * _M_out_cur
           Current put area.
       char_type * _M_out_end
           End of put area.
       __string_type _M_string

Detailed Description
   template<typename _CharT, typename _Traits, typename _Alloc>
       class std::basic_stringbuf< _CharT, _Traits, _Alloc >"The actual work
       of input and output (for std::string).

       Template Parameters
           _CharT Type of character stream.
           _Traits Traits for character type, defaults to char_traits<_CharT>.
           _Alloc Allocator type, defaults to allocator<_CharT>.

       This class associates either or both of its input and output sequences
       with a sequence of characters, which can be initialized from, or made
       available as, a std::basic_string. (Paraphrased from [27.7.1]/1.)

       For this class, open modes (of type ios_base::openmode) have in set if
       the input sequence can be read, and out set if the output sequence can
       be written.

       Definition at line 72 of file sstream.

Member Typedef Documentation
   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       __string_type::size_type std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::__size_type
       Definition at line 96 of file sstream.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       basic_streambuf<char_type, traits_type> std::basic_stringbuf< _CharT,
       _Traits, _Alloc >::__streambuf_type
       Definition at line 94 of file sstream.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       basic_string<char_type, _Traits, _Alloc> std::basic_stringbuf< _CharT,
       _Traits, _Alloc >::__string_type
       Definition at line 95 of file sstream.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       _Alloc std::basic_stringbuf< _CharT, _Traits, _Alloc >::allocator_type
       Definition at line 89 of file sstream.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       _CharT std::basic_stringbuf< _CharT, _Traits, _Alloc >::char_type
       Definition at line 85 of file sstream.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       traits_type::int_type std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::int_type
       Definition at line 90 of file sstream.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       traits_type::off_type std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::off_type
       Definition at line 92 of file sstream.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       traits_type::pos_type std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::pos_type
       Definition at line 91 of file sstream.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       _Traits std::basic_stringbuf< _CharT, _Traits, _Alloc >::traits_type
       Definition at line 86 of file sstream.

Constructor & Destructor Documentation
   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::basic_stringbuf ()
       [inline]
       Starts with an empty string buffer. The default constructor initializes
       the parent class using its own default ctor.

       Definition at line 114 of file sstream.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::basic_stringbuf
       (ios_base::openmode __mode) [inline],  [explicit]
       Starts with an empty string buffer.

       Parameters
           __mode Whether the buffer can read, or write, or both.

       The default constructor initializes the parent class using its own
       default ctor.

       Definition at line 126 of file sstream.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::basic_stringbuf (const
       __string_type & __str, ios_base::openmode __mode = ios_base::in |
       ios_base::out) [inline],  [explicit]
       Starts with an existing string buffer.

       Parameters
           __str A string to copy as a starting buffer.
           __mode Whether the buffer can read, or write, or both.

       This constructor initializes the parent class using its own default
       ctor.

       Definition at line 139 of file sstream.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::basic_stringbuf
       (basic_stringbuf< _CharT, _Traits, _Alloc > && __rhs) [inline]
       Definition at line 148 of file sstream.

Member Function Documentation
   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::__safe_gbump (streamsize __n) [inline],
       [protected],  [inherited]
       Definition at line 800 of file streambuf.

   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::__safe_pbump (streamsize __n) [inline],
       [protected],  [inherited]
       Definition at line 803 of file streambuf.

   template<class _CharT , class _Traits , class _Alloc > void
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::_M_pbump (char_type *
       __pbeg, char_type * __pend, off_type __off) [protected]
       Definition at line 276 of file sstream.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::_M_stringbuf_init
       (ios_base::openmode __mode) [inline],  [protected]
       Definition at line 326 of file sstream.

   template<class _CharT , class _Traits , class _Alloc > void
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::_M_sync (char_type *
       __base, __size_type __i, __size_type __o) [protected]
       Definition at line 245 of file sstream.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::_M_update_egptr ()
       [inline],  [protected]
       Definition at line 403 of file sstream.

   template<typename _CharT , typename _Traits > char_type *
       std::basic_streambuf< _CharT, _Traits >::eback () const [inline],
       [protected],  [inherited]
       Access to the get area. These functions are only available to other
       protected functions, including derived classes.

       • eback() returns the beginning pointer for the input sequence

       • gptr() returns the next pointer for the input sequence

       • egptr() returns the end pointer for the input sequence

       Definition at line 487 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_beg.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputbackc(), and
       std::basic_streambuf< _CharT, _Traits >::sungetc().

   template<typename _CharT , typename _Traits > char_type *
       std::basic_streambuf< _CharT, _Traits >::egptr () const [inline],
       [protected],  [inherited]
       Access to the get area. These functions are only available to other
       protected functions, including derived classes.

       • eback() returns the beginning pointer for the input sequence

       • gptr() returns the next pointer for the input sequence

       • egptr() returns the end pointer for the input sequence

       Definition at line 493 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_end.

       Referenced by std::basic_streambuf< _CharT, _Traits >::in_avail(),
       std::basic_streambuf< _CharT, _Traits >::sbumpc(),
       std::basic_streambuf< _CharT, _Traits >::sgetc(), std::basic_stringbuf<
       _CharT, _Traits, _Alloc >::showmanyc(), and std::wbuffer_convert<
       _Codecvt, _Elem, _Tr >::underflow().

   template<typename _CharT , typename _Traits > char_type *
       std::basic_streambuf< _CharT, _Traits >::epptr () const [inline],
       [protected],  [inherited]
       Access to the put area. These functions are only available to other
       protected functions, including derived classes.

       • pbase() returns the beginning pointer for the output sequence

       • pptr() returns the next pointer for the output sequence

       • epptr() returns the end pointer for the output sequence

       Definition at line 540 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_end.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputc().

   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::gbump (int __n) [inline],  [protected],  [inherited]
       Moving the read position.

       Parameters
           __n The delta by which to move.

       This just advances the read position without returning any data.

       Definition at line 503 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_cur.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sbumpc(),
       std::basic_streambuf< _CharT, _Traits >::sputbackc(),
       std::basic_streambuf< _CharT, _Traits >::sungetc(), and
       std::basic_streambuf< _CharT, _Traits >::uflow().

   template<typename _CharT , typename _Traits > locale std::basic_streambuf<
       _CharT, _Traits >::getloc () const [inline],  [inherited]
       Locale access.

       Returns
           The current locale in effect.

       If pubimbue(loc) has been called, then the most recent loc is returned.
       Otherwise the global locale in effect at the time of construction is
       returned.

       Definition at line 231 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_buf_locale.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pubimbue().

   template<typename _CharT , typename _Traits > char_type *
       std::basic_streambuf< _CharT, _Traits >::gptr () const [inline],
       [protected],  [inherited]
       Access to the get area. These functions are only available to other
       protected functions, including derived classes.

       • eback() returns the beginning pointer for the input sequence

       • gptr() returns the next pointer for the input sequence

       • egptr() returns the end pointer for the input sequence

       Definition at line 490 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_cur.

       Referenced by std::basic_streambuf< _CharT, _Traits >::in_avail(),
       std::basic_streambuf< _CharT, _Traits >::sbumpc(),
       std::basic_streambuf< _CharT, _Traits >::sgetc(), std::basic_stringbuf<
       _CharT, _Traits, _Alloc >::showmanyc(), std::basic_streambuf< _CharT,
       _Traits >::sputbackc(), std::basic_streambuf< _CharT, _Traits
       >::sungetc(), std::basic_streambuf< _CharT, _Traits >::uflow(), and
       std::wbuffer_convert< _Codecvt, _Elem, _Tr >::underflow().

   template<typename _CharT , typename _Traits > virtual void
       std::basic_streambuf< _CharT, _Traits >::imbue (const locale & __loc)
       [inline],  [protected],  [virtual],  [inherited]
       Changes translations.

       Parameters
           __loc A new locale.

       Translations done during I/O which depend on the current locale are
       changed by this call. The standard adds, Between invocations of this
       function a class derived from streambuf can safely cache results of
       calls to locale functions and to members of facets so obtained.

       Note
           Base class version does nothing.

       Reimplemented in std::basic_filebuf< _CharT, _Traits >,
       std::basic_filebuf< _CharT, encoding_char_traits< _CharT > >,
       std::basic_filebuf< _CharT, std::char_traits< _CharT > >, and
       std::basic_filebuf< char_type, traits_type >.

       Definition at line 581 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pubimbue().

   template<typename _CharT , typename _Traits > streamsize
       std::basic_streambuf< _CharT, _Traits >::in_avail () [inline],
       [inherited]
       Looking ahead into the stream.

       Returns
           The number of characters available.

       If a read position is available, returns the number of characters
       available for reading before the buffer must be refilled. Otherwise
       returns the derived showmanyc().

       Definition at line 289 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::egptr(),
       std::basic_streambuf< _CharT, _Traits >::gptr(), and
       std::basic_streambuf< _CharT, _Traits >::showmanyc().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_stringbuf & std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::operator= (basic_stringbuf< _CharT, _Traits, _Alloc > && __rhs)
       [inline]
       Definition at line 206 of file sstream.

   template<class _CharT , class _Traits , class _Alloc > basic_stringbuf<
       _CharT, _Traits, _Alloc >::int_type std::basic_stringbuf< _CharT,
       _Traits, _Alloc >::overflow (int_type __c = traits_type::eof())
       [protected],  [virtual]
       Consumes data from the buffer; writes to the controlled sequence.

       Parameters
           __c An additional character to consume.

       Returns
           eof() to indicate failure, something else (usually __c, or
           not_eof())

       Informally, this function is called when the output buffer is full (or
       does not exist, as buffering need not actually be done). If a buffer
       exists, it is consumed, with some effect on the controlled sequence.
       (Typically, the buffer is written out to the sequence verbatim.) In
       either case, the character c is also written out, if __c is not eof().

       For a formal definition of this function, see a good text such as
       Langer & Kreft, or [27.5.2.4.5]/3-7.

       A functioning output streambuf can be created by overriding only this
       function (no buffer area will be used).

       Note
           Base class version does nothing, returns eof().

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 79 of file sstream.tcc.

       References std::basic_string< _CharT, _Traits, _Alloc >::assign(),
       std::ios_base::in, std::max(), std::min(), std::ios_base::out,
       std::basic_string< _CharT, _Traits, _Alloc >::push_back(), and
       std::basic_string< _CharT, _Traits, _Alloc >::reserve().

   template<class _CharT , class _Traits , class _Alloc > basic_stringbuf<
       _CharT, _Traits, _Alloc >::int_type std::basic_stringbuf< _CharT,
       _Traits, _Alloc >::pbackfail (int_type __c = traits_type::eof())
       [protected],  [virtual]
       Tries to back up the input sequence.

       Parameters
           __c The character to be inserted back into the sequence.

       Returns
           eof() on failure, some other value on success

       Postcondition
           The constraints of gptr(), eback(), and pptr() are the same as for
           underflow().

       Note
           Base class version does nothing, returns eof().

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 45 of file sstream.tcc.

       References std::ios_base::out.

   template<typename _CharT , typename _Traits > char_type *
       std::basic_streambuf< _CharT, _Traits >::pbase () const [inline],
       [protected],  [inherited]
       Access to the put area. These functions are only available to other
       protected functions, including derived classes.

       • pbase() returns the beginning pointer for the output sequence

       • pptr() returns the next pointer for the output sequence

       • epptr() returns the end pointer for the output sequence

       Definition at line 534 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_beg.

       Referenced by std::basic_stringbuf< _CharT, _Traits, _Alloc >::str().

   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::pbump (int __n) [inline],  [protected],  [inherited]
       Moving the write position.

       Parameters
           __n The delta by which to move.

       This just advances the write position without returning any data.

       Definition at line 550 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_cur.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputc().

   template<typename _CharT , typename _Traits > char_type *
       std::basic_streambuf< _CharT, _Traits >::pptr () const [inline],
       [protected],  [inherited]
       Access to the put area. These functions are only available to other
       protected functions, including derived classes.

       • pbase() returns the beginning pointer for the output sequence

       • pptr() returns the next pointer for the output sequence

       • epptr() returns the end pointer for the output sequence

       Definition at line 537 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_cur.

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputc().

   template<typename _CharT , typename _Traits > locale std::basic_streambuf<
       _CharT, _Traits >::pubimbue (const locale & __loc) [inline],
       [inherited]
       Entry point for imbue().

       Parameters
           __loc The new locale.

       Returns
           The previous locale.

       Calls the derived imbue(__loc).

       Definition at line 214 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_buf_locale,
       std::basic_streambuf< _CharT, _Traits >::getloc(), and
       std::basic_streambuf< _CharT, _Traits >::imbue().

   template<typename _CharT , typename _Traits > pos_type
       std::basic_streambuf< _CharT, _Traits >::pubseekoff (off_type __off,
       ios_base::seekdir __way, ios_base::openmode __mode = ios_base::in |
       ios_base::out) [inline],  [inherited]
       Alters the stream position.

       Parameters
           __off Offset.
           __way Value for ios_base::seekdir.
           __mode Value for ios_base::openmode.

       Calls virtual seekoff function.

       Definition at line 256 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::seekoff().

   template<typename _CharT , typename _Traits > pos_type
       std::basic_streambuf< _CharT, _Traits >::pubseekpos (pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out) [inline],
       [inherited]
       Alters the stream position.

       Parameters
           __sp Position
           __mode Value for ios_base::openmode.

       Calls virtual seekpos function.

       Definition at line 268 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::seekpos().

   template<typename _CharT , typename _Traits > basic_streambuf *
       std::basic_streambuf< _CharT, _Traits >::pubsetbuf (char_type * __s,
       streamsize __n) [inline],  [inherited]
       Entry points for derived buffer functions. The public versions of
       pubfoo dispatch to the protected derived foo member functions, passing
       the arguments (if any) and returning the result unchanged.

       Definition at line 244 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::setbuf().

   template<typename _CharT , typename _Traits > int std::basic_streambuf<
       _CharT, _Traits >::pubsync () [inline],  [inherited]
       Calls virtual sync function.

       Definition at line 276 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::sync().

       Referenced by std::wbuffer_convert< _Codecvt, _Elem, _Tr >::sync(), and
       std::basic_istream< _CharT, _Traits >::sync().

   template<typename _CharT , typename _Traits > int_type
       std::basic_streambuf< _CharT, _Traits >::sbumpc () [inline],
       [inherited]
       Getting the next character.

       Returns
           The next character, or eof.

       If the input read position is available, returns that character and
       increments the read pointer, otherwise calls and returns uflow().

       Definition at line 321 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::egptr(),
       std::basic_streambuf< _CharT, _Traits >::gbump(), std::basic_streambuf<
       _CharT, _Traits >::gptr(), and std::basic_streambuf< _CharT, _Traits
       >::uflow().

       Referenced by std::basic_istream< _CharT, _Traits >::getline(),
       std::istreambuf_iterator< _CharT, _Traits >::operator++(), and
       std::basic_streambuf< _CharT, _Traits >::snextc().

   template<class _CharT , class _Traits , class _Alloc > basic_stringbuf<
       _CharT, _Traits, _Alloc >::pos_type std::basic_stringbuf< _CharT,
       _Traits, _Alloc >::seekoff (off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out) [protected],
       [virtual]
       Alters the stream positions. Each derived class provides its own
       appropriate behavior.

       Note
           Base class version does nothing, returns a pos_type that represents
           an invalid stream position.

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 167 of file sstream.tcc.

       References std::ios_base::cur, std::ios_base::end, std::ios_base::in,
       and std::ios_base::out.

   template<class _CharT , class _Traits , class _Alloc > basic_stringbuf<
       _CharT, _Traits, _Alloc >::pos_type std::basic_stringbuf< _CharT,
       _Traits, _Alloc >::seekpos (pos_type, ios_base::openmode = ios_base::in
       | ios_base::out) [protected],  [virtual]
       Alters the stream positions. Each derived class provides its own
       appropriate behavior.

       Note
           Base class version does nothing, returns a pos_type that represents
           an invalid stream position.

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 215 of file sstream.tcc.

       References std::ios_base::in, and std::ios_base::out.

   template<typename _CharT , typename _Traits , typename _Alloc > virtual
       __streambuf_type * std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::setbuf (char_type * __s, streamsize __n) [inline],  [protected],
       [virtual]
       Manipulates the buffer.

       Parameters
           __s Pointer to a buffer area.
           __n Size of __s.

       Returns
           this

       If no buffer has already been created, and both __s and __n are non-
       zero, then __s is used as a buffer; see
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering
       for more.

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 368 of file sstream.

       References std::basic_string< _CharT, _Traits, _Alloc >::clear().

   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::setg (char_type * __gbeg, char_type * __gnext,
       char_type * __gend) [inline],  [protected],  [inherited]
       Setting the three read area pointers.

       Parameters
           __gbeg A pointer.
           __gnext A pointer.
           __gend A pointer.

       Postcondition
           __gbeg == eback(), __gnext == gptr(), and __gend == egptr()

       Definition at line 514 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_in_beg,
       std::basic_streambuf< _CharT, _Traits >::_M_in_cur, and
       std::basic_streambuf< _CharT, _Traits >::_M_in_end.

       Referenced by std::wbuffer_convert< _Codecvt, _Elem, _Tr
       >::wbuffer_convert().

   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::setp (char_type * __pbeg, char_type * __pend)
       [inline],  [protected],  [inherited]
       Setting the three write area pointers.

       Parameters
           __pbeg A pointer.
           __pend A pointer.

       Postcondition
           __pbeg == pbase(), __pbeg == pptr(), and __pend == epptr()

       Definition at line 560 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::_M_out_beg,
       std::basic_streambuf< _CharT, _Traits >::_M_out_cur, and
       std::basic_streambuf< _CharT, _Traits >::_M_out_end.

       Referenced by std::wbuffer_convert< _Codecvt, _Elem, _Tr
       >::wbuffer_convert().

   template<typename _CharT , typename _Traits > int_type
       std::basic_streambuf< _CharT, _Traits >::sgetc () [inline],
       [inherited]
       Getting the next character.

       Returns
           The next character, or eof.

       If the input read position is available, returns that character,
       otherwise calls and returns underflow(). Does not move the read
       position after fetching the character.

       Definition at line 343 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::egptr(),
       std::basic_streambuf< _CharT, _Traits >::gptr(), and
       std::basic_streambuf< _CharT, _Traits >::underflow().

       Referenced by std::basic_istream< _CharT, _Traits >::sentry::sentry(),
       std::basic_istream< _CharT, _Traits >::get(), std::basic_istream<
       _CharT, _Traits >::getline(), std::basic_istream< _CharT, _Traits
       >::ignore(), std::istreambuf_iterator< _CharT, _Traits >::operator++(),
       std::basic_istream< char >::seekg(), and std::basic_streambuf< _CharT,
       _Traits >::snextc().

   template<typename _CharT , typename _Traits > streamsize
       std::basic_streambuf< _CharT, _Traits >::sgetn (char_type * __s,
       streamsize __n) [inline],  [inherited]
       Entry point for xsgetn.

       Parameters
           __s A buffer area.
           __n A count.

       Returns xsgetn(__s,__n). The effect is to fill __s[0] through
       __s[__n-1] with characters from the input sequence, if possible.

       Definition at line 362 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::xsgetn().

   template<typename _CharT , typename _Traits , typename _Alloc > virtual
       streamsize std::basic_stringbuf< _CharT, _Traits, _Alloc >::showmanyc
       () [inline],  [protected],  [virtual]
       Investigating the data available.

       Returns
           An estimate of the number of characters available in the input
           sequence, or -1.

       If it returns a positive value, then successive calls to underflow()
       will not return traits::eof() until at least that number of characters
       have been supplied. If showmanyc() returns -1, then calls to
       underflow() or uflow() will fail. [27.5.2.4.3]/1

       Note
           Base class version does nothing, returns zero.

           The standard adds that the intention is not only that the calls [to
           underflow or uflow] will not return eof() but that they will return
           immediately.

           The standard adds that the morphemes of showmanyc are es-how-many-
           see, not show-manic.

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 336 of file sstream.

       References std::basic_stringbuf< _CharT, _Traits, _Alloc >::_M_mode,
       std::basic_streambuf< _CharT, _Traits >::egptr(), std::basic_streambuf<
       _CharT, _Traits >::gptr(), and std::ios_base::in.

   template<typename _CharT , typename _Traits > int_type
       std::basic_streambuf< _CharT, _Traits >::snextc () [inline],
       [inherited]
       Getting the next character.

       Returns
           The next character, or eof.

       Calls sbumpc(), and if that function returns traits::eof(), so does
       this function. Otherwise, sgetc().

       Definition at line 303 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::sbumpc(), and
       std::basic_streambuf< _CharT, _Traits >::sgetc().

       Referenced by std::basic_istream< _CharT, _Traits >::sentry::sentry(),
       std::basic_istream< _CharT, _Traits >::get(), std::basic_istream<
       _CharT, _Traits >::getline(), and std::basic_istream< char
       >::putback().

   template<typename _CharT , typename _Traits > int_type
       std::basic_streambuf< _CharT, _Traits >::sputbackc (char_type __c)
       [inline],  [inherited]
       Pushing characters back into the input stream.

       Parameters
           __c The character to push back.

       Returns
           The previous character, if possible.

       Similar to sungetc(), but __c is pushed onto the stream instead of the
       previous character. If successful, the next character fetched from the
       input stream will be __c.

       Definition at line 377 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::eback(),
       std::basic_streambuf< _CharT, _Traits >::gbump(), std::basic_streambuf<
       _CharT, _Traits >::gptr(), and std::basic_streambuf< _CharT, _Traits
       >::pbackfail().

       Referenced by std::basic_istream< _CharT, _Traits >::putback().

   template<typename _CharT , typename _Traits > int_type
       std::basic_streambuf< _CharT, _Traits >::sputc (char_type __c)
       [inline],  [inherited]
       Entry point for all single-character output functions.

       Parameters
           __c A character to output.

       Returns
           __c, if possible.

       One of two public output functions.

       If a write position is available for the output sequence (i.e., the
       buffer is not full), stores __c in that position, increments the
       position, and returns traits::to_int_type(__c). If a write position is
       not available, returns overflow(__c).

       Definition at line 429 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::epptr(),
       std::basic_streambuf< _CharT, _Traits >::overflow(),
       std::basic_streambuf< _CharT, _Traits >::pbump(), and
       std::basic_streambuf< _CharT, _Traits >::pptr().

       Referenced by std::ostreambuf_iterator< _CharT, _Traits >::operator=(),
       and std::wbuffer_convert< _Codecvt, _Elem, _Tr >::overflow().

   template<typename _CharT , typename _Traits > streamsize
       std::basic_streambuf< _CharT, _Traits >::sputn (const char_type * __s,
       streamsize __n) [inline],  [inherited]
       Entry point for all single-character output functions.

       Parameters
           __s A buffer read area.
           __n A count.

       One of two public output functions.

       Returns xsputn(__s,__n). The effect is to write __s[0] through
       __s[__n-1] to the output sequence, if possible.

       Definition at line 455 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::xsputn().

   template<typename _CharT , typename _Traits , typename _Alloc >
       __string_type std::basic_stringbuf< _CharT, _Traits, _Alloc >::str ()
       const [inline]
       Copying out the string buffer.

       Returns
           A copy of one of the underlying sequences.

       If the buffer is only created in input mode, the underlying character
       sequence is equal to the input sequence; otherwise, it is equal to the
       output sequence. [27.7.1.2]/1

       Definition at line 242 of file sstream.

       References std::basic_string< _CharT, _Traits, _Alloc >::assign(),
       std::basic_string< _CharT, _Traits, _Alloc >::get_allocator(), and
       std::basic_streambuf< _CharT, _Traits >::pbase().

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::str (const
       __string_type & __s) [inline]
       Setting a new buffer.

       Parameters
           __s The string to use as a new sequence.

       Deallocates any previous stored sequence, then copies s to use as a new
       one.

       Definition at line 295 of file sstream.

       References std::basic_stringbuf< _CharT, _Traits, _Alloc >::_M_mode,
       std::basic_string< _CharT, _Traits, _Alloc >::assign(),
       std::basic_string< _CharT, _Traits, _Alloc >::data(), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits > int_type
       std::basic_streambuf< _CharT, _Traits >::sungetc () [inline],
       [inherited]
       Moving backwards in the input stream.

       Returns
           The previous character, if possible.

       If a putback position is available, this function decrements the input
       pointer and returns that character. Otherwise, calls and returns
       pbackfail(). The effect is to unget the last character gotten.

       Definition at line 402 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::eback(),
       std::basic_streambuf< _CharT, _Traits >::gbump(), std::basic_streambuf<
       _CharT, _Traits >::gptr(), and std::basic_streambuf< _CharT, _Traits
       >::pbackfail().

       Referenced by std::basic_istream< _CharT, _Traits >::unget().

   template<typename _CharT , typename _Traits > void std::basic_streambuf<
       _CharT, _Traits >::swap (basic_streambuf< _CharT, _Traits > & __sb)
       [inline],  [protected],  [inherited]
       Definition at line 817 of file streambuf.

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::swap (basic_stringbuf<
       _CharT, _Traits, _Alloc > & __rhs) [inline],  [noexcept]
       Definition at line 219 of file sstream.

   template<typename _CharT , typename _Traits > virtual int
       std::basic_streambuf< _CharT, _Traits >::sync () [inline],
       [protected],  [virtual],  [inherited]
       Synchronizes the buffer arrays with the controlled sequences.

       Returns
           -1 on failure.

       Each derived class provides its own appropriate behavior, including the
       definition of failure.

       Note
           Base class version does nothing, returns zero.

       Reimplemented in std::wbuffer_convert< _Codecvt, _Elem, _Tr >,
       __gnu_cxx::stdio_sync_filebuf< _CharT, _Traits >, std::basic_filebuf<
       _CharT, _Traits >, std::basic_filebuf< _CharT, encoding_char_traits<
       _CharT > >, std::basic_filebuf< _CharT, std::char_traits< _CharT > >,
       and std::basic_filebuf< char_type, traits_type >.

       Definition at line 632 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pubsync().

   template<typename _CharT , typename _Traits > virtual int_type
       std::basic_streambuf< _CharT, _Traits >::uflow () [inline],
       [protected],  [virtual],  [inherited]
       Fetches more data from the controlled sequence.

       Returns
           The first character from the pending sequence.

       Informally, this function does the same thing as underflow(), and in
       fact is required to call that function. It also returns the new
       character, like underflow() does. However, this function also moves the
       read position forward by one.

       Reimplemented in __gnu_cxx::stdio_sync_filebuf< _CharT, _Traits >.

       Definition at line 705 of file streambuf.

       References std::basic_streambuf< _CharT, _Traits >::gbump(),
       std::basic_streambuf< _CharT, _Traits >::gptr(), and
       std::basic_streambuf< _CharT, _Traits >::underflow().

       Referenced by std::basic_streambuf< _CharT, _Traits >::sbumpc().

   template<class _CharT , class _Traits , class _Alloc > basic_stringbuf<
       _CharT, _Traits, _Alloc >::int_type std::basic_stringbuf< _CharT,
       _Traits, _Alloc >::underflow [protected],  [virtual]
       Fetches more data from the controlled sequence.

       Returns
           The first character from the pending sequence.

       Informally, this function is called when the input buffer is exhausted
       (or does not exist, as buffering need not actually be done). If a
       buffer exists, it is refilled. In either case, the next available
       character is returned, or traits::eof() to indicate a null pending
       sequence.

       For a formal definition of the pending sequence, see a good text such
       as Langer & Kreft, or [27.5.2.4.3]/7-14.

       A functioning input streambuf can be created by overriding only this
       function (no buffer area will be used). For an example, see
       https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html

       Note
           Base class version does nothing, returns eof().

       Reimplemented from std::basic_streambuf< _CharT, _Traits >.

       Definition at line 149 of file sstream.tcc.

       References std::ios_base::in.

   template<typename _CharT , typename _Traits > streamsize
       std::basic_streambuf< _CharT, _Traits >::xsgetn (char_type * __s,
       streamsize __n) [protected],  [virtual],  [inherited]
       Multiple character extraction.

       Parameters
           __s A buffer area.
           __n Maximum number of characters to assign.

       Returns
           The number of characters assigned.

       Fills __s[0] through __s[__n-1] with characters from the input
       sequence, as if by sbumpc(). Stops when either __n characters have been
       copied, or when traits::eof() would be copied.

       It is expected that derived classes provide a more efficient
       implementation by overriding this definition.

       Reimplemented in std::basic_filebuf< _CharT, _Traits >,
       std::basic_filebuf< _CharT, encoding_char_traits< _CharT > >,
       std::basic_filebuf< _CharT, std::char_traits< _CharT > >, and
       std::basic_filebuf< char_type, traits_type >.

       Definition at line 45 of file streambuf.tcc.

       References std::min().

       Referenced by std::basic_streambuf< _CharT, _Traits >::sgetn().

   template<typename _CharT , typename _Traits > streamsize
       std::basic_streambuf< _CharT, _Traits >::xsputn (const char_type * __s,
       streamsize __n) [protected],  [virtual],  [inherited]
       Multiple character insertion.

       Parameters
           __s A buffer area.
           __n Maximum number of characters to write.

       Returns
           The number of characters written.

       Writes __s[0] through __s[__n-1] to the output sequence, as if by
       sputc(). Stops when either n characters have been copied, or when
       sputc() would return traits::eof().

       It is expected that derived classes provide a more efficient
       implementation by overriding this definition.

       Reimplemented in std::basic_filebuf< _CharT, _Traits >,
       std::basic_filebuf< _CharT, encoding_char_traits< _CharT > >,
       std::basic_filebuf< _CharT, std::char_traits< _CharT > >, and
       std::basic_filebuf< char_type, traits_type >.

       Definition at line 79 of file streambuf.tcc.

       References std::min().

       Referenced by std::basic_streambuf< _CharT, _Traits >::sputn().

Member Data Documentation
   template<typename _CharT , typename _Traits > locale std::basic_streambuf<
       _CharT, _Traits >::_M_buf_locale [protected],  [inherited]
       Current locale setting.

       Definition at line 197 of file streambuf.

       Referenced by std::basic_filebuf< _CharT, _Traits >::basic_filebuf(),
       std::basic_streambuf< _CharT, _Traits >::getloc(), and
       std::basic_streambuf< _CharT, _Traits >::pubimbue().

   template<typename _CharT , typename _Traits > char_type*
       std::basic_streambuf< _CharT, _Traits >::_M_in_beg [protected],
       [inherited]
       Start of get area.

       Definition at line 189 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::eback(), and
       std::basic_streambuf< _CharT, _Traits >::setg().

   template<typename _CharT , typename _Traits > char_type*
       std::basic_streambuf< _CharT, _Traits >::_M_in_cur [protected],
       [inherited]
       Current read area.

       Definition at line 190 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::gbump(),
       std::basic_streambuf< _CharT, _Traits >::gptr(), and
       std::basic_streambuf< _CharT, _Traits >::setg().

   template<typename _CharT , typename _Traits > char_type*
       std::basic_streambuf< _CharT, _Traits >::_M_in_end [protected],
       [inherited]
       End of get area.

       Definition at line 191 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::egptr(), and
       std::basic_streambuf< _CharT, _Traits >::setg().

   template<typename _CharT , typename _Traits , typename _Alloc >
       ios_base::openmode std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::_M_mode [protected]
       Place to stash in || out || in | out settings for current stringbuf.

       Definition at line 100 of file sstream.

       Referenced by std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::showmanyc(), and std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::str().

   template<typename _CharT , typename _Traits > char_type*
       std::basic_streambuf< _CharT, _Traits >::_M_out_beg [protected],
       [inherited]
       Start of put area.

       Definition at line 192 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pbase(), and
       std::basic_streambuf< _CharT, _Traits >::setp().

   template<typename _CharT , typename _Traits > char_type*
       std::basic_streambuf< _CharT, _Traits >::_M_out_cur [protected],
       [inherited]
       Current put area.

       Definition at line 193 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::pbump(),
       std::basic_streambuf< _CharT, _Traits >::pptr(), and
       std::basic_streambuf< _CharT, _Traits >::setp().

   template<typename _CharT , typename _Traits > char_type*
       std::basic_streambuf< _CharT, _Traits >::_M_out_end [protected],
       [inherited]
       End of put area.

       Definition at line 194 of file streambuf.

       Referenced by std::basic_streambuf< _CharT, _Traits >::epptr(), and
       std::basic_streambuf< _CharT, _Traits >::setp().

   template<typename _CharT , typename _Traits , typename _Alloc >
       __string_type std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::_M_string [protected]
       Definition at line 103 of file sstream.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                   std::basic_stringbuf< _CharT, _Traits, _Alloc >(3)
