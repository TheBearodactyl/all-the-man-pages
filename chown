CHOWN(1)                                                                                       User Commands                                                                                      CHOWN(1)

NAME
       chown - change file owner and group

SYNOPSIS
       chown [OPTION]... [OWNER][:[GROUP]] FILE...
       chown [OPTION]... --reference=RFILE FILE...

DESCRIPTION
       This  manual  page documents the GNU version of chown.  chown changes the user and/or group ownership of each given file.  If only an owner (a user name or numeric user ID) is given, that user is
       made the owner of each given file, and the files' group is not changed.  If the owner is followed by a colon and a group name (or numeric group ID), with no spaces between them, the group  owner‐
       ship  of  the  files  is  changed as well.  If a colon but no group name follows the user name, that user is made the owner of the files and the group of the files is changed to that user's login
       group.  If the colon and group are given, but the owner is omitted, only the group of the files is changed; in this case, chown performs the same function as chgrp.  If only a colon is given,  or
       if the entire operand is empty, neither the owner nor the group is changed.

OPTIONS
       Change the owner and/or group of each FILE to OWNER and/or GROUP.  With --reference, change the owner and group of each FILE to those of RFILE.

       -c, --changes
              like verbose but report only when a change is made

       -f, --silent, --quiet
              suppress most error messages

       -v, --verbose
              output a diagnostic for every file processed

       --dereference
              affect the referent of each symbolic link (this is the default), rather than the symbolic link itself

       -h, --no-dereference
              affect symbolic links instead of any referenced file (useful only on systems that can change the ownership of a symlink)

       --from=CURRENT_OWNER:CURRENT_GROUP
              change  the owner and/or group of each file only if its current owner and/or group match those specified here.  Either may be omitted, in which case a match is not required for the omitted
              attribute

       --no-preserve-root
              do not treat '/' specially (the default)

       --preserve-root
              fail to operate recursively on '/'

       --reference=RFILE
              use RFILE's owner and group rather than specifying OWNER:GROUP values.  RFILE is always dereferenced.

       -R, --recursive
              operate on files and directories recursively

       The following options modify how a hierarchy is traversed when the -R option is also specified.  If more than one is specified, only the final one takes effect.

       -H     if a command line argument is a symbolic link to a directory, traverse it

       -L     traverse every symbolic link to a directory encountered

       -P     do not traverse any symbolic links (default)

       --help display this help and exit

       --version
              output version information and exit

       Owner is unchanged if missing.  Group is unchanged if missing, but changed to login group if implied by a ':' following a symbolic OWNER.  OWNER and GROUP may be numeric as well as symbolic.

EXAMPLES
       chown root /u
              Change the owner of /u to "root".

       chown root:staff /u
              Likewise, but also change its group to "staff".

       chown -hR root /u
              Change the owner of /u and subfiles to "root".

AUTHOR
       Written by David MacKenzie and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report any translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2023 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       chown(2)

       Full documentation <https://www.gnu.org/software/coreutils/chown>
       or available locally via: info '(coreutils) chown invocation'

GNU coreutils 9.2                                                                               April 2023                                                                                        CHOWN(1)
CHOWN(1P)                                                                                POSIX Programmer's Manual                                                                               CHOWN(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       chown — change the file ownership

SYNOPSIS
       chown [-h] owner[:group] file...

       chown -R [-H|-L|-P] owner[:group] file...

DESCRIPTION
       The chown utility shall set the user ID of the file named by each file operand to the user ID specified by the owner operand.

       For each file operand, or, if the -R option is used, each file encountered while walking the directory trees specified by the file operands, the chown utility shall perform actions equivalent  to
       the chown() function defined in the System Interfaces volume of POSIX.1‐2017, called with the following arguments:

        1. The file operand shall be used as the path argument.

        2. The user ID indicated by the owner portion of the first operand shall be used as the owner argument.

        3. If the group portion of the first operand is given, the group ID indicated by it shall be used as the group argument; otherwise, the group ownership shall not be changed.

       Unless  chown  is  invoked  by a process with appropriate privileges, the set-user-ID and set-group-ID bits of a regular file shall be cleared upon successful completion; the set-user-ID and set-
       group-ID bits of other file types may be cleared.

OPTIONS
       The chown utility shall conform to the Base Definitions volume of POSIX.1‐2017, Section 12.2, Utility Syntax Guidelines.

       The following options shall be supported by the implementation:

       -h        For each file operand that names a file of type symbolic link, chown shall attempt to set the user ID of the symbolic link. If a group ID was specified, for each file operand that names
                 a file of type symbolic link, chown shall attempt to set the group ID of the symbolic link.

       -H        If  the  -R option is specified and a symbolic link referencing a file of type directory is specified on the command line, chown shall change the user ID (and group ID, if specified) of
                 the directory referenced by the symbolic link and all files in the file hierarchy below it.

       -L        If the -R option is specified and a symbolic link referencing a file of type directory is specified on the command line or encountered during the traversal of a  file  hierarchy,  chown
                 shall change the user ID (and group ID, if specified) of the directory referenced by the symbolic link and all files in the file hierarchy below it.

       -P        If  the  -R  option is specified and a symbolic link is specified on the command line or encountered during the traversal of a file hierarchy, chown shall change the owner ID (and group
                 ID, if specified) of the symbolic link. The chown utility shall not follow the symbolic link to any other part of the file hierarchy.

       -R        Recursively change file user and group IDs. For each file operand that names a directory, chown shall change the user ID (and group ID, if specified) of the directory and all  files  in
                 the file hierarchy below it. Unless a -H, -L, or -P option is specified, it is unspecified which of these options will be used as the default.

       Specifying more than one of the mutually-exclusive options -H, -L, and -P shall not be considered an error. The last option specified shall determine the behavior of the utility.

OPERANDS
       The following operands shall be supported:

       owner[:group]
                 A  user  ID and optional group ID to be assigned to file.  The owner portion of this operand shall be a user name from the user database or a numeric user ID. Either specifies a user ID
                 which shall be given to each file named by one of the file operands. If a numeric owner operand exists in the user database as a user name, the user ID number associated with that  user
                 name shall be used as the user ID. Similarly, if the group portion of this operand is present, it shall be a group name from the group database or a numeric group ID. Either specifies a
                 group ID which shall be given to each file. If a numeric group operand exists in the group database as a group name, the group ID number associated with that group name shall be used as
                 the group ID.

       file      A pathname of a file whose user ID is to be modified.

STDIN
       Not used.

INPUT FILES
       None.

ENVIRONMENT VARIABLES
       The following environment variables shall affect the execution of chown:

       LANG      Provide  a default value for the internationalization variables that are unset or null. (See the Base Definitions volume of POSIX.1‐2017, Section 8.2, Internationalization Variables for
                 the precedence of internationalization variables used to determine the values of locale categories.)

       LC_ALL    If set to a non-empty string value, override the values of all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as opposed to multi-byte characters in arguments).

       LC_MESSAGES
                 Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.

       NLSPATH   Determine the location of message catalogs for the processing of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Not used.

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

        0    The utility executed successfully and all requested changes were made.

       >0    An error occurred.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       Only the owner of a file or the user with appropriate privileges may change the owner or group of a file.

       Some implementations restrict the use of chown to a user with appropriate privileges.

EXAMPLES
       None.

RATIONALE
       The System V and BSD versions use different exit status codes. Some implementations used the exit status as a count of the number of errors that occurred; this practice is unworkable since it can
       overflow the range of valid exit status values. These are masked by specifying only 0 and >0 as exit values.

       The  functionality of chown is described substantially through references to functions in the System Interfaces volume of POSIX.1‐2017. In this way, there is no duplication of effort required for
       describing the interactions of permissions, multiple groups, and so on.

       The 4.3 BSD method of specifying both owner and group was included in this volume of POSIX.1‐2017 because:

        *  There are cases where the desired end condition could not be achieved using the chgrp and chown (that only changed the user ID) utilities. (If the current owner is not a member of the desired
           group and the desired owner is not a member of the current group, the chown() function could fail unless both owner and group are changed at the same time.)

        *  Even if they could be changed independently, in cases where both are being changed, there is a 100% performance penalty caused by being forced to invoke both utilities.

       The  BSD  syntax  user[.group]  was changed to user[:group] in this volume of POSIX.1‐2017 because the <period> is a valid character in login names (as specified by the Base Definitions volume of
       POSIX.1‐2017, login names consist of characters in the portable filename character set). The <colon> character was chosen as the replacement for the <period> character because it would  never  be
       allowed as a character in a user name or group name on historical implementations.

       The  -R  option  is  considered by some observers as an undesirable departure from the historical UNIX system tools approach; since a tool, find, already exists to recurse over directories, there
       seemed to be no good reason to require other tools to have to duplicate that functionality.  However, the -R option was deemed an important user convenience, is far more efficient than forking  a
       separate process for each element of the directory hierarchy, and is in widespread historical use.

FUTURE DIRECTIONS
       None.

SEE ALSO
       chgrp, chmod

       The Base Definitions volume of POSIX.1‐2017, Chapter 8, Environment Variables, Section 12.2, Utility Syntax Guidelines

       The System Interfaces volume of POSIX.1‐2017, chown()

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          CHOWN(1P)
CHOWN(3P)                                                                                POSIX Programmer's Manual                                                                               CHOWN(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       chown, fchownat — change owner and group of a file

SYNOPSIS
       #include <unistd.h>

       int chown(const char *path, uid_t owner, gid_t group);

       #include <fcntl.h>

       int fchownat(int fd, const char *path, uid_t owner, gid_t group,
           int flag);

DESCRIPTION
       The chown() function shall change the user and group ownership of a file.

       The path argument points to a pathname naming a file. The user ID and group ID of the named file shall be set to the numeric values contained in owner and group, respectively.

       Only processes with an effective user ID equal to the user ID of the file or with appropriate privileges may change the ownership of a file. If _POSIX_CHOWN_RESTRICTED is in effect for path:

        *  Changing the user ID is restricted to processes with appropriate privileges.

        *  Changing the group ID is permitted to a process with an effective user ID equal to the user ID of the file, but without appropriate privileges, if and only if owner is  equal  to  the  file's
           user ID or (uid_t)-1 and group is equal either to the calling process' effective group ID or to one of its supplementary group IDs.

       If  the  specified  file  is  a  regular file, one or more of the S_IXUSR, S_IXGRP, or S_IXOTH bits of the file mode are set, and the process does not have appropriate privileges, the set-user-ID
       (S_ISUID) and set-group-ID (S_ISGID) bits of the file mode shall be cleared upon successful return from chown().  If the specified file is a regular file, one or more of the S_IXUSR, S_IXGRP,  or
       S_IXOTH  bits of the file mode are set, and the process has appropriate privileges, it is implementation-defined whether the set-user-ID and set-group-ID bits are altered. If the chown() function
       is successfully invoked on a file that is not a regular file and one or more of the S_IXUSR, S_IXGRP, or S_IXOTH bits of the file mode are set,  the  set-user-ID  and  set-group-ID  bits  may  be
       cleared.

       If owner or group is specified as (uid_t)-1 or (gid_t)-1, respectively, the corresponding ID of the file shall not be changed.

       Upon successful completion, chown() shall mark for update the last file status change timestamp of the file, except that if owner is (uid_t)-1 and group is (gid_t)-1, the file status change time‐
       stamp need not be marked for update.

       The fchownat() function shall be equivalent to the chown() and lchown() functions except in the case where path specifies a relative path. In this case the file to be changed is determined  rela‐
       tive  to  the directory associated with the file descriptor fd instead of the current working directory. If the access mode of the open file description associated with the file descriptor is not
       O_SEARCH, the function shall check whether directory searches are permitted using the current permissions of the directory underlying the file descriptor. If the  access  mode  is  O_SEARCH,  the
       function shall not perform the check.

       Values for flag are constructed by a bitwise-inclusive OR of flags from the following list, defined in <fcntl.h>:

       AT_SYMLINK_NOFOLLOW
             If path names a symbolic link, ownership of the symbolic link is changed.

       If  fchownat()  is  passed the special value AT_FDCWD in the fd parameter, the current working directory shall be used and the behavior shall be identical to a call to chown() or lchown() respec‐
       tively, depending on whether or not the AT_SYMLINK_NOFOLLOW bit is set in the flag argument.

RETURN VALUE
       Upon successful completion, these functions shall return 0.  Otherwise, these functions shall return -1 and set errno to indicate the error. If -1 is returned, no changes are made in the user  ID
       and group ID of the file.

ERRORS
       These functions shall fail if:

       EACCES Search permission is denied on a component of the path prefix.

       ELOOP  A loop exists in symbolic links encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of a component of a pathname is longer than {NAME_MAX}.

       ENOENT A component of path does not name an existing file or path is an empty string.

       ENOTDIR
              A  component  of the path prefix names an existing file that is neither a directory nor a symbolic link to a directory, or the path argument contains at least one non-<slash> character and
              ends with one or more trailing <slash> characters and the last pathname component names an existing file that is neither a directory nor a symbolic link to a directory.

       EPERM  The effective user ID does not match the owner of the file, or the calling process does not have appropriate privileges and _POSIX_CHOWN_RESTRICTED indicates that  such  privilege  is  re‐
              quired.

       EROFS  The named file resides on a read-only file system.

       The fchownat() function shall fail if:

       EACCES The access mode of the open file description associated with fd is not O_SEARCH and the permissions of the directory underlying fd do not permit directory searches.

       EBADF  The path argument does not specify an absolute path and the fd argument is neither AT_FDCWD nor a valid file descriptor open for reading or searching.

       ENOTDIR
              The path argument is not an absolute path and fd is a file descriptor associated with a non-directory file.

       These functions may fail if:

       EIO    An I/O error occurred while reading or writing to the file system.

       EINTR  The chown() function was interrupted by a signal which was caught.

       EINVAL The owner or group ID supplied is not a value supported by the implementation.

       ELOOP  More than {SYMLOOP_MAX} symbolic links were encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of a pathname exceeds {PATH_MAX}, or pathname resolution of a symbolic link produced an intermediate result with a length that exceeds {PATH_MAX}.

       The fchownat() function may fail if:

       EINVAL The value of the flag argument is not valid.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       Although chown() can be used on some implementations by the file owner to change the owner and group to any desired values, the only portable use of this function is to change the group of a file
       to the effective GID of the calling process or to a member of its group set.

RATIONALE
       System III and System V allow a user to give away files; that is, the owner of a file may change its user ID to anything. This is a serious problem for implementations that are intended  to  meet
       government  security  regulations.   Version  7 and 4.3 BSD permit only the superuser to change the user ID of a file. Some government agencies (usually not ones concerned directly with security)
       find this limitation too confining. This volume of POSIX.1‐2017 uses may to permit secure implementations while not disallowing System V.

       System III and System V allow the owner of a file to change the group ID to anything. Version 7 permits only the superuser to change the group ID of a file.  4.3 BSD permits the owner  to  change
       the group ID of a file to its effective group ID or to any of the groups in the list of supplementary group IDs, but to no others.

       The  POSIX.1‐1990  standard  requires  that  the  chown() function invoked by a non-appropriate privileged process clear the S_ISGID and the S_ISUID bits for regular files, and permits them to be
       cleared for other types of files. This is so that changes in accessibility do not accidentally cause files to become security holes.  Unfortunately, requiring these bits to be cleared on non-exe‐
       cutable  data  files also clears the mandatory file locking bit (shared with S_ISGID), which is an extension on many implementations (it first appeared in System V). These bits should only be re‐
       quired to be cleared on regular files that have one or more of their execute bits set.

       The purpose of the fchownat() function is to enable changing ownership of files in directories other than the current working directory without exposure to race conditions. Any part of  the  path
       of a file could be changed in parallel to a call to chown() or lchown(), resulting in unspecified behavior. By opening a file descriptor for the target directory and using the fchownat() function
       it can be guaranteed that the changed file is located relative to the desired directory.

FUTURE DIRECTIONS
       None.

SEE ALSO
       chmod(), fpathconf(), lchown()

       The Base Definitions volume of POSIX.1‐2017, <fcntl.h>, <sys_types.h>, <unistd.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          CHOWN(3P)
chown(2)                                                                                    System Calls Manual                                                                                   chown(2)

NAME
       chown, fchown, lchown, fchownat - change ownership of a file

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       int chown(const char *pathname, uid_t owner, gid_t group);
       int fchown(int fd, uid_t owner, gid_t group);
       int lchown(const char *pathname, uid_t owner, gid_t group);

       #include <fcntl.h>           /* Definition of AT_* constants */
       #include <unistd.h>

       int fchownat(int dirfd, const char *pathname,
                    uid_t owner, gid_t group, int flags);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       fchown(), lchown():
           /* Since glibc 2.12: */ _POSIX_C_SOURCE >= 200809L
               || _XOPEN_SOURCE >= 500
               || /* glibc <= 2.19: */ _BSD_SOURCE

       fchownat():
           Since glibc 2.10:
               _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _ATFILE_SOURCE

DESCRIPTION
       These system calls change the owner and group of a file.  The chown(), fchown(), and lchown() system calls differ only in how the file is specified:

       •  chown() changes the ownership of the file specified by pathname, which is dereferenced if it is a symbolic link.

       •  fchown() changes the ownership of the file referred to by the open file descriptor fd.

       •  lchown() is like chown(), but does not dereference symbolic links.

       Only  a  privileged  process (Linux: one with the CAP_CHOWN capability) may change the owner of a file.  The owner of a file may change the group of the file to any group of which that owner is a
       member.  A privileged process (Linux: with CAP_CHOWN) may change the group arbitrarily.

       If the owner or group is specified as -1, then that ID is not changed.

       When the owner or group of an executable file is changed by an unprivileged user, the S_ISUID and S_ISGID mode bits are cleared.  POSIX does not specify whether this also should happen when  root
       does  the  chown();  the  Linux  behavior depends on the kernel version, and since Linux 2.2.13, root is treated like other users.  In case of a non-group-executable file (i.e., one for which the
       S_IXGRP bit is not set) the S_ISGID bit indicates mandatory locking, and is not cleared by a chown().

       When the owner or group of an executable file is changed (by any user), all capability sets for the file are cleared.

   fchownat()
       The fchownat() system call operates in exactly the same way as chown(), except for the differences described here.

       If the pathname given in pathname is relative, then it is interpreted relative to the directory referred to by the file descriptor dirfd (rather than relative to the current working directory  of
       the calling process, as is done by chown() for a relative pathname).

       If pathname is relative and dirfd is the special value AT_FDCWD, then pathname is interpreted relative to the current working directory of the calling process (like chown()).

       If pathname is absolute, then dirfd is ignored.

       The flags argument is a bit mask created by ORing together 0 or more of the following values;

       AT_EMPTY_PATH (since Linux 2.6.39)
              If  pathname  is an empty string, operate on the file referred to by dirfd (which may have been obtained using the open(2) O_PATH flag).  In this case, dirfd can refer to any type of file,
              not just a directory.  If dirfd is AT_FDCWD, the call operates on the current working directory.  This flag is Linux-specific; define _GNU_SOURCE to obtain its definition.

       AT_SYMLINK_NOFOLLOW
              If pathname is a symbolic link, do not dereference it: instead operate on the link itself, like lchown().  (By default, fchownat() dereferences symbolic links, like chown().)

       See openat(2) for an explanation of the need for fchownat().

RETURN VALUE
       On success, zero is returned.  On error, -1 is returned, and errno is set to indicate the error.

ERRORS
       Depending on the filesystem, errors other than those listed below can be returned.

       The more general errors for chown() are listed below.

       EACCES Search permission is denied on a component of the path prefix.  (See also path_resolution(7).)

       EBADF  (fchown()) fd is not a valid open file descriptor.

       EBADF  (fchownat()) pathname is relative but dirfd is neither AT_FDCWD nor a valid file descriptor.

       EFAULT pathname points outside your accessible address space.

       EINVAL (fchownat()) Invalid flag specified in flags.

       EIO    (fchown()) A low-level I/O error occurred while modifying the inode.

       ELOOP  Too many symbolic links were encountered in resolving pathname.

       ENAMETOOLONG
              pathname is too long.

       ENOENT The file does not exist.

       ENOMEM Insufficient kernel memory was available.

       ENOTDIR
              A component of the path prefix is not a directory.

       ENOTDIR
              (fchownat()) pathname is relative and dirfd is a file descriptor referring to a file other than a directory.

       EPERM  The calling process did not have the required permissions (see above) to change owner and/or group.

       EPERM  The file is marked immutable or append-only.  (See ioctl_iflags(2).)

       EROFS  The named file resides on a read-only filesystem.

VERSIONS
       The 4.4BSD version can be used only by the superuser (that is, ordinary users cannot give away files).

STANDARDS
       POSIX.1-2008.

HISTORY
       chown()
       fchown()
       lchown()
              4.4BSD, SVr4, POSIX.1-2001.

       fchownat()
              POSIX.1-2008.  Linux 2.6.16, glibc 2.4.

NOTES
   Ownership of new files
       When a new file is created (by, for example, open(2) or mkdir(2)), its owner is made the same as the filesystem user ID of the creating process.  The group of the file depends on a range of  fac‐
       tors,  including the type of filesystem, the options used to mount the filesystem, and whether or not the set-group-ID mode bit is enabled on the parent directory.  If the filesystem supports the
       -o grpid (or, synonymously -o bsdgroups) and -o nogrpid (or, synonymously -o sysvgroups) mount(8) options, then the rules are as follows:

       •  If the filesystem is mounted with -o grpid, then the group of a new file is made the same as that of the parent directory.

       •  If the filesystem is mounted with -o nogrpid and the set-group-ID bit is disabled on the parent directory, then the group of a new file is made the same as the process's filesystem GID.

       •  If the filesystem is mounted with -o nogrpid and the set-group-ID bit is enabled on the parent directory, then the group of a new file is made the same as that of the parent directory.

       As at Linux 4.12, the -o grpid and -o nogrpid mount options are supported by ext2, ext3, ext4, and XFS.  Filesystems that don't support these mount options follow the -o nogrpid rules.

   glibc notes
       On older kernels where fchownat() is unavailable, the glibc wrapper function falls back to the use of chown() and lchown().  When pathname is a relative  pathname,  glibc  constructs  a  pathname
       based on the symbolic link in /proc/self/fd that corresponds to the dirfd argument.

   NFS
       The  chown()  semantics  are deliberately violated on NFS filesystems which have UID mapping enabled.  Additionally, the semantics of all system calls which access the file contents are violated,
       because chown() may cause immediate access revocation on already open files.  Client side caching may lead to a delay between the time where ownership have been changed to allow access for a user
       and the time where the file can actually be accessed by the user on other clients.

   Historical details
       The  original  Linux chown(), fchown(), and lchown() system calls supported only 16-bit user and group IDs.  Subsequently, Linux 2.4 added chown32(), fchown32(), and lchown32(), supporting 32-bit
       IDs.  The glibc chown(), fchown(), and lchown() wrapper functions transparently deal with the variations across kernel versions.

       Before Linux 2.1.81 (except 2.1.46), chown() did not follow symbolic links.  Since Linux 2.1.81, chown() does follow symbolic links, and there is a new system call lchown() that does  not  follow
       symbolic links.  Since Linux 2.1.86, this new call (that has the same semantics as the old chown()) has got the same syscall number, and chown() got the newly introduced number.

EXAMPLES
       The following program changes the ownership of the file named in its second command-line argument to the value specified in its first command-line argument.  The new owner can be specified either
       as a numeric user ID, or as a username (which is converted to a user ID by using getpwnam(3) to perform a lookup in the system password file).

   Program source
       #include <pwd.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>

       int
       main(int argc, char *argv[])
       {
           char           *endptr;
           uid_t          uid;
           struct passwd  *pwd;

           if (argc != 3 || argv[1][0] == '\0') {
               fprintf(stderr, "%s <owner> <file>\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           uid = strtol(argv[1], &endptr, 10);  /* Allow a numeric string */

           if (*endptr != '\0') {         /* Was not pure numeric string */
               pwd = getpwnam(argv[1]);   /* Try getting UID for username */
               if (pwd == NULL) {
                   perror("getpwnam");
                   exit(EXIT_FAILURE);
               }

               uid = pwd->pw_uid;
           }

           if (chown(argv[2], uid, -1) == -1) {
               perror("chown");
               exit(EXIT_FAILURE);
           }

           exit(EXIT_SUCCESS);
       }

SEE ALSO
       chgrp(1), chown(1), chmod(2), flock(2), path_resolution(7), symlink(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        chown(2)
