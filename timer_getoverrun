TIMER_GETOVERRUN(3P)                                                                     POSIX Programmer's Manual                                                                    TIMER_GETOVERRUN(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       timer_getoverrun, timer_gettime, timer_settime — per-process timers

SYNOPSIS
       #include <time.h>

       int timer_getoverrun(timer_t timerid);
       int timer_gettime(timer_t timerid, struct itimerspec *value);
       int timer_settime(timer_t timerid, int flags,
           const struct itimerspec *restrict value,
           struct itimerspec *restrict ovalue);

DESCRIPTION
       The timer_gettime() function shall store the amount of time until the specified timer, timerid, expires and the reload value of the timer into the space pointed to  by  the  value  argument.  The
       it_value  member of this structure shall contain the amount of time before the timer expires, or zero if the timer is disarmed. This value is returned as the interval until timer expiration, even
       if the timer was armed with absolute time. The it_interval member of value shall contain the reload value last set by timer_settime().

       The timer_settime() function shall set the time until the next expiration of the timer specified by timerid from the it_value member of the value argument and arm the timer if the it_value member
       of  value is non-zero. If the specified timer was already armed when timer_settime() is called, this call shall reset the time until next expiration to the value specified. If the it_value member
       of value is zero, the timer shall be disarmed. The effect of disarming or resetting a timer with pending expiration notifications is unspecified.

       If the flag TIMER_ABSTIME is not set in the argument flags, timer_settime() shall behave as if the time until next expiration is set to be equal to the interval specified by the  it_value  member
       of  value.  That is, the timer shall expire in it_value nanoseconds from when the call is made. If the flag TIMER_ABSTIME is set in the argument flags, timer_settime() shall behave as if the time
       until next expiration is set to be equal to the difference between the absolute time specified by the it_value member of value and the current value of the clock associated  with  timerid.   That
       is, the timer shall expire when the clock reaches the value specified by the it_value member of value.  If the specified time has already passed, the function shall succeed and the expiration no‐
       tification shall be made.

       The reload value of the timer shall be set to the value specified by the it_interval member of value.  When a timer is armed with a non-zero it_interval, a periodic (or repetitive) timer is spec‐
       ified.

       Time values that are between two consecutive non-negative integer multiples of the resolution of the specified timer shall be rounded up to the larger multiple of the resolution. Quantization er‐
       ror shall not cause the timer to expire earlier than the rounded time value.

       If the argument ovalue is not NULL, the timer_settime() function shall store, in the location referenced by ovalue, a value representing the previous amount of time before the  timer  would  have
       expired, or zero if the timer was disarmed, together with the previous timer reload value. Timers shall not expire before their scheduled time.

       Only  a single signal shall be queued to the process for a given timer at any point in time. When a timer for which a signal is still pending expires, no signal shall be queued, and a timer over‐
       run shall occur.  When a timer expiration signal is delivered to or accepted by a process, the timer_getoverrun() function shall return the timer expiration overrun count for the specified timer.
       The overrun count returned contains the number of extra timer expirations that occurred between the time the signal was generated (queued) and when it was delivered or accepted, up to but not in‐
       cluding an implementation-defined maximum of {DELAYTIMER_MAX}.  If the number of such extra expirations is greater than or equal to {DELAYTIMER_MAX}, then the overrun count shall be set  to  {DE‐
       LAYTIMER_MAX}.   The value returned by timer_getoverrun() shall apply to the most recent expiration signal delivery or acceptance for the timer. If no expiration signal has been delivered for the
       timer, the return value of timer_getoverrun() is unspecified.

       The behavior is undefined if the value specified by the timerid argument to timer_getoverrun(), timer_gettime(), or timer_settime() does not correspond to a timer ID  returned  by  timer_create()
       but not yet deleted by timer_delete().

RETURN VALUE
       If the timer_getoverrun() function succeeds, it shall return the timer expiration overrun count as explained above.

       If the timer_gettime() or timer_settime() functions succeed, a value of 0 shall be returned.

       If an error occurs for any of these functions, the value -1 shall be returned, and errno set to indicate the error.

ERRORS
       The timer_settime() function shall fail if:

       EINVAL A  value structure specified a nanosecond value less than zero or greater than or equal to 1000 million, and the it_value member of that structure did not specify zero seconds and nanosec‐
              onds.

       The timer_settime() function may fail if:

       EINVAL The it_interval member of value is not zero and the timer was created with notification by creation of a new thread (sigev_sigev_notify was SIGEV_THREAD) and a fixed stack address has been
              set in the thread attribute pointed to by sigev_notify_attributes.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       Using fixed stack addresses is problematic when timer expiration is signaled by the creation of a new thread. Since it cannot be assumed that the thread created for one expiration is finished be‐
       fore the next expiration of the timer, it could happen that two threads use the same memory as a stack at the same time. This is invalid and produces undefined results.

RATIONALE
       Practical clocks tick at a finite rate, with rates of 100 hertz and 1000 hertz being common. The inverse of this tick rate is the clock resolution, also called the clock granularity, which in ei‐
       ther case is expressed as a time duration, being 10 milliseconds and 1 millisecond respectively for these common rates. The granularity of practical clocks implies that if one reads a given clock
       twice in rapid succession, one may get the same time value twice; and that timers must wait for the next clock tick after the theoretical expiration time, to ensure that a timer never returns too
       soon. Note also that the granularity of the clock may be significantly coarser than the resolution of the data format used to set and get time and interval values. Also note that some implementa‐
       tions may choose to adjust time and/or interval values to exactly match the ticks of the underlying clock.

       This volume of POSIX.1‐2017 defines functions that allow an application to determine the implementation-supported resolution for the clocks and requires an implementation to document the  resolu‐
       tion supported for timers and nanosleep() if they differ from the supported clock resolution. This is more of a procurement issue than a runtime application issue.

       If  an  implementation detects that the value specified by the timerid argument to timer_getoverrun(), timer_gettime(), or timer_settime() does not correspond to a timer ID returned by timer_cre‐
       ate() but not yet deleted by timer_delete(), it is recommended that the function should fail and report an [EINVAL] error.

FUTURE DIRECTIONS
       None.

SEE ALSO
       clock_getres(), timer_create()

       The Base Definitions volume of POSIX.1‐2017, <time.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                               TIMER_GETOVERRUN(3P)
timer_getoverrun(2)                                                                         System Calls Manual                                                                        timer_getoverrun(2)

NAME
       timer_getoverrun - get overrun count for a POSIX per-process timer

LIBRARY
       Real-time library (librt, -lrt)

SYNOPSIS
       #include <time.h>

       int timer_getoverrun(timer_t timerid);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       timer_getoverrun():
           _POSIX_C_SOURCE >= 199309L

DESCRIPTION
       timer_getoverrun()  returns  the "overrun count" for the timer referred to by timerid.  An application can use the overrun count to accurately calculate the number of timer expirations that would
       have occurred over a given time interval.  Timer overruns can occur both when receiving expiration notifications via signals (SIGEV_SIGNAL), and via threads (SIGEV_THREAD).

       When expiration notifications are delivered via a signal, overruns can occur as follows.  Regardless of whether or not a real-time signal is used for timer notifications,  the  system  queues  at
       most  one  signal per timer.  (This is the behavior specified by POSIX.1.  The alternative, queuing one signal for each timer expiration, could easily result in overflowing the allowed limits for
       queued signals on the system.)  Because of system scheduling delays, or because the signal may be temporarily blocked, there can be a delay between the time when the notification signal is gener‐
       ated  and  the  time  when  it is delivered (e.g., caught by a signal handler) or accepted (e.g., using sigwaitinfo(2)).  In this interval, further timer expirations may occur.  The timer overrun
       count is the number of additional timer expirations that occurred between the time when the signal was generated and when it was delivered or accepted.

       Timer overruns can also occur when expiration notifications are delivered via invocation of a thread, since there may be an arbitrary delay between an expiration of the timer and  the  invocation
       of the notification thread, and in that delay interval, additional timer expirations may occur.

RETURN VALUE
       On  success,  timer_getoverrun()  returns the overrun count of the specified timer; this count may be 0 if no overruns have occurred.  On failure, -1 is returned, and errno is set to indicate the
       error.

ERRORS
       EINVAL timerid is not a valid timer ID.

VERSIONS
       When timer notifications are delivered via signals (SIGEV_SIGNAL), on Linux it is also possible to obtain the overrun count via the si_overrun field of the siginfo_t structure (see sigaction(2)).
       This allows an application to avoid the overhead of making a system call to obtain the overrun count, but is a nonportable extension to POSIX.1.

       POSIX.1 discusses timer overruns only in the context of timer notifications using signals.

STANDARDS
       POSIX.1-2008.

HISTORY
       Linux 2.6.  POSIX.1-2001.

BUGS
       POSIX.1  specifies  that  if the timer overrun count is equal to or greater than an implementation-defined maximum, DELAYTIMER_MAX, then timer_getoverrun() should return DELAYTIMER_MAX.  However,
       before Linux 4.19, if the timer overrun value exceeds the maximum representable integer, the counter cycles, starting once more from low values.  Since Linux 4.19, timer_getoverrun() returns  DE‐
       LAYTIMER_MAX (defined as INT_MAX in <limits.h>) in this case (and the overrun value is reset to 0).

EXAMPLES
       See timer_create(2).

SEE ALSO
       clock_gettime(2), sigaction(2), signalfd(2), sigwaitinfo(2), timer_create(2), timer_delete(2), timer_settime(2), signal(7), time(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                             timer_getoverrun(2)
