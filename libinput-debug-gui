libinput-debug-gui(1)                                                                         libinput Manual                                                                        libinput-debug-gui(1)

NAME
       libinput-debug-gui - visual debug helper for libinput

SYNOPSIS
       libinput debug-gui [options]

       libinput debug-gui [options] --udev <seat>

       libinput debug-gui [options] [--device] /dev/input/event0

DESCRIPTION
       The libinput debug-gui tool creates a libinput context and a full-screen GTK window to visualize events processed by libinput. This tool exclusively grabs pointing devices and stops them from in‐
       teracting with the rest of the GUI.

       Hit Esc to exit this tool.

       This is a debugging tool only, its output or behavior may change at any time. Do not rely on the output or the behavior.

       This tool usually needs to be run as root to have access to the /dev/input/eventX nodes.

OPTIONS
       --device /dev/input/event0
               Use the given device with the path backend. The --device argument may be omitted.

       --grab  Exclusively grab all opened devices. This will prevent events from being delivered to the host system.

       --help  Print help

       --udev <seat>
               Use the udev backend to listen for device notifications on the given seat.  The default behavior is equivalent to --udev "seat0".

       --verbose
               Use verbose output

       For libinput configuration options, see libinput-debug-events(1)

FEATURES
       Cursor movement
               The cursor is displayed as black triangle. Various markers are displayed in light grey to help debug cusor positioning. The cursor movement is the one as seen  by  libinput  and  may  not
               match the cursor movement of the display server.

       The unaccelerated cusor motion is displayed as a grey upside-down triangle.  The movement of this cursor typically reflects the relative motion in device units and can differ significantly to the
       normal cursor movement.

       The unaccelerated cursor motion is also displayed as a yellow snake. This is the connected set of recent deltas. Unlike the unaccelerated cursor, these coordinates are not clipped to the window.

       Button testing
               Four oblongs are displayed at the bottom. The top three are left, middle, right, the bottom one is for any other button and displays the button name on press.

       Scrolling
               The green oblongs show the scrolling in continuous space, the smaller red oblongs the scroll steps in discrete steps.

       Gestures
               A set of four horizontal black rings show swipe gestures, with the number of detected fingers filled in. A set of two black rings show pinch gestures, filled when events are detected.

       Touch and absolute mouse events
               Touch and absolute mouse events are displayed as red and blue circles, respectively, at the touch point or absolute position.

       Tablet tools
               Events from tablet tools show a cyan square at the proximity-in and proximity-out positions. The tool position is shown as circle and increases in radius with increasing pressure or  dis‐
               tance.  Pressure  and  distance  are  also shown in the vertical bar south-east of center. Where tilt is available, the circle changes to an ellipsis to indicate the tilt angle.  Relative
               events from the tablet tool are displayed as a yellow snake, always starting from the center of the window on proximity in. Button events are displayed in the bottom-most  button  oblong,
               with the name of the button displayed on press.

       Tablet pads
               Button events are displayed in the bottom-most button oblong, with the name of the button displayed on press. Ring and strip events are displayed in the yellow 'IO' symbol, with the posi‐
               tion and the number of the ring/strip filled in when events are available.

       Kernel events
               Left of the center is a blue ring to debug kernel relative events (REL_X and REL_Y). Each unit is displayed as one arrow in the respective direction.  Right of the center is a blue oblong
               representing the most recently-used touch device. Touch events are displayed as they are read from the kernel.

NOTES
       Events shown by this tool may not correspond to the events seen by a different user of libinput. This tool initializes a separate context.

LIBINPUT
       Part of the libinput(1) suite

libinput 1.23.0                                                                                                                                                                      libinput-debug-gui(1)
