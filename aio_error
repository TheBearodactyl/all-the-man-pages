aio_error(3)                                                                             Library Functions Manual                                                                             aio_error(3)

NAME
       aio_error - get error status of asynchronous I/O operation

LIBRARY
       Real-time library (librt, -lrt)

SYNOPSIS
       #include <aio.h>

       int aio_error(const struct aiocb *aiocbp);

DESCRIPTION
       The aio_error() function returns the error status for the asynchronous I/O request with control block pointed to by aiocbp.  (See aio(7) for a description of the aiocb structure.)

RETURN VALUE
       This function returns one of the following:

       EINPROGRESS
              if the request has not been completed yet.

       ECANCELED
              if the request was canceled.

       0      if the request completed successfully.

       > 0    A positive error number, if the asynchronous I/O operation failed.  This is the same value that would have been stored in the errno variable in the case of a synchronous read(2), write(2),
              fsync(2), or fdatasync(2) call.

ERRORS
       EINVAL aiocbp does not point at a control block for an asynchronous I/O request of which the return status (see aio_return(3)) has not been retrieved yet.

       ENOSYS aio_error() is not implemented.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │aio_error()                                                                                                                                                             │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       glibc 2.1.  POSIX.1-2001.

EXAMPLES
       See aio(7).

SEE ALSO
       aio_cancel(3), aio_fsync(3), aio_read(3), aio_return(3), aio_suspend(3), aio_write(3), lio_listio(3), aio(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                    aio_error(3)
AIO_ERROR(3P)                                                                            POSIX Programmer's Manual                                                                           AIO_ERROR(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       aio_error — retrieve errors status for an asynchronous I/O operation

SYNOPSIS
       #include <aio.h>

       int aio_error(const struct aiocb *aiocbp);

DESCRIPTION
       The aio_error() function shall return the error status associated with the aiocb structure referenced by the aiocbp argument. The error status for an asynchronous I/O operation is the errno value
       that would be set by the corresponding read(), write(), fdatasync(), or fsync() operation. If the operation has not yet completed, then the error status shall be equal to [EINPROGRESS].

       If the aiocb structure pointed to by aiocbp is not associated with an operation that has been scheduled, the results are undefined.

RETURN VALUE
       If the asynchronous I/O operation has completed successfully, then 0 shall be returned. If the asynchronous operation has completed unsuccessfully, then the error status, as described for read(),
       write(), fdatasync(), and fsync(), shall be returned. If the asynchronous I/O operation has not yet completed, then [EINPROGRESS] shall be returned.

       If the aio_error() function fails, it shall return -1 and set errno to indicate the error.

ERRORS
       The aio_error() function may fail if:

       EINVAL The aiocbp argument does not refer to an asynchronous operation whose return status has not yet been retrieved.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       aio_cancel(), aio_fsync(), aio_read(), aio_return(), aio_write(), close(), exec, exit(), fork(), lio_listio(), lseek(), read()

       The Base Definitions volume of POSIX.1‐2017, <aio.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                      AIO_ERROR(3P)
