POLL(3P)                   POSIX Programmer's Manual                  POLL(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       poll — input/output multiplexing

SYNOPSIS
       #include <poll.h>

       int poll(struct pollfd fds[], nfds_t nfds, int timeout);

DESCRIPTION
       The poll() function provides applications with a mechanism  for  multi‐
       plexing input/output over a set of file descriptors. For each member of
       the array pointed to by fds, poll() shall examine the  given  file  de‐
       scriptor  for  the  event(s) specified in events.  The number of pollfd
       structures in the fds array is specified by nfds.  The poll()  function
       shall  identify those file descriptors on which an application can read
       or write data, or on which certain events have occurred.

       The fds argument specifies the file descriptors to be examined and  the
       events  of interest for each file descriptor. It is a pointer to an ar‐
       ray with one member for each open file descriptor of interest. The  ar‐
       ray's  members  are pollfd structures within which fd specifies an open
       file descriptor and events and  revents  are  bitmasks  constructed  by
       OR'ing a combination of the following event flags:

       POLLIN      Data  other  than  high-priority  data  may be read without
                   blocking.

                   For STREAMS, this flag is set in revents even if  the  mes‐
                   sage  is  of  zero length. This flag shall be equivalent to
                   POLLRDNORM | POLLRDBAND.

       POLLRDNORM  Normal data may be read without blocking.

                   For STREAMS, data on priority band 0 may  be  read  without
                   blocking.  This  flag is set in revents even if the message
                   is of zero length.

       POLLRDBAND  Priority data may be read without blocking.

                   For STREAMS, data on priority bands greater than 0  may  be
                   read  without blocking. This flag is set in revents even if
                   the message is of zero length.

       POLLPRI     High-priority data may be read without blocking.

                   For STREAMS, this flag is set in revents even if  the  mes‐
                   sage is of zero length.

       POLLOUT     Normal data may be written without blocking.

                   For STREAMS, data on priority band 0 may be written without
                   blocking.

       POLLWRNORM  Equivalent to POLLOUT.

       POLLWRBAND  Priority data may be written.

                   For STREAMS, data on priority bands greater than 0  may  be
                   written  without  blocking.  If  any priority band has been
                   written to on this STREAM, this event only  examines  bands
                   that have been written to at least once.

       POLLERR     An error has occurred on the device or stream. This flag is
                   only valid in the revents bitmask; it shall be  ignored  in
                   the events member.

       POLLHUP     A  device has been disconnected, or a pipe or FIFO has been
                   closed by the last process that had it  open  for  writing.
                   Once  set,  the  hangup state of a FIFO shall persist until
                   some process opens the FIFO for writing or until all  read-
                   only  file  descriptors for the FIFO are closed. This event
                   and POLLOUT are mutually-exclusive; a stream can  never  be
                   writable  if a hangup has occurred. However, this event and
                   POLLIN, POLLRDNORM, POLLRDBAND, or POLLPRI  are  not  mutu‐
                   ally-exclusive. This flag is only valid in the revents bit‐
                   mask; it shall be ignored in the events member.

       POLLNVAL    The specified fd value is invalid. This flag is only  valid
                   in  the revents member; it shall ignored in the events mem‐
                   ber.

       The significance and semantics of normal, priority,  and  high-priority
       data are file and device-specific.

       If the value of fd is less than 0, events shall be ignored, and revents
       shall be set to 0 in that entry on return from poll().

       In each pollfd structure, poll() shall clear the revents member, except
       that where the application requested a report on a condition by setting
       one of the bits of events listed above, poll()  shall  set  the  corre‐
       sponding  bit  in  revents if the requested condition is true. In addi‐
       tion, poll() shall set the  POLLHUP,  POLLERR,  and  POLLNVAL  flag  in
       revents  if  the condition is true, even if the application did not set
       the corresponding bit in events.

       If none of the defined events have occurred on any  selected  file  de‐
       scriptor,  poll() shall wait at least timeout milliseconds for an event
       to occur on any of the selected file descriptors. If the value of time‐
       out  is  0, poll() shall return immediately. If the value of timeout is
       -1, poll() shall block until a requested event occurs or until the call
       is interrupted.

       Implementations may place limitations on the granularity of timeout in‐
       tervals. If the requested timeout interval requires a finer granularity
       than  the implementation supports, the actual timeout interval shall be
       rounded up to the next supported value.

       The poll() function shall not be affected by the O_NONBLOCK flag.

       The poll() function shall support regular files, terminal  and  pseudo-
       terminal  devices,  FIFOs, pipes, sockets and STREAMS-based files.  The
       behavior of poll() on elements of fds that refer to other types of file
       is unspecified.

       Regular files shall always poll TRUE for reading and writing.

       A  file descriptor for a socket that is listening for connections shall
       indicate that it is ready for reading, once connections are  available.
       A  file descriptor for a socket that is connecting asynchronously shall
       indicate that it is ready for writing, once a connection has  been  es‐
       tablished.

       Provided  the  application  does not perform any action that results in
       unspecified or undefined behavior, the value of the fd and events  mem‐
       bers of each element of fds shall not be modified by poll().

RETURN VALUE
       Upon successful completion, poll() shall return a non-negative value. A
       positive value indicates the total number  of  pollfd  structures  that
       have  selected  events  (that is, those for which the revents member is
       non-zero). A value of 0 indicates that the call timed out and  no  file
       descriptors  have  been  selected. Upon failure, poll() shall return -1
       and set errno to indicate the error.

ERRORS
       The poll() function shall fail if:

       EAGAIN The allocation of internal data structures failed but  a  subse‐
              quent request may succeed.

       EINTR  A signal was caught during poll().

       EINVAL The  nfds  argument is greater than {OPEN_MAX}, or one of the fd
              members refers to a STREAM or multiplexer that  is  linked  (di‐
              rectly or indirectly) downstream from a multiplexer.

       The following sections are informative.

EXAMPLES
   Checking for Events on a Stream
       The  following  example  opens a pair of STREAMS devices and then waits
       for either one to become writable. This example proceeds as follows:

        1. Sets the timeout parameter to 500 milliseconds.

        2. Opens the STREAMS devices /dev/dev0 and /dev/dev1, and  then  polls
           them, specifying POLLOUT and POLLWRBAND as the events of interest.

           The  STREAMS device names /dev/dev0 and /dev/dev1 are only examples
           of how STREAMS devices can be named; STREAMS naming conventions may
           vary among systems conforming to the POSIX.1‐2008.

        3. Uses the ret variable to determine whether an event has occurred on
           either of the two STREAMS. The poll() function is  given  500  mil‐
           liseconds  to  wait  for  an event to occur (if it has not occurred
           prior to the poll() call).

        4. Checks the returned value of ret.  If a positive value is returned,
           one of the following can be done:

            a. Priority  data  can  be  written to the open STREAM on priority
               bands greater than 0, because the POLLWRBAND event occurred  on
               the open STREAM (fds[0] or fds[1]).

            b. Data  can be written to the open STREAM on priority-band 0, be‐
               cause the POLLOUT event occurred on the open STREAM (fds[0]  or
               fds[1]).

        5. If  the returned value is not a positive value, permission to write
           data to the open STREAM (on any priority band) is denied.

        6. If the POLLHUP event occurs on the open STREAM (fds[0] or  fds[1]),
           the device on the open STREAM has disconnected.

           #include <stropts.h>
           #include <poll.h>
           ...
           struct pollfd fds[2];
           int timeout_msecs = 500;
           int ret;
               int i;

           /* Open STREAMS device. */
           fds[0].fd = open("/dev/dev0", ...);
           fds[1].fd = open("/dev/dev1", ...);
           fds[0].events = POLLOUT | POLLWRBAND;
           fds[1].events = POLLOUT | POLLWRBAND;

           ret = poll(fds, 2, timeout_msecs);

           if (ret > 0) {
               /* An event on one of the fds has occurred. */
               for (i=0; i<2; i++) {
                   if (fds[i].revents & POLLWRBAND) {
                   /* Priority data may be written on device number i. */
           ...
                   }
                   if (fds[i].revents & POLLOUT) {
                   /* Data may be written on device number i. */
           ...
                   }
                   if (fds[i].revents & POLLHUP) {
                   /* A hangup has occurred on device number i. */
           ...
                   }
               }
           }

APPLICATION USAGE
       None.

RATIONALE
       The POLLHUP event does not occur for FIFOs just because the FIFO is not
       open for writing. It only occurs when the FIFO is closed  by  the  last
       writer  and  persists  until some process opens the FIFO for writing or
       until all read-only file descriptors for the FIFO are closed.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.6, STREAMS, getmsg(), pselect(), putmsg(), read(), write()

       The Base Definitions volume of POSIX.1‐2017, <poll.h>, <stropts.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in  electronic  form
       from  IEEE Std 1003.1-2017, Standard for Information Technology -- Por‐
       table Operating System Interface (POSIX), The Open Group Base  Specifi‐
       cations  Issue  7, 2018 Edition, Copyright (C) 2018 by the Institute of
       Electrical and Electronics Engineers, Inc and The Open Group.   In  the
       event of any discrepancy between this version and the original IEEE and
       The Open Group Standard, the original IEEE and The Open Group  Standard
       is  the  referee document. The original Standard can be obtained online
       at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear  in  this  page  are
       most likely to have been introduced during the conversion of the source
       files to man page format. To report such errors,  see  https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                             POLL(3P)
poll(2)                       System Calls Manual                      poll(2)

NAME
       poll, ppoll - wait for some event on a file descriptor

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <poll.h>

       int poll(struct pollfd *fds, nfds_t nfds, int timeout);

       #define _GNU_SOURCE         /* See feature_test_macros(7) */
       #include <poll.h>

       int ppoll(struct pollfd *fds, nfds_t nfds,
                 const struct timespec *_Nullable tmo_p,
                 const sigset_t *_Nullable sigmask);

DESCRIPTION
       poll()  performs a similar task to select(2): it waits for one of a set
       of file descriptors to become ready to perform I/O.  The Linux-specific
       epoll(7)  API performs a similar task, but offers features beyond those
       found in poll().

       The set of file descriptors to be monitored is specified in the fds ar‐
       gument, which is an array of structures of the following form:

           struct pollfd {
               int   fd;         /* file descriptor */
               short events;     /* requested events */
               short revents;    /* returned events */
           };

       The caller should specify the number of items in the fds array in nfds.

       The  field  fd  contains  a  file descriptor for an open file.  If this
       field is negative, then the corresponding events field is  ignored  and
       the revents field returns zero.  (This provides an easy way of ignoring
       a file descriptor for a single poll() call: simply set the fd field  to
       its bitwise complement.)

       The  field  events  is  an  input  parameter, a bit mask specifying the
       events the application is interested in for  the  file  descriptor  fd.
       This field may be specified as zero, in which case the only events that
       can be returned in revents are POLLHUP, POLLERR, and POLLNVAL (see  be‐
       low).

       The field revents is an output parameter, filled by the kernel with the
       events that actually occurred.  The bits returned in  revents  can  in‐
       clude  any  of those specified in events, or one of the values POLLERR,
       POLLHUP, or POLLNVAL.  (These three bits are meaningless in the  events
       field,  and will be set in the revents field whenever the corresponding
       condition is true.)

       If none of the events requested (and no error) has occurred for any  of
       the  file  descriptors,  then poll() blocks until one of the events oc‐
       curs.

       The timeout argument specifies the number of milliseconds  that  poll()
       should  block  waiting for a file descriptor to become ready.  The call
       will block until either:

       •  a file descriptor becomes ready;

       •  the call is interrupted by a signal handler; or

       •  the timeout expires.

       Note that the timeout interval will be rounded up to the  system  clock
       granularity, and kernel scheduling delays mean that the blocking inter‐
       val may overrun by a small amount.   Specifying  a  negative  value  in
       timeout means an infinite timeout.  Specifying a timeout of zero causes
       poll() to return immediately, even if no file descriptors are ready.

       The bits that may be set/returned in events and revents are defined  in
       <poll.h>:

       POLLIN There is data to read.

       POLLPRI
              There  is  some  exceptional  condition  on the file descriptor.
              Possibilities include:

              •  There is out-of-band data on a TCP socket (see tcp(7)).

              •  A pseudoterminal master in  packet  mode  has  seen  a  state
                 change on the slave (see ioctl_tty(2)).

              •  A cgroup.events file has been modified (see cgroups(7)).

       POLLOUT
              Writing  is  now possible, though a write larger than the avail‐
              able space in a socket or pipe will still block  (unless  O_NON‐
              BLOCK is set).

       POLLRDHUP (since Linux 2.6.17)
              Stream  socket peer closed connection, or shut down writing half
              of connection.  The _GNU_SOURCE feature test macro must  be  de‐
              fined  (before  including  any  header files) in order to obtain
              this definition.

       POLLERR
              Error condition (only returned in revents; ignored  in  events).
              This  bit  is  also  set  for a file descriptor referring to the
              write end of a pipe when the read end has been closed.

       POLLHUP
              Hang up (only returned in revents;  ignored  in  events).   Note
              that  when  reading  from  a  channel such as a pipe or a stream
              socket, this event merely indicates that the peer closed its end
              of the channel.  Subsequent reads from the channel will return 0
              (end of file) only after all outstanding data in the channel has
              been consumed.

       POLLNVAL
              Invalid  request: fd not open (only returned in revents; ignored
              in events).

       When compiling with _XOPEN_SOURCE defined, one also has the  following,
       which convey no further information beyond the bits listed above:

       POLLRDNORM
              Equivalent to POLLIN.

       POLLRDBAND
              Priority band data can be read (generally unused on Linux).

       POLLWRNORM
              Equivalent to POLLOUT.

       POLLWRBAND
              Priority data may be written.

       Linux also knows about, but does not use POLLMSG.

   ppoll()
       The  relationship  between poll() and ppoll() is analogous to the rela‐
       tionship between select(2) and pselect(2): like pselect(2), ppoll() al‐
       lows  an  application to safely wait until either a file descriptor be‐
       comes ready or until a signal is caught.

       Other than the difference in the precision of the timeout argument, the
       following ppoll() call:

           ready = ppoll(&fds, nfds, tmo_p, &sigmask);

       is nearly equivalent to atomically executing the following calls:

           sigset_t origmask;
           int timeout;

           timeout = (tmo_p == NULL) ? -1 :
                     (tmo_p->tv_sec * 1000 + tmo_p->tv_nsec / 1000000);
           pthread_sigmask(SIG_SETMASK, &sigmask, &origmask);
           ready = poll(&fds, nfds, timeout);
           pthread_sigmask(SIG_SETMASK, &origmask, NULL);

       The  above  code  segment  is  described  as  nearly equivalent because
       whereas a negative timeout value for poll() is interpreted as an  infi‐
       nite  timeout, a negative value expressed in *tmo_p results in an error
       from ppoll().

       See the description of pselect(2) for an explanation of why ppoll()  is
       necessary.

       If  the  sigmask argument is specified as NULL, then no signal mask ma‐
       nipulation is performed (and thus ppoll() differs from poll()  only  in
       the precision of the timeout argument).

       The  tmo_p argument specifies an upper limit on the amount of time that
       ppoll() will block.  This argument is a pointer to a timespec(3) struc‐
       ture.

       If tmo_p is specified as NULL, then ppoll() can block indefinitely.

RETURN VALUE
       On  success,  poll() returns a nonnegative value which is the number of
       elements in the pollfds whose revents fields have been set to a nonzero
       value  (indicating an event or an error).  A return value of zero indi‐
       cates that the system call timed out before any file descriptors became
       ready.

       On error, -1 is returned, and errno is set to indicate the error.

ERRORS
       EFAULT fds  points outside the process's accessible address space.  The
              array given as argument was not contained in  the  calling  pro‐
              gram's address space.

       EINTR  A signal occurred before any requested event; see signal(7).

       EINVAL The nfds value exceeds the RLIMIT_NOFILE value.

       EINVAL (ppoll()) The timeout value expressed in *tmo_p is invalid (neg‐
              ative).

       ENOMEM Unable to allocate memory for kernel data structures.

VERSIONS
       On some other UNIX systems, poll() can fail with the  error  EAGAIN  if
       the  system  fails  to  allocate kernel-internal resources, rather than
       ENOMEM as Linux does.  POSIX permits this behavior.  Portable  programs
       may wish to check for EAGAIN and loop, just as with EINTR.

       Some  implementations  define  the nonstandard constant INFTIM with the
       value -1 for use as a timeout for poll().  This constant  is  not  pro‐
       vided in glibc.

   C library/kernel differences
       The  Linux  ppoll()  system call modifies its tmo_p argument.  However,
       the glibc wrapper function hides this behavior by using a  local  vari‐
       able for the timeout argument that is passed to the system call.  Thus,
       the glibc ppoll() function does not modify its tmo_p argument.

       The raw ppoll() system call has a fifth  argument,  size_t  sigsetsize,
       which  specifies  the size in bytes of the sigmask argument.  The glibc
       ppoll() wrapper function specifies  this  argument  as  a  fixed  value
       (equal  to  sizeof(kernel_sigset_t)).  See sigprocmask(2) for a discus‐
       sion on the differences between the kernel and the libc notion  of  the
       sigset.

STANDARDS
       poll() POSIX.1-2008.

       ppoll()
              Linux.

HISTORY
       poll() POSIX.1-2001.  Linux 2.1.23.

              On  older  kernels  that lack this system call, the glibc poll()
              wrapper function provides emulation using select(2).

       ppoll()
              Linux 2.6.16, glibc 2.4.

NOTES
       The operation of poll() and ppoll() is not affected by  the  O_NONBLOCK
       flag.

       For  a  discussion  of what may happen if a file descriptor being moni‐
       tored by poll() is closed in another thread, see select(2).

BUGS
       See the discussion of spurious readiness notifications under  the  BUGS
       section of select(2).

EXAMPLES
       The program below opens each of the files named in its command-line ar‐
       guments and monitors the resulting file descriptors  for  readiness  to
       read  (POLLIN).   The program loops, repeatedly using poll() to monitor
       the file descriptors, printing the number of ready file descriptors  on
       return.  For each ready file descriptor, the program:

       •  displays the returned revents field in a human-readable form;

       •  if  the  file  descriptor  is readable, reads some data from it, and
          displays that data on standard output; and

       •  if the file descriptor was not readable, but some  other  event  oc‐
          curred (presumably POLLHUP), closes the file descriptor.

       Suppose we run the program in one terminal, asking it to open a FIFO:

           $ mkfifo myfifo
           $ ./poll_input myfifo

       In  a  second terminal window, we then open the FIFO for writing, write
       some data to it, and close the FIFO:

           $ echo aaaaabbbbbccccc > myfifo

       In the terminal where we are running the program, we would then see:

           Opened "myfifo" on fd 3
           About to poll()
           Ready: 1
             fd=3; events: POLLIN POLLHUP
               read 10 bytes: aaaaabbbbb
           About to poll()
           Ready: 1
             fd=3; events: POLLIN POLLHUP
               read 6 bytes: ccccc

           About to poll()
           Ready: 1
             fd=3; events: POLLHUP
               closing fd 3
           All file descriptors closed; bye

       In the above output, we see that poll() returned three times:

       •  On the first return, the bits returned in  the  revents  field  were
          POLLIN,  indicating  that the file descriptor is readable, and POLL‐
          HUP, indicating that the other end of the FIFO has been closed.  The
          program then consumed some of the available input.

       •  The second return from poll() also indicated POLLIN and POLLHUP; the
          program then consumed the last of the available input.

       •  On the final return, poll() indicated only POLLHUP on the  FIFO,  at
          which  point  the  file descriptor was closed and the program termi‐
          nated.

   Program source

       /* poll_input.c

          Licensed under GNU General Public License v2 or later.
       */
       #include <fcntl.h>
       #include <poll.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <unistd.h>

       #define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); \
                               } while (0)

       int
       main(int argc, char *argv[])
       {
           int            ready;
           char           buf[10];
           nfds_t         num_open_fds, nfds;
           ssize_t        s;
           struct pollfd  *pfds;

           if (argc < 2) {
              fprintf(stderr, "Usage: %s file...\n", argv[0]);
              exit(EXIT_FAILURE);
           }

           num_open_fds = nfds = argc - 1;
           pfds = calloc(nfds, sizeof(struct pollfd));
           if (pfds == NULL)
               errExit("malloc");

           /* Open each file on command line, and add it to 'pfds' array. */

           for (nfds_t j = 0; j < nfds; j++) {
               pfds[j].fd = open(argv[j + 1], O_RDONLY);
               if (pfds[j].fd == -1)
                   errExit("open");

               printf("Opened \"%s\" on fd %d\n", argv[j + 1], pfds[j].fd);

               pfds[j].events = POLLIN;
           }

           /* Keep calling poll() as long as at least one file descriptor is
              open. */

           while (num_open_fds > 0) {
               printf("About to poll()\n");
               ready = poll(pfds, nfds, -1);
               if (ready == -1)
                   errExit("poll");

               printf("Ready: %d\n", ready);

               /* Deal with array returned by poll(). */

               for (nfds_t j = 0; j < nfds; j++) {
                   if (pfds[j].revents != 0) {
                       printf("  fd=%d; events: %s%s%s\n", pfds[j].fd,
                              (pfds[j].revents & POLLIN)  ? "POLLIN "  : "",
                              (pfds[j].revents & POLLHUP) ? "POLLHUP " : "",
                              (pfds[j].revents & POLLERR) ? "POLLERR " : "");

                       if (pfds[j].revents & POLLIN) {
                           s = read(pfds[j].fd, buf, sizeof(buf));
                           if (s == -1)
                               errExit("read");
                           printf("    read %zd bytes: %.*s\n",
                                  s, (int) s, buf);
                       } else {                /* POLLERR | POLLHUP */
                           printf("    closing fd %d\n", pfds[j].fd);
                           if (close(pfds[j].fd) == -1)
                               errExit("close");
                           num_open_fds--;
                       }
                   }
               }
           }

           printf("All file descriptors closed; bye\n");
           exit(EXIT_SUCCESS);
       }

SEE ALSO
       restart_syscall(2), select(2),  select_tut(2),  timespec(3),  epoll(7),
       time(7)

Linux man-pages 6.04              2023-03-30                           poll(2)
