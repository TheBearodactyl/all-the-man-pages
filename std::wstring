std::basic_string< _CharT, Librstd::basic_string<a_CharT, _Traits, _Alloc >(3)

NAME
       std::basic_string< _CharT, _Traits, _Alloc > - Managing sequences of
       characters and character-like objects.

SYNOPSIS
       #include <string>

       Inherited by __gnu_debug::basic_string< _CharT, _Traits, _Allocator >.

   Public Types
       typedef _Alloc allocator_type
       typedef __gnu_cxx::__normal_iterator< const_pointer, basic_string >
           const_iterator
       typedef _CharT_alloc_traits::const_pointer const_pointer
       typedef const value_type & const_reference
       typedef std::reverse_iterator< const_iterator > const_reverse_iterator
       typedef _CharT_alloc_traits::difference_type difference_type
       typedef __gnu_cxx::__normal_iterator< pointer, basic_string > iterator
       typedef _CharT_alloc_traits::pointer pointer
       typedef value_type & reference
       typedef std::reverse_iterator< iterator > reverse_iterator
       typedef _CharT_alloc_traits::size_type size_type
       typedef _Traits traits_type
       typedef _Traits::char_type value_type

   Public Member Functions
       basic_string () noexcept
           Default constructor creates an empty string.
       template<class _InputIterator > basic_string (_InputIterator __beg,
           _InputIterator __end, const _Alloc &__a=_Alloc())
           Construct string as copy of a range.
       basic_string (basic_string &&__str) noexcept
           Move construct string.
       basic_string (basic_string &&__str, const _Alloc &__a)
       basic_string (const _Alloc &__a)
           Construct an empty string using allocator a.
       template<typename  = _RequireAllocator<_Alloc>> basic_string (const
           _CharT *__s, const _Alloc &__a=_Alloc())
           Construct string as copy of a C string.
       basic_string (const _CharT *__s, size_type __n, const _Alloc
           &__a=_Alloc())
           Construct string initialized by a character array.
       template<typename _Tp , typename  = _If_sv<_Tp, void>> basic_string
           (const _Tp &__t, const _Alloc &__a=_Alloc())
           Construct string from a string_view.
       template<typename _Tp , typename  = enable_if_t<is_convertible_v<const
           _Tp&, __sv_type>>> basic_string (const _Tp &__t, size_type __pos,
           size_type __n, const _Alloc &__a=_Alloc())
           Construct string from a substring of a string_view.
       basic_string (const basic_string &__str)
           Construct string with copy of value of str.
       basic_string (const basic_string &__str, const _Alloc &__a)
       basic_string (const basic_string &__str, size_type __pos, const _Alloc
           &__a=_Alloc())
           Construct string as copy of a substring.
       basic_string (const basic_string &__str, size_type __pos, size_type
           __n)
           Construct string as copy of a substring.
       basic_string (const basic_string &__str, size_type __pos, size_type
           __n, const _Alloc &__a)
           Construct string as copy of a substring.
       basic_string (initializer_list< _CharT > __l, const _Alloc
           &__a=_Alloc())
           Construct string from an initializer list.
       basic_string (size_type __n, _CharT __c, const _Alloc &__a=_Alloc())
           Construct string as multiple characters.
       ~basic_string () noexcept
           Destroy the string instance.
       template<typename _InputIterator > basic_string< _CharT, _Traits,
           _Alloc > & _M_replace_dispatch (iterator __i1, iterator __i2,
           _InputIterator __k1, _InputIterator __k2, __false_type)
       template<typename _InIterator > _CharT * _S_construct (_InIterator
           __beg, _InIterator __end, const _Alloc &__a, forward_iterator_tag)
       template<class _InputIterator > basic_string & append (_InputIterator
           __first, _InputIterator __last)
           Append a range of characters.
       basic_string & append (const _CharT *__s)
           Append a C string.
       basic_string & append (const _CharT *__s, size_type __n)
           Append a C substring.
       template<typename _Tp > _If_sv< _Tp, basic_string & > append (const _Tp
           &__svt)
           Append a string_view.
       template<typename _Tp > _If_sv< _Tp, basic_string & > append (const _Tp
           &__svt, size_type __pos, size_type __n=npos)
           Append a range of characters from a string_view.
       basic_string & append (const basic_string &__str)
           Append a string to this string.
       basic_string & append (const basic_string &__str, size_type __pos,
           size_type __n=npos)
           Append a substring.
       basic_string & append (initializer_list< _CharT > __l)
           Append an initializer_list of characters.
       basic_string & append (size_type __n, _CharT __c)
           Append multiple characters.
       template<class _InputIterator > basic_string & assign (_InputIterator
           __first, _InputIterator __last)
           Set value to a range of characters.
       basic_string & assign (basic_string &&__str) noexcept(allocator_traits<
           _Alloc >::is_always_equal::value)
           Set value to contents of another string.
       basic_string & assign (const _CharT *__s)
           Set value to contents of a C string.
       basic_string & assign (const _CharT *__s, size_type __n)
           Set value to a C substring.
       template<typename _Tp > _If_sv< _Tp, basic_string & > assign (const _Tp
           &__svt)
           Set value from a string_view.
       template<typename _Tp > _If_sv< _Tp, basic_string & > assign (const _Tp
           &__svt, size_type __pos, size_type __n=npos)
           Set value from a range of characters in a string_view.
       basic_string & assign (const basic_string &__str)
           Set value to contents of another string.
       basic_string & assign (const basic_string &__str, size_type __pos,
           size_type __n=npos)
           Set value to a substring of a string.
       basic_string & assign (initializer_list< _CharT > __l)
           Set value to an initializer_list of characters.
       basic_string & assign (size_type __n, _CharT __c)
           Set value to multiple characters.
       reference at (size_type __n)
           Provides access to the data contained in the string.
       const_reference at (size_type __n) const
           Provides access to the data contained in the string.
       reference back ()
       const_reference back () const noexcept
       iterator begin ()
       const_iterator begin () const noexcept
       const _CharT * c_str () const noexcept
           Return const pointer to null-terminated contents.
       size_type capacity () const noexcept
       const_iterator cbegin () const noexcept
       const_iterator cend () const noexcept
       void clear () noexcept
       int compare (const _CharT *__s) const noexcept
           Compare to a C string.
       template<typename _Tp > _If_sv< _Tp, int > compare (const _Tp &__svt)
           const noexcept(is_same< _Tp, __sv_type >::value)
           Compare to a string_view.
       int compare (const basic_string &__str) const
           Compare to a string.
       template<typename _Tp > _If_sv< _Tp, int > compare (size_type __pos,
           size_type __n, const _Tp &__svt) const noexcept(is_same< _Tp,
           __sv_type >::value)
           Compare to a string_view.
       int compare (size_type __pos, size_type __n, const basic_string &__str)
           const
           Compare substring to a string.
       int compare (size_type __pos, size_type __n1, const _CharT *__s) const
           Compare substring to a C string.
       int compare (size_type __pos, size_type __n1, const _CharT *__s,
           size_type __n2) const
           Compare substring against a character array.
       template<typename _Tp > _If_sv< _Tp, int > compare (size_type __pos1,
           size_type __n1, const _Tp &__svt, size_type __pos2, size_type
           __n2=npos) const noexcept(is_same< _Tp, __sv_type >::value)
           Compare to a string_view.
       int compare (size_type __pos1, size_type __n1, const basic_string
           &__str, size_type __pos2, size_type __n2=npos) const
           Compare substring to a substring.
       size_type copy (_CharT *__s, size_type __n, size_type __pos=0) const
           Copy substring into C string.
       const_reverse_iterator crbegin () const noexcept
       const_reverse_iterator crend () const noexcept
       const _CharT * data () const noexcept
           Return const pointer to contents.
       _CharT * data () noexcept
           Return non-const pointer to contents.
       bool empty () const noexcept
       iterator end ()
       const_iterator end () const noexcept
       bool ends_with (_CharT __x) const noexcept
       bool ends_with (basic_string_view< _CharT, _Traits > __x) const
           noexcept
       bool ends_with (const _CharT *__x) const noexcept
       iterator erase (iterator __first, iterator __last)
           Remove a range of characters.
       iterator erase (iterator __position)
           Remove one character.
       basic_string & erase (size_type __pos=0, size_type __n=npos)
           Remove characters.
       size_type find (_CharT __c, size_type __pos=0) const noexcept
           Find position of a character.
       size_type find (const _CharT *__s, size_type __pos, size_type __n)
           const noexcept
           Find position of a C substring.
       size_type find (const _CharT *__s, size_type __pos=0) const noexcept
           Find position of a C string.
       template<typename _Tp > _If_sv< _Tp, size_type > find (const _Tp
           &__svt, size_type __pos=0) const noexcept(is_same< _Tp, __sv_type
           >::value)
           Find position of a string_view.
       size_type find (const basic_string &__str, size_type __pos=0) const
           noexcept
           Find position of a string.
       size_type find_first_not_of (_CharT __c, size_type __pos=0) const
           noexcept
           Find position of a different character.
       size_type find_first_not_of (const _CharT *__s, size_type __pos,
           size_type __n) const noexcept
           Find position of a character not in C substring.
       size_type find_first_not_of (const _CharT *__s, size_type __pos=0)
           const noexcept
           Find position of a character not in C string.
       template<typename _Tp > _If_sv< _Tp, size_type > find_first_not_of
           (const _Tp &__svt, size_type __pos=0) const noexcept(is_same< _Tp,
           __sv_type >::value)
           Find position of a character not in a string_view.
       size_type find_first_not_of (const basic_string &__str, size_type
           __pos=0) const noexcept
           Find position of a character not in string.
       size_type find_first_of (_CharT __c, size_type __pos=0) const noexcept
           Find position of a character.
       size_type find_first_of (const _CharT *__s, size_type __pos, size_type
           __n) const noexcept
           Find position of a character of C substring.
       size_type find_first_of (const _CharT *__s, size_type __pos=0) const
           noexcept
           Find position of a character of C string.
       template<typename _Tp > _If_sv< _Tp, size_type > find_first_of (const
           _Tp &__svt, size_type __pos=0) const noexcept(is_same< _Tp,
           __sv_type >::value)
           Find position of a character of a string_view.
       size_type find_first_of (const basic_string &__str, size_type __pos=0)
           const noexcept
           Find position of a character of string.
       size_type find_last_not_of (_CharT __c, size_type __pos=npos) const
           noexcept
           Find last position of a different character.
       size_type find_last_not_of (const _CharT *__s, size_type __pos,
           size_type __n) const noexcept
           Find last position of a character not in C substring.
       size_type find_last_not_of (const _CharT *__s, size_type __pos=npos)
           const noexcept
           Find last position of a character not in C string.
       template<typename _Tp > _If_sv< _Tp, size_type > find_last_not_of
           (const _Tp &__svt, size_type __pos=npos) const noexcept(is_same<
           _Tp, __sv_type >::value)
           Find last position of a character not in a string_view.
       size_type find_last_not_of (const basic_string &__str, size_type
           __pos=npos) const noexcept
           Find last position of a character not in string.
       size_type find_last_of (_CharT __c, size_type __pos=npos) const
           noexcept
           Find last position of a character.
       size_type find_last_of (const _CharT *__s, size_type __pos, size_type
           __n) const noexcept
           Find last position of a character of C substring.
       size_type find_last_of (const _CharT *__s, size_type __pos=npos) const
           noexcept
           Find last position of a character of C string.
       template<typename _Tp > _If_sv< _Tp, size_type > find_last_of (const
           _Tp &__svt, size_type __pos=npos) const noexcept(is_same< _Tp,
           __sv_type >::value)
           Find last position of a character of string.
       size_type find_last_of (const basic_string &__str, size_type
           __pos=npos) const noexcept
           Find last position of a character of string.
       reference front ()
       const_reference front () const noexcept
       allocator_type get_allocator () const noexcept
           Return copy of allocator used to construct this string.
       iterator insert (iterator __p, _CharT __c)
           Insert one character.
       template<class _InputIterator > void insert (iterator __p,
           _InputIterator __beg, _InputIterator __end)
           Insert a range of characters.
       void insert (iterator __p, initializer_list< _CharT > __l)
           Insert an initializer_list of characters.
       void insert (iterator __p, size_type __n, _CharT __c)
           Insert multiple characters.
       basic_string & insert (size_type __pos, const _CharT *__s)
           Insert a C string.
       basic_string & insert (size_type __pos, const _CharT *__s, size_type
           __n)
           Insert a C substring.
       template<typename _Tp > _If_sv< _Tp, basic_string & > insert (size_type
           __pos, const _Tp &__svt)
           Insert a string_view.
       basic_string & insert (size_type __pos, size_type __n, _CharT __c)
           Insert multiple characters.
       template<typename _Tp > _If_sv< _Tp, basic_string & > insert (size_type
           __pos1, const _Tp &__svt, size_type __pos2, size_type __n=npos)
           Insert a string_view.
       basic_string & insert (size_type __pos1, const basic_string &__str)
           Insert value of a string.
       basic_string & insert (size_type __pos1, const basic_string &__str,
           size_type __pos2, size_type __n=npos)
           Insert a substring.
       size_type length () const noexcept
           Returns the number of characters in the string, not including any
           null-termination.
       size_type max_size () const noexcept
           Returns the size() of the largest possible string.
       operator __sv_type () const noexcept
           Convert to a string_view.
       basic_string & operator+= (_CharT __c)
           Append a character.
       basic_string & operator+= (const _CharT *__s)
           Append a C string.
       template<typename _Tp > _If_sv< _Tp, basic_string & > operator+= (const
           _Tp &__svt)
           Append a string_view.
       basic_string & operator+= (const basic_string &__str)
           Append a string to this string.
       basic_string & operator+= (initializer_list< _CharT > __l)
           Append an initializer_list of characters.
       basic_string & operator= (_CharT __c)
           Set value to string of length 1.
       basic_string & operator= (basic_string &&__str) noexcept(/*conditional
           */)
           Move assign the value of str to this string.
       basic_string & operator= (const _CharT *__s)
           Copy contents of s into this string.
       template<typename _Tp > _If_sv< _Tp, basic_string & > operator= (const
           _Tp &__svt)
           Set value to string constructed from a string_view.
       basic_string & operator= (const basic_string &__str)
           Assign the value of str to this string.
       basic_string & operator= (initializer_list< _CharT > __l)
           Set value to string constructed from initializer list.
       reference operator[] (size_type __pos)
           Subscript access to the data contained in the string.
       const_reference operator[] (size_type __pos) const noexcept
           Subscript access to the data contained in the string.
       void pop_back ()
           Remove the last character.
       void push_back (_CharT __c)
           Append a single character.
       reverse_iterator rbegin ()
       const_reverse_iterator rbegin () const noexcept
       reverse_iterator rend ()
       const_reverse_iterator rend () const noexcept
       template<typename _Tp > _If_sv< _Tp, basic_string & > replace
           (const_iterator __i1, const_iterator __i2, const _Tp &__svt)
           Replace range of characters with string_view.
       basic_string & replace (iterator __i1, iterator __i2, _CharT *__k1,
           _CharT *__k2)
       template<class _InputIterator > basic_string & replace (iterator __i1,
           iterator __i2, _InputIterator __k1, _InputIterator __k2)
           Replace range of characters with range.
       basic_string & replace (iterator __i1, iterator __i2, const _CharT
           *__k1, const _CharT *__k2)
       basic_string & replace (iterator __i1, iterator __i2, const _CharT
           *__s)
           Replace range of characters with C string.
       basic_string & replace (iterator __i1, iterator __i2, const _CharT
           *__s, size_type __n)
           Replace range of characters with C substring.
       basic_string & replace (iterator __i1, iterator __i2, const
           basic_string &__str)
           Replace range of characters with string.
       basic_string & replace (iterator __i1, iterator __i2, const_iterator
           __k1, const_iterator __k2)
       basic_string & replace (iterator __i1, iterator __i2, initializer_list<
           _CharT > __l)
           Replace range of characters with initializer_list.
       basic_string & replace (iterator __i1, iterator __i2, iterator __k1,
           iterator __k2)
       basic_string & replace (iterator __i1, iterator __i2, size_type __n,
           _CharT __c)
           Replace range of characters with multiple characters.
       template<typename _Tp > _If_sv< _Tp, basic_string & > replace
           (size_type __pos, size_type __n, const _Tp &__svt)
           Replace range of characters with string_view.
       basic_string & replace (size_type __pos, size_type __n, const
           basic_string &__str)
           Replace characters with value from another string.
       basic_string & replace (size_type __pos, size_type __n1, const _CharT
           *__s)
           Replace characters with value of a C string.
       basic_string & replace (size_type __pos, size_type __n1, const _CharT
           *__s, size_type __n2)
           Replace characters with value of a C substring.
       basic_string & replace (size_type __pos, size_type __n1, size_type
           __n2, _CharT __c)
           Replace characters with multiple characters.
       template<typename _Tp > _If_sv< _Tp, basic_string & > replace
           (size_type __pos1, size_type __n1, const _Tp &__svt, size_type
           __pos2, size_type __n2=npos)
           Replace range of characters with string_view.
       basic_string & replace (size_type __pos1, size_type __n1, const
           basic_string &__str, size_type __pos2, size_type __n2=npos)
           Replace characters with value from another string.
       void reserve ()
           Equivalent to shrink_to_fit().
       void reserve (size_type __res_arg)
           Attempt to preallocate enough memory for specified number of
           characters.
       void resize (size_type __n)
           Resizes the string to the specified number of characters.
       void resize (size_type __n, _CharT __c)
           Resizes the string to the specified number of characters.
       size_type rfind (_CharT __c, size_type __pos=npos) const noexcept
           Find last position of a character.
       size_type rfind (const _CharT *__s, size_type __pos, size_type __n)
           const noexcept
           Find last position of a C substring.
       size_type rfind (const _CharT *__s, size_type __pos=npos) const
           noexcept
           Find last position of a C string.
       template<typename _Tp > _If_sv< _Tp, size_type > rfind (const _Tp
           &__svt, size_type __pos=npos) const noexcept(is_same< _Tp,
           __sv_type >::value)
           Find last position of a string_view.
       size_type rfind (const basic_string &__str, size_type __pos=npos) const
           noexcept
           Find last position of a string.
       void shrink_to_fit () noexcept
           A non-binding request to reduce capacity() to size().
       size_type size () const noexcept
           Returns the number of characters in the string, not including any
           null-termination.
       bool starts_with (_CharT __x) const noexcept
       bool starts_with (basic_string_view< _CharT, _Traits > __x) const
           noexcept
       bool starts_with (const _CharT *__x) const noexcept
       basic_string substr (size_type __pos=0, size_type __n=npos) const
           Get a substring.
       void swap (basic_string &__s) noexcept(/*conditional */)
           Swap contents with another string.

   Static Public Attributes
       static const size_type npos
           Value returned by various member functions when they fail.

   Protected Types
       typedef iterator __const_iterator

Detailed Description
   template<typename _CharT, typename _Traits, typename _Alloc>
       class std::basic_string< _CharT, _Traits, _Alloc >"Managing sequences
       of characters and character-like objects.

       Template Parameters
           _CharT Type of character
           _Traits Traits for character type, defaults to char_traits<_CharT>.
           _Alloc Allocator type, defaults to allocator<_CharT>.

       Meets the requirements of a container, a reversible container, and a
       sequence. Of the optional sequence requirements, only push_back, at,
       and array access are supported.

       Todo
           Needs documentation! See
           http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html

       Documentation? What's that? Nathan Myers ncm@cantrip.org.

       A string looks like this:

                                            [_Rep]
                                            _M_length
       [basic_string<char_type>]            _M_capacity
       _M_dataplus                          _M_refcount
       _M_p ---------------->               unnamed array of char_type

       Where the _M_p points to the first character in the string, and you
       cast it to a pointer-to-_Rep and subtract 1 to get a pointer to the
       header.

       This approach has the enormous advantage that a string object requires
       only one allocation. All the ugliness is confined within a single pair
       of inline functions, which each compile to a single add instruction:
       _Rep::_M_data(), and string::_M_rep(); and the allocation function
       which gets a block of raw bytes and with room enough and constructs a
       _Rep object at the front.

       The reason you want _M_data pointing to the character array and not the
       _Rep is so that the debugger can see the string contents. (Probably we
       should add a non-inline member to get the _Rep for the debugger to use,
       so users can check the actual string length.)

       Note that the _Rep object is a POD so that you can have a static empty
       string _Rep object already constructed before static constructors have
       run. The reference-count encoding is chosen so that a 0 indicates one
       reference, so you never try to destroy the empty-string _Rep object.

       All but the last paragraph is considered pretty conventional for a
       Copy-On-Write C++ string implementation.

       Definition at line 114 of file cow_string.h.

Member Typedef Documentation
   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       iterator std::basic_string< _CharT, _Traits, _Alloc >::__const_iterator
       [protected]
       Definition at line 144 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       _Alloc std::basic_string< _CharT, _Traits, _Alloc >::allocator_type
       Definition at line 124 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       std::basic_string< _CharT, _Traits, _Alloc >::const_iterator
       Definition at line 138 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       _CharT_alloc_traits::const_pointer std::basic_string< _CharT, _Traits,
       _Alloc >::const_pointer
       Definition at line 135 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       const value_type& std::basic_string< _CharT, _Traits, _Alloc
       >::const_reference
       Definition at line 132 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       std::reverse_iterator<const_iterator> std::basic_string< _CharT,
       _Traits, _Alloc >::const_reverse_iterator
       Definition at line 139 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       _CharT_alloc_traits::difference_type std::basic_string< _CharT,
       _Traits, _Alloc >::difference_type
       Definition at line 126 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       __gnu_cxx::__normal_iterator<pointer, basic_string> std::basic_string<
       _CharT, _Traits, _Alloc >::iterator
       Definition at line 136 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       _CharT_alloc_traits::pointer std::basic_string< _CharT, _Traits, _Alloc
       >::pointer
       Definition at line 134 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       value_type& std::basic_string< _CharT, _Traits, _Alloc >::reference
       Definition at line 131 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       std::reverse_iterator<iterator> std::basic_string< _CharT, _Traits,
       _Alloc >::reverse_iterator
       Definition at line 140 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       _CharT_alloc_traits::size_type std::basic_string< _CharT, _Traits,
       _Alloc >::size_type
       Definition at line 125 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       _Traits std::basic_string< _CharT, _Traits, _Alloc >::traits_type
       Definition at line 122 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > typedef
       _Traits::char_type std::basic_string< _CharT, _Traits, _Alloc
       >::value_type
       Definition at line 123 of file cow_string.h.

Constructor & Destructor Documentation
   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string () [inline],
       [noexcept]
       Default constructor creates an empty string.

       Definition at line 521 of file cow_string.h.

       Referenced by std::basic_string< _CharT, _Traits, _Alloc >::substr().

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const
       _Alloc & __a) [inline],  [explicit]
       Construct an empty string using allocator a.

       Definition at line 534 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const
       basic_string< _CharT, _Traits, _Alloc > & __str) [inline]
       Construct string with copy of value of str.

       Parameters
           __str Source string.

       Definition at line 543 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const
       basic_string< _CharT, _Traits, _Alloc > & __str, size_type __pos, const
       _Alloc & __a = _Alloc())
       Construct string as copy of a substring.

       Parameters
           __str Source string.
           __pos Index of first character to copy from.
           __a Allocator to use.

       Definition at line 3127 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const
       basic_string< _CharT, _Traits, _Alloc > & __str, size_type __pos,
       size_type __n)
       Construct string as copy of a substring.

       Parameters
           __str Source string.
           __pos Index of first character to copy from.
           __n Number of characters to copy.

       Definition at line 3137 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const
       basic_string< _CharT, _Traits, _Alloc > & __str, size_type __pos,
       size_type __n, const _Alloc & __a)
       Construct string as copy of a substring.

       Parameters
           __str Source string.
           __pos Index of first character to copy from.
           __n Number of characters to copy.
           __a Allocator to use.

       Definition at line 3147 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const
       _CharT * __s, size_type __n, const _Alloc & __a = _Alloc()) [inline]
       Construct string initialized by a character array.

       Parameters
           __s Source character array.
           __n Number of characters to copy.
           __a Allocator to use (default is default allocator).

       NB: __s must have at least __n characters, '\0' has no special meaning.

       Definition at line 587 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename  = _RequireAllocator<_Alloc>> std::basic_string<
       _CharT, _Traits, _Alloc >::basic_string (const _CharT * __s, const
       _Alloc & __a = _Alloc()) [inline]
       Construct string as copy of a C string.

       Parameters
           __s Source C string.
           __a Allocator to use (default is default allocator).

       Definition at line 602 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (size_type
       __n, _CharT __c, const _Alloc & __a = _Alloc()) [inline]
       Construct string as multiple characters.

       Parameters
           __n Number of characters.
           __c Character to use.
           __a Allocator to use (default is default allocator).

       Definition at line 613 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string
       (basic_string< _CharT, _Traits, _Alloc > && __str) [inline],
       [noexcept]
       Move construct string.

       Parameters
           __str Source string.

       The newly-created string contains the exact contents of __str. __str is
       a valid, but unspecified string.

       Definition at line 625 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string
       (initializer_list< _CharT > __l, const _Alloc & __a = _Alloc())
       [inline]
       Construct string from an initializer list.

       Parameters
           __l std::initializer_list of characters.
           __a Allocator to use (default is default allocator).

       Definition at line 648 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const
       basic_string< _CharT, _Traits, _Alloc > & __str, const _Alloc & __a)
       [inline]
       Definition at line 652 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string
       (basic_string< _CharT, _Traits, _Alloc > && __str, const _Alloc & __a)
       [inline]
       Definition at line 656 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<class _InputIterator > std::basic_string< _CharT, _Traits,
       _Alloc >::basic_string (_InputIterator __beg, _InputIterator __end,
       const _Alloc & __a = _Alloc()) [inline]
       Construct string as copy of a range.

       Parameters
           __beg Start of range.
           __end End of range.
           __a Allocator to use (default is default allocator).

       Definition at line 684 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp , typename  = enable_if_t<is_convertible_v<const
       _Tp&, __sv_type>>> std::basic_string< _CharT, _Traits, _Alloc
       >::basic_string (const _Tp & __t, size_type __pos, size_type __n, const
       _Alloc & __a = _Alloc()) [inline]
       Construct string from a substring of a string_view.

       Parameters
           __t Source object convertible to string view.
           __pos The index of the first character to copy from __t.
           __n The number of characters to copy from __t.
           __a Allocator to use.

       Definition at line 699 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp , typename  = _If_sv<_Tp, void>>
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const _Tp &
       __t, const _Alloc & __a = _Alloc()) [inline],  [explicit]
       Construct string from a string_view.

       Parameters
           __t Source object convertible to string view.
           __a Allocator to use (default is default allocator).

       Definition at line 710 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::~basic_string ()
       [inline],  [noexcept]
       Destroy the string instance.

       Definition at line 717 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::get_allocator().

Member Function Documentation
   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _InputIterator > basic_string< _CharT, _Traits,
       _Alloc > & std::basic_string< _CharT, _Traits, _Alloc
       >::_M_replace_dispatch (iterator __i1, iterator __i2, _InputIterator
       __k1, _InputIterator __k2, __false_type)
       Definition at line 3584 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _InIterator > _CharT * std::basic_string< _CharT,
       _Traits, _Alloc >::_S_construct (_InIterator __beg, _InIterator __end,
       const _Alloc & __a, forward_iterator_tag)
       Definition at line 3081 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<class _InputIterator > basic_string & std::basic_string<
       _CharT, _Traits, _Alloc >::append (_InputIterator __first,
       _InputIterator __last) [inline]
       Append a range of characters.

       Parameters
           __first Iterator referencing the first character to append.
           __last Iterator marking the end of the range.

       Returns
           Reference to this string.

       Appends characters in the range [__first,__last) to this string.

       Definition at line 1290 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::append
       (const _CharT * __s) [inline]
       Append a C string.

       Parameters
           __s The C string to append.

       Returns
           Reference to this string.

       Definition at line 1252 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::append().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::append (const _CharT * __s, size_type __n)
       Append a C substring.

       Parameters
           __s The C string to append.
           __n The number of characters to append.

       Returns
           Reference to this string.

       Definition at line 3214 of file cow_string.h.

       References std::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, basic_string & >
       std::basic_string< _CharT, _Traits, _Alloc >::append (const _Tp &
       __svt) [inline]
       Append a string_view.

       Parameters
           __svt The object convertible to string_view to be appended.

       Returns
           Reference to this string.

       Definition at line 1301 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::append().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, basic_string & >
       std::basic_string< _CharT, _Traits, _Alloc >::append (const _Tp &
       __svt, size_type __pos, size_type __n = npos) [inline]
       Append a range of characters from a string_view.

       Parameters
           __svt The object convertible to string_view to be appended from.
           __pos The position in the string_view to append from.
           __n The number of characters to append from the string_view.

       Returns
           Reference to this string.

       Definition at line 1317 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::append().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::append (const basic_string< _CharT, _Traits, _Alloc
       > & __str)
       Append a string to this string.

       Parameters
           __str The string to append.

       Returns
           Reference to this string.

       Definition at line 3241 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::size(), and
       std::size().

       Referenced by std::basic_string< _CharT, _Traits, _Alloc >::append(),
       std::collate< _CharT >::do_transform(), std::basic_string< _CharT,
       _Traits, _Alloc >::operator+=(), and std::operator>>().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::append (const basic_string< _CharT, _Traits, _Alloc
       > & __str, size_type __pos, size_type __n = npos)
       Append a substring.

       Parameters
           __str The string to append.
           __pos Index of the first character of str to append.
           __n The number of characters to append.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range if __pos is not a valid index.

       This function appends __n characters from __str starting at __pos to
       this string. If __n is is larger than the number of available
       characters in __str, the remainder of __str is appended.

       Definition at line 3258 of file cow_string.h.

       References std::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::append
       (initializer_list< _CharT > __l) [inline]
       Append an initializer_list of characters.

       Parameters
           __l The initializer_list of characters to append.

       Returns
           Reference to this string.

       Definition at line 1276 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::append().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::append (size_type __n, _CharT __c)
       Append multiple characters.

       Parameters
           __n The number of characters to append.
           __c The character to use.

       Returns
           Reference to this string.

       Appends __n copies of __c to this string.

       Definition at line 3197 of file cow_string.h.

       References std::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<class _InputIterator > basic_string & std::basic_string<
       _CharT, _Traits, _Alloc >::assign (_InputIterator __first,
       _InputIterator __last) [inline]
       Set value to a range of characters.

       Parameters
           __first Iterator referencing the first character to append.
           __last Iterator marking the end of the range.

       Returns
           Reference to this string.

       Sets value of string to characters in the range [__first,__last).

       Definition at line 1437 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::assign
       (basic_string< _CharT, _Traits, _Alloc > && __str) [inline],
       [noexcept]
       Set value to contents of another string.

       Parameters
           __str Source string to use.

       Returns
           Reference to this string.

       This function sets this string to the exact contents of __str. __str is
       a valid, but unspecified string.

       Definition at line 1358 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::swap().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::assign
       (const _CharT * __s) [inline]
       Set value to contents of a C string.

       Parameters
           __s The C string to use.

       Returns
           Reference to this string.

       This function sets the value of this string to the value of __s. The
       data is copied, so there is no dependence on __s once the function
       returns.

       Definition at line 1408 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::assign (const _CharT * __s, size_type __n)
       Set value to a C substring.

       Parameters
           __s The C string to use.
           __n Number of characters to use.

       Returns
           Reference to this string.

       This function sets the value of this string to the first __n characters
       of __s. If __n is is larger than the number of available characters in
       __s, the remainder of __s is used.

       Definition at line 3175 of file cow_string.h.

       References std::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, basic_string & >
       std::basic_string< _CharT, _Traits, _Alloc >::assign (const _Tp &
       __svt) [inline]
       Set value from a string_view.

       Parameters
           __svt The source object convertible to string_view.

       Returns
           Reference to this string.

       Definition at line 1459 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, basic_string & >
       std::basic_string< _CharT, _Traits, _Alloc >::assign (const _Tp &
       __svt, size_type __pos, size_type __n = npos) [inline]
       Set value from a range of characters in a string_view.

       Parameters
           __svt The source object convertible to string_view.
           __pos The position in the string_view to assign from.
           __n The number of characters to assign.

       Returns
           Reference to this string.

       Definition at line 1474 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::assign (const basic_string< _CharT, _Traits, _Alloc
       > & __str)
       Set value to contents of another string.

       Parameters
           __str Source string to use.

       Returns
           Reference to this string.

       Definition at line 3159 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::get_allocator().

       Referenced by std::basic_string< _CharT, _Traits, _Alloc >::assign(),
       std::basic_string< _CharT, _Traits, _Alloc >::operator=(),
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::overflow(), and
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::str().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::assign
       (const basic_string< _CharT, _Traits, _Alloc > & __str, size_type
       __pos, size_type __n = npos) [inline]
       Set value to a substring of a string.

       Parameters
           __str The string to use.
           __pos Index of the first character of str.
           __n Number of characters to use.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range if pos is not a valid index.

       This function sets this string to the substring of __str consisting of
       __n characters at __pos. If __n is is larger than the number of
       available characters in __str, the remainder of __str is used.

       Definition at line 1380 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::assign
       (initializer_list< _CharT > __l) [inline]
       Set value to an initializer_list of characters.

       Parameters
           __l The initializer_list of characters to assign.

       Returns
           Reference to this string.

       Definition at line 1447 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::assign
       (size_type __n, _CharT __c) [inline]
       Set value to multiple characters.

       Parameters
           __n Length of the resulting string.
           __c The character to use.

       Returns
           Reference to this string.

       This function sets the value of this string to __n copies of character
       __c.

       Definition at line 1424 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc > reference
       std::basic_string< _CharT, _Traits, _Alloc >::at (size_type __n)
       [inline]
       Provides access to the data contained in the string.

       Parameters
           __n The index of the character to access.

       Returns
           Read/write reference to the character.

       Exceptions
           std::out_of_range If n is an invalid index.

       This function provides for safer data access. The parameter is first
       checked that it is in the range of the string. The function throws
       out_of_range if the check fails. Success results in unsharing the
       string.

       Definition at line 1102 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       const_reference std::basic_string< _CharT, _Traits, _Alloc >::at
       (size_type __n) const [inline]
       Provides access to the data contained in the string.

       Parameters
           __n The index of the character to access.

       Returns
           Read-only (const) reference to the character.

       Exceptions
           std::out_of_range If n is an invalid index.

       This function provides for safer data access. The parameter is first
       checked that it is in the range of the string. The function throws
       out_of_range if the check fails.

       Definition at line 1080 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc > reference
       std::basic_string< _CharT, _Traits, _Alloc >::back () [inline]
       Returns a read/write reference to the data at the last element of the
       string.

       Definition at line 1141 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::empty(),
       std::basic_string< _CharT, _Traits, _Alloc >::operator[](), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       const_reference std::basic_string< _CharT, _Traits, _Alloc >::back ()
       const [inline],  [noexcept]
       Returns a read-only (constant) reference to the data at the last
       element of the string.

       Definition at line 1152 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::empty(),
       std::basic_string< _CharT, _Traits, _Alloc >::operator[](), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc > iterator
       std::basic_string< _CharT, _Traits, _Alloc >::begin () [inline]
       Returns a read/write iterator that points to the first character in the
       string. Unshares the string.

       Definition at line 803 of file cow_string.h.

       Referenced by std::basic_string< _CharT, _Traits, _Alloc >::crend(),
       std::regex_match(), std::regex_replace(), std::regex_search(),
       std::basic_string< _CharT, _Traits, _Alloc >::rend(), and
       std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc >
       const_iterator std::basic_string< _CharT, _Traits, _Alloc >::begin ()
       const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       character in the string.

       Definition at line 814 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > const
       _CharT * std::basic_string< _CharT, _Traits, _Alloc >::c_str () const
       [inline],  [noexcept]
       Return const pointer to null-terminated contents. This is a handle to
       internal data. Do not modify or dire things may happen.

       Definition at line 2206 of file cow_string.h.

       Referenced by std::collate< _CharT >::do_compare(), std::money_get<
       _CharT, _InIter >::do_get(), std::num_get< _CharT, _InIter >::do_get(),
       std::collate< _CharT >::do_transform(), std::basic_filebuf< _CharT,
       _Traits >::open(), std::regex_replace(), and
       std::experimental::filesystem::v1::filesystem_error::what().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::capacity () const
       [inline],  [noexcept]
       Returns the total number of characters that the string can hold before
       needing to allocate more memory.

       Definition at line 969 of file cow_string.h.

       Referenced by std::basic_string< _CharT, _Traits, _Alloc
       >::push_back().

   template<typename _CharT , typename _Traits , typename _Alloc >
       const_iterator std::basic_string< _CharT, _Traits, _Alloc >::cbegin ()
       const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points to the first
       character in the string.

       Definition at line 878 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       const_iterator std::basic_string< _CharT, _Traits, _Alloc >::cend ()
       const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       character in the string.

       Definition at line 886 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::clear () [inline],
       [noexcept]
       Erases the string, making it empty.

       Definition at line 1004 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::get_allocator().

       Referenced by std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::setbuf().

   template<typename _CharT , typename _Traits , typename _Alloc > int
       std::basic_string< _CharT, _Traits, _Alloc >::compare (const _CharT *
       __s) const [noexcept]
       Compare to a C string.

       Parameters
           __s C string to compare against.

       Returns
           Integer < 0, 0, or > 0.

       Returns an integer < 0 if this string is ordered before __s, 0 if their
       values are equivalent, or > 0 if this string is ordered after __s.
       Determines the effective length rlen of the strings to compare as the
       smallest of size() and the length of a string constructed from __s. The
       function then compares the two strings by calling
       traits::compare(data(),s,rlen). If the result of the comparison is
       nonzero returns it, otherwise the shorter one is ordered first.

       Definition at line 888 of file basic_string.tcc.

       References std::min(), and std::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, int > std::basic_string< _CharT,
       _Traits, _Alloc >::compare (const _Tp & __svt) const [inline],
       [noexcept]
       Compare to a string_view.

       Parameters
           __svt An object convertible to string_view to compare against.

       Returns
           Integer < 0, 0, or > 0.

       Definition at line 2782 of file cow_string.h.

       References std::min(), and std::basic_string< _CharT, _Traits, _Alloc
       >::size().

   template<typename _CharT , typename _Traits , typename _Alloc > int
       std::basic_string< _CharT, _Traits, _Alloc >::compare (const
       basic_string< _CharT, _Traits, _Alloc > & __str) const [inline]
       Compare to a string.

       Parameters
           __str String to compare against.

       Returns
           Integer < 0, 0, or > 0.

       Returns an integer < 0 if this string is ordered before __str, 0 if
       their values are equivalent, or > 0 if this string is ordered after
       __str. Determines the effective length rlen of the strings to compare
       as the smallest of size() and str.size(). The function then compares
       the two strings by calling traits::compare(data(), str.data(),rlen). If
       the result of the comparison is nonzero returns it, otherwise the
       shorter one is ordered first.

       Definition at line 2762 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::data(),
       std::min(), and std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, int > std::basic_string< _CharT,
       _Traits, _Alloc >::compare (size_type __pos, size_type __n, const _Tp &
       __svt) const [inline],  [noexcept]
       Compare to a string_view.

       Parameters
           __pos A position in the string to start comparing from.
           __n The number of characters to compare.
           __svt An object convertible to string_view to compare against.

       Returns
           Integer < 0, 0, or > 0.

       Definition at line 2806 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > int
       std::basic_string< _CharT, _Traits, _Alloc >::compare (size_type __pos,
       size_type __n, const basic_string< _CharT, _Traits, _Alloc > & __str)
       const
       Compare substring to a string.

       Parameters
           __pos Index of first character of substring.
           __n Number of characters in substring.
           __str String to compare against.

       Returns
           Integer < 0, 0, or > 0.

       Form the substring of this string from the __n characters starting at
       __pos. Returns an integer < 0 if the substring is ordered before __str,
       0 if their values are equivalent, or > 0 if the substring is ordered
       after __str. Determines the effective length rlen of the strings to
       compare as the smallest of the length of the substring and
       __str.size(). The function then compares the two strings by calling
       traits::compare(substring.data(),str.data(),rlen). If the result of the
       comparison is nonzero returns it, otherwise the shorter one is ordered
       first.

       Definition at line 853 of file basic_string.tcc.

       References std::basic_string< _CharT, _Traits, _Alloc >::data(),
       std::min(), and std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc > int
       std::basic_string< _CharT, _Traits, _Alloc >::compare (size_type __pos,
       size_type __n1, const _CharT * __s) const
       Compare substring to a C string.

       Parameters
           __pos Index of first character of substring.
           __n1 Number of characters in substring.
           __s C string to compare against.

       Returns
           Integer < 0, 0, or > 0.

       Form the substring of this string from the __n1 characters starting at
       pos. Returns an integer < 0 if the substring is ordered before __s, 0
       if their values are equivalent, or > 0 if the substring is ordered
       after __s. Determines the effective length rlen of the strings to
       compare as the smallest of the length of the substring and the length
       of a string constructed from __s. The function then compares the two
       string by calling traits::compare(substring.data(),__s,rlen). If the
       result of the comparison is nonzero returns it, otherwise the shorter
       one is ordered first.

       Definition at line 904 of file basic_string.tcc.

       References std::min().

   template<typename _CharT , typename _Traits , typename _Alloc > int
       std::basic_string< _CharT, _Traits, _Alloc >::compare (size_type __pos,
       size_type __n1, const _CharT * __s, size_type __n2) const
       Compare substring against a character array.

       Parameters
           __pos Index of first character of substring.
           __n1 Number of characters in substring.
           __s character array to compare against.
           __n2 Number of characters of s.

       Returns
           Integer < 0, 0, or > 0.

       Form the substring of this string from the __n1 characters starting at
       __pos. Form a string from the first __n2 characters of __s. Returns an
       integer < 0 if this substring is ordered before the string from __s, 0
       if their values are equivalent, or > 0 if this substring is ordered
       after the string from __s. Determines the effective length rlen of the
       strings to compare as the smallest of the length of the substring and
       __n2. The function then compares the two strings by calling
       traits::compare(substring.data(),s,rlen). If the result of the
       comparison is nonzero returns it, otherwise the shorter one is ordered
       first.

       NB: s must have at least n2 characters, '\0' has no special meaning.

       Definition at line 921 of file basic_string.tcc.

       References std::min().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, int > std::basic_string< _CharT,
       _Traits, _Alloc >::compare (size_type __pos1, size_type __n1, const _Tp
       & __svt, size_type __pos2, size_type __n2 = npos) const [inline],
       [noexcept]
       Compare to a string_view.

       Parameters
           __pos1 A position in the string to start comparing from.
           __n1 The number of characters to compare.
           __svt An object convertible to string_view to compare against.
           __pos2 A position in the string_view to start comparing from.
           __n2 The number of characters to compare.

       Returns
           Integer < 0, 0, or > 0.

       Definition at line 2825 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > int
       std::basic_string< _CharT, _Traits, _Alloc >::compare (size_type
       __pos1, size_type __n1, const basic_string< _CharT, _Traits, _Alloc > &
       __str, size_type __pos2, size_type __n2 = npos) const
       Compare substring to a substring.

       Parameters
           __pos1 Index of first character of substring.
           __n1 Number of characters in substring.
           __str String to compare against.
           __pos2 Index of first character of substring of str.
           __n2 Number of characters in substring of str.

       Returns
           Integer < 0, 0, or > 0.

       Form the substring of this string from the __n1 characters starting at
       __pos1. Form the substring of __str from the __n2 characters starting
       at __pos2. Returns an integer < 0 if this substring is ordered before
       the substring of __str, 0 if their values are equivalent, or > 0 if
       this substring is ordered after the substring of __str. Determines the
       effective length rlen of the strings to compare as the smallest of the
       lengths of the substrings. The function then compares the two strings
       by calling
       traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen). If
       the result of the comparison is nonzero returns it, otherwise the
       shorter one is ordered first.

       Definition at line 869 of file basic_string.tcc.

       References std::basic_string< _CharT, _Traits, _Alloc >::data(), and
       std::min().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::copy (_CharT * __s, size_type __n, size_type
       __pos = 0) const
       Copy substring into C string.

       Parameters
           __s C string to copy value into.
           __n Number of characters to copy.
           __pos Index of first character to copy.

       Returns
           Number of characters actually copied

       Exceptions
           std::out_of_range If __pos > size().

       Copies up to __n characters starting at __pos into the C string __s. If
       __pos is greater than size(), out_of_range is thrown.

       Definition at line 3643 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       const_reverse_iterator std::basic_string< _CharT, _Traits, _Alloc
       >::crbegin () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       character in the string. Iteration is done in reverse element order.

       Definition at line 895 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::end().

   template<typename _CharT , typename _Traits , typename _Alloc >
       const_reverse_iterator std::basic_string< _CharT, _Traits, _Alloc
       >::crend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first character in the string. Iteration is done in reverse
       element order.

       Definition at line 904 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::begin().

   template<typename _CharT , typename _Traits , typename _Alloc > const
       _CharT * std::basic_string< _CharT, _Traits, _Alloc >::data () const
       [inline],  [noexcept]
       Return const pointer to contents. This is a pointer to internal data.
       It is undefined to modify the contents through the returned pointer. To
       get a pointer that allows modifying the contents use &str[0] instead,
       (or in C++17 the non-const str.data() overload).

       Definition at line 2218 of file cow_string.h.

       Referenced by std::basic_regex< _Ch_type, _Rx_traits >::assign(),
       std::basic_string< _CharT, _Traits, _Alloc >::compare(), std::collate<
       _CharT >::do_compare(), std::collate< _CharT >::do_transform(),
       std::basic_string< _CharT, _Traits, _Alloc >::find(),
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_not_of(),
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_of(),
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_not_of(),
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_of(),
       std::match_results< _Bi_iter, _Alloc >::format(), std::wstring_convert<
       _Codecvt, _Elem, _Wide_alloc, _Byte_alloc >::from_bytes(),
       std::basic_string< _CharT, _Traits, _Alloc >::operator __sv_type(),
       std::basic_string< _CharT, _Traits, _Alloc >::rfind(),
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::str(),
       std::wstring_convert< _Codecvt, _Elem, _Wide_alloc, _Byte_alloc
       >::to_bytes(), std::regex_traits< _Ch_type >::transform(), and
       std::filesystem::filesystem_error::what().

   template<typename _CharT , typename _Traits , typename _Alloc > _CharT *
       std::basic_string< _CharT, _Traits, _Alloc >::data () [inline],
       [noexcept]
       Return non-const pointer to contents. This is a pointer to the
       character sequence held by the string. Modifying the characters in the
       sequence is allowed.

       Definition at line 2229 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > bool
       std::basic_string< _CharT, _Traits, _Alloc >::empty () const [inline],
       [noexcept]
       Returns true if the string is empty. Equivalent to *this == ''.

       Definition at line 1026 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::size().

       Referenced by std::basic_string< _CharT, _Traits, _Alloc >::back(),
       std::basic_string< _CharT, _Traits, _Alloc >::front(),
       std::operator<<(), std::tr2::operator>>(), and std::basic_string<
       _CharT, _Traits, _Alloc >::pop_back().

   template<typename _CharT , typename _Traits , typename _Alloc > iterator
       std::basic_string< _CharT, _Traits, _Alloc >::end () [inline]
       Returns a read/write iterator that points one past the last character
       in the string. Unshares the string.

       Definition at line 822 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::size().

       Referenced by std::basic_string< _CharT, _Traits, _Alloc >::crbegin(),
       std::basic_string< _CharT, _Traits, _Alloc >::rbegin(),
       std::regex_match(), std::regex_replace(), and std::regex_search().

   template<typename _CharT , typename _Traits , typename _Alloc >
       const_iterator std::basic_string< _CharT, _Traits, _Alloc >::end ()
       const [inline],  [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       character in the string.

       Definition at line 833 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc > bool
       std::basic_string< _CharT, _Traits, _Alloc >::ends_with (_CharT __x)
       const [inline],  [noexcept]
       Definition at line 2971 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > bool
       std::basic_string< _CharT, _Traits, _Alloc >::ends_with
       (basic_string_view< _CharT, _Traits > __x) const [inline],  [noexcept]
       Definition at line 2967 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > bool
       std::basic_string< _CharT, _Traits, _Alloc >::ends_with (const _CharT *
       __x) const [inline],  [noexcept]
       Definition at line 2975 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::iterator std::basic_string<
       _CharT, _Traits, _Alloc >::erase (iterator __first, iterator __last)
       Remove a range of characters.

       Parameters
           __first Iterator referencing the first character to remove.
           __last Iterator referencing the end of the range.

       Returns
           Iterator referencing location of first after removal.

       Removes the characters in the range [first,last) from this string. The
       value of the string doesn't change if an error is thrown.

       Definition at line 3307 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > iterator
       std::basic_string< _CharT, _Traits, _Alloc >::erase (iterator
       __position) [inline]
       Remove one character.

       Parameters
           __position Iterator referencing the character to remove.

       Returns
           iterator referencing same location after removal.

       Removes the character at __position from this string. The value of the
       string doesn't change if an error is thrown.

       Definition at line 1725 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::erase
       (size_type __pos = 0, size_type __n = npos) [inline]
       Remove characters.

       Parameters
           __pos Index of first character to remove (default 0).
           __n Number of characters to remove (default remainder).

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range If pos is beyond the end of this string.

       Removes __n characters from this string starting at __pos. The length
       of the string is reduced by __n. If there are < __n characters to
       remove, the remainder of the string is truncated. If __p is beyond end
       of string, out_of_range is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1709 of file cow_string.h.

       Referenced by std::getline(), std::operator>>(), and std::basic_string<
       _CharT, _Traits, _Alloc >::pop_back().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find (_CharT __c, size_type __pos = 0) const
       [noexcept]
       Find position of a character.

       Parameters
           __c Character to locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for __c within this string. If
       found, returns the index where it was found. If not found, returns
       npos.

       Definition at line 683 of file basic_string.tcc.

       References std::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find (const _CharT * __s, size_type __pos,
       size_type __n) const [noexcept]
       Find position of a C substring.

       Parameters
           __s C string to locate.
           __pos Index of character to search from.
           __n Number of characters from s to search for.

       Returns
           Index of start of first occurrence.

       Starting from __pos, searches forward for the first __n characters in
       __s within this string. If found, returns the index where it begins. If
       not found, returns npos.

       Definition at line 646 of file basic_string.tcc.

       References std::data(), and std::size().

       Referenced by std::basic_string< _CharT, _Traits, _Alloc >::find(), and
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_of().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find (const _CharT * __s,
       size_type __pos = 0) const [inline],  [noexcept]
       Find position of a C string.

       Parameters
           __s C string to locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of start of first occurrence.

       Starting from __pos, searches forward for the value of __s within this
       string. If found, returns the index where it begins. If not found,
       returns npos.

       Definition at line 2285 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::find().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, size_type > std::basic_string<
       _CharT, _Traits, _Alloc >::find (const _Tp & __svt, size_type __pos =
       0) const [inline],  [noexcept]
       Find position of a string_view.

       Parameters
           __svt The object convertible to string_view to locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of start of first occurrence.

       Definition at line 2313 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::find().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find (const basic_string<
       _CharT, _Traits, _Alloc > & __str, size_type __pos = 0) const [inline],
       [noexcept]
       Find position of a string.

       Parameters
           __str String to locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of start of first occurrence.

       Starting from __pos, searches forward for value of __str within this
       string. If found, returns the index where it begins. If not found,
       returns npos.

       Definition at line 2270 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::data(),
       std::basic_string< _CharT, _Traits, _Alloc >::find(), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find_first_not_of (_CharT __c, size_type
       __pos = 0) const [noexcept]
       Find position of a different character.

       Parameters
           __c Character to avoid.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for a character other than __c
       within this string. If found, returns the index where it was found. If
       not found, returns npos.

       Definition at line 797 of file basic_string.tcc.

       References std::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find_first_not_of (const _CharT * __s,
       size_type __pos, size_type __n) const [noexcept]
       Find position of a character not in C substring.

       Parameters
           __s C string containing characters to avoid.
           __pos Index of character to search from.
           __n Number of characters from __s to consider.

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for a character not contained in
       the first __n characters of __s within this string. If found, returns
       the index where it was found. If not found, returns npos.

       Definition at line 783 of file basic_string.tcc.

       References std::size().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_not_of (const
       _CharT * __s, size_type __pos = 0) const [inline],  [noexcept]
       Find position of a character not in C string.

       Parameters
           __s C string containing characters to avoid.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for a character not contained in
       __s within this string. If found, returns the index where it was found.
       If not found, returns npos.

       Definition at line 2609 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::find_first_not_of().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, size_type > std::basic_string<
       _CharT, _Traits, _Alloc >::find_first_not_of (const _Tp & __svt,
       size_type __pos = 0) const [inline],  [noexcept]
       Find position of a character not in a string_view.

       Parameters
           __svt An object convertible to string_view containing characters to
           avoid.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Definition at line 2640 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::find_first_not_of().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_not_of (const
       basic_string< _CharT, _Traits, _Alloc > & __str, size_type __pos = 0)
       const [inline],  [noexcept]
       Find position of a character not in string.

       Parameters
           __str String containing characters to avoid.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for a character not contained in
       __str within this string. If found, returns the index where it was
       found. If not found, returns npos.

       Definition at line 2578 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::data(),
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_not_of(), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

       Referenced by std::basic_string< _CharT, _Traits, _Alloc
       >::find_first_not_of().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_of (_CharT
       __c, size_type __pos = 0) const [inline],  [noexcept]
       Find position of a character.

       Parameters
           __c Character to locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for the character __c within this
       string. If found, returns the index where it was found. If not found,
       returns npos.

       Note: equivalent to find(__c, __pos).

       Definition at line 2462 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::find().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find_first_of (const _CharT * __s, size_type
       __pos, size_type __n) const [noexcept]
       Find position of a character of C substring.

       Parameters
           __s String containing characters to locate.
           __pos Index of character to search from.
           __n Number of characters from s to search for.

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for one of the first __n
       characters of __s within this string. If found, returns the index where
       it was found. If not found, returns npos.

       Definition at line 743 of file basic_string.tcc.

       References std::size().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_of (const
       _CharT * __s, size_type __pos = 0) const [inline],  [noexcept]
       Find position of a character of C string.

       Parameters
           __s String containing characters to locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for one of the characters of __s
       within this string. If found, returns the index where it was found. If
       not found, returns npos.

       Definition at line 2442 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::find_first_of().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, size_type > std::basic_string<
       _CharT, _Traits, _Alloc >::find_first_of (const _Tp & __svt, size_type
       __pos = 0) const [inline],  [noexcept]
       Find position of a character of a string_view.

       Parameters
           __svt An object convertible to string_view containing characters to
           locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Definition at line 2475 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::find_first_of().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_of (const
       basic_string< _CharT, _Traits, _Alloc > & __str, size_type __pos = 0)
       const [inline],  [noexcept]
       Find position of a character of string.

       Parameters
           __str String containing characters to locate.
           __pos Index of character to search from (default 0).

       Returns
           Index of first occurrence.

       Starting from __pos, searches forward for one of the characters of
       __str within this string. If found, returns the index where it was
       found. If not found, returns npos.

       Definition at line 2411 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::data(),
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_of(), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

       Referenced by std::basic_string< _CharT, _Traits, _Alloc
       >::find_first_of().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find_last_not_of (_CharT __c, size_type
       __pos = npos) const [noexcept]
       Find last position of a different character.

       Parameters
           __c Character to avoid.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for a character other than __c
       within this string. If found, returns the index where it was found. If
       not found, returns npos.

       Definition at line 832 of file basic_string.tcc.

       References std::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find_last_not_of (const _CharT * __s,
       size_type __pos, size_type __n) const [noexcept]
       Find last position of a character not in C substring.

       Parameters
           __s C string containing characters to avoid.
           __pos Index of character to search back from.
           __n Number of characters from s to consider.

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for a character not contained in
       the first __n characters of __s within this string. If found, returns
       the index where it was found. If not found, returns npos.

       Definition at line 809 of file basic_string.tcc.

       References std::size().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_not_of (const
       _CharT * __s, size_type __pos = npos) const [inline],  [noexcept]
       Find last position of a character not in C string.

       Parameters
           __s C string containing characters to avoid.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for a character not contained in
       __s within this string. If found, returns the index where it was found.
       If not found, returns npos.

       Definition at line 2691 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::find_last_not_of().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, size_type > std::basic_string<
       _CharT, _Traits, _Alloc >::find_last_not_of (const _Tp & __svt,
       size_type __pos = npos) const [inline],  [noexcept]
       Find last position of a character not in a string_view.

       Parameters
           __svt An object convertible to string_view containing characters to
           avoid.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Definition at line 2722 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::find_last_not_of().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_not_of (const
       basic_string< _CharT, _Traits, _Alloc > & __str, size_type __pos =
       npos) const [inline],  [noexcept]
       Find last position of a character not in string.

       Parameters
           __str String containing characters to avoid.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for a character not contained in
       __str within this string. If found, returns the index where it was
       found. If not found, returns npos.

       Definition at line 2660 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::data(),
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_not_of(), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

       Referenced by std::basic_string< _CharT, _Traits, _Alloc
       >::find_last_not_of().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_of (_CharT __c,
       size_type __pos = npos) const [inline],  [noexcept]
       Find last position of a character.

       Parameters
           __c Character to locate.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for __c within this string. If
       found, returns the index where it was found. If not found, returns
       npos.

       Note: equivalent to rfind(__c, __pos).

       Definition at line 2546 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::rfind().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find_last_of (const _CharT * __s, size_type
       __pos, size_type __n) const [noexcept]
       Find last position of a character of C substring.

       Parameters
           __s C string containing characters to locate.
           __pos Index of character to search back from.
           __n Number of characters from s to search for.

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for one of the first __n
       characters of __s within this string. If found, returns the index where
       it was found. If not found, returns npos.

       Definition at line 760 of file basic_string.tcc.

       References std::size().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_of (const
       _CharT * __s, size_type __pos = npos) const [inline],  [noexcept]
       Find last position of a character of C string.

       Parameters
           __s C string containing characters to locate.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for one of the characters of __s
       within this string. If found, returns the index where it was found. If
       not found, returns npos.

       Definition at line 2526 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::find_last_of().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, size_type > std::basic_string<
       _CharT, _Traits, _Alloc >::find_last_of (const _Tp & __svt, size_type
       __pos = npos) const [inline],  [noexcept]
       Find last position of a character of string.

       Parameters
           __svt An object convertible to string_view containing characters to
           locate.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Definition at line 2559 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::find_last_of().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_of (const
       basic_string< _CharT, _Traits, _Alloc > & __str, size_type __pos =
       npos) const [inline],  [noexcept]
       Find last position of a character of string.

       Parameters
           __str String containing characters to locate.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for one of the characters of
       __str within this string. If found, returns the index where it was
       found. If not found, returns npos.

       Definition at line 2495 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::data(),
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_of(), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

       Referenced by std::basic_string< _CharT, _Traits, _Alloc
       >::find_last_of().

   template<typename _CharT , typename _Traits , typename _Alloc > reference
       std::basic_string< _CharT, _Traits, _Alloc >::front () [inline]
       Returns a read/write reference to the data at the first element of the
       string.

       Definition at line 1119 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::empty(), and
       std::basic_string< _CharT, _Traits, _Alloc >::operator[]().

   template<typename _CharT , typename _Traits , typename _Alloc >
       const_reference std::basic_string< _CharT, _Traits, _Alloc >::front ()
       const [inline],  [noexcept]
       Returns a read-only (constant) reference to the data at the first
       element of the string.

       Definition at line 1130 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::empty(), and
       std::basic_string< _CharT, _Traits, _Alloc >::operator[]().

   template<typename _CharT , typename _Traits , typename _Alloc >
       allocator_type std::basic_string< _CharT, _Traits, _Alloc
       >::get_allocator () const [inline],  [noexcept]
       Return copy of allocator used to construct this string.

       Definition at line 2240 of file cow_string.h.

       Referenced by std::basic_string< _CharT, _Traits, _Alloc
       >::~basic_string(), std::basic_string< _CharT, _Traits, _Alloc
       >::assign(), std::basic_string< _CharT, _Traits, _Alloc >::clear(),
       std::wstring_convert< _Codecvt, _Elem, _Wide_alloc, _Byte_alloc
       >::from_bytes(), std::operator+(), std::basic_stringbuf< _CharT,
       _Traits, _Alloc >::str(), and std::wstring_convert< _Codecvt, _Elem,
       _Wide_alloc, _Byte_alloc >::to_bytes().

   template<typename _CharT , typename _Traits , typename _Alloc > iterator
       std::basic_string< _CharT, _Traits, _Alloc >::insert (iterator __p,
       _CharT __c) [inline]
       Insert one character.

       Parameters
           __p Iterator referencing position in string to insert at.
           __c The character to insert.

       Returns
           Iterator referencing newly inserted char.

       Exceptions
           std::length_error If new length exceeds max_size().

       Inserts character __c at position referenced by __p. If adding
       character causes the length to exceed max_size(), length_error is
       thrown. If __p is beyond end of string, out_of_range is thrown. The
       value of the string doesn't change if an error is thrown.

       Definition at line 1649 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<class _InputIterator > void std::basic_string< _CharT,
       _Traits, _Alloc >::insert (iterator __p, _InputIterator __beg,
       _InputIterator __end) [inline]
       Insert a range of characters.

       Parameters
           __p Iterator referencing location in string to insert at.
           __beg Start of range.
           __end End of range.

       Exceptions
           std::length_error If new length exceeds max_size().

       Inserts characters in range [__beg,__end). If adding characters causes
       the length to exceed max_size(), length_error is thrown. The value of
       the string doesn't change if an error is thrown.

       Definition at line 1514 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::insert (iterator __p,
       initializer_list< _CharT > __l) [inline]
       Insert an initializer_list of characters.

       Parameters
           __p Iterator referencing location in string to insert at.
           __l The initializer_list of characters to insert.

       Exceptions
           std::length_error If new length exceeds max_size().

       Definition at line 1525 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::insert().

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::insert (iterator __p,
       size_type __n, _CharT __c) [inline]
       Insert multiple characters.

       Parameters
           __p Iterator referencing location in string to insert at.
           __n Number of characters to insert
           __c The character to insert.

       Exceptions
           std::length_error If new length exceeds max_size().

       Inserts __n copies of character __c starting at the position referenced
       by iterator __p. If adding characters causes the length to exceed
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1497 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace().

       Referenced by std::basic_string< _CharT, _Traits, _Alloc >::insert().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::insert
       (size_type __pos, const _CharT * __s) [inline]
       Insert a C string.

       Parameters
           __pos Position in string to insert at.
           __s The C string to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().
           std::out_of_range If pos is beyond the end of this string.

       Inserts the first n characters of __s starting at __pos. If adding
       characters causes the length to exceed max_size(), length_error is
       thrown. If __pos is beyond end(), out_of_range is thrown. The value of
       the string doesn't change if an error is thrown.

       Definition at line 1608 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::insert().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::insert (size_type __pos, const _CharT * __s,
       size_type __n)
       Insert a C substring.

       Parameters
           __pos Position in string to insert at.
           __s The C string to insert.
           __n The number of characters to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().
           std::out_of_range If __pos is beyond the end of this string.

       Inserts the first __n characters of __s starting at __pos. If adding
       characters causes the length to exceed max_size(), length_error is
       thrown. If __pos is beyond end(), out_of_range is thrown. The value of
       the string doesn't change if an error is thrown.

       Definition at line 3276 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, basic_string & >
       std::basic_string< _CharT, _Traits, _Alloc >::insert (size_type __pos,
       const _Tp & __svt) [inline]
       Insert a string_view.

       Parameters
           __pos Position in string to insert at.
           __svt The object convertible to string_view to insert.

       Returns
           Reference to this string.

       Definition at line 1667 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::insert().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::insert
       (size_type __pos, size_type __n, _CharT __c) [inline]
       Insert multiple characters.

       Parameters
           __pos Index in string to insert at.
           __n Number of characters to insert
           __c The character to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().
           std::out_of_range If __pos is beyond the end of this string.

       Inserts __n copies of character __c starting at index __pos. If adding
       characters causes the length to exceed max_size(), length_error is
       thrown. If __pos > length(), out_of_range is thrown. The value of the
       string doesn't change if an error is thrown.

       Definition at line 1631 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, basic_string & >
       std::basic_string< _CharT, _Traits, _Alloc >::insert (size_type __pos1,
       const _Tp & __svt, size_type __pos2, size_type __n = npos) [inline]
       Insert a string_view.

       Parameters
           __pos1 Position in string to insert at.
           __svt The object convertible to string_view to insert from.
           __pos2 Position in string_view to insert from.
           __n The number of characters to insert.

       Returns
           Reference to this string.

       Definition at line 1683 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::insert
       (size_type __pos1, const basic_string< _CharT, _Traits, _Alloc > &
       __str) [inline]
       Insert value of a string.

       Parameters
           __pos1 Position in string to insert at.
           __str The string to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Inserts value of __str starting at __pos1. If adding characters causes
       the length to exceed max_size(), length_error is thrown. The value of
       the string doesn't change if an error is thrown.

       Definition at line 1545 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::insert(), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::insert
       (size_type __pos1, const basic_string< _CharT, _Traits, _Alloc > &
       __str, size_type __pos2, size_type __n = npos) [inline]
       Insert a substring.

       Parameters
           __pos1 Position in string to insert at.
           __str The string to insert.
           __pos2 Start of characters in str to insert.
           __n Number of characters to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().
           std::out_of_range If pos1 > size() or __pos2 > str.size().

       Starting at pos1, insert __n character of __str beginning with __pos2.
       If adding characters causes the length to exceed max_size(),
       length_error is thrown. If __pos1 is beyond the end of this string or
       __pos2 is beyond the end of __str, out_of_range is thrown. The value of
       the string doesn't change if an error is thrown.

       Definition at line 1567 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::insert().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::length () const [inline],
       [noexcept]
       Returns the number of characters in the string, not including any null-
       termination.

       Definition at line 919 of file cow_string.h.

       Referenced by std::collate< _CharT >::do_compare(), std::collate<
       _CharT >::do_transform(), std::regex_traits< _Ch_type >::length(),
       std::regex_replace(), and std::wstring_convert< _Codecvt, _Elem,
       _Wide_alloc, _Byte_alloc >::to_bytes().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::max_size () const
       [inline],  [noexcept]
       Returns the size() of the largest possible string.

       Definition at line 924 of file cow_string.h.

       Referenced by std::getline(), and std::operator>>().

   template<typename _CharT , typename _Traits , typename _Alloc >
       std::basic_string< _CharT, _Traits, _Alloc >::operator __sv_type ()
       const [inline],  [noexcept]
       Convert to a string_view.

       Returns
           A string_view.

       Definition at line 793 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::data(), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::operator+=
       (_CharT __c) [inline]
       Append a character.

       Parameters
           __c The character to append.

       Returns
           Reference to this string.

       Definition at line 1184 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::push_back().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::operator+=
       (const _CharT * __s) [inline]
       Append a C string.

       Parameters
           __s The C string to append.

       Returns
           Reference to this string.

       Definition at line 1175 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::append().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, basic_string & >
       std::basic_string< _CharT, _Traits, _Alloc >::operator+= (const _Tp &
       __svt) [inline]
       Append a string_view.

       Parameters
           __svt The object convertible to string_view to be appended.

       Returns
           Reference to this string.

       Definition at line 1209 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::append().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::operator+=
       (const basic_string< _CharT, _Traits, _Alloc > & __str) [inline]
       Append a string to this string.

       Parameters
           __str The string to append.

       Returns
           Reference to this string.

       Definition at line 1166 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::append().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::operator+=
       (initializer_list< _CharT > __l) [inline]
       Append an initializer_list of characters.

       Parameters
           __l The initializer_list of characters to be appended.

       Returns
           Reference to this string.

       Definition at line 1197 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::append().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::operator=
       (_CharT __c) [inline]
       Set value to string of length 1.

       Parameters
           __c Source character.

       Assigning to a character makes this string length 1 and (*this)[0] ==
       c.

       Definition at line 744 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::operator=
       (basic_string< _CharT, _Traits, _Alloc > && __str) [inline],
       [noexcept]
       Move assign the value of str to this string.

       Parameters
           __str Source string.

       The contents of str are moved into this string (without copying). str
       is a valid, but unspecified string.

       Definition at line 759 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::swap().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::operator=
       (const _CharT * __s) [inline]
       Copy contents of s into this string.

       Parameters
           __s Source null-terminated string.

       Definition at line 733 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, basic_string & >
       std::basic_string< _CharT, _Traits, _Alloc >::operator= (const _Tp &
       __svt) [inline]
       Set value to string constructed from a string_view.

       Parameters
           __svt An object convertible to string_view.

       Definition at line 786 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::operator=
       (const basic_string< _CharT, _Traits, _Alloc > & __str) [inline]
       Assign the value of str to this string.

       Parameters
           __str Source string.

       Definition at line 725 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::operator=
       (initializer_list< _CharT > __l) [inline]
       Set value to string constructed from initializer list.

       Parameters
           __l std::initializer_list.

       Definition at line 772 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::assign().

   template<typename _CharT , typename _Traits , typename _Alloc > reference
       std::basic_string< _CharT, _Traits, _Alloc >::operator[] (size_type
       __pos) [inline]
       Subscript access to the data contained in the string.

       Parameters
           __pos The index of the character to access.

       Returns
           Read/write reference to the character.

       This operator allows for easy, array-style, data access. Note that data
       access with this operator is unchecked and out_of_range lookups are not
       defined. (For checked lookups see at().) Unshares the string.

       Definition at line 1058 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       const_reference std::basic_string< _CharT, _Traits, _Alloc
       >::operator[] (size_type __pos) const [inline],  [noexcept]
       Subscript access to the data contained in the string.

       Parameters
           __pos The index of the character to access.

       Returns
           Read-only (constant) reference to the character.

       This operator allows for easy, array-style, data access. Note that data
       access with this operator is unchecked and out_of_range lookups are not
       defined. (For checked lookups see at().)

       Definition at line 1041 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::size().

       Referenced by std::basic_string< _CharT, _Traits, _Alloc >::back(), and
       std::basic_string< _CharT, _Traits, _Alloc >::front().

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::pop_back () [inline]
       Remove the last character. The string must be non-empty.

       Definition at line 1754 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::empty(),
       std::basic_string< _CharT, _Traits, _Alloc >::erase(), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::push_back (_CharT __c)
       [inline]
       Append a single character.

       Parameters
           __c Character to append.

       Definition at line 1331 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::capacity(),
       std::basic_string< _CharT, _Traits, _Alloc >::reserve(), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

       Referenced by std::collate< _CharT >::do_transform(),
       std::basic_string< _CharT, _Traits, _Alloc >::operator+=(),
       std::operator<<(), std::tr2::operator>>(), and std::basic_stringbuf<
       _CharT, _Traits, _Alloc >::overflow().

   template<typename _CharT , typename _Traits , typename _Alloc >
       reverse_iterator std::basic_string< _CharT, _Traits, _Alloc >::rbegin
       () [inline]
       Returns a read/write reverse iterator that points to the last character
       in the string. Iteration is done in reverse element order. Unshares the
       string.

       Definition at line 842 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::end().

   template<typename _CharT , typename _Traits , typename _Alloc >
       const_reverse_iterator std::basic_string< _CharT, _Traits, _Alloc
       >::rbegin () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       character in the string. Iteration is done in reverse element order.

       Definition at line 851 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::end().

   template<typename _CharT , typename _Traits , typename _Alloc >
       reverse_iterator std::basic_string< _CharT, _Traits, _Alloc >::rend ()
       [inline]
       Returns a read/write reverse iterator that points to one before the
       first character in the string. Iteration is done in reverse element
       order. Unshares the string.

       Definition at line 860 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::begin().

   template<typename _CharT , typename _Traits , typename _Alloc >
       const_reverse_iterator std::basic_string< _CharT, _Traits, _Alloc
       >::rend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first character in the string. Iteration is done in reverse
       element order.

       Definition at line 869 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::begin().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, basic_string & >
       std::basic_string< _CharT, _Traits, _Alloc >::replace (const_iterator
       __i1, const_iterator __i2, const _Tp & __svt) [inline]
       Replace range of characters with string_view.

       Parameters
           __i1 An iterator referencing the start position to replace at.
           __i2 An iterator referencing the end position for the replace.
           __svt The object convertible to string_view to insert from.

       Returns
           Reference to this string.

       Definition at line 2095 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::begin(), and
       std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::replace
       (iterator __i1, iterator __i2, _CharT * __k1, _CharT * __k2) [inline]
       Definition at line 1986 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<class _InputIterator > basic_string & std::basic_string<
       _CharT, _Traits, _Alloc >::replace (iterator __i1, iterator __i2,
       _InputIterator __k1, _InputIterator __k2) [inline]
       Replace range of characters with range.

       Parameters
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __k1 Iterator referencing start of range to insert.
           __k2 Iterator referencing end of range to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__i1,__i2). In place, characters
       in the range [__k1,__k2) are inserted. If the length of result exceeds
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1973 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::replace
       (iterator __i1, iterator __i2, const _CharT * __k1, const _CharT *
       __k2) [inline]
       Definition at line 1996 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::replace
       (iterator __i1, iterator __i2, const _CharT * __s) [inline]
       Replace range of characters with C string.

       Parameters
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __s C string value to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__i1,__i2). In place, the
       characters of __s are inserted. If the length of result exceeds
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1928 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::replace
       (iterator __i1, iterator __i2, const _CharT * __s, size_type __n)
       [inline]
       Replace range of characters with C substring.

       Parameters
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __s C string value to insert.
           __n Number of characters from s to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__i1,__i2). In place, the first
       __n characters of __s are inserted. If the length of result exceeds
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1907 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::replace
       (iterator __i1, iterator __i2, const basic_string< _CharT, _Traits,
       _Alloc > & __str) [inline]
       Replace range of characters with string.

       Parameters
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __str String value to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__i1,__i2). In place, the value of
       __str is inserted. If the length of result exceeds max_size(),
       length_error is thrown. The value of the string doesn't change if an
       error is thrown.

       Definition at line 1888 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace(), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::replace
       (iterator __i1, iterator __i2, const_iterator __k1, const_iterator
       __k2) [inline]
       Definition at line 2017 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::replace
       (iterator __i1, iterator __i2, initializer_list< _CharT > __l) [inline]
       Replace range of characters with initializer_list.

       Parameters
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __l The initializer_list of characters to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__i1,__i2). In place, characters
       in the range [__k1,__k2) are inserted. If the length of result exceeds
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 2042 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::replace
       (iterator __i1, iterator __i2, iterator __k1, iterator __k2) [inline]
       Definition at line 2007 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::replace
       (iterator __i1, iterator __i2, size_type __n, _CharT __c) [inline]
       Replace range of characters with multiple characters.

       Parameters
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __n Number of characters to insert.
           __c Character to insert.

       Returns
           Reference to this string.

       Exceptions
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__i1,__i2). In place, __n copies
       of __c are inserted. If the length of result exceeds max_size(),
       length_error is thrown. The value of the string doesn't change if an
       error is thrown.

       Definition at line 1949 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, basic_string & >
       std::basic_string< _CharT, _Traits, _Alloc >::replace (size_type __pos,
       size_type __n, const _Tp & __svt) [inline]
       Replace range of characters with string_view.

       Parameters
           __pos The position to replace at.
           __n The number of characters to replace.
           __svt The object convertible to string_view to insert.

       Returns
           Reference to this string.

       Definition at line 2057 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::replace
       (size_type __pos, size_type __n, const basic_string< _CharT, _Traits,
       _Alloc > & __str) [inline]
       Replace characters with value from another string.

       Parameters
           __pos Index of first character to replace.
           __n Number of characters to be replaced.
           __str String to insert.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range If pos is beyond the end of this string.
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__pos,__pos+__n) from this string.
       In place, the value of __str is inserted. If __pos is beyond end of
       string, out_of_range is thrown. If the length of the result exceeds
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1779 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace(), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

       Referenced by std::basic_string< _CharT, _Traits, _Alloc >::append(),
       std::basic_string< _CharT, _Traits, _Alloc >::assign(),
       std::basic_string< _CharT, _Traits, _Alloc >::insert(), and
       std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::replace
       (size_type __pos, size_type __n1, const _CharT * __s) [inline]
       Replace characters with value of a C string.

       Parameters
           __pos Index of first character to replace.
           __n1 Number of characters to be replaced.
           __s C string to insert.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range If pos > size().
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__pos,__pos + __n1) from this
       string. In place, the characters of __s are inserted. If __pos is
       beyond end of string, out_of_range is thrown. If the length of result
       exceeds max_size(), length_error is thrown. The value of the string
       doesn't change if an error is thrown.

       Definition at line 1846 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::replace (size_type __pos, size_type __n1, const
       _CharT * __s, size_type __n2)
       Replace characters with value of a C substring.

       Parameters
           __pos Index of first character to replace.
           __n1 Number of characters to be replaced.
           __s C string to insert.
           __n2 Number of characters from s to use.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range If pos1 > size().
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__pos,__pos + __n1) from this
       string. In place, the first __n2 characters of __s are inserted, or all
       of __s if __n2 is too large. If __pos is beyond end of string,
       out_of_range is thrown. If the length of result exceeds max_size(),
       length_error is thrown. The value of the string doesn't change if an
       error is thrown.

       Definition at line 3330 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::replace
       (size_type __pos, size_type __n1, size_type __n2, _CharT __c) [inline]
       Replace characters with multiple characters.

       Parameters
           __pos Index of first character to replace.
           __n1 Number of characters to be replaced.
           __n2 Number of characters to insert.
           __c Character to insert.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range If __pos > size().
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [pos,pos + n1) from this string. In
       place, __n2 copies of __c are inserted. If __pos is beyond end of
       string, out_of_range is thrown. If the length of result exceeds
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1870 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, basic_string & >
       std::basic_string< _CharT, _Traits, _Alloc >::replace (size_type
       __pos1, size_type __n1, const _Tp & __svt, size_type __pos2, size_type
       __n2 = npos) [inline]
       Replace range of characters with string_view.

       Parameters
           __pos1 The position to replace at.
           __n1 The number of characters to replace.
           __svt The object convertible to string_view to insert from.
           __pos2 The position in the string_view to insert from.
           __n2 The number of characters to insert.

       Returns
           Reference to this string.

       Definition at line 2074 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string & std::basic_string< _CharT, _Traits, _Alloc >::replace
       (size_type __pos1, size_type __n1, const basic_string< _CharT, _Traits,
       _Alloc > & __str, size_type __pos2, size_type __n2 = npos) [inline]
       Replace characters with value from another string.

       Parameters
           __pos1 Index of first character to replace.
           __n1 Number of characters to be replaced.
           __str String to insert.
           __pos2 Index of first character of str to use.
           __n2 Number of characters from str to use.

       Returns
           Reference to this string.

       Exceptions
           std::out_of_range If __pos1 > size() or __pos2 > __str.size().
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__pos1,__pos1 + n) from this
       string. In place, the value of __str is inserted. If __pos is beyond
       end of string, out_of_range is thrown. If the length of the result
       exceeds max_size(), length_error is thrown. The value of the string
       doesn't change if an error is thrown.

       Definition at line 1801 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::replace().

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::reserve
       Equivalent to shrink_to_fit().

       Definition at line 3622 of file cow_string.h.

       Referenced by std::basic_string< _CharT, _Traits, _Alloc
       >::push_back(), and std::basic_string< _CharT, _Traits, _Alloc
       >::shrink_to_fit().

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::reserve (size_type
       __res_arg)
       Attempt to preallocate enough memory for specified number of
       characters.

       Parameters
           __res_arg Number of characters required.

       Exceptions
           std::length_error If __res_arg exceeds max_size().

       This function attempts to reserve enough memory for the string to hold
       the specified number of characters. If the number requested is more
       than max_size(), length_error is thrown.

       The advantage of this function is that if optimal code is a necessity
       and the user can determine the string length that will be required, the
       user can reserve the memory in advance, and thus prevent a possible
       reallocation of memory and copying of string data.

       Definition at line 3421 of file cow_string.h.

       References std::size().

       Referenced by std::num_get< _CharT, _InIter >::do_get(),
       std::operator<<(), std::tr2::operator>>(), and std::basic_stringbuf<
       _CharT, _Traits, _Alloc >::overflow().

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::resize (size_type __n)
       [inline]
       Resizes the string to the specified number of characters.

       Parameters
           __n Number of characters the string should contain.

       This function will resize the string to the specified length. If the
       new size is smaller than the string's current size the string is
       truncated, otherwise the string is extended and new characters are
       default-constructed. For basic types such as char, this means setting
       them to 0.

       Definition at line 951 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::resize().

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::resize (size_type __n,
       _CharT __c)
       Resizes the string to the specified number of characters.

       Parameters
           __n Number of characters the string should contain.
           __c Character to fill any new elements.

       This function will resize the string to the specified number of
       characters. If the number is smaller than the string's current size the
       string is truncated, otherwise the string is extended and new elements
       are set to __c.

       Definition at line 3569 of file cow_string.h.

       References std::size().

       Referenced by std::money_get< _CharT, _InIter >::do_get(), and
       std::basic_string< _CharT, _Traits, _Alloc >::resize().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::rfind (_CharT __c, size_type __pos = npos)
       const [noexcept]
       Find last position of a character.

       Parameters
           __c Character to locate.
           __pos Index of character to search back from (default end).

       Returns
           Index of last occurrence.

       Starting from __pos, searches backward for __c within this string. If
       found, returns the index where it was found. If not found, returns
       npos.

       Definition at line 725 of file basic_string.tcc.

       References std::size().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::rfind (const _CharT * __s, size_type __pos,
       size_type __n) const [noexcept]
       Find last position of a C substring.

       Parameters
           __s C string to locate.
           __pos Index of character to search back from.
           __n Number of characters from s to search for.

       Returns
           Index of start of last occurrence.

       Starting from __pos, searches backward for the first __n characters in
       __s within this string. If found, returns the index where it begins. If
       not found, returns npos.

       Definition at line 702 of file basic_string.tcc.

       References std::min(), and std::size().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::rfind (const _CharT *
       __s, size_type __pos = npos) const [inline],  [noexcept]
       Find last position of a C string.

       Parameters
           __s C string to locate.
           __pos Index of character to start search at (default end).

       Returns
           Index of start of last occurrence.

       Starting from __pos, searches backward for the value of __s within this
       string. If found, returns the index where it begins. If not found,
       returns npos.

       Definition at line 2363 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::rfind().

   template<typename _CharT , typename _Traits , typename _Alloc >
       template<typename _Tp > _If_sv< _Tp, size_type > std::basic_string<
       _CharT, _Traits, _Alloc >::rfind (const _Tp & __svt, size_type __pos =
       npos) const [inline],  [noexcept]
       Find last position of a string_view.

       Parameters
           __svt The object convertible to string_view to locate.
           __pos Index of character to search back from (default end).

       Returns
           Index of start of last occurrence.

       Definition at line 2391 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::rfind().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::rfind (const
       basic_string< _CharT, _Traits, _Alloc > & __str, size_type __pos =
       npos) const [inline],  [noexcept]
       Find last position of a string.

       Parameters
           __str String to locate.
           __pos Index of character to search back from (default end).

       Returns
           Index of start of last occurrence.

       Starting from __pos, searches backward for value of __str within this
       string. If found, returns the index where it begins. If not found,
       returns npos.

       Definition at line 2332 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::data(),
       std::basic_string< _CharT, _Traits, _Alloc >::rfind(), and
       std::basic_string< _CharT, _Traits, _Alloc >::size().

       Referenced by std::basic_string< _CharT, _Traits, _Alloc
       >::find_last_of(), and std::basic_string< _CharT, _Traits, _Alloc
       >::rfind().

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::shrink_to_fit ()
       [inline],  [noexcept]
       A non-binding request to reduce capacity() to size().

       Definition at line 959 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc >::reserve().

   template<typename _CharT , typename _Traits , typename _Alloc > size_type
       std::basic_string< _CharT, _Traits, _Alloc >::size () const [inline],
       [noexcept]
       Returns the number of characters in the string, not including any null-
       termination.

       Definition at line 913 of file cow_string.h.

       Referenced by std::tr2::dynamic_bitset< _WordT, _Alloc
       >::dynamic_bitset(), std::basic_string< _CharT, _Traits, _Alloc
       >::append(), std::basic_regex< _Ch_type, _Rx_traits >::assign(),
       std::basic_string< _CharT, _Traits, _Alloc >::assign(),
       std::basic_string< _CharT, _Traits, _Alloc >::at(), std::basic_string<
       _CharT, _Traits, _Alloc >::back(), std::basic_string< _CharT, _Traits,
       _Alloc >::cend(), std::basic_string< _CharT, _Traits, _Alloc
       >::compare(), std::basic_string< _CharT, _Traits, _Alloc >::empty(),
       std::basic_string< _CharT, _Traits, _Alloc >::end(), std::basic_string<
       _CharT, _Traits, _Alloc >::find(), std::basic_string< _CharT, _Traits,
       _Alloc >::find_first_not_of(), std::basic_string< _CharT, _Traits,
       _Alloc >::find_first_of(), std::basic_string< _CharT, _Traits, _Alloc
       >::find_last_not_of(), std::basic_string< _CharT, _Traits, _Alloc
       >::find_last_of(), std::match_results< _Bi_iter, _Alloc >::format(),
       std::wstring_convert< _Codecvt, _Elem, _Wide_alloc, _Byte_alloc
       >::from_bytes(), std::basic_string< _CharT, _Traits, _Alloc
       >::insert(), std::basic_string< _CharT, _Traits, _Alloc >::operator
       __sv_type(), std::operator+(), std::tr2::operator>>(),
       std::basic_string< _CharT, _Traits, _Alloc >::operator[](),
       std::basic_string< _CharT, _Traits, _Alloc >::pop_back(),
       std::basic_string< _CharT, _Traits, _Alloc >::push_back(),
       std::basic_string< _CharT, _Traits, _Alloc >::replace(),
       std::basic_string< _CharT, _Traits, _Alloc >::rfind(),
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::str(),
       std::wstring_convert< _Codecvt, _Elem, _Wide_alloc, _Byte_alloc
       >::to_bytes(), and std::regex_traits< _Ch_type >::transform().

   template<typename _CharT , typename _Traits , typename _Alloc > bool
       std::basic_string< _CharT, _Traits, _Alloc >::starts_with (_CharT __x)
       const [inline],  [noexcept]
       Definition at line 2959 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > bool
       std::basic_string< _CharT, _Traits, _Alloc >::starts_with
       (basic_string_view< _CharT, _Traits > __x) const [inline],  [noexcept]
       Definition at line 2955 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > bool
       std::basic_string< _CharT, _Traits, _Alloc >::starts_with (const _CharT
       * __x) const [inline],  [noexcept]
       Definition at line 2963 of file cow_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string std::basic_string< _CharT, _Traits, _Alloc >::substr
       (size_type __pos = 0, size_type __n = npos) const [inline]
       Get a substring.

       Parameters
           __pos Index of first character (default 0).
           __n Number of characters in substring (default remainder).

       Returns
           The new string.

       Exceptions
           std::out_of_range If __pos > size().

       Construct and return a new string using the __n characters starting at
       __pos. If the string is too short, use the remainder of the characters.
       If __pos is beyond the end of the string, out_of_range is thrown.

       Definition at line 2743 of file cow_string.h.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::basic_string().

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::swap (basic_string<
       _CharT, _Traits, _Alloc > & __s) [noexcept]
       Swap contents with another string.

       Parameters
           __s String to swap with.

       Exchanges the contents of this string with that of __s in constant
       time.

       Definition at line 3447 of file cow_string.h.

       Referenced by std::basic_string< _CharT, _Traits, _Alloc >::assign(),
       and std::basic_string< _CharT, _Traits, _Alloc >::operator=().

Member Data Documentation
   template<typename _CharT , typename _Traits , typename _Alloc > const
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::npos [static]
       Value returned by various member functions when they fail.

       Definition at line 328 of file cow_string.h.

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                      std::basic_string< _CharT, _Traits, _Alloc >(3)
