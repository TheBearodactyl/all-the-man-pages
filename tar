TAR(1)                                                                                        GNU TAR Manual                                                                                        TAR(1)

NAME
       tar - an archiving utility

SYNOPSIS
   Traditional usage
       tar {A|c|d|r|t|u|x}[GnSkUWOmpsMBiajJzZhPlRvwo] [ARG...]

   UNIX-style usage
       tar -A [OPTIONS] ARCHIVE ARCHIVE

       tar -c [-f ARCHIVE] [OPTIONS] [FILE...]

       tar -d [-f ARCHIVE] [OPTIONS] [FILE...]

       tar -t [-f ARCHIVE] [OPTIONS] [MEMBER...]

       tar -r [-f ARCHIVE] [OPTIONS] [FILE...]

       tar -u [-f ARCHIVE] [OPTIONS] [FILE...]

       tar -x [-f ARCHIVE] [OPTIONS] [MEMBER...]

   GNU-style usage
       tar {--catenate|--concatenate} [OPTIONS] ARCHIVE ARCHIVE

       tar --create [--file ARCHIVE] [OPTIONS] [FILE...]

       tar {--diff|--compare} [--file ARCHIVE] [OPTIONS] [FILE...]

       tar --delete [--file ARCHIVE] [OPTIONS] [MEMBER...]

       tar --append [-f ARCHIVE] [OPTIONS] [FILE...]

       tar --list [-f ARCHIVE] [OPTIONS] [MEMBER...]

       tar --test-label [--file ARCHIVE] [OPTIONS] [LABEL...]

       tar --update [--file ARCHIVE] [OPTIONS] [FILE...]

       tar --update [-f ARCHIVE] [OPTIONS] [FILE...]

       tar {--extract|--get} [-f ARCHIVE] [OPTIONS] [MEMBER...]

NOTE
       This  manpage  is  a  short description of GNU tar.  For a detailed discussion, including examples and usage recommendations, refer to the GNU Tar Manual available in texinfo format.  If the info
       reader and the tar documentation are properly installed on your system, the command

           info tar

       should give you access to the complete manual.

       You can also view the manual using the info mode in emacs(1), or find it in various formats online at

           http://www.gnu.org/software/tar/manual

       If any discrepancies occur between this manpage and the GNU Tar Manual, the later shall be considered the authoritative source.

DESCRIPTION
       GNU tar is an archiving program designed to store multiple files in a single file (an archive), and to manipulate such archives.  The archive can be either a regular file or a device (e.g. a tape
       drive, hence the name of the program, which stands for tape archiver), which can be located either on the local or on a remote machine.

   Option styles
       Options  to GNU tar can be given in three different styles.  In traditional style, the first argument is a cluster of option letters and all subsequent arguments supply arguments to those options
       that require them.  The arguments are read in the same order as the option letters.  Any command line words that remain after all options has been processed are treated as non-optional arguments:
       file or archive member names.

       For  example,  the  c option requires creating the archive, the v option requests the verbose operation, and the f option takes an argument that sets the name of the archive to operate upon.  The
       following command, written in the traditional style, instructs tar to store all files from the directory /etc into the archive file etc.tar verbosely listing the files being archived:

       tar cfv etc.tar /etc

       In UNIX or short-option style, each option letter is prefixed with a single dash, as in other command line utilities.  If an option takes argument, the argument follows it, either as  a  separate
       command  line  word,  or immediately following the option.  However, if the option takes an optional argument, the argument must follow the option letter without any intervening whitespace, as in
       -g/tmp/snar.db.

       Any number of options not taking arguments can be clustered together after a single dash, e.g. -vkp.  Options that take arguments (whether mandatory or optional), can appear at the end of such  a
       cluster, e.g. -vkpf a.tar.

       The example command above written in the short-option style could look like:

       tar -cvf etc.tar /etc
       or
       tar -c -v -f etc.tar /etc

       In  GNU or long-option style, each option begins with two dashes and has a meaningful name, consisting of lower-case letters and dashes.  When used, the long option can be abbreviated to its ini‐
       tial letters, provided that this does not create ambiguity.  Arguments to long options are supplied either as a separate command line word, immediately following the option, or separated from the
       option by an equals sign with no intervening whitespace.  Optional arguments must always use the latter method.

       Here are several ways of writing the example command in this style:

       tar --create --file etc.tar --verbose /etc
       or (abbreviating some options):
       tar --cre --file=etc.tar --verb /etc

       The options in all three styles can be intermixed, although doing so with old options is not encouraged.

   Operation mode
       The options listed in the table below tell GNU tar what operation it is to perform.  Exactly one of them must be given.  Meaning of non-optional arguments depends on the operation mode requested.

       -A, --catenate, --concatenate
              Append  archive  to the end of another archive.  The arguments are treated as the names of archives to append.  All archives must be of the same format as the archive they are appended to,
              otherwise the resulting archive might be unusable with non-GNU implementations of tar.  Notice also that when more than one archive is given, the members from archives other than the first
              one will be accessible in the resulting archive only if using the -i (--ignore-zeros) option.

              Compressed archives cannot be concatenated.

       -c, --create
              Create a new archive.  Arguments supply the names of the files to be archived.  Directories are archived recursively, unless the --no-recursion option is given.

       -d, --diff, --compare
              Find differences between archive and file system.  The arguments are optional and specify archive members to compare.  If not given, the current working directory is assumed.

       --delete
              Delete from the archive.  The arguments supply names of the archive members to be removed.  At least one argument must be given.

              This option does not operate on compressed archives.  There is no short option equivalent.

       -r, --append
              Append files to the end of an archive.  Arguments have the same meaning as for -c (--create).

       -t, --list
              List the contents of an archive.  Arguments are optional.  When given, they specify the names of the members to list.

       --test-label
              Test  the archive volume label and exit.  When used without arguments, it prints the volume label (if any) and exits with status 0.  When one or more command line arguments are given.  tar
              compares the volume label with each argument.  It exits with code 0 if a match is found, and with code 1 otherwise.  No output is displayed, unless used together with  the  -v  (--verbose)
              option.

              There is no short option equivalent for this option.

       -u, --update
              Append  files  which are newer than the corresponding copy in the archive.  Arguments have the same meaning as with -c and -r options.  Notice, that newer files don't replace their old ar‐
              chive copies, but instead are appended to the end of archive.  The resulting archive can thus contain several members of the same name, corresponding to various versions of the same file.

       -x, --extract, --get
              Extract files from an archive.  Arguments are optional.  When given, they specify names of the archive members to be extracted.

       --show-defaults
              Show built-in defaults for various tar options and exit.  No arguments are allowed.

       -?, --help
              Display a short option summary and exit.  No arguments allowed.

       --usage
              Display a list of available options and exit.  No arguments allowed.

       --version
              Print program version and copyright information and exit.

OPTIONS
   Operation modifiers
       --check-device
              Check device numbers when creating incremental archives (default).

       -g, --listed-incremental=FILE
              Handle new GNU-format incremental backups.  FILE is the name of a snapshot file, where tar stores additional information which is used to decide which files changed since the previous  in‐
              cremental dump and, consequently, must be dumped again.  If FILE does not exist when creating an archive, it will be created and all files will be added to the resulting archive (the level
              0 dump).  To create incremental archives of non-zero level N, create a copy of the snapshot file created during the level N-1, and use it as FILE.

              When listing or extracting, the actual contents of FILE is not inspected, it is needed only due to syntactical requirements.  It is therefore common practice to use /dev/null in its place.

       --hole-detection=METHOD
              Use METHOD to detect holes in sparse files.  This option implies --sparse.  Valid values for METHOD are seek and raw.  Default is seek with fallback to raw when not applicable.

       -G, --incremental
              Handle old GNU-format incremental backups.

       --ignore-failed-read
              Do not exit with nonzero on unreadable files.

       --level=NUMBER
              Set dump level for created listed-incremental archive.  Currently only --level=0 is meaningful: it instructs tar to truncate the snapshot file before dumping, thereby  forcing  a  level  0
              dump.

       -n, --seek
              Assume  the archive is seekable.  Normally tar determines automatically whether the archive can be seeked or not.  This option is intended for use in cases when such recognition fails.  It
              takes effect only if the archive is open for reading (e.g. with --list or --extract options).

       --no-check-device
              Do not check device numbers when creating incremental archives.

       --no-seek
              Assume the archive is not seekable.

       --occurrence[=N]
              Process only the Nth occurrence of each file in the archive.  This option is valid only when used with one of the following subcommands: --delete, --diff, --extract or --list  and  when  a
              list of files is given either on the command line or via the -T option.  The default N is 1.

       --restrict
              Disable the use of some potentially harmful options.

       --sparse-version=MAJOR[.MINOR]
              Set version of the sparse format to use (implies --sparse).  This option implies --sparse.  Valid argument values are 0.0, 0.1, and 1.0.  For a detailed discussion of sparse formats, refer
              to the GNU Tar Manual, appendix D, "Sparse Formats".  Using info reader, it can be accessed running the following command: info tar 'Sparse Formats'.

       -S, --sparse
              Handle sparse files efficiently.  Some files in the file system may have segments which were actually never written (quite often these are database files created by such systems  as  DBM).
              When given this option, tar attempts to determine if the file is sparse prior to archiving it, and if so, to reduce the resulting archive size by not dumping empty parts of the file.

   Overwrite control
       These options control tar actions when extracting a file over an existing copy on disk.

       -k, --keep-old-files
              Don't replace existing files when extracting.

       --keep-newer-files
              Don't replace existing files that are newer than their archive copies.

       --keep-directory-symlink
              Don't replace existing symlinks to directories when extracting.

       --no-overwrite-dir
              Preserve metadata of existing directories.

       --one-top-level[=DIR]
              Extract all files into DIR, or, if used without argument, into a subdirectory named by the base name of the archive (minus standard compression suffixes recognizable by --auto-compress).

       --overwrite
              Overwrite existing files when extracting.

       --overwrite-dir
              Overwrite metadata of existing directories when extracting (default).

       --recursive-unlink
              Recursively remove all files in the directory prior to extracting it.

       --remove-files
              Remove files from disk after adding them to the archive.

       --skip-old-files
              Don't replace existing files when extracting, silently skip over them.

       -U, --unlink-first
              Remove each file prior to extracting over it.

       -W, --verify
              Verify the archive after writing it.

   Output stream selection
       --ignore-command-error

       Ignore subprocess exit codes.

       --no-ignore-command-error
              Treat non-zero exit codes of children as error (default).

       -O, --to-stdout
              Extract files to standard output.

       --to-command=COMMAND
              Pipe extracted files to COMMAND.  The argument is the pathname of an external program, optionally with command line arguments.  The program will be invoked and the contents of the file be‐
              ing extracted supplied to it on its standard input.  Additional data will be supplied via the following environment variables:

              TAR_FILETYPE
                     Type of the file. It is a single letter with the following meaning:

                             f           Regular file
                             d           Directory
                             l           Symbolic link
                             h           Hard link
                             b           Block device
                             c           Character device

                     Currently only regular files are supported.

              TAR_MODE
                     File mode, an octal number.

              TAR_FILENAME
                     The name of the file.

              TAR_REALNAME
                     Name of the file as stored in the archive.

              TAR_UNAME
                     Name of the file owner.

              TAR_GNAME
                     Name of the file owner group.

              TAR_ATIME
                     Time of last access. It is a decimal number, representing seconds since the Epoch.  If the archive provides times with nanosecond precision, the  nanoseconds  are  appended  to  the
                     timestamp after a decimal point.

              TAR_MTIME
                     Time of last modification.

              TAR_CTIME
                     Time of last status change.

              TAR_SIZE
                     Size of the file.

              TAR_UID
                     UID of the file owner.

              TAR_GID
                     GID of the file owner.

              Additionally, the following variables contain information about tar operation mode and the archive being processed:

              TAR_VERSION
                     GNU tar version number.

              TAR_ARCHIVE
                     The name of the archive tar is processing.

              TAR_BLOCKING_FACTOR
                     Current blocking factor, i.e. number of 512-byte blocks in a record.

              TAR_VOLUME
                     Ordinal number of the volume tar is processing (set if reading a multi-volume archive).

              TAR_FORMAT
                     Format of the archive being processed.  One of: gnu, oldgnu, posix, ustar, v7.

              TAR_SUBCOMMAND
                     A short option (with a leading dash) describing the operation tar is executing.

   Handling of file attributes
       --atime-preserve[=METHOD]
              Preserve access times on dumped files, either by restoring the times after reading (METHOD=replace, this is the default) or by not setting the times in the first place (METHOD=system)

       --delay-directory-restore
              Delay setting modification times and permissions of extracted directories until the end of extraction.  Use this option when extracting from an archive which has unusual member ordering.

       --group=NAME[:GID]
              Force  NAME as group for added files.  If GID is not supplied, NAME can be either a user name or numeric GID.  In this case the missing part (GID or name) will be inferred from the current
              host's group database.

              When used with --group-map=FILE, affects only those files whose owner group is not listed in FILE.

       --group-map=FILE
              Read group translation map from FILE.  Empty lines are ignored.  Comments are introduced with # sign and extend to the end of line.  Each non-empty line in FILE defines translation  for  a
              single group.  It must consist of two fields, delimited by any amount of whitespace:

              OLDGRP NEWGRP[:NEWGID]

              OLDGRP  is  either a valid group name or a GID prefixed with +.  Unless NEWGID is supplied, NEWGRP must also be either a valid group name or a +GID.  Otherwise, both NEWGRP and NEWGID need
              not be listed in the system group database.

              As a result, each input file with owner group OLDGRP will be stored in archive with owner group NEWGRP and GID NEWGID.

       --mode=CHANGES
              Force symbolic mode CHANGES for added files.

       --mtime=DATE-OR-FILE
              Set mtime for added files.  DATE-OR-FILE is either a date/time in almost arbitrary format, or the name of an existing file.  In the latter case the mtime of that file will be used.

       -m, --touch
              Don't extract file modified time.

       --no-delay-directory-restore
              Cancel the effect of the prior --delay-directory-restore option.

       --no-same-owner
              Extract files as yourself (default for ordinary users).

       --no-same-permissions
              Apply the user's umask when extracting permissions from the archive (default for ordinary users).

       --numeric-owner
              Always use numbers for user/group names.

       --owner=NAME[:UID]
              Force NAME as owner for added files.  If UID is not supplied, NAME can be either a user name or numeric UID.  In this case the missing part (UID or name) will be inferred from the  current
              host's user database.

              When used with --owner-map=FILE, affects only those files whose owner is not listed in FILE.

       --owner-map=FILE
              Read  owner  translation map from FILE.  Empty lines are ignored.  Comments are introduced with # sign and extend to the end of line.  Each non-empty line in FILE defines translation for a
              single UID.  It must consist of two fields, delimited by any amount of whitespace:

              OLDUSR NEWUSR[:NEWUID]

              OLDUSR is either a valid user name or a UID prefixed with +.  Unless NEWUID is supplied, NEWUSR must also be either a valid user name or a +UID.  Otherwise, both NEWUSR and NEWUID need not
              be listed in the system user database.

              As a result, each input file owned by OLDUSR will be stored in archive with owner name NEWUSR and UID NEWUID.

       -p, --preserve-permissions, --same-permissions
              extract information about file permissions (default for superuser)

       --same-owner
              Try extracting files with the same ownership as exists in the archive (default for superuser).

       -s, --preserve-order, --same-order
              Sort names to extract to match archive

       --sort=ORDER
              When creating an archive, sort directory entries according to ORDER, which is one of none, name, or inode.

              The default is --sort=none, which stores archive members in the same order as returned by the operating system.

              Using --sort=name ensures the member ordering in the created archive is uniform and reproducible.

              Using  --sort=inode  reduces the number of disk seeks made when creating the archive and thus can considerably speed up archivation.  This sorting order is supported only if the underlying
              system provides the necessary information.

   Extended file attributes
       --acls Enable POSIX ACLs support.

       --no-acls
              Disable POSIX ACLs support.

       --selinux
              Enable SELinux context support.

       --no-selinux
              Disable SELinux context support.

       --xattrs
              Enable extended attributes support.

       --no-xattrs
              Disable extended attributes support.

       --xattrs-exclude=PATTERN
              Specify the exclude pattern for xattr keys.  PATTERN is a POSIX regular expression, e.g. --xattrs-exclude='^user.', to exclude attributes from the user namespace.

       --xattrs-include=PATTERN
              Specify the include pattern for xattr keys.  PATTERN is a POSIX regular expression.

   Device selection and switching
       -f, --file=ARCHIVE
              Use archive file or device ARCHIVE.  If this option is not given, tar will first examine the environment variable `TAPE'.  If it is set, its value will be used as the archive name.  Other‐
              wise, tar will assume the compiled-in default.  The default value can be inspected either using the --show-defaults option, or at the end of the tar --help output.

              An  archive  name that has a colon in it specifies a file or device on a remote machine.  The part before the colon is taken as the machine name or IP address, and the part after it as the
              file or device pathname, e.g.:

              --file=remotehost:/dev/sr0

              An optional username can be prefixed to the hostname, placing a @ sign between them.

              By default, the remote host is accessed via the rsh(1) command.  Nowadays it is common to use ssh(1) instead.  You can do so by giving the following command line option:

              --rsh-command=/usr/bin/ssh

              The remote machine should have the rmt(8) command installed.  If its pathname does not match tar's default, you can inform tar about the correct pathname using the --rmt-command option.

       --force-local
              Archive file is local even if it has a colon.

       -F, --info-script=COMMAND, --new-volume-script=COMMAND
              Run COMMAND at the end of each tape (implies -M).  The command can include arguments.  When started, it will inherit tar's environment plus the following variables:

              TAR_VERSION
                     GNU tar version number.

              TAR_ARCHIVE
                     The name of the archive tar is processing.

              TAR_BLOCKING_FACTOR
                     Current blocking factor, i.e. number of 512-byte blocks in a record.

              TAR_VOLUME
                     Ordinal number of the volume tar is processing (set if reading a multi-volume archive).

              TAR_FORMAT
                     Format of the archive being processed.  One of: gnu, oldgnu, posix, ustar, v7.

              TAR_SUBCOMMAND
                     A short option (with a leading dash) describing the operation tar is executing.

              TAR_FD File descriptor which can be used to communicate the new volume name to tar.

              If the info script fails, tar exits; otherwise, it begins writing the next volume.

       -L, --tape-length=N
              Change tape after writing Nx1024 bytes.  If N is followed by a size suffix (see the subsection Size suffixes below), the suffix specifies the multiplicative factor to be  used  instead  of
              1024.

              This option implies -M.

       -M, --multi-volume
              Create/list/extract multi-volume archive.

       --rmt-command=COMMAND
              Use COMMAND instead of rmt when accessing remote archives.  See the description of the -f option, above.

       --rsh-command=COMMAND
              Use COMMAND instead of rsh when accessing remote archives.  See the description of the -f option, above.

       --volno-file=FILE
              When this option is used in conjunction with --multi-volume, tar will keep track of which volume of a multi-volume archive it is working in FILE.

   Device blocking
       -b, --blocking-factor=BLOCKS
              Set record size to BLOCKSx512 bytes.

       -B, --read-full-records
              When listing or extracting, accept incomplete input records after end-of-file marker.

       -i, --ignore-zeros
              Ignore  zeroed  blocks in archive.  Normally two consecutive 512-blocks filled with zeroes mean EOF and tar stops reading after encountering them.  This option instructs it to read further
              and is useful when reading archives created with the -A option.

       --record-size=NUMBER
              Set record size.  NUMBER is the number of bytes per record.  It must be multiple of 512.  It can can be suffixed with a size suffix, e.g. --record-size=10K, for 10 Kilobytes.  See the sub‐
              section Size suffixes, for a list of valid suffixes.

   Archive format selection
       -H, --format=FORMAT
              Create archive of the given format.  Valid formats are:

              gnu    GNU tar 1.13.x format

              oldgnu GNU format as per tar <= 1.12.

              pax, posix
                     POSIX 1003.1-2001 (pax) format.

              ustar  POSIX 1003.1-1988 (ustar) format.

              v7     Old V7 tar format.

       --old-archive, --portability
              Same as --format=v7.

       --pax-option=keyword[[:]=value][,keyword[[:]=value]]...
              Control pax keywords when creating PAX archives (-H pax).  This option is equivalent to the -o option of the pax(1) utility.

       --posix
              Same as --format=posix.

       -V, --label=TEXT
              Create archive with volume name TEXT.  If listing or extracting, use TEXT as a globbing pattern for volume name.

   Compression options
       -a, --auto-compress
              Use archive suffix to determine the compression program.

       -I, --use-compress-program=COMMAND
              Filter data through COMMAND.  It must accept the -d option, for decompression.  The argument can contain command line options.

       -j, --bzip2
              Filter the archive through bzip2(1).

       -J, --xz
              Filter the archive through xz(1).

       --lzip Filter the archive through lzip(1).

       --lzma Filter the archive through lzma(1).

       --lzop Filter the archive through lzop(1).

       --no-auto-compress
              Do not use archive suffix to determine the compression program.

       -z, --gzip, --gunzip, --ungzip
              Filter the archive through gzip(1).

       -Z, --compress, --uncompress
              Filter the archive through compress(1).

       --zstd Filter the archive through zstd(1).

   Local file selection
       --add-file=FILE
              Add FILE to the archive (useful if its name starts with a dash).

       --backup[=CONTROL]
              Backup before removal.  The CONTROL argument, if supplied, controls the backup policy.  Its valid values are:

              none, off
                     Never make backups.

              t, numbered
                     Make numbered backups.

              nil, existing
                     Make numbered backups if numbered backups exist, simple backups otherwise.

              never, simple
                     Always make simple backups

              If CONTROL is not given, the value is taken from the VERSION_CONTROL environment variable.  If it is not set, existing is assumed.

       -C, --directory=DIR
              Change to DIR before performing any operations.  This option is order-sensitive, i.e. it affects all options that follow.

       --exclude=PATTERN
              Exclude files matching PATTERN, a glob(3)-style wildcard pattern.

       --exclude-backups
              Exclude backup and lock files.

       --exclude-caches
              Exclude contents of directories containing file CACHEDIR.TAG, except for the tag file itself.

       --exclude-caches-all
              Exclude directories containing file CACHEDIR.TAG and the file itself.

       --exclude-caches-under
              Exclude everything under directories containing CACHEDIR.TAG

       --exclude-ignore=FILE
              Before dumping a directory, see if it contains FILE.  If so, read exclusion patterns from this file.  The patterns affect only the directory itself.

       --exclude-ignore-recursive=FILE
              Same as --exclude-ignore, except that patterns from FILE affect both the directory and all its subdirectories.

       --exclude-tag=FILE
              Exclude contents of directories containing FILE, except for FILE itself.

       --exclude-tag-all=FILE
              Exclude directories containing FILE.

       --exclude-tag-under=FILE
              Exclude everything under directories containing FILE.

       --exclude-vcs
              Exclude version control system directories.

       --exclude-vcs-ignores
              Exclude files that match patterns read from VCS-specific ignore files.  Supported files are: .cvsignore, .gitignore, .bzrignore, and .hgignore.

       -h, --dereference
              Follow symlinks; archive and dump the files they point to.

       --hard-dereference
              Follow hard links; archive and dump the files they refer to.

       -K, --starting-file=MEMBER
              Begin at the given member in the archive.

       --newer-mtime=DATE
              Work on files whose data changed after the DATE.  If DATE starts with / or . it is taken to be a file name; the mtime of that file is used as the date.

       --no-null
              Disable the effect of the previous --null option.

       --no-recursion
              Avoid descending automatically in directories.

       --no-unquote
              Do not unquote input file or member names.

       --no-verbatim-files-from
              Treat  each  line read from a file list as if it were supplied in the command line.  I.e., leading and trailing whitespace is removed and, if the resulting string begins with a dash, it is
              treated as tar command line option.

              This is the default behavior.  The --no-verbatim-files-from option is provided as a way to restore it after --verbatim-files-from option.

              This option is positional: it affects all --files-from options that occur after it in, until --verbatim-files-from option or end of line, whichever occurs first.

              It is implied by the --no-null option.

       --null Instruct subsequent -T options to read null-terminated names verbatim (disables special handling of names that start with a dash).

              See also --verbatim-files-from.

       -N, --newer=DATE, --after-date=DATE
              Only store files newer than DATE.  If DATE starts with / or . it is taken to be a file name; the mtime of that file is used as the date.

       --one-file-system
              Stay in local file system when creating archive.

       -P, --absolute-names
              Don't strip leading slashes from file names when creating archives.

       --recursion
              Recurse into directories (default).

       --suffix=STRING
              Backup before removal, override usual suffix.  Default suffix is ~, unless overridden by environment variable SIMPLE_BACKUP_SUFFIX.

       -T, --files-from=FILE
              Get names to extract or create from FILE.

              Unless specified otherwise, the FILE must contain a list of names separated by ASCII LF (i.e. one name per line).  The names read are handled the same way as command line arguments.   They
              undergo quote removal and word splitting, and any string that starts with a - is handled as tar command line option.

              If this behavior is undesirable, it can be turned off using the --verbatim-files-from option.

              The --null option instructs tar that the names in FILE are separated by ASCII NUL character, instead of LF.  It is useful if the list is generated by find(1) -print0 predicate.

       --unquote
              Unquote file or member names (default).

       --verbatim-files-from
              Treat  each  line  obtained  from  a file list as a file name, even if it starts with a dash.  File lists are supplied with the --files-from (-T) option.  The default behavior is to handle
              names supplied in file lists as if they were typed in the command line, i.e. any names starting with a dash are treated as tar options.  The --verbatim-files-from option disables this  be‐
              havior.

              This option affects all --files-from options that occur after it in the command line.  Its effect is reverted by the --no-verbatim-files-from} option.

              This option is implied by the --null option.

              See also --add-file.

       -X, --exclude-from=FILE
              Exclude files matching patterns listed in FILE.

   File name transformations
       --strip-components=NUMBER
              Strip NUMBER leading components from file names on extraction.

       --transform=EXPRESSION, --xform=EXPRESSION
              Use sed replace EXPRESSION to transform file names.

   File name matching options
       These options affect both exclude and include patterns.

       --anchored
              Patterns match file name start.

       --ignore-case
              Ignore case.

       --no-anchored
              Patterns match after any / (default for exclusion).

       --no-ignore-case
              Case sensitive matching (default).

       --no-wildcards
              Verbatim string matching.

       --no-wildcards-match-slash
              Wildcards do not match /.

       --wildcards
              Use wildcards (default for exclusion).

       --wildcards-match-slash
              Wildcards match / (default for exclusion).

   Informative output
       --checkpoint[=N]
              Display progress messages every Nth record (default 10).

       --checkpoint-action=ACTION
              Run ACTION on each checkpoint.

       --clamp-mtime
              Only set time when the file is more recent than what was given with --mtime.

       --full-time
              Print file time to its full resolution.

       --index-file=FILE
              Send verbose output to FILE.

       -l, --check-links
              Print a message if not all links are dumped.

       --no-quote-chars=STRING
              Disable quoting for characters from STRING.

       --quote-chars=STRING
              Additionally quote characters from STRING.

       --quoting-style=STYLE
              Set quoting style for file and member names.  Valid values for STYLE are literal, shell, shell-always, c, c-maybe, escape, locale, clocale.

       -R, --block-number
              Show block number within archive with each message.

       --show-omitted-dirs
              When listing or extracting, list each directory that does not match search criteria.

       --show-transformed-names, --show-stored-names
              Show file or archive names after transformation by --strip and --transform options.

       --totals[=SIGNAL]
              Print  total  bytes after processing the archive.  If SIGNAL is given, print total bytes when this signal is delivered.  Allowed signals are: SIGHUP, SIGQUIT, SIGINT, SIGUSR1, and SIGUSR2.
              The SIG prefix can be omitted.

       --utc  Print file modification times in UTC.

       -v, --verbose
              Verbosely list files processed.  Each instance of this option on the command line increases the verbosity level by one.  The maximum verbosity level is 3.  For a detailed discussion of how
              various verbosity levels affect tar's output, please refer to GNU Tar Manual, subsection 2.5.1 "The --verbose Option".

       --warning=KEYWORD
              Enable or disable warning messages identified by KEYWORD.  The messages are suppressed if KEYWORD is prefixed with no- and enabled otherwise.

              Multiple --warning messages accumulate.

              Keywords controlling general tar operation:

              all    Enable all warning messages.  This is the default.

              none   Disable all warning messages.

              filename-with-nuls
                     "%s: file name read contains nul character"

              alone-zero-block
                     "A lone zero block at %s"

              Keywords applicable for tar --create:

              cachedir
                     "%s: contains a cache directory tag %s; %s"

              file-shrank
                     "%s: File shrank by %s bytes; padding with zeros"

              xdev   "%s: file is on a different filesystem; not dumped"

              file-ignored
                     "%s: Unknown file type; file ignored"
                     "%s: socket ignored"
                     "%s: door ignored"

              file-unchanged
                     "%s: file is unchanged; not dumped"

              ignore-archive
                     "%s: file is the archive; not dumped"

              file-removed
                     "%s: File removed before we read it"

              file-changed
                     "%s: file changed as we read it"

              failed-read
                     Suppresses warnings about unreadable files or directories. This keyword applies only if used together with the --ignore-failed-read option.

              Keywords applicable for tar --extract:

              existing-file
                     "%s: skipping existing file"

              timestamp
                     "%s: implausibly old time stamp %s"
                     "%s: time stamp %s is %s s in the future"

              contiguous-cast
                     "Extracting contiguous files as regular files"

              symlink-cast
                     "Attempting extraction of symbolic links as hard links"

              unknown-cast
                     "%s: Unknown file type '%c', extracted as normal file"

              ignore-newer
                     "Current %s is newer or same age"

              unknown-keyword
                     "Ignoring unknown extended header keyword '%s'"

              decompress-program
                     Controls  verbose  description of failures occurring when trying to run alternative decompressor programs.  This warning is disabled by default (unless --verbose is used).  A common
                     example of what you can get when using this warning is:

                     $ tar --warning=decompress-program -x -f archive.Z
                     tar (child): cannot run compress: No such file or directory
                     tar (child): trying gzip

                     This means that tar first tried to decompress archive.Z using compress, and, when that failed, switched to gzip.

              record-size
                     "Record size = %lu blocks"

              Keywords controlling incremental extraction:

              rename-directory
                     "%s: Directory has been renamed from %s"
                     "%s: Directory has been renamed"

              new-directory
                     "%s: Directory is new"

              xdev   "%s: directory is on a different device: not purging"

              bad-dumpdir
                     "Malformed dumpdir: 'X' never used"

       -w, --interactive, --confirmation
              Ask for confirmation for every action.

   Compatibility options
       -o     When creating, same as --old-archive.  When extracting, same as --no-same-owner.

   Size suffixes
               Suffix    Units                   Byte Equivalent
               b         Blocks                  SIZE x 512
               B         Kilobytes               SIZE x 1024
               c         Bytes                   SIZE
               G         Gigabytes               SIZE x 1024^3
               K         Kilobytes               SIZE x 1024
               k         Kilobytes               SIZE x 1024
               M         Megabytes               SIZE x 1024^2
               P         Petabytes               SIZE x 1024^5
               T         Terabytes               SIZE x 1024^4
               w         Words                   SIZE x 2

RETURN VALUE
       Tar exit code indicates whether it was able to successfully perform the requested operation, and if not, what kind of error occurred.

       0      Successful termination.

       1      Some files differ.  If tar was invoked with the --compare (--diff, -d) command line option, this means that some files in the archive differ from their disk counterparts.  If tar was given
              one  of  the  --create, --append or --update options, this exit code means that some files were changed while being archived and so the resulting archive does not contain the exact copy of
              the file set.

       2      Fatal error.  This means that some fatal, unrecoverable error occurred.

       If a subprocess that had been invoked by tar exited with a nonzero exit code, tar itself exits with that code as well.  This can happen, for example, if a compression option (e.g.  -z)  was  used
       and the external compressor program failed.  Another example is rmt failure during backup to a remote device.

SEE ALSO
       bzip2(1), compress(1), gzip(1), lzma(1), lzop(1), rmt(8), symlink(7), xz(1), zstd(1).

       Complete tar manual: run info tar or use emacs(1) info mode to read it.

       Online copies of GNU tar documentation in various formats can be found at:

           http://www.gnu.org/software/tar/manual

BUG REPORTS
       Report bugs to <bug-tar@gnu.org>.

COPYRIGHT
       Copyright © 2013-2019 Free Software Foundation, Inc.
       License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
       This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

TAR                                                                                            July 13, 2020                                                                                        TAR(1)
TAR(5)                                                                                    BSD File Formats Manual                                                                                   TAR(5)

NAME
     tar — format of tape archive files

DESCRIPTION
     The tar archive format collects any number of files, directories, and other file system objects (symbolic links, device nodes, etc.) into a single stream of bytes.  The format was originally de‐
     signed to be used with tape drives that operate with fixed-size blocks, but is widely used as a general packaging mechanism.

   General Format
     A tar archive consists of a series of 512-byte records.  Each file system object requires a header record which stores basic metadata (pathname, owner, permissions, etc.) and zero or more records
     containing any file data.  The end of the archive is indicated by two records consisting entirely of zero bytes.

     For compatibility with tape drives that use fixed block sizes, programs that read or write tar files always read or write a fixed number of records with each I/O operation.  These “blocks” are al‐
     ways a multiple of the record size.  The maximum block size supported by early implementations was 10240 bytes or 20 records.  This is still the default for most implementations although block
     sizes of 1MiB (2048 records) or larger are commonly used with modern high-speed tape drives.  (Note: the terms “block” and “record” here are not entirely standard; this document follows the conven‐
     tion established by John Gilmore in documenting pdtar.)

   Old-Style Archive Format
     The original tar archive format has been extended many times to include additional information that various implementors found necessary.  This section describes the variant implemented by the tar
     command included in Version 7 AT&T UNIX, which seems to be the earliest widely-used version of the tar program.

     The header record for an old-style tar archive consists of the following:

           struct header_old_tar {
                   char name[100];
                   char mode[8];
                   char uid[8];
                   char gid[8];
                   char size[12];
                   char mtime[12];
                   char checksum[8];
                   char linkflag[1];
                   char linkname[100];
                   char pad[255];
           };
     All unused bytes in the header record are filled with nulls.

     name    Pathname, stored as a null-terminated string.  Early tar implementations only stored regular files (including hardlinks to those files).  One common early convention used a trailing "/"
             character to indicate a directory name, allowing directory permissions and owner information to be archived and restored.

     mode    File mode, stored as an octal number in ASCII.

     uid, gid
             User id and group id of owner, as octal numbers in ASCII.

     size    Size of file, as octal number in ASCII.  For regular files only, this indicates the amount of data that follows the header.  In particular, this field was ignored by early tar implementa‐
             tions when extracting hardlinks.  Modern writers should always store a zero length for hardlink entries.

     mtime   Modification time of file, as an octal number in ASCII.  This indicates the number of seconds since the start of the epoch, 00:00:00 UTC January 1, 1970.  Note that negative values should
             be avoided here, as they are handled inconsistently.

     checksum
             Header checksum, stored as an octal number in ASCII.  To compute the checksum, set the checksum field to all spaces, then sum all bytes in the header using unsigned arithmetic.  This field
             should be stored as six octal digits followed by a null and a space character.  Note that many early implementations of tar used signed arithmetic for the checksum field, which can cause
             interoperability problems when transferring archives between systems.  Modern robust readers compute the checksum both ways and accept the header if either computation matches.

     linkflag, linkname
             In order to preserve hardlinks and conserve tape, a file with multiple links is only written to the archive the first time it is encountered.  The next time it is encountered, the linkflag
             is set to an ASCII ‘1’ and the linkname field holds the first name under which this file appears.  (Note that regular files have a null value in the linkflag field.)

     Early tar implementations varied in how they terminated these fields.  The tar command in Version 7 AT&T UNIX used the following conventions (this is also documented in early BSD manpages): the
     pathname must be null-terminated; the mode, uid, and gid fields must end in a space and a null byte; the size and mtime fields must end in a space; the checksum is terminated by a null and a space.
     Early implementations filled the numeric fields with leading spaces.  This seems to have been common practice until the IEEE Std 1003.1-1988 (“POSIX.1”) standard was released.  For best portabil‐
     ity, modern implementations should fill the numeric fields with leading zeros.

   Pre-POSIX Archives
     An early draft of IEEE Std 1003.1-1988 (“POSIX.1”) served as the basis for John Gilmore's pdtar program and many system implementations from the late 1980s and early 1990s.  These archives gener‐
     ally follow the POSIX ustar format described below with the following variations:
     •       The magic value consists of the five characters “ustar” followed by a space.  The version field contains a space character followed by a null.
     •       The numeric fields are generally filled with leading spaces (not leading zeros as recommended in the final standard).
     •       The prefix field is often not used, limiting pathnames to the 100 characters of old-style archives.

   POSIX ustar Archives
     IEEE Std 1003.1-1988 (“POSIX.1”) defined a standard tar file format to be read and written by compliant implementations of tar(1).  This format is often called the “ustar” format, after the magic
     value used in the header.  (The name is an acronym for “Unix Standard TAR”.)  It extends the historic format with new fields:

           struct header_posix_ustar {
                   char name[100];
                   char mode[8];
                   char uid[8];
                   char gid[8];
                   char size[12];
                   char mtime[12];
                   char checksum[8];
                   char typeflag[1];
                   char linkname[100];
                   char magic[6];
                   char version[2];
                   char uname[32];
                   char gname[32];
                   char devmajor[8];
                   char devminor[8];
                   char prefix[155];
                   char pad[12];
           };

     typeflag
             Type of entry.  POSIX extended the earlier linkflag field with several new type values:
             “0”     Regular file.  NUL should be treated as a synonym, for compatibility purposes.
             “1”     Hard link.
             “2”     Symbolic link.
             “3”     Character device node.
             “4”     Block device node.
             “5”     Directory.
             “6”     FIFO node.
             “7”     Reserved.
             Other   A POSIX-compliant implementation must treat any unrecognized typeflag value as a regular file.  In particular, writers should ensure that all entries have a valid filename so that
                     they can be restored by readers that do not support the corresponding extension.  Uppercase letters "A" through "Z" are reserved for custom extensions.  Note that sockets and white‐
                     out entries are not archivable.
             It is worth noting that the size field, in particular, has different meanings depending on the type.  For regular files, of course, it indicates the amount of data following the header.
             For directories, it may be used to indicate the total size of all files in the directory, for use by operating systems that pre-allocate directory space.  For all other types, it should be
             set to zero by writers and ignored by readers.

     magic   Contains the magic value “ustar” followed by a NUL byte to indicate that this is a POSIX standard archive.  Full compliance requires the uname and gname fields be properly set.

     version
             Version.  This should be “00” (two copies of the ASCII digit zero) for POSIX standard archives.

     uname, gname
             User and group names, as null-terminated ASCII strings.  These should be used in preference to the uid/gid values when they are set and the corresponding names exist on the system.

     devmajor, devminor
             Major and minor numbers for character device or block device entry.

     name, prefix
             If the pathname is too long to fit in the 100 bytes provided by the standard format, it can be split at any / character with the first portion going into the prefix field.  If the prefix
             field is not empty, the reader will prepend the prefix value and a / character to the regular name field to obtain the full pathname.  The standard does not require a trailing / character
             on directory names, though most implementations still include this for compatibility reasons.

     Note that all unused bytes must be set to NUL.

     Field termination is specified slightly differently by POSIX than by previous implementations.  The magic, uname, and gname fields must have a trailing NUL.  The pathname, linkname, and prefix
     fields must have a trailing NUL unless they fill the entire field.  (In particular, it is possible to store a 256-character pathname if it happens to have a / as the 156th character.)  POSIX re‐
     quires numeric fields to be zero-padded in the front, and requires them to be terminated with either space or NUL characters.

     Currently, most tar implementations comply with the ustar format, occasionally extending it by adding new fields to the blank area at the end of the header record.

   Numeric Extensions
     There have been several attempts to extend the range of sizes or times supported by modifying how numbers are stored in the header.

     One obvious extension to increase the size of files is to eliminate the terminating characters from the various numeric fields.  For example, the standard only allows the size field to contain 11
     octal digits, reserving the twelfth byte for a trailing NUL character.  Allowing 12 octal digits allows file sizes up to 64 GB.

     Another extension, utilized by GNU tar, star, and other newer tar implementations, permits binary numbers in the standard numeric fields.  This is flagged by setting the high bit of the first byte.
     The remainder of the field is treated as a signed twos-complement value.  This permits 95-bit values for the length and time fields and 63-bit values for the uid, gid, and device numbers.  In par‐
     ticular, this provides a consistent way to handle negative time values.  GNU tar supports this extension for the length, mtime, ctime, and atime fields.  Joerg Schilling's star program and the
     libarchive library support this extension for all numeric fields.  Note that this extension is largely obsoleted by the extended attribute record provided by the pax interchange format.

     Another early GNU extension allowed base-64 values rather than octal.  This extension was short-lived and is no longer supported by any implementation.

   Pax Interchange Format
     There are many attributes that cannot be portably stored in a POSIX ustar archive.  IEEE Std 1003.1-2001 (“POSIX.1”) defined a “pax interchange format” that uses two new types of entries to hold
     text-formatted metadata that applies to following entries.  Note that a pax interchange format archive is a ustar archive in every respect.  The new data is stored in ustar-compatible archive en‐
     tries that use the “x” or “g” typeflag.  In particular, older implementations that do not fully support these extensions will extract the metadata into regular files, where the metadata can be ex‐
     amined as necessary.

     An entry in a pax interchange format archive consists of one or two standard ustar entries, each with its own header and data.  The first optional entry stores the extended attributes for the fol‐
     lowing entry.  This optional first entry has an "x" typeflag and a size field that indicates the total size of the extended attributes.  The extended attributes themselves are stored as a series of
     text-format lines encoded in the portable UTF-8 encoding.  Each line consists of a decimal number, a space, a key string, an equals sign, a value string, and a new line.  The decimal number indi‐
     cates the length of the entire line, including the initial length field and the trailing newline.  An example of such a field is:
           25 ctime=1084839148.1212\n
     Keys in all lowercase are standard keys.  Vendors can add their own keys by prefixing them with an all uppercase vendor name and a period.  Note that, unlike the historic header, numeric values are
     stored using decimal, not octal.  A description of some common keys follows:

     atime, ctime, mtime
             File access, inode change, and modification times.  These fields can be negative or include a decimal point and a fractional value.

     hdrcharset
             The character set used by the pax extension values.  By default, all textual values in the pax extended attributes are assumed to be in UTF-8, including pathnames, user names, and group
             names.  In some cases, it is not possible to translate local conventions into UTF-8.  If this key is present and the value is the six-character ASCII string “BINARY”, then all textual val‐
             ues are assumed to be in a platform-dependent multi-byte encoding.  Note that there are only two valid values for this key: “BINARY” or “ISO-IR 10646 2000 UTF-8”.  No other values are per‐
             mitted by the standard, and the latter value should generally not be used as it is the default when this key is not specified.  In particular, this flag should not be used as a general
             mechanism to allow filenames to be stored in arbitrary encodings.

     uname, uid, gname, gid
             User name, group name, and numeric UID and GID values.  The user name and group name stored here are encoded in UTF8 and can thus include non-ASCII characters.  The UID and GID fields can
             be of arbitrary length.

     linkpath
             The full path of the linked-to file.  Note that this is encoded in UTF8 and can thus include non-ASCII characters.

     path    The full pathname of the entry.  Note that this is encoded in UTF8 and can thus include non-ASCII characters.

     realtime.*, security.*
             These keys are reserved and may be used for future standardization.

     size    The size of the file.  Note that there is no length limit on this field, allowing conforming archives to store files much larger than the historic 8GB limit.

     SCHILY.*
             Vendor-specific attributes used by Joerg Schilling's star implementation.

     SCHILY.acl.access, SCHILY.acl.default, SCHILY.acl.ace
             Stores the access, default and NFSv4 ACLs as textual strings in a format that is an extension of the format specified by POSIX.1e draft 17.  In particular, each user or group access speci‐
             fication can include an additional colon-separated field with the numeric UID or GID.  This allows ACLs to be restored on systems that may not have complete user or group information avail‐
             able (such as when NIS/YP or LDAP services are temporarily unavailable).

     SCHILY.devminor, SCHILY.devmajor
             The full minor and major numbers for device nodes.

     SCHILY.fflags
             The file flags.

     SCHILY.realsize
             The full size of the file on disk.  XXX explain? XXX

     SCHILY.dev, SCHILY.ino, SCHILY.nlinks
             The device number, inode number, and link count for the entry.  In particular, note that a pax interchange format archive using Joerg Schilling's SCHILY.* extensions can store all of the
             data from struct stat.

     LIBARCHIVE.*
             Vendor-specific attributes used by the libarchive library and programs that use it.

     LIBARCHIVE.creationtime
             The time when the file was created.  (This should not be confused with the POSIX “ctime” attribute, which refers to the time when the file metadata was last changed.)

     LIBARCHIVE.xattr.namespace.key
             Libarchive stores POSIX.1e-style extended attributes using keys of this form.  The key value is URL-encoded: All non-ASCII characters and the two special characters “=” and “%” are encoded
             as “%” followed by two uppercase hexadecimal digits.  The value of this key is the extended attribute value encoded in base 64.  XXX Detail the base-64 format here XXX

     VENDOR.*
             XXX document other vendor-specific extensions XXX

     Any values stored in an extended attribute override the corresponding values in the regular tar header.  Note that compliant readers should ignore the regular fields when they are overridden.  This
     is important, as existing archivers are known to store non-compliant values in the standard header fields in this situation.  There are no limits on length for any of these fields.  In particular,
     numeric fields can be arbitrarily large.  All text fields are encoded in UTF8.  Compliant writers should store only portable 7-bit ASCII characters in the standard ustar header and use extended at‐
     tributes whenever a text value contains non-ASCII characters.

     In addition to the x entry described above, the pax interchange format also supports a g entry.  The g entry is identical in format, but specifies attributes that serve as defaults for all subse‐
     quent archive entries.  The g entry is not widely used.

     Besides the new x and g entries, the pax interchange format has a few other minor variations from the earlier ustar format.  The most troubling one is that hardlinks are permitted to have data fol‐
     lowing them.  This allows readers to restore any hardlink to a file without having to rewind the archive to find an earlier entry.  However, it creates complications for robust readers, as it is no
     longer clear whether or not they should ignore the size field for hardlink entries.

   GNU Tar Archives
     The GNU tar program started with a pre-POSIX format similar to that described earlier and has extended it using several different mechanisms: It added new fields to the empty space in the header
     (some of which was later used by POSIX for conflicting purposes); it allowed the header to be continued over multiple records; and it defined new entries that modify following entries (similar in
     principle to the x entry described above, but each GNU special entry is single-purpose, unlike the general-purpose x entry).  As a result, GNU tar archives are not POSIX compatible, although more
     lenient POSIX-compliant readers can successfully extract most GNU tar archives.

           struct header_gnu_tar {
                   char name[100];
                   char mode[8];
                   char uid[8];
                   char gid[8];
                   char size[12];
                   char mtime[12];
                   char checksum[8];
                   char typeflag[1];
                   char linkname[100];
                   char magic[6];
                   char version[2];
                   char uname[32];
                   char gname[32];
                   char devmajor[8];
                   char devminor[8];
                   char atime[12];
                   char ctime[12];
                   char offset[12];
                   char longnames[4];
                   char unused[1];
                   struct {
                           char offset[12];
                           char numbytes[12];
                   } sparse[4];
                   char isextended[1];
                   char realsize[12];
                   char pad[17];
           };

     typeflag
             GNU tar uses the following special entry types, in addition to those defined by POSIX:

             7       GNU tar treats type "7" records identically to type "0" records, except on one obscure RTOS where they are used to indicate the pre-allocation of a contiguous file on disk.

             D       This indicates a directory entry.  Unlike the POSIX-standard "5" typeflag, the header is followed by data records listing the names of files in this directory.  Each name is pre‐
                     ceded by an ASCII "Y" if the file is stored in this archive or "N" if the file is not stored in this archive.  Each name is terminated with a null, and an extra null marks the end
                     of the name list.  The purpose of this entry is to support incremental backups; a program restoring from such an archive may wish to delete files on disk that did not exist in the
                     directory when the archive was made.

                     Note that the "D" typeflag specifically violates POSIX, which requires that unrecognized typeflags be restored as normal files.  In this case, restoring the "D" entry as a file
                     could interfere with subsequent creation of the like-named directory.

             K       The data for this entry is a long linkname for the following regular entry.

             L       The data for this entry is a long pathname for the following regular entry.

             M       This is a continuation of the last file on the previous volume.  GNU multi-volume archives guarantee that each volume begins with a valid entry header.  To ensure this, a file may
                     be split, with part stored at the end of one volume, and part stored at the beginning of the next volume.  The "M" typeflag indicates that this entry continues an existing file.
                     Such entries can only occur as the first or second entry in an archive (the latter only if the first entry is a volume label).  The size field specifies the size of this entry.  The
                     offset field at bytes 369-380 specifies the offset where this file fragment begins.  The realsize field specifies the total size of the file (which must equal size plus offset).
                     When extracting, GNU tar checks that the header file name is the one it is expecting, that the header offset is in the correct sequence, and that the sum of offset and size is equal
                     to realsize.

             N       Type "N" records are no longer generated by GNU tar.  They contained a list of files to be renamed or symlinked after extraction; this was originally used to support long names.
                     The contents of this record are a text description of the operations to be done, in the form “Rename %s to %s\n” or “Symlink %s to %s\n”; in either case, both filenames are escaped
                     using K&R C syntax.  Due to security concerns, "N" records are now generally ignored when reading archives.

             S       This is a “sparse” regular file.  Sparse files are stored as a series of fragments.  The header contains a list of fragment offset/length pairs.  If more than four such entries are
                     required, the header is extended as necessary with “extra” header extensions (an older format that is no longer used), or “sparse” extensions.

             V       The name field should be interpreted as a tape/volume header name.  This entry should generally be ignored on extraction.

     magic   The magic field holds the five characters “ustar” followed by a space.  Note that POSIX ustar archives have a trailing null.

     version
             The version field holds a space character followed by a null.  Note that POSIX ustar archives use two copies of the ASCII digit “0”.

     atime, ctime
             The time the file was last accessed and the time of last change of file information, stored in octal as with mtime.

     longnames
             This field is apparently no longer used.

     Sparse offset / numbytes
             Each such structure specifies a single fragment of a sparse file.  The two fields store values as octal numbers.  The fragments are each padded to a multiple of 512 bytes in the archive.
             On extraction, the list of fragments is collected from the header (including any extension headers), and the data is then read and written to the file at appropriate offsets.

     isextended
             If this is set to non-zero, the header will be followed by additional “sparse header” records.  Each such record contains information about as many as 21 additional sparse blocks as shown
             here:

                   struct gnu_sparse_header {
                           struct {
                                   char offset[12];
                                   char numbytes[12];
                           } sparse[21];
                           char    isextended[1];
                           char    padding[7];
                   };

     realsize
             A binary representation of the file's complete size, with a much larger range than the POSIX file size.  In particular, with M type files, the current entry is only a portion of the file.
             In that case, the POSIX size field will indicate the size of this entry; the realsize field will indicate the total size of the file.

   GNU tar pax archives
     GNU tar 1.14 (XXX check this XXX) and later will write pax interchange format archives when you specify the --posix flag.  This format follows the pax interchange format closely, using some SCHILY
     tags and introducing new keywords to store sparse file information.  There have been three iterations of the sparse file support, referred to as “0.0”, “0.1”, and “1.0”.

     GNU.sparse.numblocks, GNU.sparse.offset, GNU.sparse.numbytes, GNU.sparse.size
             The “0.0” format used an initial GNU.sparse.numblocks attribute to indicate the number of blocks in the file, a pair of GNU.sparse.offset and GNU.sparse.numbytes to indicate the offset and
             size of each block, and a single GNU.sparse.size to indicate the full size of the file.  This is not the same as the size in the tar header because the latter value does not include the
             size of any holes.  This format required that the order of attributes be preserved and relied on readers accepting multiple appearances of the same attribute names, which is not officially
             permitted by the standards.

     GNU.sparse.map
             The “0.1” format used a single attribute that stored a comma-separated list of decimal numbers.  Each pair of numbers indicated the offset and size, respectively, of a block of data.  This
             does not work well if the archive is extracted by an archiver that does not recognize this extension, since many pax implementations simply discard unrecognized attributes.

     GNU.sparse.major, GNU.sparse.minor, GNU.sparse.name, GNU.sparse.realsize
             The “1.0” format stores the sparse block map in one or more 512-byte blocks prepended to the file data in the entry body.  The pax attributes indicate the existence of this map (via the
             GNU.sparse.major and GNU.sparse.minor fields) and the full size of the file.  The GNU.sparse.name holds the true name of the file.  To avoid confusion, the name stored in the regular tar
             header is a modified name so that extraction errors will be apparent to users.

   Solaris Tar
     XXX More Details Needed XXX

     Solaris tar (beginning with SunOS XXX 5.7 ?? XXX) supports an “extended” format that is fundamentally similar to pax interchange format, with the following differences:
     •       Extended attributes are stored in an entry whose type is X, not x, as used by pax interchange format.  The detailed format of this entry appears to be the same as detailed above for the x
             entry.
     •       An additional A header is used to store an ACL for the following regular entry.  The body of this entry contains a seven-digit octal number followed by a zero byte, followed by the textual
             ACL description.  The octal value is the number of ACL entries plus a constant that indicates the ACL type: 01000000 for POSIX.1e ACLs and 03000000 for NFSv4 ACLs.

   AIX Tar
     XXX More details needed XXX

     AIX Tar uses a ustar-formatted header with the type A for storing coded ACL information.  Unlike the Solaris format, AIX tar writes this header after the regular file body to which it applies.  The
     pathname in this header is either NFS4 or AIXC to indicate the type of ACL stored.  The actual ACL is stored in platform-specific binary format.

   Mac OS X Tar
     The tar distributed with Apple's Mac OS X stores most regular files as two separate files in the tar archive.  The two files have the same name except that the first one has “._” prepended to the
     last path element.  This special file stores an AppleDouble-encoded binary blob with additional metadata about the second file, including ACL, extended attributes, and resources.  To recreate the
     original file on disk, each separate file can be extracted and the Mac OS X copyfile() function can be used to unpack the separate metadata file and apply it to th regular file.  Conversely, the
     same function provides a “pack” option to encode the extended metadata from a file into a separate file whose contents can then be put into a tar archive.

     Note that the Apple extended attributes interact badly with long filenames.  Since each file is stored with the full name, a separate set of extensions needs to be included in the archive for each
     one, doubling the overhead required for files with long names.

   Summary of tar type codes
     The following list is a condensed summary of the type codes used in tar header records generated by different tar implementations.  More details about specific implementations can be found above:
     NUL  Early tar programs stored a zero byte for regular files.
     0    POSIX standard type code for a regular file.
     1    POSIX standard type code for a hard link description.
     2    POSIX standard type code for a symbolic link description.
     3    POSIX standard type code for a character device node.
     4    POSIX standard type code for a block device node.
     5    POSIX standard type code for a directory.
     6    POSIX standard type code for a FIFO.
     7    POSIX reserved.
     7    GNU tar used for pre-allocated files on some systems.
     A    Solaris tar ACL description stored prior to a regular file header.
     A    AIX tar ACL description stored after the file body.
     D    GNU tar directory dump.
     K    GNU tar long linkname for the following header.
     L    GNU tar long pathname for the following header.
     M    GNU tar multivolume marker, indicating the file is a continuation of a file from the previous volume.
     N    GNU tar long filename support.  Deprecated.
     S    GNU tar sparse regular file.
     V    GNU tar tape/volume header name.
     X    Solaris tar general-purpose extension header.
     g    POSIX pax interchange format global extensions.
     x    POSIX pax interchange format per-file extensions.

SEE ALSO
     ar(1), pax(1), tar(1)

STANDARDS
     The tar utility is no longer a part of POSIX or the Single Unix Standard.  It last appeared in Version 2 of the Single UNIX Specification (“SUSv2”).  It has been supplanted in subsequent standards
     by pax(1).  The ustar format is currently part of the specification for the pax(1) utility.  The pax interchange file format is new with IEEE Std 1003.1-2001 (“POSIX.1”).

HISTORY
     A tar command appeared in Seventh Edition Unix, which was released in January, 1979.  It replaced the tp program from Fourth Edition Unix which in turn replaced the tap program from First Edition
     Unix.  John Gilmore's pdtar public-domain implementation (circa 1987) was highly influential and formed the basis of GNU tar (circa 1988).  Joerg Shilling's star archiver is another open-source
     (CDDL) archiver (originally developed circa 1985) which features complete support for pax interchange format.

     This documentation was written as part of the libarchive and bsdtar project by Tim Kientzle <kientzle@FreeBSD.org>.

BSD                                                                                          December 27, 2016                                                                                         BSD
