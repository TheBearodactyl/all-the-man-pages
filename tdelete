tsearch(3)                                                                               Library Functions Manual                                                                               tsearch(3)

NAME
       tsearch, tfind, tdelete, twalk, twalk_r, tdestroy - manage a binary search tree

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <search.h>

       typedef enum { preorder, postorder, endorder, leaf } VISIT;

       void *tsearch(const void *key, void **rootp,
                       int (*compar)(const void *, const void *));
       void *tfind(const void *key, void *const *rootp,
                       int (*compar)(const void *, const void *));
       void *tdelete(const void *restrict key, void **restrict rootp,
                       int (*compar)(const void *, const void *));
       void twalk(const void *root,
                       void (*action)(const void *nodep, VISIT which,
                                      int depth));

       #define _GNU_SOURCE         /* See feature_test_macros(7) */
       #include <search.h>

       void twalk_r(const void *root,
                       void (*action)(const void *nodep, VISIT which,
                                      void *closure),
                       void *closure);
       void tdestroy(void *root, void (*free_node)(void *nodep));

DESCRIPTION
       tsearch(),  tfind(), twalk(), and tdelete() manage a binary search tree.  They are generalized from Knuth (6.2.2) Algorithm T.  The first field in each node of the tree is a pointer to the corre‐
       sponding data item.  (The calling program must store the actual data.)  compar points to a comparison routine, which takes pointers to two items.  It should return an integer which  is  negative,
       zero, or positive, depending on whether the first item is less than, equal to, or greater than the second.

       tsearch()  searches  the  tree  for an item.  key points to the item to be searched for.  rootp points to a variable which points to the root of the tree.  If the tree is empty, then the variable
       that rootp points to should be set to NULL.  If the item is found in the tree, then tsearch() returns a pointer to the corresponding tree node.  (In other words, tsearch() returns a pointer to  a
       pointer to the data item.)  If the item is not found, then tsearch() adds it, and returns a pointer to the corresponding tree node.

       tfind() is like tsearch(), except that if the item is not found, then tfind() returns NULL.

       tdelete() deletes an item from the tree.  Its arguments are the same as for tsearch().

       twalk() performs depth-first, left-to-right traversal of a binary tree.  root points to the starting node for the traversal.  If that node is not the root, then only part of the tree will be vis‐
       ited.  twalk() calls the user function action each time a node is visited (that is, three times for an internal node, and once for a leaf).  action, in turn, takes three arguments.  The first ar‐
       gument  is a pointer to the node being visited.  The structure of the node is unspecified, but it is possible to cast the pointer to a pointer-to-pointer-to-element in order to access the element
       stored within the node.  The application must not modify the structure pointed to by this argument.  The second argument is an integer which takes one of the values preorder,  postorder,  or  en‐
       dorder  depending  on  whether  this  is  the  first,  second,  or  third  visit to the internal node, or the value leaf if this is the single visit to a leaf node.  (These symbols are defined in
       <search.h>.)  The third argument is the depth of the node; the root node has depth zero.

       (More commonly, preorder, postorder, and endorder are known as preorder, inorder, and postorder: before visiting the children, after the first and before the second, and after visiting the  chil‐
       dren.  Thus, the choice of name postorder is rather confusing.)

       twalk_r()  is similar to twalk(), but instead of the depth argument, the closure argument pointer is passed to each invocation of the action callback, unchanged.  This pointer can be used to pass
       information to and from the callback function in a thread-safe fashion, without resorting to global variables.

       tdestroy() removes the whole tree pointed to by root, freeing all resources allocated by the tsearch() function.  For the data in each tree node the function free_node is called.  The pointer  to
       the data is passed as the argument to the function.  If no such work is necessary, free_node must point to a function doing nothing.

RETURN VALUE
       tsearch()  returns  a pointer to a matching node in the tree, or to the newly added node, or NULL if there was insufficient memory to add the item.  tfind() returns a pointer to the node, or NULL
       if no match is found.  If there are multiple items that match the key, the item whose node is returned is unspecified.

       tdelete() returns a pointer to the parent of the node deleted, or NULL if the item was not found.  If the deleted node was the root node, tdelete() returns a dangling pointer that must not be ac‐
       cessed.

       tsearch(), tfind(), and tdelete() also return NULL if rootp was NULL on entry.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬────────────────────┐
       │Interface                                                                                                                                                    │ Attribute     │ Value              │
       ├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼────────────────────┤
       │tsearch(), tfind(), tdelete()                                                                                                                                │ Thread safety │ MT-Safe race:rootp │
       ├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼────────────────────┤
       │twalk()                                                                                                                                                      │ Thread safety │ MT-Safe race:root  │
       ├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼────────────────────┤
       │twalk_r()                                                                                                                                                    │ Thread safety │ MT-Safe race:root  │
       ├─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼────────────────────┤
       │tdestroy()                                                                                                                                                   │ Thread safety │ MT-Safe            │
       └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴────────────────────┘

STANDARDS
       tsearch()
       tfind()
       tdelete()
       twalk()
              POSIX.1-2008.

       tdestroy()
       twalk_r()
              GNU.

HISTORY
       tsearch()
       tfind()
       tdelete()
       twalk()
              POSIX.1-2001, POSIX.1-2008, SVr4.

       twalk_r()
              glibc 2.30.

NOTES
       twalk() takes a pointer to the root, while the other functions take a pointer to a variable which points to the root.

       tdelete() frees the memory required for the node in the tree.  The user is responsible for freeing the memory for the corresponding data.

       The  example program depends on the fact that twalk() makes no further reference to a node after calling the user function with argument "endorder" or "leaf".  This works with the GNU library im‐
       plementation, but is not in the System V documentation.

EXAMPLES
       The following program inserts twelve random numbers into a binary tree, where duplicate numbers are collapsed, then prints the numbers in order.

       #define _GNU_SOURCE     /* Expose declaration of tdestroy() */
       #include <search.h>
       #include <stddef.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <time.h>

       static void *root = NULL;

       static void *
       xmalloc(size_t n)
       {
           void *p;

           p = malloc(n);
           if (p)
               return p;
           fprintf(stderr, "insufficient memory\n");
           exit(EXIT_FAILURE);
       }

       static int
       compare(const void *pa, const void *pb)
       {
           if (*(int *) pa < *(int *) pb)
               return -1;
           if (*(int *) pa > *(int *) pb)
               return 1;
           return 0;
       }

       static void
       action(const void *nodep, VISIT which, int depth)
       {
           int *datap;

           switch (which) {
           case preorder:
               break;
           case postorder:
               datap = *(int **) nodep;
               printf("%6d\n", *datap);
               break;
           case endorder:
               break;
           case leaf:
               datap = *(int **) nodep;
               printf("%6d\n", *datap);
               break;
           }
       }

       int
       main(void)
       {
           int  *ptr;
           int  **val;

           srand(time(NULL));
           for (unsigned int i = 0; i < 12; i++) {
               ptr = xmalloc(sizeof(*ptr));
               *ptr = rand() & 0xff;
               val = tsearch(ptr, &root, compare);
               if (val == NULL)
                   exit(EXIT_FAILURE);
               if (*val != ptr)
                   free(ptr);
           }
           twalk(root, action);
           tdestroy(root, free);
           exit(EXIT_SUCCESS);
       }

SEE ALSO
       bsearch(3), hsearch(3), lsearch(3), qsort(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                      tsearch(3)
TDELETE(3P)                                                                              POSIX Programmer's Manual                                                                             TDELETE(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       tdelete, tfind, tsearch, twalk — manage a binary search tree

SYNOPSIS
       #include <search.h>

       void *tdelete(const void *restrict key, void **restrict rootp,
           int(*compar)(const void *, const void *));
       void *tfind(const void *key, void *const *rootp,
           int(*compar)(const void *, const void *));
       void *tsearch(const void *key, void **rootp,
           int (*compar)(const void *, const void *));
       void twalk(const void *root,
           void (*action)(const void *, VISIT, int));

DESCRIPTION
       The tdelete(), tfind(), tsearch(), and twalk() functions manipulate binary search trees. Comparisons are made with a user-supplied routine, the address of which is passed as the compar  argument.
       This  routine  is called with two arguments, which are the pointers to the elements being compared. The application shall ensure that the user-supplied routine returns an integer less than, equal
       to, or greater than 0, according to whether the first argument is to be considered less than, equal to, or greater than the second argument.  The comparison function need not compare every  byte,
       so arbitrary data may be contained in the elements in addition to the values being compared.

       The  tsearch()  function  shall build and access the tree. The key argument is a pointer to an element to be accessed or stored. If there is a node in the tree whose element is equal to the value
       pointed to by key, a pointer to this found node shall be returned. Otherwise, the value pointed to by key shall be inserted (that is, a new node is created and the value of key is copied to  this
       node), and a pointer to this node returned. Only pointers are copied, so the application shall ensure that the calling routine stores the data. The rootp argument points to a variable that points
       to the root node of the tree. A null pointer value for the variable pointed to by rootp denotes an empty tree; in this case, the variable shall be set to point to the node which shall be  at  the
       root of the new tree.

       Like  tsearch(),  tfind() shall search for a node in the tree, returning a pointer to it if found.  However, if it is not found, tfind() shall return a null pointer. The arguments for tfind() are
       the same as for tsearch().

       The tdelete() function shall delete a node from a binary search tree. The arguments are the same as for tsearch().  The variable pointed to by rootp shall be changed if the deleted node  was  the
       root of the tree.  If the deleted node was the root of the tree and had no children, the variable pointed to by rootp shall be set to a null pointer. The tdelete() function shall return a pointer
       to the parent of the deleted node, or an unspecified non-null pointer if the deleted node was the root node, or a null pointer if the node is not found.

       If tsearch() adds an element to a tree, or tdelete() successfully deletes an element from a tree, the concurrent use of that tree in another thread, or use of pointers produced by a previous call
       to tfind() or tsearch(), produces undefined results.

       The  twalk() function shall traverse a binary search tree. The root argument is a pointer to the root node of the tree to be traversed.  (Any node in a tree may be used as the root for a walk be‐
       low that node.) The argument action is the name of a routine to be invoked at each node. This routine is, in turn, called with three arguments. The first argument shall be the address of the node
       being visited. The structure pointed to by this argument is unspecified and shall not be modified by the application, but it shall be possible to cast a pointer-to-node into a pointer-to-pointer-
       to-element to access the element stored in the node.  The second argument shall be a value from an enumeration data type:

           typedef enum { preorder, postorder, endorder, leaf } VISIT;

       (defined in <search.h>), depending on whether this is the first, second, or third time that the node is visited (during a depth-first, left-to-right traversal of the tree), or whether the node is
       a leaf. The third argument shall be the level of the node in the tree, with the root being level 0.

       If the calling function alters the pointer to the root, the result is undefined.

       If the functions pointed to by action or compar (for any of these binary search functions) change the tree, the results are undefined.

       These functions are thread-safe only as long as multiple threads do not access the same tree.

RETURN VALUE
       If the node is found, both tsearch() and tfind() shall return a pointer to it. If not, tfind() shall return a null pointer, and tsearch() shall return a pointer to the inserted item.

       A null pointer shall be returned by tsearch() if there is not enough space available to create a new node.

       A null pointer shall be returned by tdelete(), tfind(), and tsearch() if rootp is a null pointer on entry.

       The  tdelete()  function  shall  return a pointer to the parent of the deleted node, or an unspecified non-null pointer if the deleted node was the root node, or a null pointer if the node is not
       found.

       The twalk() function shall not return a value.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       The following code reads in strings and stores structures containing a pointer to each string and a count of its length. It then walks the tree, printing out the stored strings and their  lengths
       in alphabetical order.

           #include <limits.h>
           #include <search.h>
           #include <stdlib.h>
           #include <string.h>
           #include <stdio.h>

           struct element {      /* Pointers to these are stored in the tree. */
               int     count;
               char    string[];
           };

           void  *root = NULL;          /* This points to the root. */

           int main(void)
           {
               char   str[_POSIX2_LINE_MAX+1];
               int    length = 0;
               struct element *elementptr;
               void   *node;
               void   print_node(const void *, VISIT, int);
               int    node_compare(const void *, const void *),
                      delete_root(const void *, const void *);

               while (fgets(str, sizeof(str), stdin))  {
                   /* Set element. */
                   length = strlen(str);
                   if (str[length-1] == '\n')
                       str[--length] = '\0';
                   elementptr = malloc(sizeof(struct element) + length + 1);
                   strcpy(elementptr->string, str);
                   elementptr->count = 1;
                   /* Put element into the tree. */
                   node = tsearch((void *)elementptr, &root, node_compare);
                   if (node == NULL) {
                       fprintf(stderr,
                               "tsearch: Not enough space available\n");
                       exit(EXIT_FAILURE);
                   }
                   else if (*(struct element **)node != elementptr) {
                       /* A node containing the element already exists */
                       (*(struct element **)node)->count++;
                       free(elementptr);
                   }
               }
               twalk(root, print_node);

               /* Delete all nodes in the tree */
               while (root != NULL) {
                   elementptr = *(struct element **)root;
                   printf("deleting node: string = %s,  count = %d\n",
                          elementptr->string,
                          elementptr->count);
                   tdelete((void *)elementptr, &root, delete_root);
                   free(elementptr);
               }

               return 0;
           }

           /*
            *  This routine compares two nodes, based on an
            *  alphabetical ordering of the string field.
            */
           int
           node_compare(const void *node1, const void *node2)
           {
               return strcmp(((const struct element *) node1)->string,
                   ((const struct element *) node2)->string);
           }

           /*
            *  This comparison routine can be used with tdelete()
            *  when explicitly deleting a root node, as no comparison
            *  is necessary.
            */
           int
           delete_root(const void *node1, const void *node2)
           {
               return 0;
           }

           /*
            *  This routine prints out a node, the second time
            *  twalk encounters it or if it is a leaf.
            */
           void
           print_node(const void *ptr, VISIT order, int level)
           {
               const struct element *p = *(const struct element **) ptr;

               if (order == postorder || order == leaf)  {
                   (void) printf("string = %s,  count = %d\n",
                       p->string, p->count);
               }
           }

APPLICATION USAGE
       The root argument to twalk() is one level of indirection less than the rootp arguments to tdelete() and tsearch().

       There are two nomenclatures used to refer to the order in which tree nodes are visited. The twalk() function uses preorder, postorder, and endorder to refer respectively to visiting a node before
       any of its children, after its left child and before its right, and after both its children. The alternative nomenclature uses preorder, inorder, and postorder to refer to the same visits,  which
       could result in some confusion over the meaning of postorder.

       Since  the return value of tdelete() is an unspecified non-null pointer in the case that the root of the tree has been deleted, applications should only use the return value of tdelete() as indi‐
       cation of success or failure and should not assume it can be dereferenced. Some implementations in this case will return a pointer to the new root of the tree (or to an empty tree if the  deleted
       root node was the only node in the tree); other implementations return arbitrary non-null pointers.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       hcreate(), lsearch()

       The Base Definitions volume of POSIX.1‐2017, <search.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                        TDELETE(3P)
