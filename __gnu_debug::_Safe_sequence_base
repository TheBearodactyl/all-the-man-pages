__gnu_debug::_Safe_sequence_base(3)                                                      Library Functions Manual                                                      __gnu_debug::_Safe_sequence_base(3)

NAME
       __gnu_debug::_Safe_sequence_base - Base class that supports tracking of iterators that reference a sequence.

SYNOPSIS
       #include <safe_base.h>

       Inherited by __gnu_debug::_Safe_sequence< _SafeSequence >, __gnu_debug::_Safe_sequence< _Sequence >, and __gnu_debug::_Safe_unordered_container_base.

   Public Attributes
       _Safe_iterator_base * _M_const_iterators
           The list of constant iterators that reference this container.
       _Safe_iterator_base * _M_iterators
           The list of mutable iterators that reference this container.
       unsigned int _M_version
           The container version number. This number may never be 0.

   Protected Member Functions
       _Safe_sequence_base (_Safe_sequence_base &&__seq) noexcept
       _Safe_sequence_base (const _Safe_sequence_base &) noexcept
       ~_Safe_sequence_base ()
       void _M_detach_all ()
       void _M_detach_singular ()
       __gnu_cxx::__mutex & _M_get_mutex ()  throw ()
       void _M_invalidate_all () const
       void _M_revalidate_singular ()
       void _M_swap (_Safe_sequence_base &__x) noexcept

   Friends
       class _Safe_iterator_base

Detailed Description
       Base class that supports tracking of iterators that reference a sequence.

       The _Safe_sequence_base class provides basic support for tracking iterators into a sequence. Sequences that track iterators must derived from _Safe_sequence_base publicly, so that safe iterators
       (which inherit _Safe_iterator_base) can attach to them. This class contains two linked lists of iterators, one for constant iterators and one for mutable iterators, and a version number that
       allows very fast invalidation of all iterators that reference the container.

       This class must ensure that no operation on it may throw an exception, otherwise safe sequences may fail to provide the exception-safety guarantees required by the C++ standard.

       Definition at line 188 of file safe_base.h.

Constructor & Destructor Documentation
   __gnu_debug::_Safe_sequence_base::_Safe_sequence_base () [inline],  [protected],  [noexcept]
       Definition at line 204 of file safe_base.h.

   __gnu_debug::_Safe_sequence_base::_Safe_sequence_base (const _Safe_sequence_base &) [inline],  [protected],  [noexcept]
       Definition at line 209 of file safe_base.h.

   __gnu_debug::_Safe_sequence_base::_Safe_sequence_base (_Safe_sequence_base && __seq) [inline],  [protected],  [noexcept]
       Definition at line 213 of file safe_base.h.

   __gnu_debug::_Safe_sequence_base::~_Safe_sequence_base () [inline],  [protected]
       Notify all iterators that reference this sequence that the sequence is being destroyed.

       Definition at line 220 of file safe_base.h.

       References _M_detach_all().

Member Function Documentation
   void __gnu_debug::_Safe_sequence_base::_M_detach_all () [protected]
       Detach all iterators, leaving them singular.

       Referenced by ~_Safe_sequence_base().

   void __gnu_debug::_Safe_sequence_base::_M_detach_singular () [protected]
       Detach all singular iterators.

       Postcondition
           for all iterators i attached to this sequence, i->_M_version == _M_version.

   __gnu_cxx::__mutex & __gnu_debug::_Safe_sequence_base::_M_get_mutex () [protected]
       For use in _Safe_sequence.

       Referenced by __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_from_if().

   void __gnu_debug::_Safe_sequence_base::_M_invalidate_all () const [inline],  [protected]
       Invalidates all iterators.

       Definition at line 256 of file safe_base.h.

       References _M_version.

   void __gnu_debug::_Safe_sequence_base::_M_revalidate_singular () [protected]
       Revalidates all attached singular iterators. This method may be used to validate iterators that were invalidated before (but for some reason, such as an exception, need to become valid again).

   void __gnu_debug::_Safe_sequence_base::_M_swap (_Safe_sequence_base & __x) [protected],  [noexcept]
       Swap this sequence with the given sequence. This operation also swaps ownership of the iterators, so that when the operation is complete all iterators that originally referenced one container now
       reference the other container.

Friends And Related Function Documentation
   friend class _Safe_iterator_base [friend]
       Definition at line 190 of file safe_base.h.

Member Data Documentation
   _Safe_iterator_base* __gnu_debug::_Safe_sequence_base::_M_const_iterators
       The list of constant iterators that reference this container.

       Definition at line 197 of file safe_base.h.

       Referenced by __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_from_if().

   _Safe_iterator_base* __gnu_debug::_Safe_sequence_base::_M_iterators
       The list of mutable iterators that reference this container.

       Definition at line 194 of file safe_base.h.

       Referenced by __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_from_if().

   unsigned int __gnu_debug::_Safe_sequence_base::_M_version [mutable]
       The container version number. This number may never be 0.

       Definition at line 200 of file safe_base.h.

       Referenced by _M_invalidate_all(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                                                                                     Wed Feb 1 2023                                                           __gnu_debug::_Safe_sequence_base(3)
