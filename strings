STRINGS(1)                   GNU Development Tools                  STRINGS(1)

NAME
       strings - print the sequences of printable characters in files

SYNOPSIS
       strings [-afovV] [-min-len]
               [-n min-len] [--bytes=min-len]
               [-t radix] [--radix=radix]
               [-e encoding] [--encoding=encoding]
               [-U method] [--unicode=method]
               [-] [--all] [--print-file-name]
               [-T bfdname] [--target=bfdname]
               [-w] [--include-all-whitespace]
               [-s] [--output-separator sep_string]
               [--help] [--version] file...

DESCRIPTION
       For each file given, GNU strings prints the printable character
       sequences that are at least 4 characters long (or the number given with
       the options below) and are followed by an unprintable character.

       Depending upon how the strings program was configured it will default
       to either displaying all the printable sequences that it can find in
       each file, or only those sequences that are in loadable, initialized
       data sections.  If the file type is unrecognizable, or if strings is
       reading from stdin then it will always display all of the printable
       sequences that it can find.

       For backwards compatibility any file that occurs after a command-line
       option of just - will also be scanned in full, regardless of the
       presence of any -d option.

       strings is mainly useful for determining the contents of non-text
       files.

OPTIONS
       -a
       --all
       -   Scan the whole file, regardless of what sections it contains or
           whether those sections are loaded or initialized.  Normally this is
           the default behaviour, but strings can be configured so that the -d
           is the default instead.

           The - option is position dependent and forces strings to perform
           full scans of any file that is mentioned after the - on the command
           line, even if the -d option has been specified.

       -d
       --data
           Only print strings from initialized, loaded data sections in the
           file.  This may reduce the amount of garbage in the output, but it
           also exposes the strings program to any security flaws that may be
           present in the BFD library used to scan and load sections.  Strings
           can be configured so that this option is the default behaviour.  In
           such cases the -a option can be used to avoid using the BFD library
           and instead just print all of the strings found in the file.

       -f
       --print-file-name
           Print the name of the file before each string.

       --help
           Print a summary of the program usage on the standard output and
           exit.

       -min-len
       -n min-len
       --bytes=min-len
           Print sequences of displayable characters that are at least min-len
           characters long.  If not specified a default minimum length of 4 is
           used.  The distinction between displayable and non-displayable
           characters depends upon the setting of the -e and -U options.
           Sequences are always terminated at control characters such as new-
           line and carriage-return, but not the tab character.

       -o  Like -t o.  Some other versions of strings have -o act like -t d
           instead.  Since we can not be compatible with both ways, we simply
           chose one.

       -t radix
       --radix=radix
           Print the offset within the file before each string.  The single
           character argument specifies the radix of the offset---o for octal,
           x for hexadecimal, or d for decimal.

       -e encoding
       --encoding=encoding
           Select the character encoding of the strings that are to be found.
           Possible values for encoding are: s = single-7-bit-byte characters
           (default), S = single-8-bit-byte characters, b = 16-bit bigendian,
           l = 16-bit littleendian, B = 32-bit bigendian, L = 32-bit
           littleendian.  Useful for finding wide character strings. (l and b
           apply to, for example, Unicode UTF-16/UCS-2 encodings).

       -U [d|i|l|e|x|h]
       --unicode=[default|invalid|locale|escape|hex|highlight]
           Controls the display of UTF-8 encoded multibyte characters in
           strings.  The default (--unicode=default) is to give them no
           special treatment, and instead rely upon the setting of the
           --encoding option.  The other values for this option automatically
           enable --encoding=S.

           The --unicode=invalid option treats them as non-graphic characters
           and hence not part of a valid string.  All the remaining options
           treat them as valid string characters.

           The --unicode=locale option displays them in the current locale,
           which may or may not support UTF-8 encoding.  The --unicode=hex
           option displays them as hex byte sequences enclosed between <>
           characters.  The --unicode=escape option displays them as escape
           sequences (\uxxxx) and the --unicode=highlight option displays them
           as escape sequences highlighted in red (if supported by the output
           device).  The colouring is intended to draw attention to the
           presence of unicode sequences where they might not be expected.

       -T bfdname
       --target=bfdname
           Specify an object code format other than your system's default
           format.

       -v
       -V
       --version
           Print the program version number on the standard output and exit.

       -w
       --include-all-whitespace
           By default tab and space characters are included in the strings
           that are displayed, but other whitespace characters, such a
           newlines and carriage returns, are not.  The -w option changes this
           so that all whitespace characters are considered to be part of a
           string.

       -s
       --output-separator
           By default, output strings are delimited by a new-line. This option
           allows you to supply any string to be used as the output record
           separator.  Useful with --include-all-whitespace where strings may
           contain new-lines internally.

       @file
           Read command-line options from file.  The options read are inserted
           in place of the original @file option.  If file does not exist, or
           cannot be read, then the option will be treated literally, and not
           removed.

           Options in file are separated by whitespace.  A whitespace
           character may be included in an option by surrounding the entire
           option in either single or double quotes.  Any character (including
           a backslash) may be included by prefixing the character to be
           included with a backslash.  The file may itself contain additional
           @file options; any such options will be processed recursively.

SEE ALSO
       ar(1), nm(1), objdump(1), ranlib(1), readelf(1) and the Info entries
       for binutils.

COPYRIGHT
       Copyright (c) 1991-2023 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3 or
       any later version published by the Free Software Foundation; with no
       Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
       Texts.  A copy of the license is included in the section entitled "GNU
       Free Documentation License".

binutils-2.40                     2023-02-03                        STRINGS(1)
STRINGS(1P)                POSIX Programmer's Manual               STRINGS(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       strings — find printable strings in files

SYNOPSIS
       strings [-a] [-t format] [-n number] [file...]

DESCRIPTION
       The strings utility shall look for printable strings in  regular  files
       and shall write those strings to standard output. A printable string is
       any sequence of four (by default) or more printable  characters  termi‐
       nated  by  a  <newline> or NUL character. Additional implementation-de‐
       fined strings may be written; see localedef.

       If the first argument is '-', the results are unspecified.

OPTIONS
       The strings utility shall conform to the  Base  Definitions  volume  of
       POSIX.1‐2017,  Section  12.2, Utility Syntax Guidelines, except for the
       unspecified usage of '-'.

       The following options shall be supported:

       -a        Scan files in their entirety. If -a is not specified,  it  is
                 implementation-defined  what  portion of each file is scanned
                 for strings.

       -n number Specify the minimum string length, where the number  argument
                 is a positive decimal integer. The default shall be 4.

       -t format Write  each string preceded by its byte offset from the start
                 of the file. The format shall  be  dependent  on  the  single
                 character used as the format option-argument:

                 d     The offset shall be written in decimal.

                 o     The offset shall be written in octal.

                 x     The offset shall be written in hexadecimal.

OPERANDS
       The following operand shall be supported:

       file      A  pathname of a regular file to be used as input. If no file
                 operand is specified, the strings utility shall read from the
                 standard input.

STDIN
       See the INPUT FILES section.

INPUT FILES
       The  input  files  named by the utility arguments or the standard input
       shall be regular files of any format.

ENVIRONMENT VARIABLES
       The following environment  variables  shall  affect  the  execution  of
       strings:

       LANG      Provide  a  default  value for the internationalization vari‐
                 ables that are unset or null. (See the Base Definitions  vol‐
                 ume  of POSIX.1‐2017, Section 8.2, Internationalization Vari‐
                 ables for the precedence  of  internationalization  variables
                 used to determine the values of locale categories.)

       LC_ALL    If  set  to  a non-empty string value, override the values of
                 all the other internationalization variables.

       LC_CTYPE  Determine the locale for the interpretation of  sequences  of
                 bytes of text data as characters (for example, single-byte as
                 opposed to  multi-byte  characters  in  arguments  and  input
                 files) and to identify printable strings.

       LC_MESSAGES
                 Determine the locale that should be used to affect the format
                 and contents of diagnostic messages written to  standard  er‐
                 ror.

       NLSPATH   Determine the location of message catalogs for the processing
                 of LC_MESSAGES.

ASYNCHRONOUS EVENTS
       Default.

STDOUT
       Strings found shall be written to the standard output, one per line.

       When the -t option is not specified, the format of the output shall be:

           "%s", <string>

       With the -t o option, the format of the output shall be:

           "%o %s", <byte offset>, <string>

       With the -t x option, the format of the output shall be:

           "%x %s", <byte offset>, <string>

       With the -t d option, the format of the output shall be:

           "%d %s", <byte offset>, <string>

STDERR
       The standard error shall be used only for diagnostic messages.

OUTPUT FILES
       None.

EXTENDED DESCRIPTION
       None.

EXIT STATUS
       The following exit values shall be returned:

        0    Successful completion.

       >0    An error occurred.

CONSEQUENCES OF ERRORS
       Default.

       The following sections are informative.

APPLICATION USAGE
       By default the data area (as opposed to the text,  ``bss'',  or  header
       areas) of a binary executable file is scanned. Implementations document
       which areas are scanned.

       Some historical implementations do not require NUL or <newline>  termi‐
       nators  for  strings to permit those languages that do not use NUL as a
       string terminator to have their strings written.

EXAMPLES
       None.

RATIONALE
       Apart from rationalizing the option syntax and slight difficulties with
       object  and executable binary files, strings is specified to match his‐
       torical practice closely. The -a and -n options were introduced to  re‐
       place  the  non-conforming  - and -number options. These options are no
       longer specified by POSIX.1‐2008 but may be present in some implementa‐
       tions.

       The  -o  option historically means different things on different imple‐
       mentations. Some use it to mean ``offset in decimal'', while others use
       it  as ``offset in octal''. Instead of trying to decide which way would
       be least objectionable, the -t option  was  added.  It  was  originally
       named  -O  to  mean  ``offset'', but was changed to -t to be consistent
       with od.

       The ISO C standard function isprint() is restricted to a domain of  un‐
       signed  char.   This volume of POSIX.1‐2017 requires implementations to
       write strings as defined by the current locale.

FUTURE DIRECTIONS
       None.

SEE ALSO
       localedef, nm

       The Base Definitions volume of  POSIX.1‐2017,  Chapter  8,  Environment
       Variables, Section 12.2, Utility Syntax Guidelines

COPYRIGHT
       Portions  of  this text are reprinted and reproduced in electronic form
       from IEEE Std 1003.1-2017, Standard for Information Technology --  Por‐
       table  Operating System Interface (POSIX), The Open Group Base Specifi‐
       cations Issue 7, 2018 Edition, Copyright (C) 2018 by the  Institute  of
       Electrical  and  Electronics Engineers, Inc and The Open Group.  In the
       event of any discrepancy between this version and the original IEEE and
       The  Open Group Standard, the original IEEE and The Open Group Standard
       is the referee document. The original Standard can be  obtained  online
       at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors that appear in this page are
       most likely to have been introduced during the conversion of the source
       files  to  man page format. To report such errors, see https://www.ker‐
       nel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                  2017                          STRINGS(1P)
