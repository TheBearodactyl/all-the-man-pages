ldexp(3)                                                                                 Library Functions Manual                                                                                 ldexp(3)

NAME
       ldexp, ldexpf, ldexpl - multiply floating-point number by integral power of 2

LIBRARY
       Math library (libm, -lm)

SYNOPSIS
       #include <math.h>

       double ldexp(double x, int exp);
       float ldexpf(float x, int exp);
       long double ldexpl(long double x, int exp);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       ldexpf(), ldexpl():
           _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
               || /* Since glibc 2.19: */ _DEFAULT_SOURCE
               || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE

DESCRIPTION
       These functions return the result of multiplying the floating-point number x by 2 raised to the power exp.

RETURN VALUE
       On success, these functions return x * (2^exp).

       If exp is zero, then x is returned.

       If x is a NaN, a NaN is returned.

       If x is positive infinity (negative infinity), positive infinity (negative infinity) is returned.

       If the result underflows, a range error occurs, and zero is returned.

       If the result overflows, a range error occurs, and the functions return HUGE_VAL, HUGE_VALF, or HUGE_VALL, respectively, with a sign the same as x.

ERRORS
       See math_error(7) for information on how to determine whether an error has occurred when calling these functions.

       The following errors can occur:

       Range error, overflow
              errno is set to ERANGE.  An overflow floating-point exception (FE_OVERFLOW) is raised.

       Range error, underflow
              errno is set to ERANGE.  An underflow floating-point exception (FE_UNDERFLOW) is raised.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │ldexp(), ldexpf(), ldexpl()                                                                                                                                             │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       C99, POSIX.1-2001.

       The variant returning double also conforms to SVr4, 4.3BSD, C89.

SEE ALSO
       frexp(3), modf(3), scalbln(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        ldexp(3)
LDEXP(3P)                                                                                POSIX Programmer's Manual                                                                               LDEXP(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       ldexp, ldexpf, ldexpl — load exponent of a floating-point number

SYNOPSIS
       #include <math.h>

       double ldexp(double x, int exp);
       float ldexpf(float x, int exp);
       long double ldexpl(long double x, int exp);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       These functions shall compute the quantity x * 2exp.

       An  application  wishing  to check for error situations should set errno to zero and call feclearexcept(FE_ALL_EXCEPT) before calling these functions. On return, if errno is non-zero or fetestex‐
       cept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW) is non-zero, an error has occurred.

RETURN VALUE
       Upon successful completion, these functions shall return x multiplied by 2, raised to the power exp.

       If these functions would cause overflow, a range error shall occur and ldexp(), ldexpf(), and ldexpl() shall return ±HUGE_VAL, ±HUGE_VALF, and ±HUGE_VALL (according to the  sign  of  x),  respec‐
       tively.

       If  the  correct  value would cause underflow, and is not representable, a range error may occur, and ldexp(), ldexpf(), and ldexpl() shall return 0.0, or (if IEC 60559 Floating-Point is not sup‐
       ported) an implementation-defined value no greater in magnitude than DBL_MIN, FLT_MIN, and LDBL_MIN, respectively.

       If x is NaN, a NaN shall be returned.

       If x is ±0 or ±Inf, x shall be returned.

       If exp is 0, x shall be returned.

       If the correct value would cause underflow, and is representable, a range error may occur and the correct value shall be returned.

ERRORS
       These functions shall fail if:

       Range Error The result overflows.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the overflow floating-point exception shall be raised.

       These functions may fail if:

       Range Error The result underflows.

                   If the integer expression (math_errhandling & MATH_ERRNO) is non-zero, then errno shall be set to [ERANGE].  If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero,
                   then the underflow floating-point exception shall be raised.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       On error, the expressions (math_errhandling & MATH_ERRNO) and (math_errhandling & MATH_ERREXCEPT) are independent of each other, but at least one of them must be non-zero.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       feclearexcept(), fetestexcept(), frexp(), isnan()

       The Base Definitions volume of POSIX.1‐2017, Section 4.20, Treatment of Error Conditions for Mathematical Functions, <math.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          LDEXP(3P)
