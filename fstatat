FSTATAT(3P)                                                                              POSIX Programmer's Manual                                                                             FSTATAT(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       fstatat, lstat, stat — get file status

SYNOPSIS
       #include <fcntl.h>
       #include <sys/stat.h>

       int fstatat(int fd, const char *restrict path,
           struct stat *restrict buf, int flag);
       int lstat(const char *restrict path, struct stat *restrict buf);
       int stat(const char *restrict path, struct stat *restrict buf);

DESCRIPTION
       The stat() function shall obtain information about the named file and write it to the area pointed to by the buf argument. The path argument points to a pathname naming a file.  Read,  write,  or
       execute  permission  of  the named file is not required. An implementation that provides additional or alternate file access control mechanisms may, under implementation-defined conditions, cause
       stat() to fail. In particular, the system may deny the existence of the file specified by path.

       If the named file is a symbolic link, the stat() function shall continue pathname resolution using the contents of the symbolic link, and shall return information pertaining to the resulting file
       if the file exists.

       The buf argument is a pointer to a stat structure, as defined in the <sys/stat.h> header, into which information is placed concerning the file.

       The stat() function shall update any time-related fields (as described in the Base Definitions volume of POSIX.1‐2017, Section 4.9, File Times Update), before writing into the stat structure.

       If  the  named  file  is a shared memory object, the implementation shall update in the stat structure pointed to by the buf argument the st_uid, st_gid, st_size, and st_mode fields, and only the
       S_IRUSR, S_IWUSR, S_IRGRP, S_IWGRP, S_IROTH, and S_IWOTH file permission bits need be valid. The implementation may update other fields and flags.

       If the named file is a typed memory object, the implementation shall update in the stat structure pointed to by the buf argument the st_uid, st_gid, st_size, and  st_mode  fields,  and  only  the
       S_IRUSR, S_IWUSR, S_IRGRP, S_IWGRP, S_IROTH, and S_IWOTH file permission bits need be valid. The implementation may update other fields and flags.

       For  all other file types defined in this volume of POSIX.1‐2017, the structure members st_mode, st_ino, st_dev, st_uid, st_gid, st_atim, st_ctim, and st_mtim shall have meaningful values and the
       value of the member st_nlink shall be set to the number of links to the file.

       The lstat() function shall be equivalent to stat(), except when path refers to a symbolic link. In that case lstat() shall return information about the link, while stat() shall return information
       about the file the link references.

       For  symbolic  links,  the  st_mode  member  shall contain meaningful information when used with the file type macros. The file mode bits in st_mode are unspecified. The structure members st_ino,
       st_dev, st_uid, st_gid, st_atim, st_ctim, and st_mtim shall have meaningful values and the value of the st_nlink member shall be set to the number of (hard) links to the symbolic link.  The value
       of the st_size member shall be set to the length of the pathname contained in the symbolic link not including any terminating null byte.

       The fstatat() function shall be equivalent to the stat() or lstat() function, depending on the value of flag (see below), except in the case where path specifies a relative path. In this case the
       status shall be retrieved from a file relative to the directory associated with the file descriptor fd instead of the current working directory. If the access mode of the  open  file  description
       associated  with the file descriptor is not O_SEARCH, the function shall check whether directory searches are permitted using the current permissions of the directory underlying the file descrip‐
       tor. If the access mode is O_SEARCH, the function shall not perform the check.

       Values for flag are constructed by a bitwise-inclusive OR of flags from the following list, defined in <fcntl.h>:

       AT_SYMLINK_NOFOLLOW
             If path names a symbolic link, the status of the symbolic link is returned.

       If fstatat() is passed the special value AT_FDCWD in the fd parameter, the current working directory shall be used and the behavior shall be identical to a call to stat() or lstat() respectively,
       depending on whether or not the AT_SYMLINK_NOFOLLOW bit is set in flag.

RETURN VALUE
       Upon successful completion, these functions shall return 0.  Otherwise, these functions shall return -1 and set errno to indicate the error.

ERRORS
       These functions shall fail if:

       EACCES Search permission is denied for a component of the path prefix.

       EIO    An error occurred while reading from the file system.

       ELOOP  A loop exists in symbolic links encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of a component of a pathname is longer than {NAME_MAX}.

       ENOENT A component of path does not name an existing file or path is an empty string.

       ENOTDIR
              A  component  of the path prefix names an existing file that is neither a directory nor a symbolic link to a directory, or the path argument contains at least one non-<slash> character and
              ends with one or more trailing <slash> characters and the last pathname component names an existing file that is neither a directory nor a symbolic link to a directory.

       EOVERFLOW
              The file size in bytes or the number of blocks allocated to the file or the file serial number cannot be represented correctly in the structure pointed to by buf.

       The fstatat() function shall fail if:

       EACCES The access mode of the open file description associated with fd is not O_SEARCH and the permissions of the directory underlying fd do not permit directory searches.

       EBADF  The path argument does not specify an absolute path and the fd argument is neither AT_FDCWD nor a valid file descriptor open for reading or searching.

       ENOTDIR
              The path argument is not an absolute path and fd is a file descriptor associated with a non-directory file.

       These functions may fail if:

       ELOOP  More than {SYMLOOP_MAX} symbolic links were encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of a pathname exceeds {PATH_MAX}, or pathname resolution of a symbolic link produced an intermediate result with a length that exceeds {PATH_MAX}.

       EOVERFLOW
              A value to be stored would overflow one of the members of the stat structure.

       The fstatat() function may fail if:

       EINVAL The value of the flag argument is not valid.

       The following sections are informative.

EXAMPLES
   Obtaining File Status Information
       The following example shows how to obtain file status information for a file named /home/cnd/mod1.  The structure variable buffer is defined for the stat structure.

           #include <sys/types.h>
           #include <sys/stat.h>
           #include <fcntl.h>

           struct stat buffer;
           int         status;
           ...
           status = stat("/home/cnd/mod1", &buffer);

   Getting Directory Information
       The following example fragment gets status information for each entry in a directory. The call to the stat() function stores file information in the stat structure pointed  to  by  statbuf.   The
       lines that follow the stat() call format the fields in the stat structure for presentation to the user of the program.

           #include <sys/types.h>
           #include <sys/stat.h>
           #include <dirent.h>
           #include <pwd.h>
           #include <grp.h>
           #include <time.h>
           #include <locale.h>
           #include <langinfo.h>
           #include <stdio.h>
           #include <stdint.h>

           struct dirent  *dp;
           struct stat     statbuf;
           struct passwd  *pwd;
           struct group   *grp;
           struct tm      *tm;
           char            datestring[256];
           ...
           /* Loop through directory entries. */
           while ((dp = readdir(dir)) != NULL) {

               /* Get entry's information. */
               if (stat(dp->d_name, &statbuf) == -1)
                   continue;

               /* Print out type, permissions, and number of links. */
               printf("%10.10s", sperm (statbuf.st_mode));
               printf("%4d", statbuf.st_nlink);

               /* Print out owner's name if it is found using getpwuid(). */
               if ((pwd = getpwuid(statbuf.st_uid)) != NULL)
                   printf(" %-8.8s", pwd->pw_name);
               else
                   printf(" %-8d", statbuf.st_uid);

               /* Print out group name if it is found using getgrgid(). */
               if ((grp = getgrgid(statbuf.st_gid)) != NULL)
                   printf(" %-8.8s", grp->gr_name);
               else
                   printf(" %-8d", statbuf.st_gid);

               /* Print size of file. */
               printf(" %9jd", (intmax_t)statbuf.st_size);

               tm = localtime(&statbuf.st_mtime);

               /* Get localized date string. */
               strftime(datestring, sizeof(datestring), nl_langinfo(D_T_FMT), tm);

               printf(" %s %s\n", datestring, dp->d_name);
           }

   Obtaining Symbolic Link Status Information
       The following example shows how to obtain status information for a symbolic link named /modules/pass1.  The structure variable buffer is defined for the stat structure. If the path argument spec‐
       ified the pathname for the file pointed to by the symbolic link (/home/cnd/mod1), the results of calling the function would be the same as those returned by a call to the stat() function.

           #include <sys/stat.h>

           struct stat buffer;
           int status;
           ...
           status = lstat("/modules/pass1", &buffer);

APPLICATION USAGE
       None.

RATIONALE
       The intent of the paragraph describing ``additional or alternate file access control mechanisms'' is to allow a secure implementation where a process with a  label  that  does  not  dominate  the
       file's  label  cannot  perform  a stat() function. This is not related to read permission; a process with a label that dominates the file's label does not need read permission.  An implementation
       that supports write-up operations could fail fstat() function calls even though it has a valid file descriptor open for writing.

       The purpose of the fstatat() function is to obtain the status of files in directories other than the current working directory without exposure to race conditions. Any part of the path of a  file
       could  be  changed  in parallel to a call to stat(), resulting in unspecified behavior. By opening a file descriptor for the target directory and using the fstatat() function it can be guaranteed
       that the file for which status is returned is located relative to the desired directory.

FUTURE DIRECTIONS
       None.

SEE ALSO
       access(), chmod(), fdopendir(), fstat(), mknod(), readlink(), symlink()

       The Base Definitions volume of POSIX.1‐2017, Section 4.9, File Times Update, <fcntl.h>, <sys_stat.h>, <sys_types.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                        FSTATAT(3P)
stat(2)                                                                                     System Calls Manual                                                                                    stat(2)

NAME
       stat, fstat, lstat, fstatat - get file status

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <sys/stat.h>

       int stat(const char *restrict pathname,
                struct stat *restrict statbuf);
       int fstat(int fd, struct stat *statbuf);
       int lstat(const char *restrict pathname,
                struct stat *restrict statbuf);

       #include <fcntl.h>           /* Definition of AT_* constants */
       #include <sys/stat.h>

       int fstatat(int dirfd, const char *restrict pathname,
                struct stat *restrict statbuf, int flags);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       lstat():
           /* Since glibc 2.20 */ _DEFAULT_SOURCE
               || _XOPEN_SOURCE >= 500
               || /* Since glibc 2.10: */ _POSIX_C_SOURCE >= 200112L
               || /* glibc 2.19 and earlier */ _BSD_SOURCE

       fstatat():
           Since glibc 2.10:
               _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _ATFILE_SOURCE

DESCRIPTION
       These  functions  return  information about a file, in the buffer pointed to by statbuf.  No permissions are required on the file itself, but—in the case of stat(), fstatat(), and lstat()—execute
       (search) permission is required on all of the directories in pathname that lead to the file.

       stat() and fstatat() retrieve information about the file pointed to by pathname; the differences for fstatat() are described below.

       lstat() is identical to stat(), except that if pathname is a symbolic link, then it returns information about the link itself, not the file that the link refers to.

       fstat() is identical to stat(), except that the file about which information is to be retrieved is specified by the file descriptor fd.

   The stat structure
       All of these system calls return a stat structure (see stat(3type)).

       Note: for performance and simplicity reasons, different fields in the stat structure may contain state information from different moments during the execution of the system call.  For example, if
       st_mode or st_uid is changed by another process by calling chmod(2) or chown(2), stat() might return the old st_mode together with the new st_uid, or the old st_uid together with the new st_mode.

   fstatat()
       The fstatat() system call is a more general interface for accessing file information which can still provide exactly the behavior of each of stat(), lstat(), and fstat().

       If  the pathname given in pathname is relative, then it is interpreted relative to the directory referred to by the file descriptor dirfd (rather than relative to the current working directory of
       the calling process, as is done by stat() and lstat() for a relative pathname).

       If pathname is relative and dirfd is the special value AT_FDCWD, then pathname is interpreted relative to the current working directory of the calling process (like stat() and lstat()).

       If pathname is absolute, then dirfd is ignored.

       flags can either be 0, or include one or more of the following flags ORed:

       AT_EMPTY_PATH (since Linux 2.6.39)
              If pathname is an empty string, operate on the file referred to by dirfd (which may have been obtained using the open(2) O_PATH flag).  In this case, dirfd can refer to any type  of  file,
              not  just a directory, and the behavior of fstatat() is similar to that of fstat().  If dirfd is AT_FDCWD, the call operates on the current working directory.  This flag is Linux-specific;
              define _GNU_SOURCE to obtain its definition.

       AT_NO_AUTOMOUNT (since Linux 2.6.38)
              Don't automount the terminal ("basename") component of pathname.  Since Linux 3.1 this flag is ignored.  Since Linux 4.11 this flag is implied.

       AT_SYMLINK_NOFOLLOW
              If pathname is a symbolic link, do not dereference it: instead return information about the link itself, like lstat().  (By default, fstatat() dereferences symbolic links, like stat().)

       See openat(2) for an explanation of the need for fstatat().

RETURN VALUE
       On success, zero is returned.  On error, -1 is returned, and errno is set to indicate the error.

ERRORS
       EACCES Search permission is denied for one of the directories in the path prefix of pathname.  (See also path_resolution(7).)

       EBADF  fd is not a valid open file descriptor.

       EBADF  (fstatat()) pathname is relative but dirfd is neither AT_FDCWD nor a valid file descriptor.

       EFAULT Bad address.

       EINVAL (fstatat()) Invalid flag specified in flags.

       ELOOP  Too many symbolic links encountered while traversing the path.

       ENAMETOOLONG
              pathname is too long.

       ENOENT A component of pathname does not exist or is a dangling symbolic link.

       ENOENT pathname is an empty string and AT_EMPTY_PATH was not specified in flags.

       ENOMEM Out of memory (i.e., kernel memory).

       ENOTDIR
              A component of the path prefix of pathname is not a directory.

       ENOTDIR
              (fstatat()) pathname is relative and dirfd is a file descriptor referring to a file other than a directory.

       EOVERFLOW
              pathname or fd refers to a file whose size, inode number, or number of blocks cannot be represented in, respectively, the types off_t, ino_t, or blkcnt_t.  This error can occur  when,  for
              example, an application compiled on a 32-bit platform without -D_FILE_OFFSET_BITS=64 calls stat() on a file whose size exceeds (1<<31)-1 bytes.

STANDARDS
       POSIX.1-2008.

HISTORY
       stat()
       fstat()
       lstat()
              SVr4, 4.3BSD, POSIX.1-2001.

       fstatat()
              POSIX.1-2008.  Linux 2.6.16, glibc 2.4.

       According  to POSIX.1-2001, lstat() on a symbolic link need return valid information only in the st_size field and the file type of the st_mode field of the stat structure.  POSIX.1-2008 tightens
       the specification, requiring lstat() to return valid information in all fields except the mode bits in st_mode.

       Use of the st_blocks and st_blksize fields may be less portable.  (They were introduced in BSD.  The interpretation differs between systems, and possibly on a single system when  NFS  mounts  are
       involved.)

   C library/kernel differences
       Over  time,  increases  in  the  size of the stat structure have led to three successive versions of stat(): sys_stat() (slot __NR_oldstat), sys_newstat() (slot __NR_stat), and sys_stat64() (slot
       __NR_stat64) on 32-bit platforms such as i386.  The first two versions were already present in Linux 1.0 (albeit with different names); the last was added in Linux 2.4.  Similar remarks apply for
       fstat() and lstat().

       The kernel-internal versions of the stat structure dealt with by the different versions are, respectively:

       __old_kernel_stat
              The original structure, with rather narrow fields, and no padding.

       stat   Larger st_ino field and padding added to various parts of the structure to allow for future expansion.

       stat64 Even  larger  st_ino field, larger st_uid and st_gid fields to accommodate the Linux-2.4 expansion of UIDs and GIDs to 32 bits, and various other enlarged fields and further padding in the
              structure.  (Various padding bytes were eventually consumed in Linux 2.6, with the advent of 32-bit device IDs and nanosecond components for the timestamp fields.)

       The glibc stat() wrapper function hides these details from applications, invoking the most recent version of the system call provided by the kernel, and repacking the returned information if  re‐
       quired for old binaries.

       On modern 64-bit systems, life is simpler: there is a single stat() system call and the kernel deals with a stat structure that contains fields of a sufficient size.

       The underlying system call employed by the glibc fstatat() wrapper function is actually called fstatat64() or, on some architectures, newfstatat().

EXAMPLES
       The following program calls lstat() and displays selected fields in the returned stat structure.

       #include <stdint.h>
       #include <stdio.h>
       #include <stdlib.h>
       #include <sys/stat.h>
       #include <sys/sysmacros.h>
       #include <time.h>

       int
       main(int argc, char *argv[])
       {
           struct stat sb;

           if (argc != 2) {
               fprintf(stderr, "Usage: %s <pathname>\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           if (lstat(argv[1], &sb) == -1) {
               perror("lstat");
               exit(EXIT_FAILURE);
           }

           printf("ID of containing device:  [%x,%x]\n",
                  major(sb.st_dev),
                  minor(sb.st_dev));

           printf("File type:                ");

           switch (sb.st_mode & S_IFMT) {
           case S_IFBLK:  printf("block device\n");            break;
           case S_IFCHR:  printf("character device\n");        break;
           case S_IFDIR:  printf("directory\n");               break;
           case S_IFIFO:  printf("FIFO/pipe\n");               break;
           case S_IFLNK:  printf("symlink\n");                 break;
           case S_IFREG:  printf("regular file\n");            break;
           case S_IFSOCK: printf("socket\n");                  break;
           default:       printf("unknown?\n");                break;
           }

           printf("I-node number:            %ju\n", (uintmax_t) sb.st_ino);

           printf("Mode:                     %jo (octal)\n",
                  (uintmax_t) sb.st_mode);

           printf("Link count:               %ju\n", (uintmax_t) sb.st_nlink);
           printf("Ownership:                UID=%ju   GID=%ju\n",
                  (uintmax_t) sb.st_uid, (uintmax_t) sb.st_gid);

           printf("Preferred I/O block size: %jd bytes\n",
                  (intmax_t) sb.st_blksize);
           printf("File size:                %jd bytes\n",
                  (intmax_t) sb.st_size);
           printf("Blocks allocated:         %jd\n",
                  (intmax_t) sb.st_blocks);

           printf("Last status change:       %s", ctime(&sb.st_ctime));
           printf("Last file access:         %s", ctime(&sb.st_atime));
           printf("Last file modification:   %s", ctime(&sb.st_mtime));

           exit(EXIT_SUCCESS);
       }

SEE ALSO
       ls(1), stat(1), access(2), chmod(2), chown(2), readlink(2), statx(2), utime(2), stat(3type), capabilities(7), inode(7), symlink(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                         stat(2)
