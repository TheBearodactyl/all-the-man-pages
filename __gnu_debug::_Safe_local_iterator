__gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >(3)                             Library Functions Manual                             __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >(3)

NAME
       __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence > - Safe iterator wrapper.

SYNOPSIS
       #include <safe_local_iterator.h>

       Inherits _Iterator, and __gnu_debug::_Safe_local_iterator_base.

   Public Types
       typedef _Traits::difference_type difference_type
       typedef _Traits::iterator_category iterator_category
       typedef _Iterator iterator_type
       typedef _Traits::pointer pointer
       typedef _Traits::reference reference
       typedef _Traits::value_type value_type

   Public Member Functions
       _Safe_local_iterator () noexcept
       _Safe_local_iterator (_Iterator __i, const _Safe_sequence_base *__cont)
           Safe iterator construction from an unsafe iterator and its sequence.
       _Safe_local_iterator (_Safe_local_iterator &&__x) noexcept
           Move construction.
       _Safe_local_iterator (const _Safe_local_iterator &__x) noexcept
           Copy construction.
       template<typename _MutableIterator > _Safe_local_iterator (const _Safe_local_iterator< _MutableIterator, typename __gnu_cxx::__enable_if< _IsConstant::__value &&std::__are_same< _MutableIterator,
           _OtherIterator >::__value, _Sequence >::__type > &__x) noexcept
           Converting constructor from a mutable iterator to a constant iterator.
       void _M_attach (_Safe_sequence_base *__seq)
       void _M_attach_single (_Safe_sequence_base *__seq)
       bool _M_attached_to (const _Safe_sequence_base *__seq) const
       bool _M_can_compare (const _Safe_iterator_base &__x) const  throw ()
       bool _M_dereferenceable () const
           Is the iterator dereferenceable?
       _Distance_traits< _Iterator >::__type _M_get_distance_to (const _Safe_local_iterator &__rhs) const
       __gnu_cxx::__conditional_type< _IsConstant::__value, const_Sequence *, _Sequence * >::__type _M_get_sequence () const
       template<typename _Other > bool _M_in_same_bucket (const _Safe_local_iterator< _Other, _Sequence > &__other) const
           Is this iterator part of the same bucket as the other one?
       bool _M_incrementable () const
           Is the iterator incrementable?
       void _M_invalidate ()
       bool _M_is_begin () const
           Is this iterator equal to the sequence's begin(bucket) iterator?
       bool _M_is_end () const
           Is this iterator equal to the sequence's end(bucket) iterator?
       void _M_reset ()  throw ()
       bool _M_singular () const  throw ()
       void _M_unlink ()  throw ()
       bool _M_valid_range (const _Safe_local_iterator &__rhs, std::pair< difference_type, _Distance_precision > &__dist_info) const
       const _Iterator & base () const noexcept
       _Iterator & base () noexcept
           Return the underlying iterator.
       size_type bucket () const
           Return the bucket.
       operator _Iterator () const
           Conversion to underlying non-debug iterator to allow better interaction with non-debug containers.
       reference operator* () const
           Iterator dereference.
       _Safe_local_iterator & operator++ ()
           Iterator preincrement.
       _Safe_local_iterator operator++ (int)
           Iterator postincrement.
       pointer operator-> () const
           Iterator dereference.
       _Safe_local_iterator & operator= (_Safe_local_iterator &&__x) noexcept
           Move assignment.
       _Safe_local_iterator & operator= (const _Safe_local_iterator &__x)
           Copy assignment.

   Static Public Member Functions
       static constexpr bool _S_constant ()
           Determine if this is a constant iterator.

   Public Attributes
       _Safe_iterator_base * _M_next
       _Safe_iterator_base * _M_prior
       _Safe_sequence_base * _M_sequence
       unsigned int _M_version

   Protected Member Functions
       void _M_attach (_Safe_sequence_base *__seq, bool __constant)
       void _M_attach_single (_Safe_sequence_base *__seq, bool __constant)  throw ()
       void _M_detach ()
       void _M_detach_single ()  throw ()
       _Safe_unordered_container_base * _M_get_container () const noexcept
       __gnu_cxx::__mutex & _M_get_mutex ()  throw ()

   Friends
       bool operator!= (const _Self &__lhs, const _OtherSelf &__rhs) noexcept
       bool operator!= (const _Self &__lhs, const _Self &__rhs) noexcept
       bool operator== (const _Self &__lhs, const _OtherSelf &__rhs) noexcept
       bool operator== (const _Self &__lhs, const _Self &__rhs) noexcept

Detailed Description
   template<typename _Iterator, typename _Sequence>
       class __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >"Safe iterator wrapper.

       The class template _Safe_local_iterator is a wrapper around an iterator that tracks the iterator's movement among sequences and checks that operations performed on the 'safe' iterator are legal.
       In additional to the basic iterator operations (which are validated, and then passed to the underlying iterator), _Safe_local_iterator has member functions for iterator invalidation,
       attaching/detaching the iterator from sequences, and querying the iterator's state.

       Definition at line 64 of file safe_local_iterator.h.

Member Typedef Documentation
   template<typename _Iterator , typename _Sequence > typedef _Traits::difference_type __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::difference_type
       Definition at line 99 of file safe_local_iterator.h.

   template<typename _Iterator , typename _Sequence > typedef _Traits::iterator_category __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::iterator_category
       Definition at line 97 of file safe_local_iterator.h.

   template<typename _Iterator , typename _Sequence > typedef _Iterator __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::iterator_type
       Definition at line 96 of file safe_local_iterator.h.

   template<typename _Iterator , typename _Sequence > typedef _Traits::pointer __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::pointer
       Definition at line 101 of file safe_local_iterator.h.

   template<typename _Iterator , typename _Sequence > typedef _Traits::reference __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::reference
       Definition at line 100 of file safe_local_iterator.h.

   template<typename _Iterator , typename _Sequence > typedef _Traits::value_type __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::value_type
       Definition at line 98 of file safe_local_iterator.h.

Constructor & Destructor Documentation
   template<typename _Iterator , typename _Sequence > __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_Safe_local_iterator () [inline],  [noexcept]
       Postcondition
           the iterator is singular and unattached

       Definition at line 104 of file safe_local_iterator.h.

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator++().

   template<typename _Iterator , typename _Sequence > __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_Safe_local_iterator (_Iterator __i, const _Safe_sequence_base * __cont) [inline]
       Safe iterator construction from an unsafe iterator and its sequence.

       Precondition
           seq is not NULL

       Postcondition
           this is not singular

       Definition at line 113 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_iterator_base::_M_singular().

   template<typename _Iterator , typename _Sequence > __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_Safe_local_iterator (const _Safe_local_iterator< _Iterator, _Sequence > & __x) [inline],
       [noexcept]
       Copy construction.

       Definition at line 124 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_attach().

   template<typename _Iterator , typename _Sequence > __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_Safe_local_iterator (_Safe_local_iterator< _Iterator, _Sequence > && __x) [inline],
       [noexcept]
       Move construction.

       Postcondition
           __x is singular and unattached

       Definition at line 141 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_attach(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::base(), and std::swap().

   template<typename _Iterator , typename _Sequence > template<typename _MutableIterator > __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_Safe_local_iterator (const _Safe_local_iterator<
       _MutableIterator, typename __gnu_cxx::__enable_if< _IsConstant::__value &&std::__are_same< _MutableIterator, _OtherIterator >::__value, _Sequence >::__type > & __x) [inline],  [noexcept]
       Converting constructor from a mutable iterator to a constant iterator.

       Definition at line 160 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_attach().

Member Function Documentation
   template<typename _Iterator , typename _Sequence > void __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_attach (_Safe_sequence_base * __seq) [inline]
       Attach iterator to the given sequence.

       Definition at line 328 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator_base::_M_attach(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_S_constant().

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_Safe_local_iterator(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

   void __gnu_debug::_Safe_local_iterator_base::_M_attach (_Safe_sequence_base * __seq, bool __constant) [protected],  [inherited]
       Attaches this iterator to the given container, detaching it from whatever container it was attached to originally. If the new container is the NULL pointer, the iterator is left unattached.

       Referenced by __gnu_debug::_Safe_local_iterator_base::_Safe_local_iterator_base(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_attach().

   template<typename _Iterator , typename _Sequence > void __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_attach_single (_Safe_sequence_base * __seq) [inline]
       Likewise, but not thread-safe.

       Definition at line 333 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator_base::_M_attach_single(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_S_constant().

   void __gnu_debug::_Safe_local_iterator_base::_M_attach_single (_Safe_sequence_base * __seq, bool __constant) [protected],  [inherited]
       Likewise, but not thread-safe.

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_attach_single().

   bool __gnu_debug::_Safe_iterator_base::_M_attached_to (const _Safe_sequence_base * __seq) const [inline],  [inherited]
       Determines if we are attached to the given sequence.

       Definition at line 131 of file safe_base.h.

       References __gnu_debug::_Safe_iterator_base::_M_sequence.

   bool __gnu_debug::_Safe_iterator_base::_M_can_compare (const _Safe_iterator_base & __x) const [inherited]
       Can we compare this iterator to the given iterator __x? Returns true if both iterators are nonsingular and reference the same sequence.

   template<typename _Iterator , typename _Sequence > bool __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_dereferenceable () const [inline]
       Is the iterator dereferenceable?

       Definition at line 338 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_is_end(), and __gnu_debug::_Safe_iterator_base::_M_singular().

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator*(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator->().

   void __gnu_debug::_Safe_local_iterator_base::_M_detach () [protected],  [inherited]
       Detach the iterator for whatever container it is attached to, if any.

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

   void __gnu_debug::_Safe_local_iterator_base::_M_detach_single () [protected],  [inherited]
       Likewise, but not thread-safe.

   template<typename _Iterator , typename _Sequence > _Distance_traits< _Iterator >::__type __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_get_distance_to (const _Safe_local_iterator<
       _Iterator, _Sequence > & __rhs) const
       Definition at line 36 of file safe_local_iterator.tcc.

   __gnu_cxx::__mutex & __gnu_debug::_Safe_iterator_base::_M_get_mutex () [protected],  [inherited]
       For use in _Safe_iterator.

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator++(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category >::operator++(), __gnu_debug::_Safe_iterator<
       _Iterator, _Sequence, _Category >::operator=(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

   template<typename _Iterator , typename _Sequence > __gnu_cxx::__conditional_type< _IsConstant::__value, const_Sequence *, _Sequence * >::__type __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence
       >::_M_get_sequence () const [inline]
       Definition at line 359 of file safe_local_iterator.h.

   template<typename _Iterator , typename _Sequence > template<typename _Other > bool __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_in_same_bucket (const _Safe_local_iterator< _Other,
       _Sequence > & __other) const [inline]
       Is this iterator part of the same bucket as the other one?

       Definition at line 373 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::bucket().

   template<typename _Iterator , typename _Sequence > bool __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_incrementable () const [inline]
       Is the iterator incrementable?

       Definition at line 343 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_is_end(), and __gnu_debug::_Safe_iterator_base::_M_singular().

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator++().

   void __gnu_debug::_Safe_iterator_base::_M_invalidate () [inline],  [inherited]
       Invalidate the iterator, making it singular.

       Definition at line 146 of file safe_base.h.

       References __gnu_debug::_Safe_iterator_base::_M_version.

   template<typename _Iterator , typename _Sequence > bool __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_is_begin () const [inline]
       Is this iterator equal to the sequence's begin(bucket) iterator?

       Definition at line 363 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::base(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::bucket().

   template<typename _Iterator , typename _Sequence > bool __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_is_end () const [inline]
       Is this iterator equal to the sequence's end(bucket) iterator?

       Definition at line 367 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::base(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::bucket().

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_dereferenceable(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_incrementable().

   void __gnu_debug::_Safe_iterator_base::_M_reset () [inherited]
       Reset all member variables

   bool __gnu_debug::_Safe_iterator_base::_M_singular () const [inherited]
       Is this iterator singular?

       Referenced by __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category >::_Safe_iterator(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_Safe_local_iterator(),
       __gnu_debug::__check_singular_aux(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category >::_M_dereferenceable(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence
       >::_M_dereferenceable(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category >::_M_incrementable(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_incrementable(), and
       __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

   void __gnu_debug::_Safe_iterator_base::_M_unlink () [inline],  [inherited]
       Unlink itself

       Definition at line 155 of file safe_base.h.

       References __gnu_debug::_Safe_iterator_base::_M_next, and __gnu_debug::_Safe_iterator_base::_M_prior.

   template<typename _Iterator , typename _Sequence > bool __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_valid_range (const _Safe_local_iterator< _Iterator, _Sequence > & __rhs,
       std::pair< difference_type, _Distance_precision > & __dist_info) const
       Definition at line 77 of file safe_local_iterator.tcc.

   template<typename _Iterator , typename _Sequence > static constexpr bool __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_S_constant () [inline],  [static],  [constexpr]
       Determine if this is a constant iterator.

       Definition at line 302 of file safe_local_iterator.h.

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_attach(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_attach_single().

   template<typename _Iterator , typename _Sequence > const _Iterator & __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::base () const [inline],  [noexcept]
       Definition at line 312 of file safe_local_iterator.h.

   template<typename _Iterator , typename _Sequence > _Iterator & __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::base () [inline],  [noexcept]
       Return the underlying iterator.

       Definition at line 309 of file safe_local_iterator.h.

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_Safe_local_iterator(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_is_begin(),
       __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_is_end(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::bucket(), __gnu_debug::_Safe_local_iterator< _Iterator,
       _Sequence >::operator*(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator++(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator->(), and
       __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

   template<typename _Iterator , typename _Sequence > size_type __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::bucket () const [inline]
       Return the bucket.

       Definition at line 318 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::base().

       Referenced by __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_in_same_bucket(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_is_begin(), and
       __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_is_end().

   template<typename _Iterator , typename _Sequence > __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator _Iterator () const [inline]
       Conversion to underlying non-debug iterator to allow better interaction with non-debug containers.

       Definition at line 324 of file safe_local_iterator.h.

   template<typename _Iterator , typename _Sequence > reference __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator* () const [inline]
       Iterator dereference.

       Precondition
           iterator is dereferenceable

       Definition at line 246 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_dereferenceable(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::base().

   template<typename _Iterator , typename _Sequence > _Safe_local_iterator & __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator++ () [inline]
       Iterator preincrement.

       Precondition
           iterator is incrementable

       Definition at line 273 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_iterator_base::_M_get_mutex(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_incrementable(), and __gnu_debug::_Safe_local_iterator< _Iterator,
       _Sequence >::base().

   template<typename _Iterator , typename _Sequence > _Safe_local_iterator __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator++ (int) [inline]
       Iterator postincrement.

       Precondition
           iterator is incrementable

       Definition at line 288 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_Safe_local_iterator(), __gnu_debug::_Safe_iterator_base::_M_get_mutex(), __gnu_debug::_Safe_local_iterator< _Iterator,
       _Sequence >::_M_incrementable(), __gnu_debug::_Safe_iterator_base::_M_sequence, and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::base().

   template<typename _Iterator , typename _Sequence > pointer __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator-> () const [inline]
       Iterator dereference.

       Precondition
           iterator is dereferenceable

       Definition at line 259 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_dereferenceable(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::base().

   template<typename _Iterator , typename _Sequence > _Safe_local_iterator & __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator= (_Safe_local_iterator< _Iterator, _Sequence > && __x)
       [inline],  [noexcept]
       Move assignment.

       Postcondition
           __x is singular and unattached

       Definition at line 212 of file safe_local_iterator.h.

       References std::__addressof(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_attach(), __gnu_debug::_Safe_local_iterator_base::_M_detach(),
       __gnu_debug::_Safe_iterator_base::_M_get_mutex(), __gnu_debug::_Safe_iterator_base::_M_sequence, __gnu_debug::_Safe_iterator_base::_M_version, and __gnu_debug::_Safe_local_iterator< _Iterator,
       _Sequence >::base().

   template<typename _Iterator , typename _Sequence > _Safe_local_iterator & __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator= (const _Safe_local_iterator< _Iterator, _Sequence > &
       __x) [inline]
       Copy assignment.

       Definition at line 181 of file safe_local_iterator.h.

       References __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::_M_attach(), __gnu_debug::_Safe_local_iterator_base::_M_detach(), __gnu_debug::_Safe_iterator_base::_M_get_mutex(),
       __gnu_debug::_Safe_iterator_base::_M_sequence, __gnu_debug::_Safe_iterator_base::_M_singular(), __gnu_debug::_Safe_iterator_base::_M_version, __gnu_debug::_Safe_sequence_base::_M_version, and
       __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::base().

Friends And Related Function Documentation
   template<typename _Iterator , typename _Sequence > bool operator!= (const _Self & __lhs, const _OtherSelf & __rhs) [friend]
       Definition at line 392 of file safe_local_iterator.h.

   template<typename _Iterator , typename _Sequence > bool operator!= (const _Self & __lhs, const _Self & __rhs) [friend]
       Definition at line 399 of file safe_local_iterator.h.

   template<typename _Iterator , typename _Sequence > bool operator== (const _Self & __lhs, const _OtherSelf & __rhs) [friend]
       Definition at line 378 of file safe_local_iterator.h.

   template<typename _Iterator , typename _Sequence > bool operator== (const _Self & __lhs, const _Self & __rhs) [friend]
       Definition at line 385 of file safe_local_iterator.h.

Member Data Documentation
   _Safe_iterator_base* __gnu_debug::_Safe_iterator_base::_M_next [inherited]
       Pointer to the next iterator in the sequence's list of iterators. Only valid when _M_sequence != NULL.

       Definition at line 74 of file safe_base.h.

       Referenced by __gnu_debug::_Safe_sequence< _SafeSequence >::_M_invalidate_if(), __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_from_if(), and __gnu_debug::_Safe_iterator_base::_M_unlink().

   _Safe_iterator_base* __gnu_debug::_Safe_iterator_base::_M_prior [inherited]
       Pointer to the previous iterator in the sequence's list of iterators. Only valid when _M_sequence != NULL.

       Definition at line 70 of file safe_base.h.

       Referenced by __gnu_debug::_Safe_sequence< _SafeSequence >::_M_invalidate_if(), __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_from_if(), and __gnu_debug::_Safe_iterator_base::_M_unlink().

   _Safe_sequence_base* __gnu_debug::_Safe_iterator_base::_M_sequence [inherited]
       The sequence this iterator references; may be NULL to indicate a singular iterator.

       Definition at line 57 of file safe_base.h.

       Referenced by __gnu_debug::_Safe_iterator_base::_Safe_iterator_base(), __gnu_debug::_Safe_local_iterator_base::_Safe_local_iterator_base(), __gnu_debug::_Safe_iterator_base::_M_attached_to(),
       __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_from_if(), __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator++(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence,
       _Category >::operator++(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category >::operator=(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

   unsigned int __gnu_debug::_Safe_iterator_base::_M_version [inherited]
       The version number of this iterator. The sentinel value 0 is used to indicate an invalidated iterator (i.e., one that is singular because of an operation on the container). This version number
       must equal the version number in the sequence referenced by _M_sequence for the iterator to be non-singular.

       Definition at line 66 of file safe_base.h.

       Referenced by __gnu_debug::_Safe_iterator_base::_M_invalidate(), __gnu_debug::_Safe_sequence< _Sequence >::_M_transfer_from_if(), __gnu_debug::_Safe_iterator< _Iterator, _Sequence, _Category
       >::operator=(), and __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >::operator=().

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                                                                                     Wed Feb 1 2023                                  __gnu_debug::_Safe_local_iterator< _Iterator, _Sequence >(3)
