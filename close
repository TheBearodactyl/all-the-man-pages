close(n)                                                                                   Tcl Built-In Commands                                                                                  close(n)

__________________________________________________________________________________________________________________________________________________________________________________________________________

NAME
       close - Close an open channel

SYNOPSIS
       close channelId ?r(ead)|w(rite)?
__________________________________________________________________________________________________________________________________________________________________________________________________________

DESCRIPTION
       Closes or half-closes the channel given by channelId.

       ChannelId  must  be  an identifier for an open channel such as a Tcl standard channel (stdin, stdout, or stderr), the return value from an invocation of open or socket, or the result of a channel
       creation command provided by a Tcl extension.

       The single-argument form is a simple “full-close”: all buffered output is flushed to the channel's output device, any buffered input is discarded, the underlying file or  device  is  closed,  and
       channelId becomes unavailable for use.

       If the channel is blocking, the command does not return until all output is flushed.  If the channel is nonblocking and there is unflushed output, the channel remains open and the command returns
       immediately; output will be flushed in the background and the channel will be closed when all the flushing is complete.

       If channelId is a blocking channel for a command pipeline then close waits for the child processes to complete.

       If the channel is shared between interpreters, then close makes channelId unavailable in the invoking interpreter but has no other effect until all of the sharing  interpreters  have  closed  the
       channel.  When the last interpreter in which the channel is registered invokes close, the cleanup actions described above occur. See the interp command for a description of channel sharing.

       Channels  are  automatically closed when an interpreter is destroyed and when the process exits.  From 8.6 on (TIP#398), nonblocking channels are no longer switched to blocking mode when exiting; │
       this guarantees a timely exit even when the peer or a communication channel is stalled. To ensure proper flushing of stalled nonblocking channels on exit, one must now either (a) actively  switch │
       them back to blocking or (b) use the environment variable TCL_FLUSH_NONBLOCKING_ON_EXIT,  which when set and not equal to "0" restores the previous behavior.

       The command returns an empty string, and may generate an error if an error occurs while flushing output.  If a command in a command pipeline created with open returns an error, close generates an
       error (similar to the exec command.)

       The two-argument form is a “half-close”: given a bidirectional channel like a socket or command pipeline and a (possibly abbreviated) direction, it closes only the sub-stream going in that direc‐ │
       tion.  This  means a shutdown() on a socket, and a close() of one end of a pipe for a command pipeline. Then, the Tcl-level channel data structure is either kept or freed depending on whether the │
       other direction is still open.                                                                                                                                                                      │

       A single-argument close on an already half-closed bidirectional channel is defined to just “finish the job”.  A half-close on an already closed half, or on a wrong-sided  unidirectional  channel, │
       raises an error.                                                                                                                                                                                    │

       In the case of a command pipeline, the child-reaping duty falls upon the shoulders of the last close or half-close, which is thus allowed to report an abnormal exit error.                         │

       Currently only sockets and command pipelines support half-close. A future extension will allow reflected and stacked channels to do so.

EXAMPLE
       This illustrates how you can use Tcl to ensure that files get closed even when errors happen by combining catch, close and return:

              proc withOpenFile {filename channelVar script} {
                  upvar 1 $channelVar chan
                  set chan [open $filename]
                  catch {
                      uplevel 1 $script
                  } result options
                  close $chan
                  return -options $options $result
              }

SEE ALSO
       file(n), open(n), socket(n), eof(n), Tcl_StandardChannels(3)

KEYWORDS
       blocking, channel, close, nonblocking, half-close

Tcl                                                                                                 7.5                                                                                           close(n)
CLOSE(3P)                                                                                POSIX Programmer's Manual                                                                               CLOSE(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       close — close a file descriptor

SYNOPSIS
       #include <unistd.h>

       int close(int fildes);

DESCRIPTION
       The close() function shall deallocate the file descriptor indicated by fildes.  To deallocate means to make the file descriptor available for return by subsequent calls to open() or  other  func‐
       tions that allocate file descriptors. All outstanding record locks owned by the process on the file associated with the file descriptor shall be removed (that is, unlocked).

       If  close()  is  interrupted  by a signal that is to be caught, it shall return -1 with errno set to [EINTR] and the state of fildes is unspecified. If an I/O error occurred while reading from or
       writing to the file system during close(), it may return -1 with errno set to [EIO]; if this error is returned, the state of fildes is unspecified.

       When all file descriptors associated with a pipe or FIFO special file are closed, any data remaining in the pipe or FIFO shall be discarded.

       When all file descriptors associated with an open file description have been closed, the open file description shall be freed.

       If the link count of the file is 0, when all file descriptors associated with the file are closed, the space occupied by the file shall be freed and the file shall no longer be accessible.

       If a STREAMS-based fildes is closed and the calling process was previously registered to receive a SIGPOLL signal for events associated with that STREAM, the calling process shall be unregistered
       for events associated with the STREAM. The last close() for a STREAM shall cause the STREAM associated with fildes to be dismantled. If O_NONBLOCK is not set and there have been no signals posted
       for the STREAM, and if there is data on the module's write queue, close() shall wait for an unspecified time (for each module and driver) for any output to drain before  dismantling  the  STREAM.
       The time delay can be changed via an I_SETCLTIME ioctl() request. If the O_NONBLOCK flag is set, or if there are any pending signals, close() shall not wait for output to drain, and shall disman‐
       tle the STREAM immediately.

       If the implementation supports STREAMS-based pipes, and fildes is associated with one end of a pipe, the last close() shall cause a hangup to occur on the other end of the pipe. In  addition,  if
       the  other end of the pipe has been named by fattach(), then the last close() shall force the named end to be detached by fdetach().  If the named end has no open file descriptors associated with
       it and gets detached, the STREAM associated with that end shall also be dismantled.

       If fildes refers to the master side of a pseudo-terminal, and this is the last close, a SIGHUP signal shall be sent to the controlling process, if any, for which the slave side of the pseudo-ter‐
       minal is the controlling terminal. It is unspecified whether closing the master side of the pseudo-terminal flushes all queued input and output.

       If fildes refers to the slave side of a STREAMS-based pseudo-terminal, a zero-length message may be sent to the master.

       When there is an outstanding cancelable asynchronous I/O operation against fildes when close() is called, that I/O operation may be canceled. An I/O operation that is not canceled completes as if
       the close() operation had not yet occurred. All operations that are not canceled shall complete as if the close() blocked until the operations completed. The close()  operation  itself  need  not
       block awaiting such I/O completion. Whether any I/O operation is canceled, and which I/O operation may be canceled upon close(), is implementation-defined.

       If  a  memory  mapped file or a shared memory object remains referenced at the last close (that is, a process has it mapped), then the entire contents of the memory object shall persist until the
       memory object becomes unreferenced.  If this is the last close of a memory mapped file or a shared memory object and the close results in the memory object becoming unreferenced, and  the  memory
       object has been unlinked, then the memory object shall be removed.

       If  fildes  refers  to a socket, close() shall cause the socket to be destroyed. If the socket is in connection-mode, and the SO_LINGER option is set for the socket with non-zero linger time, and
       the socket has untransmitted data, then close() shall block for up to the current linger interval until all data is transmitted.

RETURN VALUE
       Upon successful completion, 0 shall be returned; otherwise, -1 shall be returned and errno set to indicate the error.

ERRORS
       The close() function shall fail if:

       EBADF  The fildes argument is not a open file descriptor.

       EINTR  The close() function was interrupted by a signal.

       The close() function may fail if:

       EIO    An I/O error occurred while reading from or writing to the file system.

       The following sections are informative.

EXAMPLES
   Reassigning a File Descriptor
       The following example closes the file descriptor associated with standard output for the current process, re-assigns standard output to a new file descriptor, and closes  the  original  file  de‐
       scriptor to clean up. This example assumes that the file descriptor 0 (which is the descriptor for standard input) is not closed.

           #include <unistd.h>
           ...
           int pfd;
           ...
           close(1);
           dup(pfd);
           close(pfd);
           ...

       Incidentally, this is exactly what could be achieved using:

           dup2(pfd, 1);
           close(pfd);

   Closing a File Descriptor
       In the following example, close() is used to close a file descriptor after an unsuccessful attempt is made to associate that file descriptor with a stream.

           #include <stdio.h>
           #include <unistd.h>
           #include <stdlib.h>

           #define LOCKFILE "/etc/ptmp"
           ...
           int pfd;
           FILE *fpfd;
           ...
           if ((fpfd = fdopen (pfd, "w")) == NULL) {
               close(pfd);
               unlink(LOCKFILE);
               exit(1);
           }
           ...

APPLICATION USAGE
       An  application that had used the stdio routine fopen() to open a file should use the corresponding fclose() routine rather than close().  Once a file is closed, the file descriptor no longer ex‐
       ists, since the integer corresponding to it no longer refers to a file.

       Implementations may use file descriptors that must be inherited into child processes for the child process to remain conforming, such as for message catalog or tracing purposes. Therefore, an ap‐
       plication  that  calls close() on an arbitrary integer risks non-conforming behavior, and close() can only portably be used on file descriptor values that the application has obtained through ex‐
       plicit actions, as well as the three file descriptors corresponding to the standard file streams. In multi-threaded parent applications, the practice of calling close() in a loop after fork() and
       before  an exec call in order to avoid a race condition of leaking an unintended file descriptor into a child process, is therefore unsafe, and the race should instead be combatted by opening all
       file descriptors with the FD_CLOEXEC bit set unless the file descriptor is intended to be inherited across exec.

       Usage of close() on file descriptors STDIN_FILENO, STDOUT_FILENO, or STDERR_FILENO should immediately be followed by an operation to reopen these file descriptors. Unexpected behavior will result
       if  any of these file descriptors is left in a closed state (for example, an [EBADF] error from perror()) or if an unrelated open() or similar call later in the application accidentally allocates
       a file to one of these well-known file descriptors. Furthermore, a close() followed by a reopen operation (e.g., open(), dup(), etc.) is not atomic; dup2() should be used to change standard  file
       descriptors.

RATIONALE
       The  use  of interruptible device close routines should be discouraged to avoid problems with the implicit closes of file descriptors by exec and exit().  This volume of POSIX.1‐2017 only intends
       to permit such behavior by specifying the [EINTR] error condition.

       Note that the requirement for close() on a socket to block for up to the current linger interval is not conditional on the O_NONBLOCK setting.

       The standard developers rejected a proposal to add closefrom() to the standard. Because the standard permits implementations to use inherited file descriptors as a means of providing a conforming
       environment for the child process, it is not possible to standardize an interface that closes arbitrary file descriptors above a certain value while still guaranteeing a conforming environment.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.6, STREAMS, dup(), exec, exit(), fattach(), fclose(), fdetach(), fopen(), fork(), ioctl(), open(), perror(), unlink()

       The Base Definitions volume of POSIX.1‐2017, <unistd.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          CLOSE(3P)
close(2)                                                                                    System Calls Manual                                                                                   close(2)

NAME
       close - close a file descriptor

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <unistd.h>

       int close(int fd);

DESCRIPTION
       close()  closes  a  file descriptor, so that it no longer refers to any file and may be reused.  Any record locks (see fcntl(2)) held on the file it was associated with, and owned by the process,
       are removed (regardless of the file descriptor that was used to obtain the lock).

       If fd is the last file descriptor referring to the underlying open file description (see open(2)), the resources associated with the open file description are freed; if the  file  descriptor  was
       the last reference to a file which has been removed using unlink(2), the file is deleted.

RETURN VALUE
       close() returns zero on success.  On error, -1 is returned, and errno is set to indicate the error.

ERRORS
       EBADF  fd isn't a valid open file descriptor.

       EINTR  The close() call was interrupted by a signal; see signal(7).

       EIO    An I/O error occurred.

       ENOSPC, EDQUOT
              On NFS, these errors are not normally reported against the first write which exceeds the available storage space, but instead against a subsequent write(2), fsync(2), or close().

       See NOTES for a discussion of why close() should not be retried after an error.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001, SVr4, 4.3BSD.

NOTES
       A  successful  close does not guarantee that the data has been successfully saved to disk, as the kernel uses the buffer cache to defer writes.  Typically, filesystems do not flush buffers when a
       file is closed.  If you need to be sure that the data is physically stored on the underlying disk, use fsync(2).  (It will depend on the disk hardware at this point.)

       The close-on-exec file descriptor flag can be used to ensure that a file descriptor is automatically closed upon a successful execve(2); see fcntl(2) for details.

   Multithreaded processes and close()
       It is probably unwise to close file descriptors while they may be in use by system calls in other threads in the same process.  Since a file descriptor may be reused, there are some obscure  race
       conditions that may cause unintended side effects.

       Furthermore, consider the following scenario where two threads are performing operations on the same file descriptor:

       (1)  One  thread  is  blocked  in an I/O system call on the file descriptor.  For example, it is trying to write(2) to a pipe that is already full, or trying to read(2) from a stream socket which
            currently has no available data.

       (2)  Another thread closes the file descriptor.

       The behavior in this situation varies across systems.  On some systems, when the file descriptor is closed, the blocking system call returns immediately with an error.

       On Linux (and possibly some other systems), the behavior is different: the blocking I/O system call holds a reference to the underlying open file description, and this  reference  keeps  the  de‐
       scription  open until the I/O system call completes.  (See open(2) for a discussion of open file descriptions.)  Thus, the blocking system call in the first thread may successfully complete after
       the close() in the second thread.

   Dealing with error returns from close()
       A careful programmer will check the return value of close(), since it is quite possible that errors on a previous write(2) operation are reported only on the final close() that releases the  open
       file description.  Failing to check the return value when closing a file may lead to silent loss of data.  This can especially be observed with NFS and with disk quota.

       Note,  however, that a failure return should be used only for diagnostic purposes (i.e., a warning to the application that there may still be I/O pending or there may have been failed I/O) or re‐
       medial purposes (e.g., writing the file once more or creating a backup).

       Retrying the close() after a failure return is the wrong thing to do, since this may cause a reused file descriptor from another thread to be closed.  This can occur because the Linux kernel  al‐
       ways  releases  the  file descriptor early in the close operation, freeing it for reuse; the steps that may return an error, such as flushing data to the filesystem or device, occur only later in
       the close operation.

       Many other implementations similarly always close the file descriptor (except in the case of EBADF, meaning that the file descriptor was invalid) even if they subsequently report an error on  re‐
       turn from close().  POSIX.1 is currently silent on this point, but there are plans to mandate this behavior in the next major release of the standard.

       A careful programmer who wants to know about I/O errors may precede close() with a call to fsync(2).

       The EINTR error is a somewhat special case.  Regarding the EINTR error, POSIX.1-2008 says:

              If close() is interrupted by a signal that is to be caught, it shall return -1 with errno set to EINTR and the state of fildes is unspecified.

       This  permits  the behavior that occurs on Linux and many other implementations, where, as with other errors that may be reported by close(), the file descriptor is guaranteed to be closed.  How‐
       ever, it also permits another possibility: that the implementation returns an EINTR error and keeps the file descriptor open.  (According to its documentation, HP-UX's close()  does  this.)   The
       caller must then once more use close() to close the file descriptor, to avoid file descriptor leaks.  This divergence in implementation behaviors provides a difficult hurdle for portable applica‐
       tions, since on many implementations, close() must not be called again after an EINTR error, and on at least one, close() must be called again.  There are plans to address this conundrum for  the
       next major release of the POSIX.1 standard.

SEE ALSO
       close_range(2), fcntl(2), fsync(2), open(2), shutdown(2), unlink(2), fclose(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        close(2)
