aio_read(3)                                                                              Library Functions Manual                                                                              aio_read(3)

NAME
       aio_read - asynchronous read

LIBRARY
       Real-time library (librt, -lrt)

SYNOPSIS
       #include <aio.h>

       int aio_read(struct aiocb *aiocbp);

DESCRIPTION
       The aio_read() function queues the I/O request described by the buffer pointed to by aiocbp.  This function is the asynchronous analog of read(2).  The arguments of the call

           read(fd, buf, count)

       correspond (in order) to the fields aio_fildes, aio_buf, and aio_nbytes of the structure pointed to by aiocbp.  (See aio(7) for a description of the aiocb structure.)

       The data is read starting at the absolute position aiocbp->aio_offset, regardless of the file offset.  After the call, the value of the file offset is unspecified.

       The  "asynchronous"  means  that  this call returns as soon as the request has been enqueued; the read may or may not have completed when the call returns.  One tests for completion using aio_er‐
       ror(3).  The return status of a completed I/O operation can be obtained by aio_return(3).  Asynchronous notification of I/O completion can be obtained by  setting  aiocbp->aio_sigevent  appropri‐
       ately; see sigevent(7) for details.

       If _POSIX_PRIORITIZED_IO is defined, and this file supports it, then the asynchronous operation is submitted at a priority equal to that of the calling process minus aiocbp->aio_reqprio.

       The field aiocbp->aio_lio_opcode is ignored.

       No data is read from a regular file beyond its maximum offset.

RETURN VALUE
       On  success,  0  is  returned.  On error, the request is not enqueued, -1 is returned, and errno is set to indicate the error.  If an error is detected only later, it will be reported via aio_re‐
       turn(3) (returns status -1) and aio_error(3) (error status—whatever one would have gotten in errno, such as EBADF).

ERRORS
       EAGAIN Out of resources.

       EBADF  aio_fildes is not a valid file descriptor open for reading.

       EINVAL One or more of aio_offset, aio_reqprio, or aio_nbytes are invalid.

       ENOSYS aio_read() is not implemented.

       EOVERFLOW
              The file is a regular file, we start reading before end-of-file and want at least one byte, but the starting position is past the maximum offset for this file.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │aio_read()                                                                                                                                                              │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       glibc 2.1.  POSIX.1-2001.

NOTES
       It is a good idea to zero out the control block before use.  The control block must not be changed while the read operation is in progress.  The buffer area being read into must not  be  accessed
       during the operation or undefined results may occur.  The memory areas involved must remain valid.

       Simultaneous I/O operations specifying the same aiocb structure produce undefined results.

EXAMPLES
       See aio(7).

SEE ALSO
       aio_cancel(3), aio_error(3), aio_fsync(3), aio_return(3), aio_suspend(3), aio_write(3), lio_listio(3), aio(7)

Linux man-pages 6.04                                                                            2023-03-30                                                                                     aio_read(3)
AIO_READ(3P)                                                                             POSIX Programmer's Manual                                                                            AIO_READ(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       aio_read — asynchronous read from a file

SYNOPSIS
       #include <aio.h>

       int aio_read(struct aiocb *aiocbp);

DESCRIPTION
       The aio_read() function shall read aiocbp->aio_nbytes from the file associated with aiocbp->aio_fildes into the buffer pointed to by aiocbp->aio_buf. The function call shall return when the  read
       request has been initiated or queued to the file or device (even when the data cannot be delivered immediately).

       If  prioritized I/O is supported for this file, then the asynchronous operation shall be submitted at a priority equal to a base scheduling priority minus aiocbp->aio_reqprio. If Thread Execution
       Scheduling is not supported, then the base scheduling priority is that of the calling process;
       otherwise, the base scheduling priority is that of the calling thread.

       The aiocbp value may be used as an argument to aio_error() and aio_return() in order to determine the error status and return status, respectively, of the asynchronous operation while it is  pro‐
       ceeding.  If  an  error condition is encountered during queuing, the function call shall return without having initiated or queued the request. The requested operation takes place at the absolute
       position in the file as given by aio_offset, as if lseek() were called immediately prior to the operation with an offset equal to aio_offset and a whence equal to SEEK_SET.   After  a  successful
       call to enqueue an asynchronous I/O operation, the value of the file offset for the file is unspecified.

       The aio_sigevent member specifies the notification which occurs when the request is completed.

       The aiocbp->aio_lio_opcode field shall be ignored by aio_read().

       The  aiocbp  argument points to an aiocb structure. If the buffer pointed to by aiocbp->aio_buf or the control block pointed to by aiocbp becomes an illegal address prior to asynchronous I/O com‐
       pletion, then the behavior is undefined.

       Simultaneous asynchronous operations using the same aiocbp produce undefined results.

       If synchronized I/O is enabled on the file associated with aiocbp->aio_fildes, the behavior of this function shall be according to the definitions of synchronized I/O  data  integrity  completion
       and synchronized I/O file integrity completion.

       For any system action that changes the process memory space while an asynchronous I/O is outstanding to the address range being changed, the result of that action is undefined.

       For regular files, no data transfer shall occur past the offset maximum established in the open file description associated with aiocbp->aio_fildes.

RETURN VALUE
       The aio_read() function shall return the value zero if the I/O operation is successfully queued; otherwise, the function shall return the value -1 and set errno to indicate the error.

ERRORS
       The aio_read() function shall fail if:

       EAGAIN The requested asynchronous I/O operation was not queued due to system resource limitations.

       Each  of the following conditions may be detected synchronously at the time of the call to aio_read(), or asynchronously. If any of the conditions below are detected synchronously, the aio_read()
       function shall return -1 and set errno to the corresponding value. If any of the conditions below are detected asynchronously, the return status of the asynchronous operation is set  to  -1,  and
       the error status of the asynchronous operation is set to the corresponding value.

       EBADF  The aiocbp->aio_fildes argument is not a valid file descriptor open for reading.

       EINVAL The file offset value implied by aiocbp->aio_offset would be invalid,
              aiocbp->aio_reqprio is not a valid value, or aiocbp->aio_nbytes is an invalid value.

       In  the case that the aio_read() successfully queues the I/O operation but the operation is subsequently canceled or encounters an error, the return status of the asynchronous operation is one of
       the values normally returned by the read() function call. In addition, the error status of the asynchronous operation is set to one of the error statuses normally set by the read() function call,
       or one of the following values:

       EBADF  The aiocbp->aio_fildes argument is not a valid file descriptor open for reading.

       ECANCELED
              The requested I/O was canceled before the I/O completed due to an explicit aio_cancel() request.

       EINVAL The file offset value implied by aiocbp->aio_offset would be invalid.

       The following condition may be detected synchronously or asynchronously:

       EOVERFLOW
              The file is a regular file, aiobcp->aio_nbytes is greater than 0, and the starting offset in aiobcp->aio_offset is before the end-of-file and is at or beyond the offset maximum in the open
              file description associated with aiocbp->aio_fildes.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       aio_cancel(), aio_error(), lio_listio(), aio_return(), aio_write(), close(), exec, exit(), fork(), lseek(), read()

       The Base Definitions volume of POSIX.1‐2017, <aio.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                       AIO_READ(3P)
