std::queue< _Tp, _Sequence Library Functions Mastd::queue< _Tp, _Sequence >(3)

NAME
       std::queue< _Tp, _Sequence > - A standard container giving FIFO
       behavior.

SYNOPSIS
       #include <queue>

   Public Types
       typedef _Sequence::const_reference const_reference
       typedef _Sequence container_type
       typedef _Sequence::reference reference
       typedef _Sequence::size_type size_type
       typedef _Sequence::value_type value_type

   Public Member Functions
       template<typename _Seq  = _Sequence, typename _Requires  = typename
           enable_if<is_default_constructible<_Seq>::value>::type> queue ()
           Default constructor creates no elements.
       queue (_Sequence &&__c)
       template<typename _Alloc , typename _Requires  = _Uses<_Alloc>> queue
           (_Sequence &&__c, const _Alloc &__a)
       template<typename _Alloc , typename _Requires  = _Uses<_Alloc>> queue
           (const _Alloc &__a)
       queue (const _Sequence &__c)
       template<typename _Alloc , typename _Requires  = _Uses<_Alloc>> queue
           (const _Sequence &__c, const _Alloc &__a)
       template<typename _Alloc , typename _Requires  = _Uses<_Alloc>> queue
           (const queue &__q, const _Alloc &__a)
       template<typename _Alloc , typename _Requires  = _Uses<_Alloc>> queue
           (queue &&__q, const _Alloc &__a)
       reference back ()
       const_reference back () const
       template<typename... _Args> decltype(auto) emplace (_Args &&... __args)
       bool empty () const
       reference front ()
       const_reference front () const
       void pop ()
           Removes first element.
       void push (const value_type &__x)
           Add data to the end of the queue.
       void push (value_type &&__x)
       size_type size () const
       void swap (queue &__q) noexcept(__is_nothrow_swappable< _Sequence
           >::value)

   Protected Attributes
       _Sequence c
           c is the underlying container.

   Friends
       template<typename _Tp1 , typename _Seq1 > bool operator< (const queue<
           _Tp1, _Seq1 > &, const queue< _Tp1, _Seq1 > &)
       template<typename _Tp1 , typename _Seq1 > bool operator== (const queue<
           _Tp1, _Seq1 > &, const queue< _Tp1, _Seq1 > &)

Detailed Description
   template<typename _Tp, typename _Sequence = deque<_Tp>>
       class std::queue< _Tp, _Sequence >"A standard container giving FIFO
       behavior.

       Template Parameters
           _Tp Type of element.
           _Sequence Type of underlying sequence, defaults to deque<_Tp>.

       Meets many of the requirements of a container, but does not define
       anything to do with iterators. Very few of the other standard container
       interfaces are defined.

       This is not a true container, but an adaptor. It holds another
       container, and provides a wrapper interface to that container. The
       wrapper is what enforces strict first-in-first-out queue behavior.

       The second template parameter defines the type of the underlying
       sequence/container. It defaults to std::deque, but it can be any type
       that supports front, back, push_back, and pop_front, such as std::list
       or an appropriate user-defined type.

       Members not found in normal containers are container_type, which is a
       typedef for the second Sequence parameter, and push and pop, which are
       standard queue/FIFO operations.

       Definition at line 96 of file queue.

Member Typedef Documentation
   template<typename _Tp , typename _Sequence  = deque<_Tp>> typedef
       _Sequence::const_reference std::queue< _Tp, _Sequence
       >::const_reference
       Definition at line 140 of file queue.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> typedef _Sequence
       std::queue< _Tp, _Sequence >::container_type
       Definition at line 142 of file queue.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> typedef
       _Sequence::reference std::queue< _Tp, _Sequence >::reference
       Definition at line 139 of file queue.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> typedef
       _Sequence::size_type std::queue< _Tp, _Sequence >::size_type
       Definition at line 141 of file queue.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> typedef
       _Sequence::value_type std::queue< _Tp, _Sequence >::value_type
       Definition at line 138 of file queue.

Constructor & Destructor Documentation
   template<typename _Tp , typename _Sequence  = deque<_Tp>> template<typename
       _Seq  = _Sequence, typename _Requires  = typename
       enable_if<is_default_constructible<_Seq>::value>::type> std::queue<
       _Tp, _Sequence >::queue () [inline]
       Default constructor creates no elements.

       Definition at line 166 of file queue.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> std::queue< _Tp,
       _Sequence >::queue (const _Sequence & __c) [inline],  [explicit]
       Definition at line 170 of file queue.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> std::queue< _Tp,
       _Sequence >::queue (_Sequence && __c) [inline],  [explicit]
       Definition at line 174 of file queue.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> template<typename
       _Alloc , typename _Requires  = _Uses<_Alloc>> std::queue< _Tp,
       _Sequence >::queue (const _Alloc & __a) [inline],  [explicit]
       Definition at line 179 of file queue.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> template<typename
       _Alloc , typename _Requires  = _Uses<_Alloc>> std::queue< _Tp,
       _Sequence >::queue (const _Sequence & __c, const _Alloc & __a) [inline]
       Definition at line 183 of file queue.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> template<typename
       _Alloc , typename _Requires  = _Uses<_Alloc>> std::queue< _Tp,
       _Sequence >::queue (_Sequence && __c, const _Alloc & __a) [inline]
       Definition at line 187 of file queue.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> template<typename
       _Alloc , typename _Requires  = _Uses<_Alloc>> std::queue< _Tp,
       _Sequence >::queue (const queue< _Tp, _Sequence > & __q, const _Alloc &
       __a) [inline]
       Definition at line 191 of file queue.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> template<typename
       _Alloc , typename _Requires  = _Uses<_Alloc>> std::queue< _Tp,
       _Sequence >::queue (queue< _Tp, _Sequence > && __q, const _Alloc & __a)
       [inline]
       Definition at line 195 of file queue.

Member Function Documentation
   template<typename _Tp , typename _Sequence  = deque<_Tp>> reference
       std::queue< _Tp, _Sequence >::back () [inline]
       Returns a read/write reference to the data at the last element of the
       queue.

       Definition at line 257 of file queue.

       References std::queue< _Tp, _Sequence >::c.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> const_reference
       std::queue< _Tp, _Sequence >::back () const [inline]
       Returns a read-only (constant) reference to the data at the last
       element of the queue.

       Definition at line 269 of file queue.

       References std::queue< _Tp, _Sequence >::c.

   template<typename _Tp , typename _Sequence  = deque<_Tp>>
       template<typename... _Args> decltype(auto) std::queue< _Tp, _Sequence
       >::emplace (_Args &&... __args) [inline]
       Definition at line 296 of file queue.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> bool std::queue<
       _Tp, _Sequence >::empty () const [inline]
       Returns true if the queue is empty.

       Definition at line 218 of file queue.

       References std::queue< _Tp, _Sequence >::c.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> reference
       std::queue< _Tp, _Sequence >::front () [inline]
       Returns a read/write reference to the data at the first element of the
       queue.

       Definition at line 233 of file queue.

       References std::queue< _Tp, _Sequence >::c.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> const_reference
       std::queue< _Tp, _Sequence >::front () const [inline]
       Returns a read-only (constant) reference to the data at the first
       element of the queue.

       Definition at line 245 of file queue.

       References std::queue< _Tp, _Sequence >::c.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> void std::queue<
       _Tp, _Sequence >::pop () [inline]
       Removes first element. This is a typical queue operation. It shrinks
       the queue by one. The time complexity of the operation depends on the
       underlying sequence.

       Note that no data is returned, and if the first element's data is
       needed, it should be retrieved before pop() is called.

       Definition at line 318 of file queue.

       References std::queue< _Tp, _Sequence >::c.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> void std::queue<
       _Tp, _Sequence >::push (const value_type & __x) [inline]
       Add data to the end of the queue.

       Parameters
           __x Data to be added.

       This is a typical queue operation. The function creates an element at
       the end of the queue and assigns the given data to it. The time
       complexity of the operation depends on the underlying sequence.

       Definition at line 285 of file queue.

       References std::queue< _Tp, _Sequence >::c.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> void std::queue<
       _Tp, _Sequence >::push (value_type && __x) [inline]
       Definition at line 290 of file queue.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> size_type
       std::queue< _Tp, _Sequence >::size () const [inline]
       Returns the number of elements in the queue.

       Definition at line 224 of file queue.

       References std::queue< _Tp, _Sequence >::c.

   template<typename _Tp , typename _Sequence  = deque<_Tp>> void std::queue<
       _Tp, _Sequence >::swap (queue< _Tp, _Sequence > & __q) [inline],
       [noexcept]
       Definition at line 326 of file queue.

Member Data Documentation
   template<typename _Tp , typename _Sequence  = deque<_Tp>> _Sequence
       std::queue< _Tp, _Sequence >::c [protected]
       c is the underlying container.

       Definition at line 153 of file queue.

       Referenced by std::queue< _Tp, _Sequence >::back(), std::queue< _Tp,
       _Sequence >::empty(), std::queue< _Tp, _Sequence >::front(),
       std::operator<(), std::operator==(), std::queue< _Tp, _Sequence
       >::pop(), std::queue< _Tp, _Sequence >::push(), and std::queue< _Tp,
       _Sequence >::size().

Author
       Generated automatically by Doxygen for libstdc++ from the source code.

libstdc++                       Wed Feb 1 2023 std::queue< _Tp, _Sequence >(3)
