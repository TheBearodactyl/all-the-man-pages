statvfs(3)                                                                               Library Functions Manual                                                                               statvfs(3)

NAME
       statvfs, fstatvfs - get filesystem statistics

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <sys/statvfs.h>

       int statvfs(const char *restrict path, struct statvfs *restrict buf);
       int fstatvfs(int fd, struct statvfs *buf);

DESCRIPTION
       The  function  statvfs() returns information about a mounted filesystem.  path is the pathname of any file within the mounted filesystem.  buf is a pointer to a statvfs structure defined approxi‐
       mately as follows:

           struct statvfs {
               unsigned long  f_bsize;    /* Filesystem block size */
               unsigned long  f_frsize;   /* Fragment size */
               fsblkcnt_t     f_blocks;   /* Size of fs in f_frsize units */
               fsblkcnt_t     f_bfree;    /* Number of free blocks */
               fsblkcnt_t     f_bavail;   /* Number of free blocks for
                                             unprivileged users */
               fsfilcnt_t     f_files;    /* Number of inodes */
               fsfilcnt_t     f_ffree;    /* Number of free inodes */
               fsfilcnt_t     f_favail;   /* Number of free inodes for
                                             unprivileged users */
               unsigned long  f_fsid;     /* Filesystem ID */
               unsigned long  f_flag;     /* Mount flags */
               unsigned long  f_namemax;  /* Maximum filename length */
           };

       Here the types fsblkcnt_t and fsfilcnt_t are defined in <sys/types.h>.  Both used to be unsigned long.

       The field f_flag is a bit mask indicating various options that were employed when mounting this filesystem.  It contains zero or more of the following flags:

       ST_MANDLOCK
              Mandatory locking is permitted on the filesystem (see fcntl(2)).

       ST_NOATIME
              Do not update access times; see mount(2).

       ST_NODEV
              Disallow access to device special files on this filesystem.

       ST_NODIRATIME
              Do not update directory access times; see mount(2).

       ST_NOEXEC
              Execution of programs is disallowed on this filesystem.

       ST_NOSUID
              The set-user-ID and set-group-ID bits are ignored by exec(3) for executable files on this filesystem

       ST_RDONLY
              This filesystem is mounted read-only.

       ST_RELATIME
              Update atime relative to mtime/ctime; see mount(2).

       ST_SYNCHRONOUS
              Writes are synched to the filesystem immediately (see the description of O_SYNC in open(2)).

       It is unspecified whether all members of the returned struct have meaningful values on all filesystems.

       fstatvfs() returns the same information about an open file referenced by descriptor fd.

RETURN VALUE
       On success, zero is returned.  On error, -1 is returned, and errno is set to indicate the error.

ERRORS
       EACCES (statvfs()) Search permission is denied for a component of the path prefix of path.  (See also path_resolution(7).)

       EBADF  (fstatvfs()) fd is not a valid open file descriptor.

       EFAULT Buf or path points to an invalid address.

       EINTR  This call was interrupted by a signal; see signal(7).

       EIO    An I/O error occurred while reading from the filesystem.

       ELOOP  (statvfs()) Too many symbolic links were encountered in translating path.

       ENAMETOOLONG
              (statvfs()) path is too long.

       ENOENT (statvfs()) The file referred to by path does not exist.

       ENOMEM Insufficient kernel memory was available.

       ENOSYS The filesystem does not support this call.

       ENOTDIR
              (statvfs()) A component of the path prefix of path is not a directory.

       EOVERFLOW
              Some values were too large to be represented in the returned struct.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │statvfs(), fstatvfs()                                                                                                                                                   │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

VERSIONS
       Only the ST_NOSUID and ST_RDONLY flags of the f_flag field are specified in POSIX.1.  To obtain definitions of the remaining flags, one must define _GNU_SOURCE.

NOTES
       The Linux kernel has system calls statfs(2) and fstatfs(2) to support this library call.

       The glibc implementations of

           pathconf(path, _PC_REC_XFER_ALIGN);
           pathconf(path, _PC_ALLOC_SIZE_MIN);
           pathconf(path, _PC_REC_MIN_XFER_SIZE);

       respectively use the f_frsize, f_frsize, and f_bsize fields returned by a call to statvfs() with the argument path.

STANDARDS
       POSIX.1-2008.

HISTORY
       POSIX.1-2001.

       Before glibc 2.13, statvfs() populated the bits of the f_flag field by scanning the mount options shown in /proc/mounts.  However, starting with Linux 2.6.36, the underlying statfs(2) system call
       provides the necessary information via the f_flags field, and since glibc 2.13, the statvfs() function will use information from that field rather than scanning /proc/mounts.

SEE ALSO
       statfs(2)

Linux man-pages 6.04                                                                            2023-03-30                                                                                      statvfs(3)
FSTATVFS(3P)                                                                             POSIX Programmer's Manual                                                                            FSTATVFS(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       fstatvfs, statvfs — get file system information

SYNOPSIS
       #include <sys/statvfs.h>

       int fstatvfs(int fildes, struct statvfs *buf);
       int statvfs(const char *restrict path, struct statvfs *restrict buf);

DESCRIPTION
       The fstatvfs() function shall obtain information about the file system containing the file referenced by fildes.

       The statvfs() function shall obtain information about the file system containing the file named by path.

       For both functions, the buf argument is a pointer to a statvfs structure that shall be filled. Read, write, or execute permission of the named file is not required.

       The following flags can be returned in the f_flag member:

       ST_RDONLY   Read-only file system.

       ST_NOSUID   Setuid/setgid bits ignored by exec.

       It is unspecified whether all members of the statvfs structure have meaningful values on all file systems.

RETURN VALUE
       Upon successful completion, statvfs() shall return 0. Otherwise, it shall return -1 and set errno to indicate the error.

ERRORS
       The fstatvfs() and statvfs() functions shall fail if:

       EIO    An I/O error occurred while reading the file system.

       EINTR  A signal was caught during execution of the function.

       EOVERFLOW
              One of the values to be returned cannot be represented correctly in the structure pointed to by buf.

       The fstatvfs() function shall fail if:

       EBADF  The fildes argument is not an open file descriptor.

       The statvfs() function shall fail if:

       EACCES Search permission is denied on a component of the path prefix.

       ELOOP  A loop exists in symbolic links encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of a component of a pathname is longer than {NAME_MAX}.

       ENOENT A component of path does not name an existing file or path is an empty string.

       ENOTDIR
              A component of the path prefix names an existing file that is neither a directory nor a symbolic link to a directory, or the path argument contains at least one non-<slash>  character  and
              ends with one or more trailing <slash> characters and the last pathname component names an existing file that is neither a directory nor a symbolic link to a directory.

       The statvfs() function may fail if:

       ELOOP  More than {SYMLOOP_MAX} symbolic links were encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of a pathname exceeds {PATH_MAX}, or pathname resolution of a symbolic link produced an intermediate result with a length that exceeds {PATH_MAX}.

       The following sections are informative.

EXAMPLES
   Obtaining File System Information Using fstatvfs()
       The  following  example shows how to obtain file system information for the file system upon which the file named /home/cnd/mod1 resides, using the fstatvfs() function. The /home/cnd/mod1 file is
       opened with read/write privileges and the open file descriptor is passed to the fstatvfs() function.

           #include <sys/statvfs.h>
           #include <fcntl.h>

           struct statvfs buffer;
           int            status;
           ...
           fildes = open("/home/cnd/mod1", O_RDWR);
           status  = fstatvfs(fildes, &buffer);

   Obtaining File System Information Using statvfs()
       The following example shows how to obtain file system information for the file system upon which the file named /home/cnd/mod1 resides, using the statvfs() function.

           #include <sys/statvfs.h>

           struct statvfs buffer;
           int            status;
           ...
           status = statvfs("/home/cnd/mod1", &buffer);

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       chmod(), chown(), creat(), dup(), exec, fcntl(), link(), mknod(), open(), pipe(), read(), time(), unlink(), utime(), write()

       The Base Definitions volume of POSIX.1‐2017, <sys_statvfs.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                       FSTATVFS(3P)
