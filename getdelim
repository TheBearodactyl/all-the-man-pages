getline(3)                                                                               Library Functions Manual                                                                               getline(3)

NAME
       getline, getdelim - delimited string input

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdio.h>

       ssize_t getline(char **restrict lineptr, size_t *restrict n,
                       FILE *restrict stream);
       ssize_t getdelim(char **restrict lineptr, size_t *restrict n,
                       int delim, FILE *restrict stream);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       getline(), getdelim():
           Since glibc 2.10:
               _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _GNU_SOURCE

DESCRIPTION
       getline()  reads  an  entire  line  from stream, storing the address of the buffer containing the text into *lineptr.  The buffer is null-terminated and includes the newline character, if one was
       found.

       If *lineptr is set to NULL before the call, then getline() will allocate a buffer for storing the line.  This buffer should be freed by the user program even if getline() failed.

       Alternatively, before calling getline(), *lineptr can contain a pointer to a malloc(3)-allocated buffer *n bytes in size.  If the buffer is not large enough to hold the line, getline() resizes it
       with realloc(3), updating *lineptr and *n as necessary.

       In either case, on a successful call, *lineptr and *n will be updated to reflect the buffer address and allocated size respectively.

       getdelim()  works like getline(), except that a line delimiter other than newline can be specified as the delimiter argument.  As with getline(), a delimiter character is not added if one was not
       present in the input before end of file was reached.

RETURN VALUE
       On success, getline() and getdelim() return the number of characters read, including the delimiter character, but not including the terminating null byte ('\0').  This value can be used to handle
       embedded null bytes in the line read.

       Both functions return -1 on failure to read a line (including end-of-file condition).  In the event of a failure, errno is set to indicate the error.

       If *lineptr was set to NULL before the call, then the buffer should be freed by the user program even on failure.

ERRORS
       EINVAL Bad arguments (n or lineptr is NULL, or stream is not valid).

       ENOMEM Allocation or reallocation of the line buffer failed.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │getline(), getdelim()                                                                                                                                                   │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       POSIX.1-2008.

HISTORY
       GNU, POSIX.1-2008.

EXAMPLES
       #define _GNU_SOURCE
       #include <stdio.h>
       #include <stdlib.h>

       int
       main(int argc, char *argv[])
       {
           FILE *stream;
           char *line = NULL;
           size_t len = 0;
           ssize_t nread;

           if (argc != 2) {
               fprintf(stderr, "Usage: %s <file>\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           stream = fopen(argv[1], "r");
           if (stream == NULL) {
               perror("fopen");
               exit(EXIT_FAILURE);
           }

           while ((nread = getline(&line, &len, stream)) != -1) {
               printf("Retrieved line of length %zd:\n", nread);
               fwrite(line, nread, 1, stdout);
           }

           free(line);
           fclose(stream);
           exit(EXIT_SUCCESS);
       }

SEE ALSO
       read(2), fgets(3), fopen(3), fread(3), scanf(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                      getline(3)
GETDELIM(3P)                                                                             POSIX Programmer's Manual                                                                            GETDELIM(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       getdelim, getline — read a delimited record from stream

SYNOPSIS
       #include <stdio.h>

       ssize_t getdelim(char **restrict lineptr, size_t *restrict n,
           int delimiter, FILE *restrict stream);
       ssize_t getline(char **restrict lineptr, size_t *restrict n,
           FILE *restrict stream);

DESCRIPTION
       The getdelim() function shall read from stream until it encounters a character matching the delimiter character. The delimiter argument is an int, the value of which the application shall  ensure
       is a character representable as an unsigned char of equal value that terminates the read process. If the delimiter argument has any other value, the behavior is undefined.

       The  application  shall ensure that *lineptr is a valid argument that could be passed to the free() function. If *n is non-zero, the application shall ensure that *lineptr either points to an ob‐
       ject of size at least *n bytes, or is a null pointer.

       If *lineptr is a null pointer or if the object pointed to by *lineptr is of insufficient size, an object shall be allocated as if by malloc() or the object shall be reallocated  as  if  by  real‐
       loc(),  respectively,  such that the object is large enough to hold the characters to be written to it, including the terminating NUL, and *n shall be set to the new size. If the object was allo‐
       cated, or if the reallocation operation moved the object, *lineptr shall be updated to point to the new object or new location.  The characters read, including any delimiter, shall be  stored  in
       the object, and a terminating NUL added when the delimiter or end-of-file is encountered.

       The getline() function shall be equivalent to the getdelim() function with the delimiter character equal to the <newline> character.

       The  getdelim()  and  getline()  functions  may mark the last data access timestamp of the file associated with stream for update. The last data access timestamp shall be marked for update by the
       first successful execution of fgetc(), fgets(), fread(), fscanf(), getc(), getchar(), getdelim(), getline(), gets(), or scanf() using stream that returns data not supplied  by  a  prior  call  to
       ungetc().

RETURN VALUE
       Upon  successful  completion, the getline() and getdelim() functions shall return the number of bytes written into the buffer, including the delimiter character if one was encountered before EOF,
       but excluding the terminating NUL character. If the end-of-file indicator for the stream is set, or if no characters were read and the stream is at end-of-file, the end-of-file indicator for  the
       stream shall be set and the function shall return -1.  If an error occurs, the error indicator for the stream shall be set, and the function shall return -1 and set errno to indicate the error.

ERRORS
       For the conditions under which the getdelim() and getline() functions shall fail and may fail, refer to fgetc().

       In addition, these functions shall fail if:

       EINVAL lineptr or n is a null pointer.

       ENOMEM Insufficient memory is available.

       These functions may fail if:

       EOVERFLOW
              The number of bytes to be written into the buffer, including the delimiter character (if encountered), would exceed {SSIZE_MAX}.

       The following sections are informative.

EXAMPLES
           #include <stdio.h>
           #include <stdlib.h>

           int main(void)
           {
               FILE *fp;
               char *line = NULL;
               size_t len = 0;
               ssize_t read;
               fp = fopen("/etc/motd", "r");
               if (fp == NULL)
                   exit(1);
               while ((read = getline(&line, &len, fp)) != -1) {
                   printf("Retrieved line of length %zu :\n", read);
                   printf("%s", line);
               }
               if (ferror(fp)) {
                   /* handle error */
               }
               free(line);
               fclose(fp);
               return 0;
           }

APPLICATION USAGE
       Setting *lineptr to a null pointer and *n to zero are allowed and a recommended way to start parsing a file.

       The ferror() or feof() functions should be used to distinguish between an error condition and an end-of-file condition.

       Although a NUL terminator is always supplied after the line, note that strlen(*lineptr) will be smaller than the return value if the line contains embedded NUL characters.

RATIONALE
       These  functions  are widely used to solve the problem that the fgets() function has with long lines. The functions automatically enlarge the target buffers if needed. These are especially useful
       since they reduce code needed for applications.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.5, Standard I/O Streams, fgetc(), fgets(), free(), malloc(), realloc()

       The Base Definitions volume of POSIX.1‐2017, <stdio.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base  Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this ver‐
       sion and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be  obtained  online  at  http://www.open‐
       group.org/unix/online.html .

       Any  typographical  or  formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                       GETDELIM(3P)
