abort(3)                                                                                 Library Functions Manual                                                                                 abort(3)

NAME
       abort - cause abnormal process termination

LIBRARY
       Standard C library (libc, -lc)

SYNOPSIS
       #include <stdlib.h>

       [[noreturn]] void abort(void);

DESCRIPTION
       The  abort()  function  first  unblocks  the  SIGABRT signal, and then raises that signal for the calling process (as though raise(3) was called).  This results in the abnormal termination of the
       process unless the SIGABRT signal is caught and the signal handler does not return (see longjmp(3)).

       If the SIGABRT signal is ignored, or caught by a handler that returns, the abort() function will still terminate the process.  It does this by restoring the default disposition  for  SIGABRT  and
       then raising the signal for a second time.

RETURN VALUE
       The abort() function never returns.

ATTRIBUTES
       For an explanation of the terms used in this section, see attributes(7).

       ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬───────────────┬─────────┐
       │Interface                                                                                                                                                               │ Attribute     │ Value   │
       ├────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼───────────────┼─────────┤
       │abort()                                                                                                                                                                 │ Thread safety │ MT-Safe │
       └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴───────────────┴─────────┘

STANDARDS
       C11, POSIX.1-2008.

HISTORY
       SVr4, POSIX.1-2001, 4.3BSD, C89.

       Up  until  glibc 2.26, if the abort() function caused process termination, all open streams were closed and flushed (as with fclose(3)).  However, in some cases this could result in deadlocks and
       data corruption.  Therefore, starting with glibc 2.27, abort() terminates the process without flushing streams.  POSIX.1 permits either possible behavior, saying that abort() "may include an  at‐
       tempt to effect fclose() on all open streams".

SEE ALSO
       gdb(1), sigaction(2), assert(3), exit(3), longjmp(3), raise(3)

Linux man-pages 6.04                                                                            2023-03-30                                                                                        abort(3)
ABORT(3P)                                                                                POSIX Programmer's Manual                                                                               ABORT(3P)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or
       the interface may not be implemented on Linux.

NAME
       abort — generate an abnormal process abort

SYNOPSIS
       #include <stdlib.h>

       void abort(void);

DESCRIPTION
       The functionality described on this reference page is aligned with the ISO C standard. Any conflict between the requirements described here and the ISO C standard is unintentional. This volume of
       POSIX.1‐2017 defers to the ISO C standard.

       The abort() function shall cause abnormal process termination to occur, unless the signal SIGABRT is being caught and the signal handler does not return.

       The abnormal termination processing shall include the default actions defined for SIGABRT and may include an attempt to effect fclose() on all open streams.

       The SIGABRT signal shall be sent to the calling process as if by means of raise() with the argument SIGABRT.

       The  status  made available to wait(), waitid(), or waitpid() by abort() shall be that of a process terminated by the SIGABRT signal.  The abort() function shall override blocking or ignoring the
       SIGABRT signal.

RETURN VALUE
       The abort() function shall not return.

ERRORS
       No errors are defined.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       Catching the signal is intended to provide the application developer with a portable means to abort processing, free from possible interference from any implementation-supplied functions.

RATIONALE
       The ISO/IEC 9899:1999 standard requires the abort() function to be async-signal-safe. Since POSIX.1‐2008 defers to the ISO C standard, this required a change to the DESCRIPTION from  ``shall  in‐
       clude the effect of fclose()'' to ``may include an attempt to effect fclose().''

       The revised wording permits some backwards-compatibility and avoids a potential deadlock situation.

       The Open Group Base Resolution bwg2002‐003 is applied, removing the following XSI shaded paragraph from the DESCRIPTION:

       ``On XSI-conformant systems, in addition the abnormal termination processing shall include the effect of fclose() on message catalog descriptors.''

       There were several reasons to remove this paragraph:

        *  No special processing of open message catalogs needs to be performed prior to abnormal process termination.

        *  The  main  reason  to specifically mention that abort() includes the effect of fclose() on open streams is to flush output queued on the stream. Message catalogs in this context are read-only
           and, therefore, do not need to be flushed.

        *  The effect of fclose() on a message catalog descriptor is unspecified. Message catalog descriptors are allowed, but not required to be implemented using a file descriptor,  but  there  is  no
           mention in POSIX.1‐2008 of a message catalog descriptor using a standard I/O stream FILE object as would be expected by fclose().

FUTURE DIRECTIONS
       None.

SEE ALSO
       exit(), kill(), raise(), signal(), wait(), waitid()

       The Base Definitions volume of POSIX.1‐2017, <stdlib.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group
       Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  In the event of any discrepancy between this  ver‐
       sion  and  the  original  IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.open‐
       group.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report  such  errors,  see
       https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                2017                                                                                          ABORT(3P)
